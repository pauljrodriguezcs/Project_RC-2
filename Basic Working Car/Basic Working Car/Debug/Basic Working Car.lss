
Basic Working Car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  0000117c  00001210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000117c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000064c  00800150  00800150  00001260  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001260  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001290  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  000012d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000028dc  00000000  00000000  00001528  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f75  00000000  00000000  00003e04  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001992  00000000  00000000  00004d79  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000618  00000000  00000000  0000670c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f44  00000000  00000000  00006d24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000014b6  00000000  00000000  00007c68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000250  00000000  00000000  0000911e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	33 c5       	rjmp	.+2662   	; 0xa9c <__vector_13>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec e7       	ldi	r30, 0x7C	; 124
      a0:	f1 e1       	ldi	r31, 0x11	; 17
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a0 35       	cpi	r26, 0x50	; 80
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	27 e0       	ldi	r18, 0x07	; 7
      b4:	a0 e5       	ldi	r26, 0x50	; 80
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ac 39       	cpi	r26, 0x9C	; 156
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	7d d3       	rcall	.+1786   	; 0x7be <main>
      c4:	0c 94 bc 08 	jmp	0x1178	; 0x1178 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
      d0:	38 d6       	rcall	.+3184   	; 0xd42 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
      d2:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <__data_end>
      d6:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <__data_end+0x1>
      da:	c9 01       	movw	r24, r18
      dc:	8c 0f       	add	r24, r28
      de:	9d 1f       	adc	r25, r29
      e0:	8c 3d       	cpi	r24, 0xDC	; 220
      e2:	45 e0       	ldi	r20, 0x05	; 5
      e4:	94 07       	cpc	r25, r20
      e6:	58 f4       	brcc	.+22     	; 0xfe <pvPortMalloc+0x34>
      e8:	28 17       	cp	r18, r24
      ea:	39 07       	cpc	r19, r25
      ec:	58 f4       	brcc	.+22     	; 0x104 <pvPortMalloc+0x3a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
      ee:	e9 01       	movw	r28, r18
      f0:	ce 5a       	subi	r28, 0xAE	; 174
      f2:	de 4f       	sbci	r29, 0xFE	; 254
			xNextFreeByte += xWantedSize;			
      f4:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <__data_end+0x1>
      f8:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__data_end>
      fc:	05 c0       	rjmp	.+10     	; 0x108 <pvPortMalloc+0x3e>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
      fe:	c0 e0       	ldi	r28, 0x00	; 0
     100:	d0 e0       	ldi	r29, 0x00	; 0
     102:	02 c0       	rjmp	.+4      	; 0x108 <pvPortMalloc+0x3e>
     104:	c0 e0       	ldi	r28, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
     106:	d0 e0       	ldi	r29, 0x00	; 0
     108:	e3 d6       	rcall	.+3526   	; 0xed0 <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
     10a:	ce 01       	movw	r24, r28
     10c:	df 91       	pop	r29
     10e:	cf 91       	pop	r28
     110:	08 95       	ret

00000112 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     112:	08 95       	ret

00000114 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
     114:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
     116:	03 96       	adiw	r24, 0x03	; 3
     118:	92 83       	std	Z+2, r25	; 0x02
     11a:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     11c:	2f ef       	ldi	r18, 0xFF	; 255
     11e:	3f ef       	ldi	r19, 0xFF	; 255
     120:	34 83       	std	Z+4, r19	; 0x04
     122:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
     124:	96 83       	std	Z+6, r25	; 0x06
     126:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
     128:	90 87       	std	Z+8, r25	; 0x08
     12a:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
     12c:	10 82       	st	Z, r1
     12e:	08 95       	ret

00000130 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     130:	fc 01       	movw	r30, r24
     132:	11 86       	std	Z+9, r1	; 0x09
     134:	10 86       	std	Z+8, r1	; 0x08
     136:	08 95       	ret

00000138 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
     138:	cf 93       	push	r28
     13a:	df 93       	push	r29
     13c:	fc 01       	movw	r30, r24
     13e:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     140:	21 81       	ldd	r18, Z+1	; 0x01
     142:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
     144:	e9 01       	movw	r28, r18
     146:	8a 81       	ldd	r24, Y+2	; 0x02
     148:	9b 81       	ldd	r25, Y+3	; 0x03
     14a:	13 96       	adiw	r26, 0x03	; 3
     14c:	9c 93       	st	X, r25
     14e:	8e 93       	st	-X, r24
     150:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
     152:	81 81       	ldd	r24, Z+1	; 0x01
     154:	92 81       	ldd	r25, Z+2	; 0x02
     156:	15 96       	adiw	r26, 0x05	; 5
     158:	9c 93       	st	X, r25
     15a:	8e 93       	st	-X, r24
     15c:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     15e:	8a 81       	ldd	r24, Y+2	; 0x02
     160:	9b 81       	ldd	r25, Y+3	; 0x03
     162:	ec 01       	movw	r28, r24
     164:	7d 83       	std	Y+5, r23	; 0x05
     166:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     168:	e9 01       	movw	r28, r18
     16a:	7b 83       	std	Y+3, r23	; 0x03
     16c:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     16e:	72 83       	std	Z+2, r23	; 0x02
     170:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     172:	19 96       	adiw	r26, 0x09	; 9
     174:	fc 93       	st	X, r31
     176:	ee 93       	st	-X, r30
     178:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
     17a:	80 81       	ld	r24, Z
     17c:	8f 5f       	subi	r24, 0xFF	; 255
     17e:	80 83       	st	Z, r24
}
     180:	df 91       	pop	r29
     182:	cf 91       	pop	r28
     184:	08 95       	ret

00000186 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
     186:	cf 93       	push	r28
     188:	df 93       	push	r29
     18a:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
     18c:	48 81       	ld	r20, Y
     18e:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     190:	4f 3f       	cpi	r20, 0xFF	; 255
     192:	2f ef       	ldi	r18, 0xFF	; 255
     194:	52 07       	cpc	r21, r18
     196:	31 f4       	brne	.+12     	; 0x1a4 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     198:	dc 01       	movw	r26, r24
     19a:	17 96       	adiw	r26, 0x07	; 7
     19c:	ed 91       	ld	r30, X+
     19e:	fc 91       	ld	r31, X
     1a0:	18 97       	sbiw	r26, 0x08	; 8
     1a2:	17 c0       	rjmp	.+46     	; 0x1d2 <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     1a4:	fc 01       	movw	r30, r24
     1a6:	33 96       	adiw	r30, 0x03	; 3
     1a8:	dc 01       	movw	r26, r24
     1aa:	15 96       	adiw	r26, 0x05	; 5
     1ac:	2d 91       	ld	r18, X+
     1ae:	3c 91       	ld	r19, X
     1b0:	16 97       	sbiw	r26, 0x06	; 6
     1b2:	d9 01       	movw	r26, r18
     1b4:	2d 91       	ld	r18, X+
     1b6:	3c 91       	ld	r19, X
     1b8:	42 17       	cp	r20, r18
     1ba:	53 07       	cpc	r21, r19
     1bc:	50 f0       	brcs	.+20     	; 0x1d2 <vListInsert+0x4c>
     1be:	02 80       	ldd	r0, Z+2	; 0x02
     1c0:	f3 81       	ldd	r31, Z+3	; 0x03
     1c2:	e0 2d       	mov	r30, r0
     1c4:	a2 81       	ldd	r26, Z+2	; 0x02
     1c6:	b3 81       	ldd	r27, Z+3	; 0x03
     1c8:	2d 91       	ld	r18, X+
     1ca:	3c 91       	ld	r19, X
     1cc:	42 17       	cp	r20, r18
     1ce:	53 07       	cpc	r21, r19
     1d0:	b0 f7       	brcc	.-20     	; 0x1be <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     1d2:	a2 81       	ldd	r26, Z+2	; 0x02
     1d4:	b3 81       	ldd	r27, Z+3	; 0x03
     1d6:	bb 83       	std	Y+3, r27	; 0x03
     1d8:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     1da:	15 96       	adiw	r26, 0x05	; 5
     1dc:	dc 93       	st	X, r29
     1de:	ce 93       	st	-X, r28
     1e0:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
     1e2:	fd 83       	std	Y+5, r31	; 0x05
     1e4:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
     1e6:	d3 83       	std	Z+3, r29	; 0x03
     1e8:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     1ea:	99 87       	std	Y+9, r25	; 0x09
     1ec:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     1ee:	fc 01       	movw	r30, r24
     1f0:	20 81       	ld	r18, Z
     1f2:	2f 5f       	subi	r18, 0xFF	; 255
     1f4:	20 83       	st	Z, r18
}
     1f6:	df 91       	pop	r29
     1f8:	cf 91       	pop	r28
     1fa:	08 95       	ret

000001fc <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
     1fc:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     1fe:	a2 81       	ldd	r26, Z+2	; 0x02
     200:	b3 81       	ldd	r27, Z+3	; 0x03
     202:	84 81       	ldd	r24, Z+4	; 0x04
     204:	95 81       	ldd	r25, Z+5	; 0x05
     206:	15 96       	adiw	r26, 0x05	; 5
     208:	9c 93       	st	X, r25
     20a:	8e 93       	st	-X, r24
     20c:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     20e:	a4 81       	ldd	r26, Z+4	; 0x04
     210:	b5 81       	ldd	r27, Z+5	; 0x05
     212:	82 81       	ldd	r24, Z+2	; 0x02
     214:	93 81       	ldd	r25, Z+3	; 0x03
     216:	13 96       	adiw	r26, 0x03	; 3
     218:	9c 93       	st	X, r25
     21a:	8e 93       	st	-X, r24
     21c:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     21e:	a0 85       	ldd	r26, Z+8	; 0x08
     220:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     222:	11 96       	adiw	r26, 0x01	; 1
     224:	8d 91       	ld	r24, X+
     226:	9c 91       	ld	r25, X
     228:	12 97       	sbiw	r26, 0x02	; 2
     22a:	e8 17       	cp	r30, r24
     22c:	f9 07       	cpc	r31, r25
     22e:	31 f4       	brne	.+12     	; 0x23c <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     230:	84 81       	ldd	r24, Z+4	; 0x04
     232:	95 81       	ldd	r25, Z+5	; 0x05
     234:	12 96       	adiw	r26, 0x02	; 2
     236:	9c 93       	st	X, r25
     238:	8e 93       	st	-X, r24
     23a:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
     23c:	11 86       	std	Z+9, r1	; 0x09
     23e:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     240:	8c 91       	ld	r24, X
     242:	81 50       	subi	r24, 0x01	; 1
     244:	8c 93       	st	X, r24
     246:	08 95       	ret

00000248 <adc_init>:

//-------------------------------------------------- Start ServoMotor SM --------------------------------------------------//


void SERVO_Init(){
	servo_state = servo_init;
     248:	80 e4       	ldi	r24, 0x40	; 64
     24a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     24e:	87 e8       	ldi	r24, 0x87	; 135
     250:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     254:	08 95       	ret

00000256 <adc_read>:
     256:	ec e7       	ldi	r30, 0x7C	; 124
     258:	f0 e0       	ldi	r31, 0x00	; 0
     25a:	90 81       	ld	r25, Z
     25c:	98 7f       	andi	r25, 0xF8	; 248
     25e:	87 70       	andi	r24, 0x07	; 7
     260:	89 2b       	or	r24, r25
     262:	80 83       	st	Z, r24
     264:	ea e7       	ldi	r30, 0x7A	; 122
     266:	f0 e0       	ldi	r31, 0x00	; 0
     268:	80 81       	ld	r24, Z
     26a:	80 64       	ori	r24, 0x40	; 64
     26c:	80 83       	st	Z, r24
     26e:	80 81       	ld	r24, Z
     270:	86 fd       	sbrc	r24, 6
     272:	fd cf       	rjmp	.-6      	; 0x26e <adc_read+0x18>
     274:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     278:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     27c:	08 95       	ret

0000027e <JOY_Tick>:
     27e:	80 91 99 07 	lds	r24, 0x0799	; 0x800799 <joy_state>
     282:	81 11       	cpse	r24, r1
     284:	56 c0       	rjmp	.+172    	; 0x332 <JOY_Tick+0xb4>
     286:	e7 df       	rcall	.-50     	; 0x256 <adc_read>
     288:	90 93 37 07 	sts	0x0737, r25	; 0x800737 <joystick_value+0x1>
     28c:	80 93 36 07 	sts	0x0736, r24	; 0x800736 <joystick_value>
     290:	9c 01       	movw	r18, r24
     292:	25 54       	subi	r18, 0x45	; 69
     294:	32 40       	sbci	r19, 0x02	; 2
     296:	2b 38       	cpi	r18, 0x8B	; 139
     298:	31 05       	cpc	r19, r1
     29a:	30 f4       	brcc	.+12     	; 0x2a8 <JOY_Tick+0x2a>
     29c:	81 e0       	ldi	r24, 0x01	; 1
     29e:	80 93 3a 07 	sts	0x073A, r24	; 0x80073a <going_forward>
     2a2:	80 93 3c 07 	sts	0x073C, r24	; 0x80073c <throttle>
     2a6:	45 c0       	rjmp	.+138    	; 0x332 <JOY_Tick+0xb4>
     2a8:	9c 01       	movw	r18, r24
     2aa:	21 5d       	subi	r18, 0xD1	; 209
     2ac:	32 40       	sbci	r19, 0x02	; 2
     2ae:	2b 38       	cpi	r18, 0x8B	; 139
     2b0:	31 05       	cpc	r19, r1
     2b2:	38 f4       	brcc	.+14     	; 0x2c2 <JOY_Tick+0x44>
     2b4:	81 e0       	ldi	r24, 0x01	; 1
     2b6:	80 93 3a 07 	sts	0x073A, r24	; 0x80073a <going_forward>
     2ba:	82 e0       	ldi	r24, 0x02	; 2
     2bc:	80 93 3c 07 	sts	0x073C, r24	; 0x80073c <throttle>
     2c0:	38 c0       	rjmp	.+112    	; 0x332 <JOY_Tick+0xb4>
     2c2:	8d 35       	cpi	r24, 0x5D	; 93
     2c4:	23 e0       	ldi	r18, 0x03	; 3
     2c6:	92 07       	cpc	r25, r18
     2c8:	38 f0       	brcs	.+14     	; 0x2d8 <JOY_Tick+0x5a>
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	80 93 3a 07 	sts	0x073A, r24	; 0x80073a <going_forward>
     2d0:	83 e0       	ldi	r24, 0x03	; 3
     2d2:	80 93 3c 07 	sts	0x073C, r24	; 0x80073c <throttle>
     2d6:	2d c0       	rjmp	.+90     	; 0x332 <JOY_Tick+0xb4>
     2d8:	9c 01       	movw	r18, r24
     2da:	2f 54       	subi	r18, 0x4F	; 79
     2dc:	31 40       	sbci	r19, 0x01	; 1
     2de:	25 3a       	cpi	r18, 0xA5	; 165
     2e0:	31 05       	cpc	r19, r1
     2e2:	30 f4       	brcc	.+12     	; 0x2f0 <JOY_Tick+0x72>
     2e4:	81 e0       	ldi	r24, 0x01	; 1
     2e6:	80 93 39 07 	sts	0x0739, r24	; 0x800739 <going_reverse>
     2ea:	80 93 3b 07 	sts	0x073B, r24	; 0x80073b <reverse>
     2ee:	21 c0       	rjmp	.+66     	; 0x332 <JOY_Tick+0xb4>
     2f0:	9c 01       	movw	r18, r24
     2f2:	28 5a       	subi	r18, 0xA8	; 168
     2f4:	31 09       	sbc	r19, r1
     2f6:	26 3a       	cpi	r18, 0xA6	; 166
     2f8:	31 05       	cpc	r19, r1
     2fa:	38 f4       	brcc	.+14     	; 0x30a <JOY_Tick+0x8c>
     2fc:	81 e0       	ldi	r24, 0x01	; 1
     2fe:	80 93 39 07 	sts	0x0739, r24	; 0x800739 <going_reverse>
     302:	82 e0       	ldi	r24, 0x02	; 2
     304:	80 93 3b 07 	sts	0x073B, r24	; 0x80073b <reverse>
     308:	14 c0       	rjmp	.+40     	; 0x332 <JOY_Tick+0xb4>
     30a:	87 3a       	cpi	r24, 0xA7	; 167
     30c:	91 05       	cpc	r25, r1
     30e:	38 f4       	brcc	.+14     	; 0x31e <JOY_Tick+0xa0>
     310:	81 e0       	ldi	r24, 0x01	; 1
     312:	80 93 39 07 	sts	0x0739, r24	; 0x800739 <going_reverse>
     316:	83 e0       	ldi	r24, 0x03	; 3
     318:	80 93 3b 07 	sts	0x073B, r24	; 0x80073b <reverse>
     31c:	0a c0       	rjmp	.+20     	; 0x332 <JOY_Tick+0xb4>
     31e:	10 92 3a 07 	sts	0x073A, r1	; 0x80073a <going_forward>
     322:	10 92 39 07 	sts	0x0739, r1	; 0x800739 <going_reverse>
     326:	10 92 3c 07 	sts	0x073C, r1	; 0x80073c <throttle>
     32a:	10 92 3b 07 	sts	0x073B, r1	; 0x80073b <reverse>
     32e:	18 b8       	out	0x08, r1	; 8
     330:	1b b8       	out	0x0b, r1	; 11
     332:	80 91 99 07 	lds	r24, 0x0799	; 0x800799 <joy_state>
     336:	81 11       	cpse	r24, r1
     338:	10 92 99 07 	sts	0x0799, r1	; 0x800799 <joy_state>
     33c:	08 95       	ret

0000033e <JOYSecTask>:
     33e:	10 92 99 07 	sts	0x0799, r1	; 0x800799 <joy_state>
     342:	9d df       	rcall	.-198    	; 0x27e <JOY_Tick>
     344:	82 e0       	ldi	r24, 0x02	; 2
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	44 d6       	rcall	.+3208   	; 0xfd2 <vTaskDelay>
     34a:	fb cf       	rjmp	.-10     	; 0x342 <JOYSecTask+0x4>

0000034c <JOYSecPulse>:
     34c:	af 92       	push	r10
     34e:	bf 92       	push	r11
     350:	cf 92       	push	r12
     352:	df 92       	push	r13
     354:	ef 92       	push	r14
     356:	ff 92       	push	r15
     358:	0f 93       	push	r16
     35a:	a1 2c       	mov	r10, r1
     35c:	b1 2c       	mov	r11, r1
     35e:	c1 2c       	mov	r12, r1
     360:	d1 2c       	mov	r13, r1
     362:	e1 2c       	mov	r14, r1
     364:	f1 2c       	mov	r15, r1
     366:	08 2f       	mov	r16, r24
     368:	20 e0       	ldi	r18, 0x00	; 0
     36a:	30 e0       	ldi	r19, 0x00	; 0
     36c:	45 e5       	ldi	r20, 0x55	; 85
     36e:	50 e0       	ldi	r21, 0x00	; 0
     370:	64 e0       	ldi	r22, 0x04	; 4
     372:	71 e0       	ldi	r23, 0x01	; 1
     374:	8f e9       	ldi	r24, 0x9F	; 159
     376:	91 e0       	ldi	r25, 0x01	; 1
     378:	c8 d3       	rcall	.+1936   	; 0xb0a <xTaskGenericCreate>
     37a:	0f 91       	pop	r16
     37c:	ff 90       	pop	r15
     37e:	ef 90       	pop	r14
     380:	df 90       	pop	r13
     382:	cf 90       	pop	r12
     384:	bf 90       	pop	r11
     386:	af 90       	pop	r10
     388:	08 95       	ret

0000038a <STEERING_Tick>:
     38a:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <steering_state>
     38e:	81 11       	cpse	r24, r1
     390:	65 c0       	rjmp	.+202    	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     392:	81 e0       	ldi	r24, 0x01	; 1
     394:	60 df       	rcall	.-320    	; 0x256 <adc_read>
     396:	90 93 2f 07 	sts	0x072F, r25	; 0x80072f <steering+0x1>
     39a:	80 93 2e 07 	sts	0x072E, r24	; 0x80072e <steering>
     39e:	85 34       	cpi	r24, 0x45	; 69
     3a0:	22 e0       	ldi	r18, 0x02	; 2
     3a2:	92 07       	cpc	r25, r18
     3a4:	c0 f0       	brcs	.+48     	; 0x3d6 <STEERING_Tick+0x4c>
     3a6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     3aa:	88 23       	and	r24, r24
     3ac:	09 f4       	brne	.+2      	; 0x3b0 <STEERING_Tick+0x26>
     3ae:	56 c0       	rjmp	.+172    	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     3b0:	10 92 35 07 	sts	0x0735, r1	; 0x800735 <right>
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	90 93 34 07 	sts	0x0734, r25	; 0x800734 <left>
     3ba:	90 93 33 07 	sts	0x0733, r25	; 0x800733 <max_servo>
     3be:	81 50       	subi	r24, 0x01	; 1
     3c0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     3c4:	81 30       	cpi	r24, 0x01	; 1
     3c6:	21 f0       	breq	.+8      	; 0x3d0 <STEERING_Tick+0x46>
     3c8:	81 e0       	ldi	r24, 0x01	; 1
     3ca:	80 93 30 07 	sts	0x0730, r24	; 0x800730 <needs_centering>
     3ce:	46 c0       	rjmp	.+140    	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     3d0:	10 92 30 07 	sts	0x0730, r1	; 0x800730 <needs_centering>
     3d4:	43 c0       	rjmp	.+134    	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     3d6:	84 3f       	cpi	r24, 0xF4	; 244
     3d8:	91 40       	sbci	r25, 0x01	; 1
     3da:	c0 f4       	brcc	.+48     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     3dc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     3e0:	82 30       	cpi	r24, 0x02	; 2
     3e2:	e0 f5       	brcc	.+120    	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     3e4:	91 e0       	ldi	r25, 0x01	; 1
     3e6:	90 93 35 07 	sts	0x0735, r25	; 0x800735 <right>
     3ea:	10 92 34 07 	sts	0x0734, r1	; 0x800734 <left>
     3ee:	92 e0       	ldi	r25, 0x02	; 2
     3f0:	90 93 33 07 	sts	0x0733, r25	; 0x800733 <max_servo>
     3f4:	8f 5f       	subi	r24, 0xFF	; 255
     3f6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     3fa:	81 30       	cpi	r24, 0x01	; 1
     3fc:	21 f0       	breq	.+8      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     3fe:	81 e0       	ldi	r24, 0x01	; 1
     400:	80 93 30 07 	sts	0x0730, r24	; 0x800730 <needs_centering>
     404:	2b c0       	rjmp	.+86     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     406:	10 92 30 07 	sts	0x0730, r1	; 0x800730 <needs_centering>
     40a:	28 c0       	rjmp	.+80     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     40c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     410:	81 11       	cpse	r24, r1
     412:	0d c0       	rjmp	.+26     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	80 93 35 07 	sts	0x0735, r24	; 0x800735 <right>
     41a:	10 92 34 07 	sts	0x0734, r1	; 0x800734 <left>
     41e:	92 e0       	ldi	r25, 0x02	; 2
     420:	90 93 33 07 	sts	0x0733, r25	; 0x800733 <max_servo>
     424:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     428:	80 93 30 07 	sts	0x0730, r24	; 0x800730 <needs_centering>
     42c:	17 c0       	rjmp	.+46     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     42e:	82 30       	cpi	r24, 0x02	; 2
     430:	68 f0       	brcs	.+26     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     432:	10 92 35 07 	sts	0x0735, r1	; 0x800735 <right>
     436:	91 e0       	ldi	r25, 0x01	; 1
     438:	90 93 34 07 	sts	0x0734, r25	; 0x800734 <left>
     43c:	90 93 33 07 	sts	0x0733, r25	; 0x800733 <max_servo>
     440:	81 50       	subi	r24, 0x01	; 1
     442:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     446:	90 93 30 07 	sts	0x0730, r25	; 0x800730 <needs_centering>
     44a:	08 c0       	rjmp	.+16     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     44c:	10 92 35 07 	sts	0x0735, r1	; 0x800735 <right>
     450:	10 92 34 07 	sts	0x0734, r1	; 0x800734 <left>
     454:	10 92 33 07 	sts	0x0733, r1	; 0x800733 <max_servo>
     458:	10 92 30 07 	sts	0x0730, r1	; 0x800730 <needs_centering>
     45c:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <steering_state>
     460:	81 11       	cpse	r24, r1
     462:	10 92 9a 07 	sts	0x079A, r1	; 0x80079a <steering_state>
     466:	08 95       	ret

00000468 <STEERINGSecTask>:
     468:	10 92 9a 07 	sts	0x079A, r1	; 0x80079a <steering_state>
     46c:	8e df       	rcall	.-228    	; 0x38a <STEERING_Tick>
     46e:	8f e0       	ldi	r24, 0x0F	; 15
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	af d5       	rcall	.+2910   	; 0xfd2 <vTaskDelay>
     474:	fb cf       	rjmp	.-10     	; 0x46c <STEERINGSecTask+0x4>

00000476 <STEERINGSecPulse>:
     476:	af 92       	push	r10
     478:	bf 92       	push	r11
     47a:	cf 92       	push	r12
     47c:	df 92       	push	r13
     47e:	ef 92       	push	r14
     480:	ff 92       	push	r15
     482:	0f 93       	push	r16
     484:	a1 2c       	mov	r10, r1
     486:	b1 2c       	mov	r11, r1
     488:	c1 2c       	mov	r12, r1
     48a:	d1 2c       	mov	r13, r1
     48c:	e1 2c       	mov	r14, r1
     48e:	f1 2c       	mov	r15, r1
     490:	08 2f       	mov	r16, r24
     492:	20 e0       	ldi	r18, 0x00	; 0
     494:	30 e0       	ldi	r19, 0x00	; 0
     496:	45 e5       	ldi	r20, 0x55	; 85
     498:	50 e0       	ldi	r21, 0x00	; 0
     49a:	6f e0       	ldi	r22, 0x0F	; 15
     49c:	71 e0       	ldi	r23, 0x01	; 1
     49e:	84 e3       	ldi	r24, 0x34	; 52
     4a0:	92 e0       	ldi	r25, 0x02	; 2
     4a2:	33 d3       	rcall	.+1638   	; 0xb0a <xTaskGenericCreate>
     4a4:	0f 91       	pop	r16
     4a6:	ff 90       	pop	r15
     4a8:	ef 90       	pop	r14
     4aa:	df 90       	pop	r13
     4ac:	cf 90       	pop	r12
     4ae:	bf 90       	pop	r11
     4b0:	af 90       	pop	r10
     4b2:	08 95       	ret

000004b4 <FORWARD_Tick>:
     4b4:	80 91 97 07 	lds	r24, 0x0797	; 0x800797 <forward_state>
     4b8:	81 30       	cpi	r24, 0x01	; 1
     4ba:	b9 f0       	breq	.+46     	; 0x4ea <FORWARD_Tick+0x36>
     4bc:	18 f0       	brcs	.+6      	; 0x4c4 <FORWARD_Tick+0x10>
     4be:	82 30       	cpi	r24, 0x02	; 2
     4c0:	79 f1       	breq	.+94     	; 0x520 <FORWARD_Tick+0x6c>
     4c2:	08 95       	ret
     4c4:	80 91 3a 07 	lds	r24, 0x073A	; 0x80073a <going_forward>
     4c8:	88 23       	and	r24, r24
     4ca:	09 f4       	brne	.+2      	; 0x4ce <FORWARD_Tick+0x1a>
     4cc:	43 c0       	rjmp	.+134    	; 0x554 <FORWARD_Tick+0xa0>
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	80 93 97 07 	sts	0x0797, r24	; 0x800797 <forward_state>
     4d4:	20 91 3c 07 	lds	r18, 0x073C	; 0x80073c <throttle>
     4d8:	93 e0       	ldi	r25, 0x03	; 3
     4da:	92 1b       	sub	r25, r18
     4dc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <low_counter>
     4e0:	10 92 38 07 	sts	0x0738, r1	; 0x800738 <pwm_counter>
     4e4:	88 b9       	out	0x08, r24	; 8
     4e6:	8b b9       	out	0x0b, r24	; 11
     4e8:	08 95       	ret
     4ea:	80 91 3a 07 	lds	r24, 0x073A	; 0x80073a <going_forward>
     4ee:	88 23       	and	r24, r24
     4f0:	91 f0       	breq	.+36     	; 0x516 <FORWARD_Tick+0x62>
     4f2:	80 91 38 07 	lds	r24, 0x0738	; 0x800738 <pwm_counter>
     4f6:	90 91 3c 07 	lds	r25, 0x073C	; 0x80073c <throttle>
     4fa:	89 17       	cp	r24, r25
     4fc:	20 f4       	brcc	.+8      	; 0x506 <FORWARD_Tick+0x52>
     4fe:	8f 5f       	subi	r24, 0xFF	; 255
     500:	80 93 38 07 	sts	0x0738, r24	; 0x800738 <pwm_counter>
     504:	08 95       	ret
     506:	82 e0       	ldi	r24, 0x02	; 2
     508:	80 93 97 07 	sts	0x0797, r24	; 0x800797 <forward_state>
     50c:	10 92 38 07 	sts	0x0738, r1	; 0x800738 <pwm_counter>
     510:	18 b8       	out	0x08, r1	; 8
     512:	1b b8       	out	0x0b, r1	; 11
     514:	08 95       	ret
     516:	10 92 97 07 	sts	0x0797, r1	; 0x800797 <forward_state>
     51a:	18 b8       	out	0x08, r1	; 8
     51c:	1b b8       	out	0x0b, r1	; 11
     51e:	08 95       	ret
     520:	80 91 3a 07 	lds	r24, 0x073A	; 0x80073a <going_forward>
     524:	88 23       	and	r24, r24
     526:	91 f0       	breq	.+36     	; 0x54c <FORWARD_Tick+0x98>
     528:	80 91 38 07 	lds	r24, 0x0738	; 0x800738 <pwm_counter>
     52c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <low_counter>
     530:	89 17       	cp	r24, r25
     532:	20 f4       	brcc	.+8      	; 0x53c <FORWARD_Tick+0x88>
     534:	8f 5f       	subi	r24, 0xFF	; 255
     536:	80 93 38 07 	sts	0x0738, r24	; 0x800738 <pwm_counter>
     53a:	08 95       	ret
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	80 93 97 07 	sts	0x0797, r24	; 0x800797 <forward_state>
     542:	10 92 38 07 	sts	0x0738, r1	; 0x800738 <pwm_counter>
     546:	88 b9       	out	0x08, r24	; 8
     548:	8b b9       	out	0x0b, r24	; 11
     54a:	08 95       	ret
     54c:	10 92 97 07 	sts	0x0797, r1	; 0x800797 <forward_state>
     550:	18 b8       	out	0x08, r1	; 8
     552:	1b b8       	out	0x0b, r1	; 11
     554:	08 95       	ret

00000556 <ForwardSecTask>:
     556:	10 92 97 07 	sts	0x0797, r1	; 0x800797 <forward_state>
     55a:	ac df       	rcall	.-168    	; 0x4b4 <FORWARD_Tick>
     55c:	83 e0       	ldi	r24, 0x03	; 3
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	38 d5       	rcall	.+2672   	; 0xfd2 <vTaskDelay>
     562:	fb cf       	rjmp	.-10     	; 0x55a <ForwardSecTask+0x4>

00000564 <ForwardSecPulse>:
     564:	af 92       	push	r10
     566:	bf 92       	push	r11
     568:	cf 92       	push	r12
     56a:	df 92       	push	r13
     56c:	ef 92       	push	r14
     56e:	ff 92       	push	r15
     570:	0f 93       	push	r16
     572:	a1 2c       	mov	r10, r1
     574:	b1 2c       	mov	r11, r1
     576:	c1 2c       	mov	r12, r1
     578:	d1 2c       	mov	r13, r1
     57a:	e1 2c       	mov	r14, r1
     57c:	f1 2c       	mov	r15, r1
     57e:	08 2f       	mov	r16, r24
     580:	20 e0       	ldi	r18, 0x00	; 0
     582:	30 e0       	ldi	r19, 0x00	; 0
     584:	45 e5       	ldi	r20, 0x55	; 85
     586:	50 e0       	ldi	r21, 0x00	; 0
     588:	6f e1       	ldi	r22, 0x1F	; 31
     58a:	71 e0       	ldi	r23, 0x01	; 1
     58c:	8b ea       	ldi	r24, 0xAB	; 171
     58e:	92 e0       	ldi	r25, 0x02	; 2
     590:	bc d2       	rcall	.+1400   	; 0xb0a <xTaskGenericCreate>
     592:	0f 91       	pop	r16
     594:	ff 90       	pop	r15
     596:	ef 90       	pop	r14
     598:	df 90       	pop	r13
     59a:	cf 90       	pop	r12
     59c:	bf 90       	pop	r11
     59e:	af 90       	pop	r10
     5a0:	08 95       	ret

000005a2 <REVERSE_Tick>:
     5a2:	80 91 9b 07 	lds	r24, 0x079B	; 0x80079b <reverse_state>
     5a6:	81 30       	cpi	r24, 0x01	; 1
     5a8:	c1 f0       	breq	.+48     	; 0x5da <REVERSE_Tick+0x38>
     5aa:	18 f0       	brcs	.+6      	; 0x5b2 <REVERSE_Tick+0x10>
     5ac:	82 30       	cpi	r24, 0x02	; 2
     5ae:	81 f1       	breq	.+96     	; 0x610 <REVERSE_Tick+0x6e>
     5b0:	08 95       	ret
     5b2:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <going_reverse>
     5b6:	88 23       	and	r24, r24
     5b8:	09 f4       	brne	.+2      	; 0x5bc <REVERSE_Tick+0x1a>
     5ba:	45 c0       	rjmp	.+138    	; 0x646 <REVERSE_Tick+0xa4>
     5bc:	81 e0       	ldi	r24, 0x01	; 1
     5be:	80 93 9b 07 	sts	0x079B, r24	; 0x80079b <reverse_state>
     5c2:	90 91 3b 07 	lds	r25, 0x073B	; 0x80073b <reverse>
     5c6:	83 e0       	ldi	r24, 0x03	; 3
     5c8:	89 1b       	sub	r24, r25
     5ca:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <low_counter>
     5ce:	10 92 38 07 	sts	0x0738, r1	; 0x800738 <pwm_counter>
     5d2:	82 e0       	ldi	r24, 0x02	; 2
     5d4:	88 b9       	out	0x08, r24	; 8
     5d6:	8b b9       	out	0x0b, r24	; 11
     5d8:	08 95       	ret
     5da:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <going_reverse>
     5de:	88 23       	and	r24, r24
     5e0:	91 f0       	breq	.+36     	; 0x606 <REVERSE_Tick+0x64>
     5e2:	80 91 38 07 	lds	r24, 0x0738	; 0x800738 <pwm_counter>
     5e6:	90 91 3b 07 	lds	r25, 0x073B	; 0x80073b <reverse>
     5ea:	89 17       	cp	r24, r25
     5ec:	20 f4       	brcc	.+8      	; 0x5f6 <REVERSE_Tick+0x54>
     5ee:	8f 5f       	subi	r24, 0xFF	; 255
     5f0:	80 93 38 07 	sts	0x0738, r24	; 0x800738 <pwm_counter>
     5f4:	08 95       	ret
     5f6:	82 e0       	ldi	r24, 0x02	; 2
     5f8:	80 93 9b 07 	sts	0x079B, r24	; 0x80079b <reverse_state>
     5fc:	10 92 38 07 	sts	0x0738, r1	; 0x800738 <pwm_counter>
     600:	18 b8       	out	0x08, r1	; 8
     602:	1b b8       	out	0x0b, r1	; 11
     604:	08 95       	ret
     606:	10 92 9b 07 	sts	0x079B, r1	; 0x80079b <reverse_state>
     60a:	18 b8       	out	0x08, r1	; 8
     60c:	1b b8       	out	0x0b, r1	; 11
     60e:	08 95       	ret
     610:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <going_reverse>
     614:	88 23       	and	r24, r24
     616:	99 f0       	breq	.+38     	; 0x63e <REVERSE_Tick+0x9c>
     618:	80 91 38 07 	lds	r24, 0x0738	; 0x800738 <pwm_counter>
     61c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <low_counter>
     620:	89 17       	cp	r24, r25
     622:	20 f4       	brcc	.+8      	; 0x62c <REVERSE_Tick+0x8a>
     624:	8f 5f       	subi	r24, 0xFF	; 255
     626:	80 93 38 07 	sts	0x0738, r24	; 0x800738 <pwm_counter>
     62a:	08 95       	ret
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	80 93 9b 07 	sts	0x079B, r24	; 0x80079b <reverse_state>
     632:	10 92 38 07 	sts	0x0738, r1	; 0x800738 <pwm_counter>
     636:	82 e0       	ldi	r24, 0x02	; 2
     638:	88 b9       	out	0x08, r24	; 8
     63a:	8b b9       	out	0x0b, r24	; 11
     63c:	08 95       	ret
     63e:	10 92 9b 07 	sts	0x079B, r1	; 0x80079b <reverse_state>
     642:	18 b8       	out	0x08, r1	; 8
     644:	1b b8       	out	0x0b, r1	; 11
     646:	08 95       	ret

00000648 <ReverseSecTask>:
     648:	10 92 9b 07 	sts	0x079B, r1	; 0x80079b <reverse_state>
     64c:	aa df       	rcall	.-172    	; 0x5a2 <REVERSE_Tick>
     64e:	83 e0       	ldi	r24, 0x03	; 3
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	bf d4       	rcall	.+2430   	; 0xfd2 <vTaskDelay>
     654:	fb cf       	rjmp	.-10     	; 0x64c <ReverseSecTask+0x4>

00000656 <ReverseSecPulse>:
     656:	af 92       	push	r10
     658:	bf 92       	push	r11
     65a:	cf 92       	push	r12
     65c:	df 92       	push	r13
     65e:	ef 92       	push	r14
     660:	ff 92       	push	r15
     662:	0f 93       	push	r16
     664:	a1 2c       	mov	r10, r1
     666:	b1 2c       	mov	r11, r1
     668:	c1 2c       	mov	r12, r1
     66a:	d1 2c       	mov	r13, r1
     66c:	e1 2c       	mov	r14, r1
     66e:	f1 2c       	mov	r15, r1
     670:	08 2f       	mov	r16, r24
     672:	20 e0       	ldi	r18, 0x00	; 0
     674:	30 e0       	ldi	r19, 0x00	; 0
     676:	45 e5       	ldi	r20, 0x55	; 85
     678:	50 e0       	ldi	r21, 0x00	; 0
     67a:	6e e2       	ldi	r22, 0x2E	; 46
     67c:	71 e0       	ldi	r23, 0x01	; 1
     67e:	84 e2       	ldi	r24, 0x24	; 36
     680:	93 e0       	ldi	r25, 0x03	; 3
     682:	43 d2       	rcall	.+1158   	; 0xb0a <xTaskGenericCreate>
     684:	0f 91       	pop	r16
     686:	ff 90       	pop	r15
     688:	ef 90       	pop	r14
     68a:	df 90       	pop	r13
     68c:	cf 90       	pop	r12
     68e:	bf 90       	pop	r11
     690:	af 90       	pop	r10
     692:	08 95       	ret

00000694 <SERVO_Tick>:
		default:
		break;
	}
	
	//Transitions
	switch(servo_state){
     694:	80 91 98 07 	lds	r24, 0x0798	; 0x800798 <servo_state>
     698:	81 30       	cpi	r24, 0x01	; 1
     69a:	09 f4       	brne	.+2      	; 0x69e <SERVO_Tick+0xa>
     69c:	4a c0       	rjmp	.+148    	; 0x732 <SERVO_Tick+0x9e>
     69e:	18 f0       	brcs	.+6      	; 0x6a6 <SERVO_Tick+0x12>
     6a0:	82 30       	cpi	r24, 0x02	; 2
     6a2:	d9 f0       	breq	.+54     	; 0x6da <SERVO_Tick+0x46>
     6a4:	63 c0       	rjmp	.+198    	; 0x76c <SERVO_Tick+0xd8>
		case servo_init:
		if(left || right){
     6a6:	80 91 34 07 	lds	r24, 0x0734	; 0x800734 <left>
     6aa:	81 11       	cpse	r24, r1
     6ac:	04 c0       	rjmp	.+8      	; 0x6b6 <SERVO_Tick+0x22>
     6ae:	80 91 35 07 	lds	r24, 0x0735	; 0x800735 <right>
     6b2:	88 23       	and	r24, r24
     6b4:	71 f0       	breq	.+28     	; 0x6d2 <SERVO_Tick+0x3e>
			servo_state = drive_high;
     6b6:	82 e0       	ldi	r24, 0x02	; 2
     6b8:	80 93 98 07 	sts	0x0798, r24	; 0x800798 <servo_state>
			servo_counter = 0;
     6bc:	10 92 31 07 	sts	0x0731, r1	; 0x800731 <servo_counter>
			min_servo = 20 - max_servo;
     6c0:	90 91 33 07 	lds	r25, 0x0733	; 0x800733 <max_servo>
     6c4:	84 e1       	ldi	r24, 0x14	; 20
     6c6:	89 1b       	sub	r24, r25
     6c8:	80 93 32 07 	sts	0x0732, r24	; 0x800732 <min_servo>
			PORTB = 0x01;
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	85 b9       	out	0x05, r24	; 5
     6d0:	08 95       	ret
		}
		
		else{
			PORTB = 0x00;
     6d2:	15 b8       	out	0x05, r1	; 5
			servo_state = servo_init;
     6d4:	10 92 98 07 	sts	0x0798, r1	; 0x800798 <servo_state>
     6d8:	08 95       	ret
		}
		break;
		case drive_high:
		if((servo_counter < max_servo) && (left || right)){
     6da:	80 91 31 07 	lds	r24, 0x0731	; 0x800731 <servo_counter>
     6de:	90 91 33 07 	lds	r25, 0x0733	; 0x800733 <max_servo>
     6e2:	89 17       	cp	r24, r25
     6e4:	78 f4       	brcc	.+30     	; 0x704 <SERVO_Tick+0x70>
     6e6:	90 91 34 07 	lds	r25, 0x0734	; 0x800734 <left>
     6ea:	91 11       	cpse	r25, r1
     6ec:	04 c0       	rjmp	.+8      	; 0x6f6 <SERVO_Tick+0x62>
     6ee:	90 91 35 07 	lds	r25, 0x0735	; 0x800735 <right>
     6f2:	99 23       	and	r25, r25
     6f4:	b1 f0       	breq	.+44     	; 0x722 <SERVO_Tick+0x8e>
			++servo_counter;
     6f6:	8f 5f       	subi	r24, 0xFF	; 255
     6f8:	80 93 31 07 	sts	0x0731, r24	; 0x800731 <servo_counter>
			servo_state = drive_high;
     6fc:	82 e0       	ldi	r24, 0x02	; 2
     6fe:	80 93 98 07 	sts	0x0798, r24	; 0x800798 <servo_state>
     702:	08 95       	ret
		}
		
		else if(!(servo_counter < max_servo) && (left || right)){
     704:	80 91 34 07 	lds	r24, 0x0734	; 0x800734 <left>
     708:	81 11       	cpse	r24, r1
     70a:	04 c0       	rjmp	.+8      	; 0x714 <SERVO_Tick+0x80>
     70c:	80 91 35 07 	lds	r24, 0x0735	; 0x800735 <right>
     710:	88 23       	and	r24, r24
     712:	39 f0       	breq	.+14     	; 0x722 <SERVO_Tick+0x8e>
			servo_counter = 0;
     714:	10 92 31 07 	sts	0x0731, r1	; 0x800731 <servo_counter>
			PORTB = 0x00;
     718:	15 b8       	out	0x05, r1	; 5
			servo_state = drive_low;
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	80 93 98 07 	sts	0x0798, r24	; 0x800798 <servo_state>
     720:	08 95       	ret
		}
		
		else{
			left = 0;
     722:	10 92 34 07 	sts	0x0734, r1	; 0x800734 <left>
			right = 0;
     726:	10 92 35 07 	sts	0x0735, r1	; 0x800735 <right>
			PORTB = 0x00;
     72a:	15 b8       	out	0x05, r1	; 5
			servo_state = servo_init;
     72c:	10 92 98 07 	sts	0x0798, r1	; 0x800798 <servo_state>
     730:	08 95       	ret
		}
		break;
		
		case drive_low:
		if((servo_counter < min_servo) && (left || right)){
     732:	80 91 31 07 	lds	r24, 0x0731	; 0x800731 <servo_counter>
     736:	90 91 32 07 	lds	r25, 0x0732	; 0x800732 <min_servo>
     73a:	89 17       	cp	r24, r25
     73c:	78 f4       	brcc	.+30     	; 0x75c <SERVO_Tick+0xc8>
     73e:	90 91 34 07 	lds	r25, 0x0734	; 0x800734 <left>
     742:	91 11       	cpse	r25, r1
     744:	04 c0       	rjmp	.+8      	; 0x74e <SERVO_Tick+0xba>
     746:	90 91 35 07 	lds	r25, 0x0735	; 0x800735 <right>
     74a:	99 23       	and	r25, r25
     74c:	39 f0       	breq	.+14     	; 0x75c <SERVO_Tick+0xc8>
			++servo_counter;
     74e:	8f 5f       	subi	r24, 0xFF	; 255
     750:	80 93 31 07 	sts	0x0731, r24	; 0x800731 <servo_counter>
			servo_state = drive_low;
     754:	81 e0       	ldi	r24, 0x01	; 1
     756:	80 93 98 07 	sts	0x0798, r24	; 0x800798 <servo_state>
     75a:	08 95       	ret
		}
		
		else{
			left = 0;
     75c:	10 92 34 07 	sts	0x0734, r1	; 0x800734 <left>
			right = 0;
     760:	10 92 35 07 	sts	0x0735, r1	; 0x800735 <right>
			PORTB = 0x00;
     764:	15 b8       	out	0x05, r1	; 5
			servo_state = servo_init;
     766:	10 92 98 07 	sts	0x0798, r1	; 0x800798 <servo_state>
     76a:	08 95       	ret
		}
		
		break;
		
		default:
		servo_state = servo_init;
     76c:	10 92 98 07 	sts	0x0798, r1	; 0x800798 <servo_state>
     770:	08 95       	ret

00000772 <SERVOSecTask>:

//-------------------------------------------------- Start ServoMotor SM --------------------------------------------------//


void SERVO_Init(){
	servo_state = servo_init;
     772:	10 92 98 07 	sts	0x0798, r1	; 0x800798 <servo_state>
void SERVOSecTask()
{
	SERVO_Init();
	for(;;)
	{
		SERVO_Tick();
     776:	8e df       	rcall	.-228    	; 0x694 <SERVO_Tick>
		vTaskDelay(1);
     778:	81 e0       	ldi	r24, 0x01	; 1
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	2a d4       	rcall	.+2132   	; 0xfd2 <vTaskDelay>
     77e:	fb cf       	rjmp	.-10     	; 0x776 <SERVOSecTask+0x4>

00000780 <SERVOSecPulse>:
	}
}

void SERVOSecPulse(unsigned portBASE_TYPE Priority)
{
     780:	af 92       	push	r10
     782:	bf 92       	push	r11
     784:	cf 92       	push	r12
     786:	df 92       	push	r13
     788:	ef 92       	push	r14
     78a:	ff 92       	push	r15
     78c:	0f 93       	push	r16
	xTaskCreate(SERVOSecTask, (signed portCHAR *)"SERVOSecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
     78e:	a1 2c       	mov	r10, r1
     790:	b1 2c       	mov	r11, r1
     792:	c1 2c       	mov	r12, r1
     794:	d1 2c       	mov	r13, r1
     796:	e1 2c       	mov	r14, r1
     798:	f1 2c       	mov	r15, r1
     79a:	08 2f       	mov	r16, r24
     79c:	20 e0       	ldi	r18, 0x00	; 0
     79e:	30 e0       	ldi	r19, 0x00	; 0
     7a0:	45 e5       	ldi	r20, 0x55	; 85
     7a2:	50 e0       	ldi	r21, 0x00	; 0
     7a4:	6d e3       	ldi	r22, 0x3D	; 61
     7a6:	71 e0       	ldi	r23, 0x01	; 1
     7a8:	89 eb       	ldi	r24, 0xB9	; 185
     7aa:	93 e0       	ldi	r25, 0x03	; 3
     7ac:	ae d1       	rcall	.+860    	; 0xb0a <xTaskGenericCreate>
}
     7ae:	0f 91       	pop	r16
     7b0:	ff 90       	pop	r15
     7b2:	ef 90       	pop	r14
     7b4:	df 90       	pop	r13
     7b6:	cf 90       	pop	r12
     7b8:	bf 90       	pop	r11
     7ba:	af 90       	pop	r10
     7bc:	08 95       	ret

000007be <main>:


//-------------------------------------------------- End ServoMotor SM --------------------------------------------------//
int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
     7be:	11 b8       	out	0x01, r1	; 1
     7c0:	8f ef       	ldi	r24, 0xFF	; 255
     7c2:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
     7c4:	84 b9       	out	0x04, r24	; 4
     7c6:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF; PORTC = 0x00;
     7c8:	87 b9       	out	0x07, r24	; 7
     7ca:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00;
     7cc:	8a b9       	out	0x0a, r24	; 10
     7ce:	1b b8       	out	0x0b, r1	; 11
	adc_init();
     7d0:	3b dd       	rcall	.-1418   	; 0x248 <adc_init>
	//Start Tasks
	JOYSecPulse(1);
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	bb dd       	rcall	.-1162   	; 0x34c <JOYSecPulse>
	STEERINGSecPulse(1);
     7d6:	81 e0       	ldi	r24, 0x01	; 1
     7d8:	4e de       	rcall	.-868    	; 0x476 <STEERINGSecPulse>
	ForwardSecPulse(1);
     7da:	81 e0       	ldi	r24, 0x01	; 1
     7dc:	c3 de       	rcall	.-634    	; 0x564 <ForwardSecPulse>
	ReverseSecPulse(1);
     7de:	81 e0       	ldi	r24, 0x01	; 1
     7e0:	3a df       	rcall	.-396    	; 0x656 <ReverseSecPulse>
	SERVOSecPulse(1);
     7e2:	81 e0       	ldi	r24, 0x01	; 1
     7e4:	cd df       	rcall	.-102    	; 0x780 <SERVOSecPulse>
     7e6:	84 d2       	rcall	.+1288   	; 0xcf0 <vTaskStartScheduler>
	//RunSchedular
	vTaskStartScheduler();
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	90 e0       	ldi	r25, 0x00	; 0
	
	return 0;
     7ec:	08 95       	ret

000007ee <pxPortInitialiseStack>:
     7ee:	31 e1       	ldi	r19, 0x11	; 17
     7f0:	fc 01       	movw	r30, r24
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     7f2:	30 83       	st	Z, r19
     7f4:	31 97       	sbiw	r30, 0x01	; 1
     7f6:	22 e2       	ldi	r18, 0x22	; 34
     7f8:	20 83       	st	Z, r18
     7fa:	31 97       	sbiw	r30, 0x01	; 1
     7fc:	a3 e3       	ldi	r26, 0x33	; 51
     7fe:	a0 83       	st	Z, r26
     800:	31 97       	sbiw	r30, 0x01	; 1
     802:	60 83       	st	Z, r22
     804:	31 97       	sbiw	r30, 0x01	; 1
     806:	70 83       	st	Z, r23
     808:	31 97       	sbiw	r30, 0x01	; 1
     80a:	10 82       	st	Z, r1
     80c:	31 97       	sbiw	r30, 0x01	; 1
     80e:	60 e8       	ldi	r22, 0x80	; 128
     810:	60 83       	st	Z, r22
     812:	31 97       	sbiw	r30, 0x01	; 1
     814:	10 82       	st	Z, r1
     816:	31 97       	sbiw	r30, 0x01	; 1
     818:	62 e0       	ldi	r22, 0x02	; 2
     81a:	60 83       	st	Z, r22
     81c:	31 97       	sbiw	r30, 0x01	; 1
     81e:	63 e0       	ldi	r22, 0x03	; 3
     820:	60 83       	st	Z, r22
     822:	31 97       	sbiw	r30, 0x01	; 1
     824:	64 e0       	ldi	r22, 0x04	; 4
     826:	60 83       	st	Z, r22
     828:	31 97       	sbiw	r30, 0x01	; 1
     82a:	65 e0       	ldi	r22, 0x05	; 5
     82c:	60 83       	st	Z, r22
     82e:	31 97       	sbiw	r30, 0x01	; 1
     830:	66 e0       	ldi	r22, 0x06	; 6
     832:	60 83       	st	Z, r22
     834:	31 97       	sbiw	r30, 0x01	; 1
     836:	67 e0       	ldi	r22, 0x07	; 7
     838:	60 83       	st	Z, r22
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	68 e0       	ldi	r22, 0x08	; 8
     83e:	60 83       	st	Z, r22
     840:	31 97       	sbiw	r30, 0x01	; 1
     842:	69 e0       	ldi	r22, 0x09	; 9
     844:	60 83       	st	Z, r22
     846:	31 97       	sbiw	r30, 0x01	; 1
     848:	60 e1       	ldi	r22, 0x10	; 16
     84a:	60 83       	st	Z, r22
     84c:	31 97       	sbiw	r30, 0x01	; 1
     84e:	30 83       	st	Z, r19
     850:	31 97       	sbiw	r30, 0x01	; 1
     852:	32 e1       	ldi	r19, 0x12	; 18
     854:	30 83       	st	Z, r19
     856:	31 97       	sbiw	r30, 0x01	; 1
     858:	33 e1       	ldi	r19, 0x13	; 19
     85a:	30 83       	st	Z, r19
     85c:	31 97       	sbiw	r30, 0x01	; 1
     85e:	34 e1       	ldi	r19, 0x14	; 20
     860:	30 83       	st	Z, r19
     862:	31 97       	sbiw	r30, 0x01	; 1
     864:	35 e1       	ldi	r19, 0x15	; 21
     866:	30 83       	st	Z, r19
     868:	31 97       	sbiw	r30, 0x01	; 1
     86a:	36 e1       	ldi	r19, 0x16	; 22
     86c:	30 83       	st	Z, r19
     86e:	31 97       	sbiw	r30, 0x01	; 1
     870:	37 e1       	ldi	r19, 0x17	; 23
     872:	30 83       	st	Z, r19
     874:	31 97       	sbiw	r30, 0x01	; 1
     876:	38 e1       	ldi	r19, 0x18	; 24
     878:	30 83       	st	Z, r19
     87a:	31 97       	sbiw	r30, 0x01	; 1
     87c:	39 e1       	ldi	r19, 0x19	; 25
     87e:	30 83       	st	Z, r19
     880:	31 97       	sbiw	r30, 0x01	; 1
     882:	30 e2       	ldi	r19, 0x20	; 32
     884:	30 83       	st	Z, r19
     886:	31 97       	sbiw	r30, 0x01	; 1
     888:	31 e2       	ldi	r19, 0x21	; 33
     88a:	30 83       	st	Z, r19
     88c:	31 97       	sbiw	r30, 0x01	; 1
     88e:	20 83       	st	Z, r18
     890:	31 97       	sbiw	r30, 0x01	; 1
     892:	23 e2       	ldi	r18, 0x23	; 35
     894:	20 83       	st	Z, r18
     896:	31 97       	sbiw	r30, 0x01	; 1
     898:	40 83       	st	Z, r20
     89a:	31 97       	sbiw	r30, 0x01	; 1
     89c:	50 83       	st	Z, r21
     89e:	31 97       	sbiw	r30, 0x01	; 1
     8a0:	26 e2       	ldi	r18, 0x26	; 38
     8a2:	20 83       	st	Z, r18
     8a4:	31 97       	sbiw	r30, 0x01	; 1
     8a6:	27 e2       	ldi	r18, 0x27	; 39
     8a8:	20 83       	st	Z, r18
     8aa:	31 97       	sbiw	r30, 0x01	; 1
     8ac:	28 e2       	ldi	r18, 0x28	; 40
     8ae:	20 83       	st	Z, r18
     8b0:	31 97       	sbiw	r30, 0x01	; 1
     8b2:	29 e2       	ldi	r18, 0x29	; 41
     8b4:	20 83       	st	Z, r18
     8b6:	31 97       	sbiw	r30, 0x01	; 1
     8b8:	20 e3       	ldi	r18, 0x30	; 48
     8ba:	20 83       	st	Z, r18
     8bc:	31 97       	sbiw	r30, 0x01	; 1
     8be:	21 e3       	ldi	r18, 0x31	; 49
     8c0:	20 83       	st	Z, r18
     8c2:	86 97       	sbiw	r24, 0x26	; 38
     8c4:	08 95       	ret

000008c6 <xPortStartScheduler>:
     8c6:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     8ca:	8c e7       	ldi	r24, 0x7C	; 124
     8cc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     8d0:	8b e0       	ldi	r24, 0x0B	; 11
     8d2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     8d6:	ef e6       	ldi	r30, 0x6F	; 111
     8d8:	f0 e0       	ldi	r31, 0x00	; 0
     8da:	80 81       	ld	r24, Z
     8dc:	82 60       	ori	r24, 0x02	; 2
     8de:	80 83       	st	Z, r24
     8e0:	a0 91 95 07 	lds	r26, 0x0795	; 0x800795 <pxCurrentTCB>
     8e4:	b0 91 96 07 	lds	r27, 0x0796	; 0x800796 <pxCurrentTCB+0x1>
     8e8:	cd 91       	ld	r28, X+
     8ea:	cd bf       	out	0x3d, r28	; 61
     8ec:	dd 91       	ld	r29, X+
     8ee:	de bf       	out	0x3e, r29	; 62
     8f0:	ff 91       	pop	r31
     8f2:	ef 91       	pop	r30
     8f4:	df 91       	pop	r29
     8f6:	cf 91       	pop	r28
     8f8:	bf 91       	pop	r27
     8fa:	af 91       	pop	r26
     8fc:	9f 91       	pop	r25
     8fe:	8f 91       	pop	r24
     900:	7f 91       	pop	r23
     902:	6f 91       	pop	r22
     904:	5f 91       	pop	r21
     906:	4f 91       	pop	r20
     908:	3f 91       	pop	r19
     90a:	2f 91       	pop	r18
     90c:	1f 91       	pop	r17
     90e:	0f 91       	pop	r16
     910:	ff 90       	pop	r15
     912:	ef 90       	pop	r14
     914:	df 90       	pop	r13
     916:	cf 90       	pop	r12
     918:	bf 90       	pop	r11
     91a:	af 90       	pop	r10
     91c:	9f 90       	pop	r9
     91e:	8f 90       	pop	r8
     920:	7f 90       	pop	r7
     922:	6f 90       	pop	r6
     924:	5f 90       	pop	r5
     926:	4f 90       	pop	r4
     928:	3f 90       	pop	r3
     92a:	2f 90       	pop	r2
     92c:	1f 90       	pop	r1
     92e:	0f 90       	pop	r0
     930:	0f be       	out	0x3f, r0	; 63
     932:	0f 90       	pop	r0
     934:	08 95       	ret
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	08 95       	ret

0000093a <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     93a:	0f 92       	push	r0
     93c:	0f b6       	in	r0, 0x3f	; 63
     93e:	f8 94       	cli
     940:	0f 92       	push	r0
     942:	1f 92       	push	r1
     944:	11 24       	eor	r1, r1
     946:	2f 92       	push	r2
     948:	3f 92       	push	r3
     94a:	4f 92       	push	r4
     94c:	5f 92       	push	r5
     94e:	6f 92       	push	r6
     950:	7f 92       	push	r7
     952:	8f 92       	push	r8
     954:	9f 92       	push	r9
     956:	af 92       	push	r10
     958:	bf 92       	push	r11
     95a:	cf 92       	push	r12
     95c:	df 92       	push	r13
     95e:	ef 92       	push	r14
     960:	ff 92       	push	r15
     962:	0f 93       	push	r16
     964:	1f 93       	push	r17
     966:	2f 93       	push	r18
     968:	3f 93       	push	r19
     96a:	4f 93       	push	r20
     96c:	5f 93       	push	r21
     96e:	6f 93       	push	r22
     970:	7f 93       	push	r23
     972:	8f 93       	push	r24
     974:	9f 93       	push	r25
     976:	af 93       	push	r26
     978:	bf 93       	push	r27
     97a:	cf 93       	push	r28
     97c:	df 93       	push	r29
     97e:	ef 93       	push	r30
     980:	ff 93       	push	r31
     982:	a0 91 95 07 	lds	r26, 0x0795	; 0x800795 <pxCurrentTCB>
     986:	b0 91 96 07 	lds	r27, 0x0796	; 0x800796 <pxCurrentTCB+0x1>
     98a:	0d b6       	in	r0, 0x3d	; 61
     98c:	0d 92       	st	X+, r0
     98e:	0e b6       	in	r0, 0x3e	; 62
     990:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     992:	70 d3       	rcall	.+1760   	; 0x1074 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     994:	a0 91 95 07 	lds	r26, 0x0795	; 0x800795 <pxCurrentTCB>
     998:	b0 91 96 07 	lds	r27, 0x0796	; 0x800796 <pxCurrentTCB+0x1>
     99c:	cd 91       	ld	r28, X+
     99e:	cd bf       	out	0x3d, r28	; 61
     9a0:	dd 91       	ld	r29, X+
     9a2:	de bf       	out	0x3e, r29	; 62
     9a4:	ff 91       	pop	r31
     9a6:	ef 91       	pop	r30
     9a8:	df 91       	pop	r29
     9aa:	cf 91       	pop	r28
     9ac:	bf 91       	pop	r27
     9ae:	af 91       	pop	r26
     9b0:	9f 91       	pop	r25
     9b2:	8f 91       	pop	r24
     9b4:	7f 91       	pop	r23
     9b6:	6f 91       	pop	r22
     9b8:	5f 91       	pop	r21
     9ba:	4f 91       	pop	r20
     9bc:	3f 91       	pop	r19
     9be:	2f 91       	pop	r18
     9c0:	1f 91       	pop	r17
     9c2:	0f 91       	pop	r16
     9c4:	ff 90       	pop	r15
     9c6:	ef 90       	pop	r14
     9c8:	df 90       	pop	r13
     9ca:	cf 90       	pop	r12
     9cc:	bf 90       	pop	r11
     9ce:	af 90       	pop	r10
     9d0:	9f 90       	pop	r9
     9d2:	8f 90       	pop	r8
     9d4:	7f 90       	pop	r7
     9d6:	6f 90       	pop	r6
     9d8:	5f 90       	pop	r5
     9da:	4f 90       	pop	r4
     9dc:	3f 90       	pop	r3
     9de:	2f 90       	pop	r2
     9e0:	1f 90       	pop	r1
     9e2:	0f 90       	pop	r0
     9e4:	0f be       	out	0x3f, r0	; 63
     9e6:	0f 90       	pop	r0

	asm volatile ( "ret" );
     9e8:	08 95       	ret

000009ea <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     9ea:	0f 92       	push	r0
     9ec:	0f b6       	in	r0, 0x3f	; 63
     9ee:	f8 94       	cli
     9f0:	0f 92       	push	r0
     9f2:	1f 92       	push	r1
     9f4:	11 24       	eor	r1, r1
     9f6:	2f 92       	push	r2
     9f8:	3f 92       	push	r3
     9fa:	4f 92       	push	r4
     9fc:	5f 92       	push	r5
     9fe:	6f 92       	push	r6
     a00:	7f 92       	push	r7
     a02:	8f 92       	push	r8
     a04:	9f 92       	push	r9
     a06:	af 92       	push	r10
     a08:	bf 92       	push	r11
     a0a:	cf 92       	push	r12
     a0c:	df 92       	push	r13
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	2f 93       	push	r18
     a18:	3f 93       	push	r19
     a1a:	4f 93       	push	r20
     a1c:	5f 93       	push	r21
     a1e:	6f 93       	push	r22
     a20:	7f 93       	push	r23
     a22:	8f 93       	push	r24
     a24:	9f 93       	push	r25
     a26:	af 93       	push	r26
     a28:	bf 93       	push	r27
     a2a:	cf 93       	push	r28
     a2c:	df 93       	push	r29
     a2e:	ef 93       	push	r30
     a30:	ff 93       	push	r31
     a32:	a0 91 95 07 	lds	r26, 0x0795	; 0x800795 <pxCurrentTCB>
     a36:	b0 91 96 07 	lds	r27, 0x0796	; 0x800796 <pxCurrentTCB+0x1>
     a3a:	0d b6       	in	r0, 0x3d	; 61
     a3c:	0d 92       	st	X+, r0
     a3e:	0e b6       	in	r0, 0x3e	; 62
     a40:	0d 92       	st	X+, r0
	vTaskIncrementTick();
     a42:	85 d1       	rcall	.+778    	; 0xd4e <vTaskIncrementTick>
	vTaskSwitchContext();
     a44:	17 d3       	rcall	.+1582   	; 0x1074 <vTaskSwitchContext>
     a46:	a0 91 95 07 	lds	r26, 0x0795	; 0x800795 <pxCurrentTCB>
	portRESTORE_CONTEXT();
     a4a:	b0 91 96 07 	lds	r27, 0x0796	; 0x800796 <pxCurrentTCB+0x1>
     a4e:	cd 91       	ld	r28, X+
     a50:	cd bf       	out	0x3d, r28	; 61
     a52:	dd 91       	ld	r29, X+
     a54:	de bf       	out	0x3e, r29	; 62
     a56:	ff 91       	pop	r31
     a58:	ef 91       	pop	r30
     a5a:	df 91       	pop	r29
     a5c:	cf 91       	pop	r28
     a5e:	bf 91       	pop	r27
     a60:	af 91       	pop	r26
     a62:	9f 91       	pop	r25
     a64:	8f 91       	pop	r24
     a66:	7f 91       	pop	r23
     a68:	6f 91       	pop	r22
     a6a:	5f 91       	pop	r21
     a6c:	4f 91       	pop	r20
     a6e:	3f 91       	pop	r19
     a70:	2f 91       	pop	r18
     a72:	1f 91       	pop	r17
     a74:	0f 91       	pop	r16
     a76:	ff 90       	pop	r15
     a78:	ef 90       	pop	r14
     a7a:	df 90       	pop	r13
     a7c:	cf 90       	pop	r12
     a7e:	bf 90       	pop	r11
     a80:	af 90       	pop	r10
     a82:	9f 90       	pop	r9
     a84:	8f 90       	pop	r8
     a86:	7f 90       	pop	r7
     a88:	6f 90       	pop	r6
     a8a:	5f 90       	pop	r5
     a8c:	4f 90       	pop	r4
     a8e:	3f 90       	pop	r3
     a90:	2f 90       	pop	r2
     a92:	1f 90       	pop	r1
     a94:	0f 90       	pop	r0
     a96:	0f be       	out	0x3f, r0	; 63
     a98:	0f 90       	pop	r0
     a9a:	08 95       	ret

00000a9c <__vector_13>:

	asm volatile ( "ret" );
     a9c:	a6 df       	rcall	.-180    	; 0x9ea <vPortYieldFromTick>
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
		asm volatile ( "reti" );
     a9e:	18 95       	reti

00000aa0 <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
     aa0:	cf 93       	push	r28
     aa2:	df 93       	push	r29
     aa4:	ec 01       	movw	r28, r24
     aa6:	e0 91 95 07 	lds	r30, 0x0795	; 0x800795 <pxCurrentTCB>
     aaa:	f0 91 96 07 	lds	r31, 0x0796	; 0x800796 <pxCurrentTCB+0x1>
     aae:	93 83       	std	Z+3, r25	; 0x03
     ab0:	82 83       	std	Z+2, r24	; 0x02
     ab2:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <xTickCount>
     ab6:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <xTickCount+0x1>
     aba:	c8 17       	cp	r28, r24
     abc:	d9 07       	cpc	r29, r25
     abe:	60 f4       	brcc	.+24     	; 0xad8 <prvAddCurrentTaskToDelayedList+0x38>
     ac0:	60 91 95 07 	lds	r22, 0x0795	; 0x800795 <pxCurrentTCB>
     ac4:	70 91 96 07 	lds	r23, 0x0796	; 0x800796 <pxCurrentTCB+0x1>
     ac8:	80 91 5b 07 	lds	r24, 0x075B	; 0x80075b <pxOverflowDelayedTaskList>
     acc:	90 91 5c 07 	lds	r25, 0x075C	; 0x80075c <pxOverflowDelayedTaskList+0x1>
     ad0:	6e 5f       	subi	r22, 0xFE	; 254
     ad2:	7f 4f       	sbci	r23, 0xFF	; 255
     ad4:	58 db       	rcall	.-2384   	; 0x186 <vListInsert>
     ad6:	16 c0       	rjmp	.+44     	; 0xb04 <prvAddCurrentTaskToDelayedList+0x64>
     ad8:	60 91 95 07 	lds	r22, 0x0795	; 0x800795 <pxCurrentTCB>
     adc:	70 91 96 07 	lds	r23, 0x0796	; 0x800796 <pxCurrentTCB+0x1>
     ae0:	80 91 5d 07 	lds	r24, 0x075D	; 0x80075d <pxDelayedTaskList>
     ae4:	90 91 5e 07 	lds	r25, 0x075E	; 0x80075e <pxDelayedTaskList+0x1>
     ae8:	6e 5f       	subi	r22, 0xFE	; 254
     aea:	7f 4f       	sbci	r23, 0xFF	; 255
     aec:	4c db       	rcall	.-2408   	; 0x186 <vListInsert>
     aee:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <xNextTaskUnblockTime>
     af2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <xNextTaskUnblockTime+0x1>
     af6:	c8 17       	cp	r28, r24
     af8:	d9 07       	cpc	r29, r25
     afa:	20 f4       	brcc	.+8      	; 0xb04 <prvAddCurrentTaskToDelayedList+0x64>
     afc:	d0 93 03 01 	sts	0x0103, r29	; 0x800103 <xNextTaskUnblockTime+0x1>
     b00:	c0 93 02 01 	sts	0x0102, r28	; 0x800102 <xNextTaskUnblockTime>
     b04:	df 91       	pop	r29
     b06:	cf 91       	pop	r28
     b08:	08 95       	ret

00000b0a <xTaskGenericCreate>:
     b0a:	4f 92       	push	r4
     b0c:	5f 92       	push	r5
     b0e:	6f 92       	push	r6
     b10:	7f 92       	push	r7
     b12:	8f 92       	push	r8
     b14:	9f 92       	push	r9
     b16:	af 92       	push	r10
     b18:	bf 92       	push	r11
     b1a:	cf 92       	push	r12
     b1c:	df 92       	push	r13
     b1e:	ef 92       	push	r14
     b20:	ff 92       	push	r15
     b22:	0f 93       	push	r16
     b24:	1f 93       	push	r17
     b26:	cf 93       	push	r28
     b28:	df 93       	push	r29
     b2a:	5c 01       	movw	r10, r24
     b2c:	4b 01       	movw	r8, r22
     b2e:	3a 01       	movw	r6, r20
     b30:	29 01       	movw	r4, r18
     b32:	81 e2       	ldi	r24, 0x21	; 33
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	c9 da       	rcall	.-2670   	; 0xca <pvPortMalloc>
     b38:	ec 01       	movw	r28, r24
     b3a:	89 2b       	or	r24, r25
     b3c:	09 f4       	brne	.+2      	; 0xb40 <xTaskGenericCreate+0x36>
     b3e:	c6 c0       	rjmp	.+396    	; 0xccc <xTaskGenericCreate+0x1c2>
     b40:	c1 14       	cp	r12, r1
     b42:	d1 04       	cpc	r13, r1
     b44:	09 f0       	breq	.+2      	; 0xb48 <xTaskGenericCreate+0x3e>
     b46:	be c0       	rjmp	.+380    	; 0xcc4 <xTaskGenericCreate+0x1ba>
     b48:	c3 01       	movw	r24, r6
     b4a:	bf da       	rcall	.-2690   	; 0xca <pvPortMalloc>
     b4c:	98 8f       	std	Y+24, r25	; 0x18
     b4e:	8f 8b       	std	Y+23, r24	; 0x17
     b50:	00 97       	sbiw	r24, 0x00	; 0
     b52:	19 f4       	brne	.+6      	; 0xb5a <xTaskGenericCreate+0x50>
     b54:	ce 01       	movw	r24, r28
     b56:	dd da       	rcall	.-2630   	; 0x112 <vPortFree>
     b58:	b9 c0       	rjmp	.+370    	; 0xccc <xTaskGenericCreate+0x1c2>
     b5a:	a3 01       	movw	r20, r6
     b5c:	65 ea       	ldi	r22, 0xA5	; 165
     b5e:	70 e0       	ldi	r23, 0x00	; 0
     b60:	f5 d2       	rcall	.+1514   	; 0x114c <memset>
     b62:	93 01       	movw	r18, r6
     b64:	21 50       	subi	r18, 0x01	; 1
     b66:	31 09       	sbc	r19, r1
     b68:	8f 89       	ldd	r24, Y+23	; 0x17
     b6a:	98 8d       	ldd	r25, Y+24	; 0x18
     b6c:	3c 01       	movw	r6, r24
     b6e:	62 0e       	add	r6, r18
     b70:	73 1e       	adc	r7, r19
     b72:	48 e0       	ldi	r20, 0x08	; 8
     b74:	50 e0       	ldi	r21, 0x00	; 0
     b76:	b4 01       	movw	r22, r8
     b78:	ce 01       	movw	r24, r28
     b7a:	49 96       	adiw	r24, 0x19	; 25
     b7c:	ee d2       	rcall	.+1500   	; 0x115a <strncpy>
     b7e:	18 a2       	std	Y+32, r1	; 0x20
     b80:	10 2f       	mov	r17, r16
     b82:	04 30       	cpi	r16, 0x04	; 4
     b84:	08 f0       	brcs	.+2      	; 0xb88 <xTaskGenericCreate+0x7e>
     b86:	13 e0       	ldi	r17, 0x03	; 3
     b88:	1e 8b       	std	Y+22, r17	; 0x16
     b8a:	6e 01       	movw	r12, r28
     b8c:	82 e0       	ldi	r24, 0x02	; 2
     b8e:	c8 0e       	add	r12, r24
     b90:	d1 1c       	adc	r13, r1
     b92:	c6 01       	movw	r24, r12
     b94:	cd da       	rcall	.-2662   	; 0x130 <vListInitialiseItem>
     b96:	ce 01       	movw	r24, r28
     b98:	0c 96       	adiw	r24, 0x0c	; 12
     b9a:	ca da       	rcall	.-2668   	; 0x130 <vListInitialiseItem>
     b9c:	d9 87       	std	Y+9, r29	; 0x09
     b9e:	c8 87       	std	Y+8, r28	; 0x08
     ba0:	84 e0       	ldi	r24, 0x04	; 4
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	81 1b       	sub	r24, r17
     ba6:	91 09       	sbc	r25, r1
     ba8:	9d 87       	std	Y+13, r25	; 0x0d
     baa:	8c 87       	std	Y+12, r24	; 0x0c
     bac:	db 8b       	std	Y+19, r29	; 0x13
     bae:	ca 8b       	std	Y+18, r28	; 0x12
     bb0:	a2 01       	movw	r20, r4
     bb2:	b5 01       	movw	r22, r10
     bb4:	c3 01       	movw	r24, r6
     bb6:	1b de       	rcall	.-970    	; 0x7ee <pxPortInitialiseStack>
     bb8:	99 83       	std	Y+1, r25	; 0x01
     bba:	88 83       	st	Y, r24
     bbc:	e1 14       	cp	r14, r1
     bbe:	f1 04       	cpc	r15, r1
     bc0:	19 f0       	breq	.+6      	; 0xbc8 <xTaskGenericCreate+0xbe>
     bc2:	f7 01       	movw	r30, r14
     bc4:	d1 83       	std	Z+1, r29	; 0x01
     bc6:	c0 83       	st	Z, r28
     bc8:	0f b6       	in	r0, 0x3f	; 63
     bca:	f8 94       	cli
     bcc:	0f 92       	push	r0
     bce:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <uxCurrentNumberOfTasks>
     bd2:	8f 5f       	subi	r24, 0xFF	; 255
     bd4:	80 93 47 07 	sts	0x0747, r24	; 0x800747 <uxCurrentNumberOfTasks>
     bd8:	80 91 95 07 	lds	r24, 0x0795	; 0x800795 <pxCurrentTCB>
     bdc:	90 91 96 07 	lds	r25, 0x0796	; 0x800796 <pxCurrentTCB+0x1>
     be0:	89 2b       	or	r24, r25
     be2:	69 f5       	brne	.+90     	; 0xc3e <xTaskGenericCreate+0x134>
     be4:	d0 93 96 07 	sts	0x0796, r29	; 0x800796 <pxCurrentTCB+0x1>
     be8:	c0 93 95 07 	sts	0x0795, r28	; 0x800795 <pxCurrentTCB>
     bec:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <uxCurrentNumberOfTasks>
     bf0:	81 30       	cpi	r24, 0x01	; 1
     bf2:	a1 f5       	brne	.+104    	; 0xc5c <xTaskGenericCreate+0x152>
     bf4:	81 e7       	ldi	r24, 0x71	; 113
     bf6:	97 e0       	ldi	r25, 0x07	; 7
     bf8:	8d da       	rcall	.-2790   	; 0x114 <vListInitialise>
     bfa:	8a e7       	ldi	r24, 0x7A	; 122
     bfc:	97 e0       	ldi	r25, 0x07	; 7
     bfe:	8a da       	rcall	.-2796   	; 0x114 <vListInitialise>
     c00:	83 e8       	ldi	r24, 0x83	; 131
     c02:	97 e0       	ldi	r25, 0x07	; 7
     c04:	87 da       	rcall	.-2802   	; 0x114 <vListInitialise>
     c06:	8c e8       	ldi	r24, 0x8C	; 140
     c08:	97 e0       	ldi	r25, 0x07	; 7
     c0a:	84 da       	rcall	.-2808   	; 0x114 <vListInitialise>
     c0c:	88 e6       	ldi	r24, 0x68	; 104
     c0e:	97 e0       	ldi	r25, 0x07	; 7
     c10:	81 da       	rcall	.-2814   	; 0x114 <vListInitialise>
     c12:	8f e5       	ldi	r24, 0x5F	; 95
     c14:	97 e0       	ldi	r25, 0x07	; 7
     c16:	7e da       	rcall	.-2820   	; 0x114 <vListInitialise>
     c18:	82 e5       	ldi	r24, 0x52	; 82
     c1a:	97 e0       	ldi	r25, 0x07	; 7
     c1c:	7b da       	rcall	.-2826   	; 0x114 <vListInitialise>
     c1e:	89 e4       	ldi	r24, 0x49	; 73
     c20:	97 e0       	ldi	r25, 0x07	; 7
     c22:	78 da       	rcall	.-2832   	; 0x114 <vListInitialise>
     c24:	88 e6       	ldi	r24, 0x68	; 104
     c26:	97 e0       	ldi	r25, 0x07	; 7
     c28:	90 93 5e 07 	sts	0x075E, r25	; 0x80075e <pxDelayedTaskList+0x1>
     c2c:	80 93 5d 07 	sts	0x075D, r24	; 0x80075d <pxDelayedTaskList>
     c30:	8f e5       	ldi	r24, 0x5F	; 95
     c32:	97 e0       	ldi	r25, 0x07	; 7
     c34:	90 93 5c 07 	sts	0x075C, r25	; 0x80075c <pxOverflowDelayedTaskList+0x1>
     c38:	80 93 5b 07 	sts	0x075B, r24	; 0x80075b <pxOverflowDelayedTaskList>
     c3c:	0f c0       	rjmp	.+30     	; 0xc5c <xTaskGenericCreate+0x152>
     c3e:	80 91 42 07 	lds	r24, 0x0742	; 0x800742 <xSchedulerRunning>
     c42:	81 11       	cpse	r24, r1
     c44:	0b c0       	rjmp	.+22     	; 0xc5c <xTaskGenericCreate+0x152>
     c46:	e0 91 95 07 	lds	r30, 0x0795	; 0x800795 <pxCurrentTCB>
     c4a:	f0 91 96 07 	lds	r31, 0x0796	; 0x800796 <pxCurrentTCB+0x1>
     c4e:	86 89       	ldd	r24, Z+22	; 0x16
     c50:	08 17       	cp	r16, r24
     c52:	20 f0       	brcs	.+8      	; 0xc5c <xTaskGenericCreate+0x152>
     c54:	d0 93 96 07 	sts	0x0796, r29	; 0x800796 <pxCurrentTCB+0x1>
     c58:	c0 93 95 07 	sts	0x0795, r28	; 0x800795 <pxCurrentTCB>
     c5c:	8e 89       	ldd	r24, Y+22	; 0x16
     c5e:	90 91 44 07 	lds	r25, 0x0744	; 0x800744 <uxTopUsedPriority>
     c62:	98 17       	cp	r25, r24
     c64:	10 f4       	brcc	.+4      	; 0xc6a <xTaskGenericCreate+0x160>
     c66:	80 93 44 07 	sts	0x0744, r24	; 0x800744 <uxTopUsedPriority>
     c6a:	90 91 3d 07 	lds	r25, 0x073D	; 0x80073d <uxTaskNumber>
     c6e:	9f 5f       	subi	r25, 0xFF	; 255
     c70:	90 93 3d 07 	sts	0x073D, r25	; 0x80073d <uxTaskNumber>
     c74:	90 91 43 07 	lds	r25, 0x0743	; 0x800743 <uxTopReadyPriority>
     c78:	98 17       	cp	r25, r24
     c7a:	10 f4       	brcc	.+4      	; 0xc80 <xTaskGenericCreate+0x176>
     c7c:	80 93 43 07 	sts	0x0743, r24	; 0x800743 <uxTopReadyPriority>
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	9c 01       	movw	r18, r24
     c84:	22 0f       	add	r18, r18
     c86:	33 1f       	adc	r19, r19
     c88:	22 0f       	add	r18, r18
     c8a:	33 1f       	adc	r19, r19
     c8c:	22 0f       	add	r18, r18
     c8e:	33 1f       	adc	r19, r19
     c90:	82 0f       	add	r24, r18
     c92:	93 1f       	adc	r25, r19
     c94:	b6 01       	movw	r22, r12
     c96:	8f 58       	subi	r24, 0x8F	; 143
     c98:	98 4f       	sbci	r25, 0xF8	; 248
     c9a:	4e da       	rcall	.-2916   	; 0x138 <vListInsertEnd>
     c9c:	0f 90       	pop	r0
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	80 91 42 07 	lds	r24, 0x0742	; 0x800742 <xSchedulerRunning>
     ca4:	88 23       	and	r24, r24
     ca6:	51 f0       	breq	.+20     	; 0xcbc <xTaskGenericCreate+0x1b2>
     ca8:	e0 91 95 07 	lds	r30, 0x0795	; 0x800795 <pxCurrentTCB>
     cac:	f0 91 96 07 	lds	r31, 0x0796	; 0x800796 <pxCurrentTCB+0x1>
     cb0:	86 89       	ldd	r24, Z+22	; 0x16
     cb2:	80 17       	cp	r24, r16
     cb4:	28 f4       	brcc	.+10     	; 0xcc0 <xTaskGenericCreate+0x1b6>
     cb6:	41 de       	rcall	.-894    	; 0x93a <vPortYield>
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	09 c0       	rjmp	.+18     	; 0xcce <xTaskGenericCreate+0x1c4>
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	07 c0       	rjmp	.+14     	; 0xcce <xTaskGenericCreate+0x1c4>
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	05 c0       	rjmp	.+10     	; 0xcce <xTaskGenericCreate+0x1c4>
     cc4:	d8 8e       	std	Y+24, r13	; 0x18
     cc6:	cf 8a       	std	Y+23, r12	; 0x17
     cc8:	c6 01       	movw	r24, r12
     cca:	47 cf       	rjmp	.-370    	; 0xb5a <xTaskGenericCreate+0x50>
     ccc:	8f ef       	ldi	r24, 0xFF	; 255
     cce:	df 91       	pop	r29
     cd0:	cf 91       	pop	r28
     cd2:	1f 91       	pop	r17
     cd4:	0f 91       	pop	r16
     cd6:	ff 90       	pop	r15
     cd8:	ef 90       	pop	r14
     cda:	df 90       	pop	r13
     cdc:	cf 90       	pop	r12
     cde:	bf 90       	pop	r11
     ce0:	af 90       	pop	r10
     ce2:	9f 90       	pop	r9
     ce4:	8f 90       	pop	r8
     ce6:	7f 90       	pop	r7
     ce8:	6f 90       	pop	r6
     cea:	5f 90       	pop	r5
     cec:	4f 90       	pop	r4
     cee:	08 95       	ret

00000cf0 <vTaskStartScheduler>:
     cf0:	af 92       	push	r10
     cf2:	bf 92       	push	r11
     cf4:	cf 92       	push	r12
     cf6:	df 92       	push	r13
     cf8:	ef 92       	push	r14
     cfa:	ff 92       	push	r15
     cfc:	0f 93       	push	r16
     cfe:	a1 2c       	mov	r10, r1
     d00:	b1 2c       	mov	r11, r1
     d02:	c1 2c       	mov	r12, r1
     d04:	d1 2c       	mov	r13, r1
     d06:	e1 2c       	mov	r14, r1
     d08:	f1 2c       	mov	r15, r1
     d0a:	00 e0       	ldi	r16, 0x00	; 0
     d0c:	20 e0       	ldi	r18, 0x00	; 0
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	45 e5       	ldi	r20, 0x55	; 85
     d12:	50 e0       	ldi	r21, 0x00	; 0
     d14:	6a e4       	ldi	r22, 0x4A	; 74
     d16:	71 e0       	ldi	r23, 0x01	; 1
     d18:	84 e0       	ldi	r24, 0x04	; 4
     d1a:	98 e0       	ldi	r25, 0x08	; 8
     d1c:	f6 de       	rcall	.-532    	; 0xb0a <xTaskGenericCreate>
     d1e:	81 30       	cpi	r24, 0x01	; 1
     d20:	41 f4       	brne	.+16     	; 0xd32 <vTaskStartScheduler+0x42>
     d22:	f8 94       	cli
     d24:	80 93 42 07 	sts	0x0742, r24	; 0x800742 <xSchedulerRunning>
     d28:	10 92 46 07 	sts	0x0746, r1	; 0x800746 <xTickCount+0x1>
     d2c:	10 92 45 07 	sts	0x0745, r1	; 0x800745 <xTickCount>
     d30:	ca dd       	rcall	.-1132   	; 0x8c6 <xPortStartScheduler>
     d32:	0f 91       	pop	r16
     d34:	ff 90       	pop	r15
     d36:	ef 90       	pop	r14
     d38:	df 90       	pop	r13
     d3a:	cf 90       	pop	r12
     d3c:	bf 90       	pop	r11
     d3e:	af 90       	pop	r10
     d40:	08 95       	ret

00000d42 <vTaskSuspendAll>:
     d42:	80 91 41 07 	lds	r24, 0x0741	; 0x800741 <uxSchedulerSuspended>
     d46:	8f 5f       	subi	r24, 0xFF	; 255
     d48:	80 93 41 07 	sts	0x0741, r24	; 0x800741 <uxSchedulerSuspended>
     d4c:	08 95       	ret

00000d4e <vTaskIncrementTick>:
     d4e:	0f 93       	push	r16
     d50:	1f 93       	push	r17
     d52:	cf 93       	push	r28
     d54:	df 93       	push	r29
     d56:	80 91 41 07 	lds	r24, 0x0741	; 0x800741 <uxSchedulerSuspended>
     d5a:	81 11       	cpse	r24, r1
     d5c:	af c0       	rjmp	.+350    	; 0xebc <vTaskIncrementTick+0x16e>
     d5e:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <xTickCount>
     d62:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <xTickCount+0x1>
     d66:	01 96       	adiw	r24, 0x01	; 1
     d68:	90 93 46 07 	sts	0x0746, r25	; 0x800746 <xTickCount+0x1>
     d6c:	80 93 45 07 	sts	0x0745, r24	; 0x800745 <xTickCount>
     d70:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <xTickCount>
     d74:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <xTickCount+0x1>
     d78:	89 2b       	or	r24, r25
     d7a:	99 f5       	brne	.+102    	; 0xde2 <vTaskIncrementTick+0x94>
     d7c:	80 91 5d 07 	lds	r24, 0x075D	; 0x80075d <pxDelayedTaskList>
     d80:	90 91 5e 07 	lds	r25, 0x075E	; 0x80075e <pxDelayedTaskList+0x1>
     d84:	20 91 5b 07 	lds	r18, 0x075B	; 0x80075b <pxOverflowDelayedTaskList>
     d88:	30 91 5c 07 	lds	r19, 0x075C	; 0x80075c <pxOverflowDelayedTaskList+0x1>
     d8c:	30 93 5e 07 	sts	0x075E, r19	; 0x80075e <pxDelayedTaskList+0x1>
     d90:	20 93 5d 07 	sts	0x075D, r18	; 0x80075d <pxDelayedTaskList>
     d94:	90 93 5c 07 	sts	0x075C, r25	; 0x80075c <pxOverflowDelayedTaskList+0x1>
     d98:	80 93 5b 07 	sts	0x075B, r24	; 0x80075b <pxOverflowDelayedTaskList>
     d9c:	80 91 3e 07 	lds	r24, 0x073E	; 0x80073e <xNumOfOverflows>
     da0:	8f 5f       	subi	r24, 0xFF	; 255
     da2:	80 93 3e 07 	sts	0x073E, r24	; 0x80073e <xNumOfOverflows>
     da6:	e0 91 5d 07 	lds	r30, 0x075D	; 0x80075d <pxDelayedTaskList>
     daa:	f0 91 5e 07 	lds	r31, 0x075E	; 0x80075e <pxDelayedTaskList+0x1>
     dae:	80 81       	ld	r24, Z
     db0:	81 11       	cpse	r24, r1
     db2:	07 c0       	rjmp	.+14     	; 0xdc2 <vTaskIncrementTick+0x74>
     db4:	8f ef       	ldi	r24, 0xFF	; 255
     db6:	9f ef       	ldi	r25, 0xFF	; 255
     db8:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <xNextTaskUnblockTime+0x1>
     dbc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <xNextTaskUnblockTime>
     dc0:	10 c0       	rjmp	.+32     	; 0xde2 <vTaskIncrementTick+0x94>
     dc2:	e0 91 5d 07 	lds	r30, 0x075D	; 0x80075d <pxDelayedTaskList>
     dc6:	f0 91 5e 07 	lds	r31, 0x075E	; 0x80075e <pxDelayedTaskList+0x1>
     dca:	05 80       	ldd	r0, Z+5	; 0x05
     dcc:	f6 81       	ldd	r31, Z+6	; 0x06
     dce:	e0 2d       	mov	r30, r0
     dd0:	06 80       	ldd	r0, Z+6	; 0x06
     dd2:	f7 81       	ldd	r31, Z+7	; 0x07
     dd4:	e0 2d       	mov	r30, r0
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <xNextTaskUnblockTime+0x1>
     dde:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <xNextTaskUnblockTime>
     de2:	20 91 45 07 	lds	r18, 0x0745	; 0x800745 <xTickCount>
     de6:	30 91 46 07 	lds	r19, 0x0746	; 0x800746 <xTickCount+0x1>
     dea:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <xNextTaskUnblockTime>
     dee:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <xNextTaskUnblockTime+0x1>
     df2:	28 17       	cp	r18, r24
     df4:	39 07       	cpc	r19, r25
     df6:	08 f4       	brcc	.+2      	; 0xdfa <vTaskIncrementTick+0xac>
     df8:	66 c0       	rjmp	.+204    	; 0xec6 <vTaskIncrementTick+0x178>
     dfa:	e0 91 5d 07 	lds	r30, 0x075D	; 0x80075d <pxDelayedTaskList>
     dfe:	f0 91 5e 07 	lds	r31, 0x075E	; 0x80075e <pxDelayedTaskList+0x1>
     e02:	80 81       	ld	r24, Z
     e04:	88 23       	and	r24, r24
     e06:	99 f0       	breq	.+38     	; 0xe2e <vTaskIncrementTick+0xe0>
     e08:	e0 91 5d 07 	lds	r30, 0x075D	; 0x80075d <pxDelayedTaskList>
     e0c:	f0 91 5e 07 	lds	r31, 0x075E	; 0x80075e <pxDelayedTaskList+0x1>
     e10:	05 80       	ldd	r0, Z+5	; 0x05
     e12:	f6 81       	ldd	r31, Z+6	; 0x06
     e14:	e0 2d       	mov	r30, r0
     e16:	c6 81       	ldd	r28, Z+6	; 0x06
     e18:	d7 81       	ldd	r29, Z+7	; 0x07
     e1a:	8a 81       	ldd	r24, Y+2	; 0x02
     e1c:	9b 81       	ldd	r25, Y+3	; 0x03
     e1e:	20 91 45 07 	lds	r18, 0x0745	; 0x800745 <xTickCount>
     e22:	30 91 46 07 	lds	r19, 0x0746	; 0x800746 <xTickCount+0x1>
     e26:	28 17       	cp	r18, r24
     e28:	39 07       	cpc	r19, r25
     e2a:	f8 f4       	brcc	.+62     	; 0xe6a <vTaskIncrementTick+0x11c>
     e2c:	19 c0       	rjmp	.+50     	; 0xe60 <vTaskIncrementTick+0x112>
     e2e:	8f ef       	ldi	r24, 0xFF	; 255
     e30:	9f ef       	ldi	r25, 0xFF	; 255
     e32:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <xNextTaskUnblockTime+0x1>
     e36:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <xNextTaskUnblockTime>
     e3a:	45 c0       	rjmp	.+138    	; 0xec6 <vTaskIncrementTick+0x178>
     e3c:	e0 91 5d 07 	lds	r30, 0x075D	; 0x80075d <pxDelayedTaskList>
     e40:	f0 91 5e 07 	lds	r31, 0x075E	; 0x80075e <pxDelayedTaskList+0x1>
     e44:	05 80       	ldd	r0, Z+5	; 0x05
     e46:	f6 81       	ldd	r31, Z+6	; 0x06
     e48:	e0 2d       	mov	r30, r0
     e4a:	c6 81       	ldd	r28, Z+6	; 0x06
     e4c:	d7 81       	ldd	r29, Z+7	; 0x07
     e4e:	8a 81       	ldd	r24, Y+2	; 0x02
     e50:	9b 81       	ldd	r25, Y+3	; 0x03
     e52:	20 91 45 07 	lds	r18, 0x0745	; 0x800745 <xTickCount>
     e56:	30 91 46 07 	lds	r19, 0x0746	; 0x800746 <xTickCount+0x1>
     e5a:	28 17       	cp	r18, r24
     e5c:	39 07       	cpc	r19, r25
     e5e:	28 f4       	brcc	.+10     	; 0xe6a <vTaskIncrementTick+0x11c>
     e60:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <xNextTaskUnblockTime+0x1>
     e64:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <xNextTaskUnblockTime>
     e68:	2e c0       	rjmp	.+92     	; 0xec6 <vTaskIncrementTick+0x178>
     e6a:	8e 01       	movw	r16, r28
     e6c:	0e 5f       	subi	r16, 0xFE	; 254
     e6e:	1f 4f       	sbci	r17, 0xFF	; 255
     e70:	c8 01       	movw	r24, r16
     e72:	c4 d9       	rcall	.-3192   	; 0x1fc <vListRemove>
     e74:	8c 89       	ldd	r24, Y+20	; 0x14
     e76:	9d 89       	ldd	r25, Y+21	; 0x15
     e78:	89 2b       	or	r24, r25
     e7a:	19 f0       	breq	.+6      	; 0xe82 <vTaskIncrementTick+0x134>
     e7c:	ce 01       	movw	r24, r28
     e7e:	0c 96       	adiw	r24, 0x0c	; 12
     e80:	bd d9       	rcall	.-3206   	; 0x1fc <vListRemove>
     e82:	8e 89       	ldd	r24, Y+22	; 0x16
     e84:	90 91 43 07 	lds	r25, 0x0743	; 0x800743 <uxTopReadyPriority>
     e88:	98 17       	cp	r25, r24
     e8a:	10 f4       	brcc	.+4      	; 0xe90 <vTaskIncrementTick+0x142>
     e8c:	80 93 43 07 	sts	0x0743, r24	; 0x800743 <uxTopReadyPriority>
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	9c 01       	movw	r18, r24
     e94:	22 0f       	add	r18, r18
     e96:	33 1f       	adc	r19, r19
     e98:	22 0f       	add	r18, r18
     e9a:	33 1f       	adc	r19, r19
     e9c:	22 0f       	add	r18, r18
     e9e:	33 1f       	adc	r19, r19
     ea0:	82 0f       	add	r24, r18
     ea2:	93 1f       	adc	r25, r19
     ea4:	b8 01       	movw	r22, r16
     ea6:	8f 58       	subi	r24, 0x8F	; 143
     ea8:	98 4f       	sbci	r25, 0xF8	; 248
     eaa:	46 d9       	rcall	.-3444   	; 0x138 <vListInsertEnd>
     eac:	e0 91 5d 07 	lds	r30, 0x075D	; 0x80075d <pxDelayedTaskList>
     eb0:	f0 91 5e 07 	lds	r31, 0x075E	; 0x80075e <pxDelayedTaskList+0x1>
     eb4:	80 81       	ld	r24, Z
     eb6:	81 11       	cpse	r24, r1
     eb8:	c1 cf       	rjmp	.-126    	; 0xe3c <vTaskIncrementTick+0xee>
     eba:	b9 cf       	rjmp	.-142    	; 0xe2e <vTaskIncrementTick+0xe0>
     ebc:	80 91 40 07 	lds	r24, 0x0740	; 0x800740 <uxMissedTicks>
     ec0:	8f 5f       	subi	r24, 0xFF	; 255
     ec2:	80 93 40 07 	sts	0x0740, r24	; 0x800740 <uxMissedTicks>
     ec6:	df 91       	pop	r29
     ec8:	cf 91       	pop	r28
     eca:	1f 91       	pop	r17
     ecc:	0f 91       	pop	r16
     ece:	08 95       	ret

00000ed0 <xTaskResumeAll>:
     ed0:	cf 92       	push	r12
     ed2:	df 92       	push	r13
     ed4:	ef 92       	push	r14
     ed6:	ff 92       	push	r15
     ed8:	0f 93       	push	r16
     eda:	1f 93       	push	r17
     edc:	cf 93       	push	r28
     ede:	df 93       	push	r29
     ee0:	0f b6       	in	r0, 0x3f	; 63
     ee2:	f8 94       	cli
     ee4:	0f 92       	push	r0
     ee6:	80 91 41 07 	lds	r24, 0x0741	; 0x800741 <uxSchedulerSuspended>
     eea:	81 50       	subi	r24, 0x01	; 1
     eec:	80 93 41 07 	sts	0x0741, r24	; 0x800741 <uxSchedulerSuspended>
     ef0:	80 91 41 07 	lds	r24, 0x0741	; 0x800741 <uxSchedulerSuspended>
     ef4:	81 11       	cpse	r24, r1
     ef6:	5f c0       	rjmp	.+190    	; 0xfb6 <xTaskResumeAll+0xe6>
     ef8:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <uxCurrentNumberOfTasks>
     efc:	81 11       	cpse	r24, r1
     efe:	2f c0       	rjmp	.+94     	; 0xf5e <xTaskResumeAll+0x8e>
     f00:	5d c0       	rjmp	.+186    	; 0xfbc <xTaskResumeAll+0xec>
     f02:	d7 01       	movw	r26, r14
     f04:	15 96       	adiw	r26, 0x05	; 5
     f06:	ed 91       	ld	r30, X+
     f08:	fc 91       	ld	r31, X
     f0a:	16 97       	sbiw	r26, 0x06	; 6
     f0c:	c6 81       	ldd	r28, Z+6	; 0x06
     f0e:	d7 81       	ldd	r29, Z+7	; 0x07
     f10:	ce 01       	movw	r24, r28
     f12:	0c 96       	adiw	r24, 0x0c	; 12
     f14:	73 d9       	rcall	.-3354   	; 0x1fc <vListRemove>
     f16:	8e 01       	movw	r16, r28
     f18:	0e 5f       	subi	r16, 0xFE	; 254
     f1a:	1f 4f       	sbci	r17, 0xFF	; 255
     f1c:	c8 01       	movw	r24, r16
     f1e:	6e d9       	rcall	.-3364   	; 0x1fc <vListRemove>
     f20:	8e 89       	ldd	r24, Y+22	; 0x16
     f22:	90 91 43 07 	lds	r25, 0x0743	; 0x800743 <uxTopReadyPriority>
     f26:	98 17       	cp	r25, r24
     f28:	10 f4       	brcc	.+4      	; 0xf2e <xTaskResumeAll+0x5e>
     f2a:	80 93 43 07 	sts	0x0743, r24	; 0x800743 <uxTopReadyPriority>
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	9c 01       	movw	r18, r24
     f32:	22 0f       	add	r18, r18
     f34:	33 1f       	adc	r19, r19
     f36:	22 0f       	add	r18, r18
     f38:	33 1f       	adc	r19, r19
     f3a:	22 0f       	add	r18, r18
     f3c:	33 1f       	adc	r19, r19
     f3e:	82 0f       	add	r24, r18
     f40:	93 1f       	adc	r25, r19
     f42:	b8 01       	movw	r22, r16
     f44:	8f 58       	subi	r24, 0x8F	; 143
     f46:	98 4f       	sbci	r25, 0xF8	; 248
     f48:	f7 d8       	rcall	.-3602   	; 0x138 <vListInsertEnd>
     f4a:	e0 91 95 07 	lds	r30, 0x0795	; 0x800795 <pxCurrentTCB>
     f4e:	f0 91 96 07 	lds	r31, 0x0796	; 0x800796 <pxCurrentTCB+0x1>
     f52:	9e 89       	ldd	r25, Y+22	; 0x16
     f54:	86 89       	ldd	r24, Z+22	; 0x16
     f56:	98 17       	cp	r25, r24
     f58:	58 f0       	brcs	.+22     	; 0xf70 <xTaskResumeAll+0xa0>
     f5a:	dc 2c       	mov	r13, r12
     f5c:	09 c0       	rjmp	.+18     	; 0xf70 <xTaskResumeAll+0xa0>
     f5e:	d1 2c       	mov	r13, r1
     f60:	0f 2e       	mov	r0, r31
     f62:	f2 e5       	ldi	r31, 0x52	; 82
     f64:	ef 2e       	mov	r14, r31
     f66:	f7 e0       	ldi	r31, 0x07	; 7
     f68:	ff 2e       	mov	r15, r31
     f6a:	f0 2d       	mov	r31, r0
     f6c:	cc 24       	eor	r12, r12
     f6e:	c3 94       	inc	r12
     f70:	f7 01       	movw	r30, r14
     f72:	80 81       	ld	r24, Z
     f74:	81 11       	cpse	r24, r1
     f76:	c5 cf       	rjmp	.-118    	; 0xf02 <xTaskResumeAll+0x32>
     f78:	80 91 40 07 	lds	r24, 0x0740	; 0x800740 <uxMissedTicks>
     f7c:	88 23       	and	r24, r24
     f7e:	79 f0       	breq	.+30     	; 0xf9e <xTaskResumeAll+0xce>
     f80:	80 91 40 07 	lds	r24, 0x0740	; 0x800740 <uxMissedTicks>
     f84:	88 23       	and	r24, r24
     f86:	91 f0       	breq	.+36     	; 0xfac <xTaskResumeAll+0xdc>
     f88:	e2 de       	rcall	.-572    	; 0xd4e <vTaskIncrementTick>
     f8a:	80 91 40 07 	lds	r24, 0x0740	; 0x800740 <uxMissedTicks>
     f8e:	81 50       	subi	r24, 0x01	; 1
     f90:	80 93 40 07 	sts	0x0740, r24	; 0x800740 <uxMissedTicks>
     f94:	80 91 40 07 	lds	r24, 0x0740	; 0x800740 <uxMissedTicks>
     f98:	81 11       	cpse	r24, r1
     f9a:	f6 cf       	rjmp	.-20     	; 0xf88 <xTaskResumeAll+0xb8>
     f9c:	07 c0       	rjmp	.+14     	; 0xfac <xTaskResumeAll+0xdc>
     f9e:	f1 e0       	ldi	r31, 0x01	; 1
     fa0:	df 16       	cp	r13, r31
     fa2:	21 f0       	breq	.+8      	; 0xfac <xTaskResumeAll+0xdc>
     fa4:	80 91 3f 07 	lds	r24, 0x073F	; 0x80073f <xMissedYield>
     fa8:	81 30       	cpi	r24, 0x01	; 1
     faa:	39 f4       	brne	.+14     	; 0xfba <xTaskResumeAll+0xea>
     fac:	10 92 3f 07 	sts	0x073F, r1	; 0x80073f <xMissedYield>
     fb0:	c4 dc       	rcall	.-1656   	; 0x93a <vPortYield>
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	03 c0       	rjmp	.+6      	; 0xfbc <xTaskResumeAll+0xec>
     fb6:	80 e0       	ldi	r24, 0x00	; 0
     fb8:	01 c0       	rjmp	.+2      	; 0xfbc <xTaskResumeAll+0xec>
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	0f 90       	pop	r0
     fbe:	0f be       	out	0x3f, r0	; 63
     fc0:	df 91       	pop	r29
     fc2:	cf 91       	pop	r28
     fc4:	1f 91       	pop	r17
     fc6:	0f 91       	pop	r16
     fc8:	ff 90       	pop	r15
     fca:	ef 90       	pop	r14
     fcc:	df 90       	pop	r13
     fce:	cf 90       	pop	r12
     fd0:	08 95       	ret

00000fd2 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
     fd2:	cf 93       	push	r28
     fd4:	df 93       	push	r29
     fd6:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
     fd8:	89 2b       	or	r24, r25
     fda:	91 f0       	breq	.+36     	; 0x1000 <vTaskDelay+0x2e>
		{
			vTaskSuspendAll();
     fdc:	b2 de       	rcall	.-668    	; 0xd42 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
     fde:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <xTickCount>
     fe2:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <xTickCount+0x1>
     fe6:	c8 0f       	add	r28, r24
     fe8:	d9 1f       	adc	r29, r25

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
     fea:	80 91 95 07 	lds	r24, 0x0795	; 0x800795 <pxCurrentTCB>
     fee:	90 91 96 07 	lds	r25, 0x0796	; 0x800796 <pxCurrentTCB+0x1>
     ff2:	02 96       	adiw	r24, 0x02	; 2
     ff4:	03 d9       	rcall	.-3578   	; 0x1fc <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
     ff6:	ce 01       	movw	r24, r28
     ff8:	53 dd       	rcall	.-1370   	; 0xaa0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
     ffa:	6a df       	rcall	.-300    	; 0xed0 <xTaskResumeAll>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
     ffc:	81 11       	cpse	r24, r1
     ffe:	01 c0       	rjmp	.+2      	; 0x1002 <vTaskDelay+0x30>
		{
			portYIELD_WITHIN_API();
    1000:	9c dc       	rcall	.-1736   	; 0x93a <vPortYield>
    1002:	df 91       	pop	r29
		}
	}
    1004:	cf 91       	pop	r28
    1006:	08 95       	ret

00001008 <prvIdleTask>:
    1008:	0f 2e       	mov	r0, r31
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    100a:	f9 e4       	ldi	r31, 0x49	; 73
    100c:	ef 2e       	mov	r14, r31
    100e:	f7 e0       	ldi	r31, 0x07	; 7
    1010:	ff 2e       	mov	r15, r31
    1012:	f0 2d       	mov	r31, r0

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    1014:	c1 e7       	ldi	r28, 0x71	; 113
    1016:	d7 e0       	ldi	r29, 0x07	; 7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    1018:	80 91 48 07 	lds	r24, 0x0748	; 0x800748 <uxTasksDeleted>
    101c:	88 23       	and	r24, r24
    101e:	29 f1       	breq	.+74     	; 0x106a <prvIdleTask+0x62>
		{
			vTaskSuspendAll();
    1020:	90 de       	rcall	.-736    	; 0xd42 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    1022:	d7 01       	movw	r26, r14
			xTaskResumeAll();
    1024:	1c 91       	ld	r17, X
    1026:	54 df       	rcall	.-344    	; 0xed0 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    1028:	11 23       	and	r17, r17
    102a:	f9 f0       	breq	.+62     	; 0x106a <prvIdleTask+0x62>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    102c:	0f b6       	in	r0, 0x3f	; 63
    102e:	f8 94       	cli
    1030:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    1032:	d7 01       	movw	r26, r14
    1034:	15 96       	adiw	r26, 0x05	; 5
    1036:	ed 91       	ld	r30, X+
    1038:	fc 91       	ld	r31, X
    103a:	16 97       	sbiw	r26, 0x06	; 6
    103c:	06 81       	ldd	r16, Z+6	; 0x06
    103e:	17 81       	ldd	r17, Z+7	; 0x07
					vListRemove( &( pxTCB->xGenericListItem ) );
    1040:	c8 01       	movw	r24, r16
    1042:	02 96       	adiw	r24, 0x02	; 2
    1044:	db d8       	rcall	.-3658   	; 0x1fc <vListRemove>
					--uxCurrentNumberOfTasks;
    1046:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <uxCurrentNumberOfTasks>
    104a:	81 50       	subi	r24, 0x01	; 1
    104c:	80 93 47 07 	sts	0x0747, r24	; 0x800747 <uxCurrentNumberOfTasks>
					--uxTasksDeleted;
    1050:	80 91 48 07 	lds	r24, 0x0748	; 0x800748 <uxTasksDeleted>
    1054:	81 50       	subi	r24, 0x01	; 1
    1056:	80 93 48 07 	sts	0x0748, r24	; 0x800748 <uxTasksDeleted>
				}
				taskEXIT_CRITICAL();
    105a:	0f 90       	pop	r0
    105c:	0f be       	out	0x3f, r0	; 63
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    105e:	f8 01       	movw	r30, r16
    1060:	87 89       	ldd	r24, Z+23	; 0x17
    1062:	90 8d       	ldd	r25, Z+24	; 0x18
		vPortFree( pxTCB );
    1064:	56 d8       	rcall	.-3924   	; 0x112 <vPortFree>
    1066:	c8 01       	movw	r24, r16

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    1068:	54 d8       	rcall	.-3928   	; 0x112 <vPortFree>
    106a:	88 81       	ld	r24, Y
    106c:	82 30       	cpi	r24, 0x02	; 2
			{
				taskYIELD();
    106e:	a0 f2       	brcs	.-88     	; 0x1018 <prvIdleTask+0x10>
    1070:	64 dc       	rcall	.-1848   	; 0x93a <vPortYield>
    1072:	d2 cf       	rjmp	.-92     	; 0x1018 <prvIdleTask+0x10>

00001074 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    1074:	80 91 41 07 	lds	r24, 0x0741	; 0x800741 <uxSchedulerSuspended>
    1078:	81 11       	cpse	r24, r1
    107a:	13 c0       	rjmp	.+38     	; 0x10a2 <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    107c:	80 91 43 07 	lds	r24, 0x0743	; 0x800743 <uxTopReadyPriority>
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	fc 01       	movw	r30, r24
    1084:	ee 0f       	add	r30, r30
    1086:	ff 1f       	adc	r31, r31
    1088:	ee 0f       	add	r30, r30
    108a:	ff 1f       	adc	r31, r31
    108c:	ee 0f       	add	r30, r30
    108e:	ff 1f       	adc	r31, r31
    1090:	8e 0f       	add	r24, r30
    1092:	9f 1f       	adc	r25, r31
    1094:	fc 01       	movw	r30, r24
    1096:	ef 58       	subi	r30, 0x8F	; 143
    1098:	f8 4f       	sbci	r31, 0xF8	; 248
    109a:	80 81       	ld	r24, Z
    109c:	88 23       	and	r24, r24
    109e:	29 f0       	breq	.+10     	; 0x10aa <vTaskSwitchContext+0x36>
    10a0:	1b c0       	rjmp	.+54     	; 0x10d8 <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	80 93 3f 07 	sts	0x073F, r24	; 0x80073f <xMissedYield>
    10a8:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    10aa:	80 91 43 07 	lds	r24, 0x0743	; 0x800743 <uxTopReadyPriority>
    10ae:	81 50       	subi	r24, 0x01	; 1
    10b0:	80 93 43 07 	sts	0x0743, r24	; 0x800743 <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    10b4:	80 91 43 07 	lds	r24, 0x0743	; 0x800743 <uxTopReadyPriority>
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	fc 01       	movw	r30, r24
    10bc:	ee 0f       	add	r30, r30
    10be:	ff 1f       	adc	r31, r31
    10c0:	ee 0f       	add	r30, r30
    10c2:	ff 1f       	adc	r31, r31
    10c4:	ee 0f       	add	r30, r30
    10c6:	ff 1f       	adc	r31, r31
    10c8:	8e 0f       	add	r24, r30
    10ca:	9f 1f       	adc	r25, r31
    10cc:	fc 01       	movw	r30, r24
    10ce:	ef 58       	subi	r30, 0x8F	; 143
    10d0:	f8 4f       	sbci	r31, 0xF8	; 248
    10d2:	80 81       	ld	r24, Z
    10d4:	88 23       	and	r24, r24
    10d6:	49 f3       	breq	.-46     	; 0x10aa <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    10d8:	80 91 43 07 	lds	r24, 0x0743	; 0x800743 <uxTopReadyPriority>
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	9c 01       	movw	r18, r24
    10e0:	22 0f       	add	r18, r18
    10e2:	33 1f       	adc	r19, r19
    10e4:	22 0f       	add	r18, r18
    10e6:	33 1f       	adc	r19, r19
    10e8:	22 0f       	add	r18, r18
    10ea:	33 1f       	adc	r19, r19
    10ec:	28 0f       	add	r18, r24
    10ee:	39 1f       	adc	r19, r25
    10f0:	d9 01       	movw	r26, r18
    10f2:	af 58       	subi	r26, 0x8F	; 143
    10f4:	b8 4f       	sbci	r27, 0xF8	; 248
    10f6:	11 96       	adiw	r26, 0x01	; 1
    10f8:	ed 91       	ld	r30, X+
    10fa:	fc 91       	ld	r31, X
    10fc:	12 97       	sbiw	r26, 0x02	; 2
    10fe:	02 80       	ldd	r0, Z+2	; 0x02
    1100:	f3 81       	ldd	r31, Z+3	; 0x03
    1102:	e0 2d       	mov	r30, r0
    1104:	12 96       	adiw	r26, 0x02	; 2
    1106:	fc 93       	st	X, r31
    1108:	ee 93       	st	-X, r30
    110a:	11 97       	sbiw	r26, 0x01	; 1
    110c:	2c 58       	subi	r18, 0x8C	; 140
    110e:	38 4f       	sbci	r19, 0xF8	; 248
    1110:	e2 17       	cp	r30, r18
    1112:	f3 07       	cpc	r31, r19
    1114:	29 f4       	brne	.+10     	; 0x1120 <vTaskSwitchContext+0xac>
    1116:	22 81       	ldd	r18, Z+2	; 0x02
    1118:	33 81       	ldd	r19, Z+3	; 0x03
    111a:	fd 01       	movw	r30, r26
    111c:	32 83       	std	Z+2, r19	; 0x02
    111e:	21 83       	std	Z+1, r18	; 0x01
    1120:	fc 01       	movw	r30, r24
    1122:	ee 0f       	add	r30, r30
    1124:	ff 1f       	adc	r31, r31
    1126:	ee 0f       	add	r30, r30
    1128:	ff 1f       	adc	r31, r31
    112a:	ee 0f       	add	r30, r30
    112c:	ff 1f       	adc	r31, r31
    112e:	8e 0f       	add	r24, r30
    1130:	9f 1f       	adc	r25, r31
    1132:	fc 01       	movw	r30, r24
    1134:	ef 58       	subi	r30, 0x8F	; 143
    1136:	f8 4f       	sbci	r31, 0xF8	; 248
    1138:	01 80       	ldd	r0, Z+1	; 0x01
    113a:	f2 81       	ldd	r31, Z+2	; 0x02
    113c:	e0 2d       	mov	r30, r0
    113e:	86 81       	ldd	r24, Z+6	; 0x06
    1140:	97 81       	ldd	r25, Z+7	; 0x07
    1142:	90 93 96 07 	sts	0x0796, r25	; 0x800796 <pxCurrentTCB+0x1>
    1146:	80 93 95 07 	sts	0x0795, r24	; 0x800795 <pxCurrentTCB>
    114a:	08 95       	ret

0000114c <memset>:
    114c:	dc 01       	movw	r26, r24
    114e:	01 c0       	rjmp	.+2      	; 0x1152 <memset+0x6>
    1150:	6d 93       	st	X+, r22
    1152:	41 50       	subi	r20, 0x01	; 1
    1154:	50 40       	sbci	r21, 0x00	; 0
    1156:	e0 f7       	brcc	.-8      	; 0x1150 <memset+0x4>
    1158:	08 95       	ret

0000115a <strncpy>:
    115a:	fb 01       	movw	r30, r22
    115c:	dc 01       	movw	r26, r24
    115e:	41 50       	subi	r20, 0x01	; 1
    1160:	50 40       	sbci	r21, 0x00	; 0
    1162:	48 f0       	brcs	.+18     	; 0x1176 <strncpy+0x1c>
    1164:	01 90       	ld	r0, Z+
    1166:	0d 92       	st	X+, r0
    1168:	00 20       	and	r0, r0
    116a:	c9 f7       	brne	.-14     	; 0x115e <strncpy+0x4>
    116c:	01 c0       	rjmp	.+2      	; 0x1170 <strncpy+0x16>
    116e:	1d 92       	st	X+, r1
    1170:	41 50       	subi	r20, 0x01	; 1
    1172:	50 40       	sbci	r21, 0x00	; 0
    1174:	e0 f7       	brcc	.-8      	; 0x116e <strncpy+0x14>
    1176:	08 95       	ret

00001178 <_exit>:
    1178:	f8 94       	cli

0000117a <__stop_program>:
    117a:	ff cf       	rjmp	.-2      	; 0x117a <__stop_program>
