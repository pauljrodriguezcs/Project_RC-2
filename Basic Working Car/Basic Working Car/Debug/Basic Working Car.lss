
Basic Working Car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004e  00800100  0000108e  00001122  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000108e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000064a  0080014e  0080014e  00001170  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001170  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  000011e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000028c4  00000000  00000000  00001438  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f75  00000000  00000000  00003cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000189a  00000000  00000000  00004c71  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000618  00000000  00000000  0000650c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f31  00000000  00000000  00006b24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000014b6  00000000  00000000  00007a55  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000250  00000000  00000000  00008f0b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
       6:	00 00       	nop
       8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
       a:	00 00       	nop
       c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
       e:	00 00       	nop
      10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
      12:	00 00       	nop
      14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
      16:	00 00       	nop
      18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
      22:	00 00       	nop
      24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
      26:	00 00       	nop
      28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
      32:	00 00       	nop
      34:	bc c4       	rjmp	.+2424   	; 0x9ae <__vector_13>
      36:	00 00       	nop
      38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
      42:	00 00       	nop
      44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
      46:	00 00       	nop
      48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
      52:	00 00       	nop
      54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
      56:	00 00       	nop
      58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
      62:	00 00       	nop
      64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
      66:	00 00       	nop
      68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
      72:	00 00       	nop
      74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
      76:	00 00       	nop
      78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
      82:	00 00       	nop
      84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
      86:	00 00       	nop
      88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ee e8       	ldi	r30, 0x8E	; 142
      a0:	f0 e1       	ldi	r31, 0x10	; 16
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ae 34       	cpi	r26, 0x4E	; 78
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	27 e0       	ldi	r18, 0x07	; 7
      b4:	ae e4       	ldi	r26, 0x4E	; 78
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a8 39       	cpi	r26, 0x98	; 152
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	06 d3       	rcall	.+1548   	; 0x6d0 <main>
      c4:	e2 c7       	rjmp	.+4036   	; 0x108a <_exit>

000000c6 <__bad_interrupt>:
      c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
      c8:	cf 93       	push	r28
      ca:	df 93       	push	r29
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
      cc:	ec 01       	movw	r28, r24
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
      ce:	c2 d5       	rcall	.+2948   	; 0xc54 <vTaskSuspendAll>
      d0:	20 91 4e 01 	lds	r18, 0x014E	; 0x80014e <__data_end>
      d4:	30 91 4f 01 	lds	r19, 0x014F	; 0x80014f <__data_end+0x1>
      d8:	c9 01       	movw	r24, r18
      da:	8c 0f       	add	r24, r28
      dc:	9d 1f       	adc	r25, r29
      de:	8c 3d       	cpi	r24, 0xDC	; 220
      e0:	45 e0       	ldi	r20, 0x05	; 5
      e2:	94 07       	cpc	r25, r20
      e4:	58 f4       	brcc	.+22     	; 0xfc <pvPortMalloc+0x34>
      e6:	28 17       	cp	r18, r24
      e8:	39 07       	cpc	r19, r25
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
      ea:	58 f4       	brcc	.+22     	; 0x102 <pvPortMalloc+0x3a>
      ec:	e9 01       	movw	r28, r18
      ee:	c0 5b       	subi	r28, 0xB0	; 176
			xNextFreeByte += xWantedSize;			
      f0:	de 4f       	sbci	r29, 0xFE	; 254
      f2:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <__data_end+0x1>
      f6:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <__data_end>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
      fa:	05 c0       	rjmp	.+10     	; 0x106 <pvPortMalloc+0x3e>
      fc:	c0 e0       	ldi	r28, 0x00	; 0
      fe:	d0 e0       	ldi	r29, 0x00	; 0
     100:	02 c0       	rjmp	.+4      	; 0x106 <pvPortMalloc+0x3e>
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
     102:	c0 e0       	ldi	r28, 0x00	; 0
     104:	d0 e0       	ldi	r29, 0x00	; 0
		}
	}
	#endif	

	return pvReturn;
}
     106:	6d d6       	rcall	.+3290   	; 0xde2 <xTaskResumeAll>
     108:	ce 01       	movw	r24, r28
     10a:	df 91       	pop	r29
     10c:	cf 91       	pop	r28
     10e:	08 95       	ret

00000110 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     110:	08 95       	ret

00000112 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
     112:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
     114:	03 96       	adiw	r24, 0x03	; 3
     116:	92 83       	std	Z+2, r25	; 0x02
     118:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     11a:	2f ef       	ldi	r18, 0xFF	; 255
     11c:	3f ef       	ldi	r19, 0xFF	; 255
     11e:	34 83       	std	Z+4, r19	; 0x04
     120:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
     122:	96 83       	std	Z+6, r25	; 0x06
     124:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
     126:	90 87       	std	Z+8, r25	; 0x08
     128:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
     12a:	10 82       	st	Z, r1
     12c:	08 95       	ret

0000012e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     12e:	fc 01       	movw	r30, r24
     130:	11 86       	std	Z+9, r1	; 0x09
     132:	10 86       	std	Z+8, r1	; 0x08
     134:	08 95       	ret

00000136 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
     136:	cf 93       	push	r28
     138:	df 93       	push	r29
     13a:	fc 01       	movw	r30, r24
     13c:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     13e:	21 81       	ldd	r18, Z+1	; 0x01
     140:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
     142:	e9 01       	movw	r28, r18
     144:	8a 81       	ldd	r24, Y+2	; 0x02
     146:	9b 81       	ldd	r25, Y+3	; 0x03
     148:	13 96       	adiw	r26, 0x03	; 3
     14a:	9c 93       	st	X, r25
     14c:	8e 93       	st	-X, r24
     14e:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
     150:	81 81       	ldd	r24, Z+1	; 0x01
     152:	92 81       	ldd	r25, Z+2	; 0x02
     154:	15 96       	adiw	r26, 0x05	; 5
     156:	9c 93       	st	X, r25
     158:	8e 93       	st	-X, r24
     15a:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     15c:	8a 81       	ldd	r24, Y+2	; 0x02
     15e:	9b 81       	ldd	r25, Y+3	; 0x03
     160:	ec 01       	movw	r28, r24
     162:	7d 83       	std	Y+5, r23	; 0x05
     164:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     166:	e9 01       	movw	r28, r18
     168:	7b 83       	std	Y+3, r23	; 0x03
     16a:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     16c:	72 83       	std	Z+2, r23	; 0x02
     16e:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     170:	19 96       	adiw	r26, 0x09	; 9
     172:	fc 93       	st	X, r31
     174:	ee 93       	st	-X, r30
     176:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
     178:	80 81       	ld	r24, Z
     17a:	8f 5f       	subi	r24, 0xFF	; 255
     17c:	80 83       	st	Z, r24
}
     17e:	df 91       	pop	r29
     180:	cf 91       	pop	r28
     182:	08 95       	ret

00000184 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
     184:	cf 93       	push	r28
     186:	df 93       	push	r29
     188:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
     18a:	48 81       	ld	r20, Y
     18c:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     18e:	4f 3f       	cpi	r20, 0xFF	; 255
     190:	2f ef       	ldi	r18, 0xFF	; 255
     192:	52 07       	cpc	r21, r18
     194:	31 f4       	brne	.+12     	; 0x1a2 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     196:	dc 01       	movw	r26, r24
     198:	17 96       	adiw	r26, 0x07	; 7
     19a:	ed 91       	ld	r30, X+
     19c:	fc 91       	ld	r31, X
     19e:	18 97       	sbiw	r26, 0x08	; 8
     1a0:	17 c0       	rjmp	.+46     	; 0x1d0 <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     1a2:	fc 01       	movw	r30, r24
     1a4:	33 96       	adiw	r30, 0x03	; 3
     1a6:	dc 01       	movw	r26, r24
     1a8:	15 96       	adiw	r26, 0x05	; 5
     1aa:	2d 91       	ld	r18, X+
     1ac:	3c 91       	ld	r19, X
     1ae:	16 97       	sbiw	r26, 0x06	; 6
     1b0:	d9 01       	movw	r26, r18
     1b2:	2d 91       	ld	r18, X+
     1b4:	3c 91       	ld	r19, X
     1b6:	42 17       	cp	r20, r18
     1b8:	53 07       	cpc	r21, r19
     1ba:	50 f0       	brcs	.+20     	; 0x1d0 <vListInsert+0x4c>
     1bc:	02 80       	ldd	r0, Z+2	; 0x02
     1be:	f3 81       	ldd	r31, Z+3	; 0x03
     1c0:	e0 2d       	mov	r30, r0
     1c2:	a2 81       	ldd	r26, Z+2	; 0x02
     1c4:	b3 81       	ldd	r27, Z+3	; 0x03
     1c6:	2d 91       	ld	r18, X+
     1c8:	3c 91       	ld	r19, X
     1ca:	42 17       	cp	r20, r18
     1cc:	53 07       	cpc	r21, r19
     1ce:	b0 f7       	brcc	.-20     	; 0x1bc <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     1d0:	a2 81       	ldd	r26, Z+2	; 0x02
     1d2:	b3 81       	ldd	r27, Z+3	; 0x03
     1d4:	bb 83       	std	Y+3, r27	; 0x03
     1d6:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     1d8:	15 96       	adiw	r26, 0x05	; 5
     1da:	dc 93       	st	X, r29
     1dc:	ce 93       	st	-X, r28
     1de:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
     1e0:	fd 83       	std	Y+5, r31	; 0x05
     1e2:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
     1e4:	d3 83       	std	Z+3, r29	; 0x03
     1e6:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     1e8:	99 87       	std	Y+9, r25	; 0x09
     1ea:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     1ec:	fc 01       	movw	r30, r24
     1ee:	20 81       	ld	r18, Z
     1f0:	2f 5f       	subi	r18, 0xFF	; 255
     1f2:	20 83       	st	Z, r18
}
     1f4:	df 91       	pop	r29
     1f6:	cf 91       	pop	r28
     1f8:	08 95       	ret

000001fa <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
     1fa:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     1fc:	a2 81       	ldd	r26, Z+2	; 0x02
     1fe:	b3 81       	ldd	r27, Z+3	; 0x03
     200:	84 81       	ldd	r24, Z+4	; 0x04
     202:	95 81       	ldd	r25, Z+5	; 0x05
     204:	15 96       	adiw	r26, 0x05	; 5
     206:	9c 93       	st	X, r25
     208:	8e 93       	st	-X, r24
     20a:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     20c:	a4 81       	ldd	r26, Z+4	; 0x04
     20e:	b5 81       	ldd	r27, Z+5	; 0x05
     210:	82 81       	ldd	r24, Z+2	; 0x02
     212:	93 81       	ldd	r25, Z+3	; 0x03
     214:	13 96       	adiw	r26, 0x03	; 3
     216:	9c 93       	st	X, r25
     218:	8e 93       	st	-X, r24
     21a:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     21c:	a0 85       	ldd	r26, Z+8	; 0x08
     21e:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     220:	11 96       	adiw	r26, 0x01	; 1
     222:	8d 91       	ld	r24, X+
     224:	9c 91       	ld	r25, X
     226:	12 97       	sbiw	r26, 0x02	; 2
     228:	e8 17       	cp	r30, r24
     22a:	f9 07       	cpc	r31, r25
     22c:	31 f4       	brne	.+12     	; 0x23a <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     22e:	84 81       	ldd	r24, Z+4	; 0x04
     230:	95 81       	ldd	r25, Z+5	; 0x05
     232:	12 96       	adiw	r26, 0x02	; 2
     234:	9c 93       	st	X, r25
     236:	8e 93       	st	-X, r24
     238:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
     23a:	11 86       	std	Z+9, r1	; 0x09
     23c:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     23e:	8c 91       	ld	r24, X
     240:	81 50       	subi	r24, 0x01	; 1
     242:	8c 93       	st	X, r24
     244:	08 95       	ret

00000246 <adc_init>:

//-------------------------------------------------- Start ServoMotor SM --------------------------------------------------//


void SERVO_Init(){
	servo_state = servo_init;
     246:	80 e4       	ldi	r24, 0x40	; 64
     248:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     24c:	87 e8       	ldi	r24, 0x87	; 135
     24e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     252:	08 95       	ret

00000254 <adc_read>:
     254:	ec e7       	ldi	r30, 0x7C	; 124
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	90 81       	ld	r25, Z
     25a:	98 7f       	andi	r25, 0xF8	; 248
     25c:	87 70       	andi	r24, 0x07	; 7
     25e:	89 2b       	or	r24, r25
     260:	80 83       	st	Z, r24
     262:	ea e7       	ldi	r30, 0x7A	; 122
     264:	f0 e0       	ldi	r31, 0x00	; 0
     266:	80 81       	ld	r24, Z
     268:	80 64       	ori	r24, 0x40	; 64
     26a:	80 83       	st	Z, r24
     26c:	80 81       	ld	r24, Z
     26e:	86 fd       	sbrc	r24, 6
     270:	fd cf       	rjmp	.-6      	; 0x26c <adc_read+0x18>
     272:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     276:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     27a:	08 95       	ret

0000027c <JOY_Tick>:
     27c:	80 91 95 07 	lds	r24, 0x0795	; 0x800795 <joy_state>
     280:	81 11       	cpse	r24, r1
     282:	56 c0       	rjmp	.+172    	; 0x330 <JOY_Tick+0xb4>
     284:	e7 df       	rcall	.-50     	; 0x254 <adc_read>
     286:	90 93 33 07 	sts	0x0733, r25	; 0x800733 <joystick_value+0x1>
     28a:	80 93 32 07 	sts	0x0732, r24	; 0x800732 <joystick_value>
     28e:	9c 01       	movw	r18, r24
     290:	25 54       	subi	r18, 0x45	; 69
     292:	32 40       	sbci	r19, 0x02	; 2
     294:	2b 38       	cpi	r18, 0x8B	; 139
     296:	31 05       	cpc	r19, r1
     298:	30 f4       	brcc	.+12     	; 0x2a6 <JOY_Tick+0x2a>
     29a:	81 e0       	ldi	r24, 0x01	; 1
     29c:	80 93 36 07 	sts	0x0736, r24	; 0x800736 <going_forward>
     2a0:	80 93 38 07 	sts	0x0738, r24	; 0x800738 <throttle>
     2a4:	45 c0       	rjmp	.+138    	; 0x330 <JOY_Tick+0xb4>
     2a6:	9c 01       	movw	r18, r24
     2a8:	21 5d       	subi	r18, 0xD1	; 209
     2aa:	32 40       	sbci	r19, 0x02	; 2
     2ac:	2b 38       	cpi	r18, 0x8B	; 139
     2ae:	31 05       	cpc	r19, r1
     2b0:	38 f4       	brcc	.+14     	; 0x2c0 <JOY_Tick+0x44>
     2b2:	81 e0       	ldi	r24, 0x01	; 1
     2b4:	80 93 36 07 	sts	0x0736, r24	; 0x800736 <going_forward>
     2b8:	82 e0       	ldi	r24, 0x02	; 2
     2ba:	80 93 38 07 	sts	0x0738, r24	; 0x800738 <throttle>
     2be:	38 c0       	rjmp	.+112    	; 0x330 <JOY_Tick+0xb4>
     2c0:	8d 35       	cpi	r24, 0x5D	; 93
     2c2:	23 e0       	ldi	r18, 0x03	; 3
     2c4:	92 07       	cpc	r25, r18
     2c6:	38 f0       	brcs	.+14     	; 0x2d6 <JOY_Tick+0x5a>
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	80 93 36 07 	sts	0x0736, r24	; 0x800736 <going_forward>
     2ce:	83 e0       	ldi	r24, 0x03	; 3
     2d0:	80 93 38 07 	sts	0x0738, r24	; 0x800738 <throttle>
     2d4:	2d c0       	rjmp	.+90     	; 0x330 <JOY_Tick+0xb4>
     2d6:	9c 01       	movw	r18, r24
     2d8:	2f 54       	subi	r18, 0x4F	; 79
     2da:	31 40       	sbci	r19, 0x01	; 1
     2dc:	25 3a       	cpi	r18, 0xA5	; 165
     2de:	31 05       	cpc	r19, r1
     2e0:	30 f4       	brcc	.+12     	; 0x2ee <JOY_Tick+0x72>
     2e2:	81 e0       	ldi	r24, 0x01	; 1
     2e4:	80 93 35 07 	sts	0x0735, r24	; 0x800735 <going_reverse>
     2e8:	80 93 37 07 	sts	0x0737, r24	; 0x800737 <reverse>
     2ec:	21 c0       	rjmp	.+66     	; 0x330 <JOY_Tick+0xb4>
     2ee:	9c 01       	movw	r18, r24
     2f0:	28 5a       	subi	r18, 0xA8	; 168
     2f2:	31 09       	sbc	r19, r1
     2f4:	26 3a       	cpi	r18, 0xA6	; 166
     2f6:	31 05       	cpc	r19, r1
     2f8:	38 f4       	brcc	.+14     	; 0x308 <JOY_Tick+0x8c>
     2fa:	81 e0       	ldi	r24, 0x01	; 1
     2fc:	80 93 35 07 	sts	0x0735, r24	; 0x800735 <going_reverse>
     300:	82 e0       	ldi	r24, 0x02	; 2
     302:	80 93 37 07 	sts	0x0737, r24	; 0x800737 <reverse>
     306:	14 c0       	rjmp	.+40     	; 0x330 <JOY_Tick+0xb4>
     308:	87 3a       	cpi	r24, 0xA7	; 167
     30a:	91 05       	cpc	r25, r1
     30c:	38 f4       	brcc	.+14     	; 0x31c <JOY_Tick+0xa0>
     30e:	81 e0       	ldi	r24, 0x01	; 1
     310:	80 93 35 07 	sts	0x0735, r24	; 0x800735 <going_reverse>
     314:	83 e0       	ldi	r24, 0x03	; 3
     316:	80 93 37 07 	sts	0x0737, r24	; 0x800737 <reverse>
     31a:	0a c0       	rjmp	.+20     	; 0x330 <JOY_Tick+0xb4>
     31c:	10 92 36 07 	sts	0x0736, r1	; 0x800736 <going_forward>
     320:	10 92 35 07 	sts	0x0735, r1	; 0x800735 <going_reverse>
     324:	10 92 38 07 	sts	0x0738, r1	; 0x800738 <throttle>
     328:	10 92 37 07 	sts	0x0737, r1	; 0x800737 <reverse>
     32c:	18 b8       	out	0x08, r1	; 8
     32e:	1b b8       	out	0x0b, r1	; 11
     330:	80 91 95 07 	lds	r24, 0x0795	; 0x800795 <joy_state>
     334:	81 11       	cpse	r24, r1
     336:	10 92 95 07 	sts	0x0795, r1	; 0x800795 <joy_state>
     33a:	08 95       	ret

0000033c <JOYSecTask>:
     33c:	10 92 95 07 	sts	0x0795, r1	; 0x800795 <joy_state>
     340:	9d df       	rcall	.-198    	; 0x27c <JOY_Tick>
     342:	82 e0       	ldi	r24, 0x02	; 2
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	ce d5       	rcall	.+2972   	; 0xee4 <vTaskDelay>
     348:	fb cf       	rjmp	.-10     	; 0x340 <JOYSecTask+0x4>

0000034a <JOYSecPulse>:
     34a:	af 92       	push	r10
     34c:	bf 92       	push	r11
     34e:	cf 92       	push	r12
     350:	df 92       	push	r13
     352:	ef 92       	push	r14
     354:	ff 92       	push	r15
     356:	0f 93       	push	r16
     358:	a1 2c       	mov	r10, r1
     35a:	b1 2c       	mov	r11, r1
     35c:	c1 2c       	mov	r12, r1
     35e:	d1 2c       	mov	r13, r1
     360:	e1 2c       	mov	r14, r1
     362:	f1 2c       	mov	r15, r1
     364:	08 2f       	mov	r16, r24
     366:	20 e0       	ldi	r18, 0x00	; 0
     368:	30 e0       	ldi	r19, 0x00	; 0
     36a:	45 e5       	ldi	r20, 0x55	; 85
     36c:	50 e0       	ldi	r21, 0x00	; 0
     36e:	63 e0       	ldi	r22, 0x03	; 3
     370:	71 e0       	ldi	r23, 0x01	; 1
     372:	8e e9       	ldi	r24, 0x9E	; 158
     374:	91 e0       	ldi	r25, 0x01	; 1
     376:	52 d3       	rcall	.+1700   	; 0xa1c <xTaskGenericCreate>
     378:	0f 91       	pop	r16
     37a:	ff 90       	pop	r15
     37c:	ef 90       	pop	r14
     37e:	df 90       	pop	r13
     380:	cf 90       	pop	r12
     382:	bf 90       	pop	r11
     384:	af 90       	pop	r10
     386:	08 95       	ret

00000388 <STEERING_Tick>:
     388:	80 91 96 07 	lds	r24, 0x0796	; 0x800796 <steering_state>
     38c:	81 11       	cpse	r24, r1
     38e:	24 c0       	rjmp	.+72     	; 0x3d8 <STEERING_Tick+0x50>
     390:	81 e0       	ldi	r24, 0x01	; 1
     392:	60 df       	rcall	.-320    	; 0x254 <adc_read>
     394:	90 93 2d 07 	sts	0x072D, r25	; 0x80072d <steering+0x1>
     398:	80 93 2c 07 	sts	0x072C, r24	; 0x80072c <steering>
     39c:	85 34       	cpi	r24, 0x45	; 69
     39e:	22 e0       	ldi	r18, 0x02	; 2
     3a0:	92 07       	cpc	r25, r18
     3a2:	40 f0       	brcs	.+16     	; 0x3b4 <STEERING_Tick+0x2c>
     3a4:	10 92 31 07 	sts	0x0731, r1	; 0x800731 <right>
     3a8:	81 e0       	ldi	r24, 0x01	; 1
     3aa:	80 93 30 07 	sts	0x0730, r24	; 0x800730 <left>
     3ae:	80 93 2f 07 	sts	0x072F, r24	; 0x80072f <max_servo>
     3b2:	12 c0       	rjmp	.+36     	; 0x3d8 <STEERING_Tick+0x50>
     3b4:	84 3f       	cpi	r24, 0xF4	; 244
     3b6:	91 40       	sbci	r25, 0x01	; 1
     3b8:	48 f4       	brcc	.+18     	; 0x3cc <STEERING_Tick+0x44>
     3ba:	81 e0       	ldi	r24, 0x01	; 1
     3bc:	80 93 31 07 	sts	0x0731, r24	; 0x800731 <right>
     3c0:	10 92 30 07 	sts	0x0730, r1	; 0x800730 <left>
     3c4:	82 e0       	ldi	r24, 0x02	; 2
     3c6:	80 93 2f 07 	sts	0x072F, r24	; 0x80072f <max_servo>
     3ca:	06 c0       	rjmp	.+12     	; 0x3d8 <STEERING_Tick+0x50>
     3cc:	10 92 31 07 	sts	0x0731, r1	; 0x800731 <right>
     3d0:	10 92 30 07 	sts	0x0730, r1	; 0x800730 <left>
     3d4:	10 92 2f 07 	sts	0x072F, r1	; 0x80072f <max_servo>
     3d8:	80 91 96 07 	lds	r24, 0x0796	; 0x800796 <steering_state>
     3dc:	81 11       	cpse	r24, r1
     3de:	10 92 96 07 	sts	0x0796, r1	; 0x800796 <steering_state>
     3e2:	08 95       	ret

000003e4 <STEERINGSecTask>:
     3e4:	10 92 96 07 	sts	0x0796, r1	; 0x800796 <steering_state>
     3e8:	cf df       	rcall	.-98     	; 0x388 <STEERING_Tick>
     3ea:	8f e0       	ldi	r24, 0x0F	; 15
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	7a d5       	rcall	.+2804   	; 0xee4 <vTaskDelay>
     3f0:	fb cf       	rjmp	.-10     	; 0x3e8 <STEERINGSecTask+0x4>

000003f2 <STEERINGSecPulse>:
     3f2:	af 92       	push	r10
     3f4:	bf 92       	push	r11
     3f6:	cf 92       	push	r12
     3f8:	df 92       	push	r13
     3fa:	ef 92       	push	r14
     3fc:	ff 92       	push	r15
     3fe:	0f 93       	push	r16
     400:	a1 2c       	mov	r10, r1
     402:	b1 2c       	mov	r11, r1
     404:	c1 2c       	mov	r12, r1
     406:	d1 2c       	mov	r13, r1
     408:	e1 2c       	mov	r14, r1
     40a:	f1 2c       	mov	r15, r1
     40c:	08 2f       	mov	r16, r24
     40e:	20 e0       	ldi	r18, 0x00	; 0
     410:	30 e0       	ldi	r19, 0x00	; 0
     412:	45 e5       	ldi	r20, 0x55	; 85
     414:	50 e0       	ldi	r21, 0x00	; 0
     416:	6e e0       	ldi	r22, 0x0E	; 14
     418:	71 e0       	ldi	r23, 0x01	; 1
     41a:	82 ef       	ldi	r24, 0xF2	; 242
     41c:	91 e0       	ldi	r25, 0x01	; 1
     41e:	fe d2       	rcall	.+1532   	; 0xa1c <xTaskGenericCreate>
     420:	0f 91       	pop	r16
     422:	ff 90       	pop	r15
     424:	ef 90       	pop	r14
     426:	df 90       	pop	r13
     428:	cf 90       	pop	r12
     42a:	bf 90       	pop	r11
     42c:	af 90       	pop	r10
     42e:	08 95       	ret

00000430 <FORWARD_Tick>:
     430:	80 91 93 07 	lds	r24, 0x0793	; 0x800793 <forward_state>
     434:	81 30       	cpi	r24, 0x01	; 1
     436:	b9 f0       	breq	.+46     	; 0x466 <FORWARD_Tick+0x36>
     438:	18 f0       	brcs	.+6      	; 0x440 <FORWARD_Tick+0x10>
     43a:	82 30       	cpi	r24, 0x02	; 2
     43c:	79 f1       	breq	.+94     	; 0x49c <FORWARD_Tick+0x6c>
     43e:	08 95       	ret
     440:	80 91 36 07 	lds	r24, 0x0736	; 0x800736 <going_forward>
     444:	88 23       	and	r24, r24
     446:	09 f4       	brne	.+2      	; 0x44a <FORWARD_Tick+0x1a>
     448:	43 c0       	rjmp	.+134    	; 0x4d0 <FORWARD_Tick+0xa0>
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	80 93 93 07 	sts	0x0793, r24	; 0x800793 <forward_state>
     450:	20 91 38 07 	lds	r18, 0x0738	; 0x800738 <throttle>
     454:	93 e0       	ldi	r25, 0x03	; 3
     456:	92 1b       	sub	r25, r18
     458:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
     45c:	10 92 34 07 	sts	0x0734, r1	; 0x800734 <pwm_counter>
     460:	88 b9       	out	0x08, r24	; 8
     462:	8b b9       	out	0x0b, r24	; 11
     464:	08 95       	ret
     466:	80 91 36 07 	lds	r24, 0x0736	; 0x800736 <going_forward>
     46a:	88 23       	and	r24, r24
     46c:	91 f0       	breq	.+36     	; 0x492 <FORWARD_Tick+0x62>
     46e:	80 91 34 07 	lds	r24, 0x0734	; 0x800734 <pwm_counter>
     472:	90 91 38 07 	lds	r25, 0x0738	; 0x800738 <throttle>
     476:	89 17       	cp	r24, r25
     478:	20 f4       	brcc	.+8      	; 0x482 <FORWARD_Tick+0x52>
     47a:	8f 5f       	subi	r24, 0xFF	; 255
     47c:	80 93 34 07 	sts	0x0734, r24	; 0x800734 <pwm_counter>
     480:	08 95       	ret
     482:	82 e0       	ldi	r24, 0x02	; 2
     484:	80 93 93 07 	sts	0x0793, r24	; 0x800793 <forward_state>
     488:	10 92 34 07 	sts	0x0734, r1	; 0x800734 <pwm_counter>
     48c:	18 b8       	out	0x08, r1	; 8
     48e:	1b b8       	out	0x0b, r1	; 11
     490:	08 95       	ret
     492:	10 92 93 07 	sts	0x0793, r1	; 0x800793 <forward_state>
     496:	18 b8       	out	0x08, r1	; 8
     498:	1b b8       	out	0x0b, r1	; 11
     49a:	08 95       	ret
     49c:	80 91 36 07 	lds	r24, 0x0736	; 0x800736 <going_forward>
     4a0:	88 23       	and	r24, r24
     4a2:	91 f0       	breq	.+36     	; 0x4c8 <FORWARD_Tick+0x98>
     4a4:	80 91 34 07 	lds	r24, 0x0734	; 0x800734 <pwm_counter>
     4a8:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
     4ac:	89 17       	cp	r24, r25
     4ae:	20 f4       	brcc	.+8      	; 0x4b8 <FORWARD_Tick+0x88>
     4b0:	8f 5f       	subi	r24, 0xFF	; 255
     4b2:	80 93 34 07 	sts	0x0734, r24	; 0x800734 <pwm_counter>
     4b6:	08 95       	ret
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	80 93 93 07 	sts	0x0793, r24	; 0x800793 <forward_state>
     4be:	10 92 34 07 	sts	0x0734, r1	; 0x800734 <pwm_counter>
     4c2:	88 b9       	out	0x08, r24	; 8
     4c4:	8b b9       	out	0x0b, r24	; 11
     4c6:	08 95       	ret
     4c8:	10 92 93 07 	sts	0x0793, r1	; 0x800793 <forward_state>
     4cc:	18 b8       	out	0x08, r1	; 8
     4ce:	1b b8       	out	0x0b, r1	; 11
     4d0:	08 95       	ret

000004d2 <ForwardSecTask>:
     4d2:	10 92 93 07 	sts	0x0793, r1	; 0x800793 <forward_state>
     4d6:	ac df       	rcall	.-168    	; 0x430 <FORWARD_Tick>
     4d8:	83 e0       	ldi	r24, 0x03	; 3
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	03 d5       	rcall	.+2566   	; 0xee4 <vTaskDelay>
     4de:	fb cf       	rjmp	.-10     	; 0x4d6 <ForwardSecTask+0x4>

000004e0 <ForwardSecPulse>:
     4e0:	af 92       	push	r10
     4e2:	bf 92       	push	r11
     4e4:	cf 92       	push	r12
     4e6:	df 92       	push	r13
     4e8:	ef 92       	push	r14
     4ea:	ff 92       	push	r15
     4ec:	0f 93       	push	r16
     4ee:	a1 2c       	mov	r10, r1
     4f0:	b1 2c       	mov	r11, r1
     4f2:	c1 2c       	mov	r12, r1
     4f4:	d1 2c       	mov	r13, r1
     4f6:	e1 2c       	mov	r14, r1
     4f8:	f1 2c       	mov	r15, r1
     4fa:	08 2f       	mov	r16, r24
     4fc:	20 e0       	ldi	r18, 0x00	; 0
     4fe:	30 e0       	ldi	r19, 0x00	; 0
     500:	45 e5       	ldi	r20, 0x55	; 85
     502:	50 e0       	ldi	r21, 0x00	; 0
     504:	6e e1       	ldi	r22, 0x1E	; 30
     506:	71 e0       	ldi	r23, 0x01	; 1
     508:	89 e6       	ldi	r24, 0x69	; 105
     50a:	92 e0       	ldi	r25, 0x02	; 2
     50c:	87 d2       	rcall	.+1294   	; 0xa1c <xTaskGenericCreate>
     50e:	0f 91       	pop	r16
     510:	ff 90       	pop	r15
     512:	ef 90       	pop	r14
     514:	df 90       	pop	r13
     516:	cf 90       	pop	r12
     518:	bf 90       	pop	r11
     51a:	af 90       	pop	r10
     51c:	08 95       	ret

0000051e <REVERSE_Tick>:
     51e:	80 91 97 07 	lds	r24, 0x0797	; 0x800797 <reverse_state>
     522:	81 30       	cpi	r24, 0x01	; 1
     524:	c1 f0       	breq	.+48     	; 0x556 <REVERSE_Tick+0x38>
     526:	18 f0       	brcs	.+6      	; 0x52e <REVERSE_Tick+0x10>
     528:	82 30       	cpi	r24, 0x02	; 2
     52a:	81 f1       	breq	.+96     	; 0x58c <REVERSE_Tick+0x6e>
     52c:	08 95       	ret
     52e:	80 91 35 07 	lds	r24, 0x0735	; 0x800735 <going_reverse>
     532:	88 23       	and	r24, r24
     534:	09 f4       	brne	.+2      	; 0x538 <REVERSE_Tick+0x1a>
     536:	45 c0       	rjmp	.+138    	; 0x5c2 <REVERSE_Tick+0xa4>
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	80 93 97 07 	sts	0x0797, r24	; 0x800797 <reverse_state>
     53e:	90 91 37 07 	lds	r25, 0x0737	; 0x800737 <reverse>
     542:	83 e0       	ldi	r24, 0x03	; 3
     544:	89 1b       	sub	r24, r25
     546:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     54a:	10 92 34 07 	sts	0x0734, r1	; 0x800734 <pwm_counter>
     54e:	82 e0       	ldi	r24, 0x02	; 2
     550:	88 b9       	out	0x08, r24	; 8
     552:	8b b9       	out	0x0b, r24	; 11
     554:	08 95       	ret
     556:	80 91 35 07 	lds	r24, 0x0735	; 0x800735 <going_reverse>
     55a:	88 23       	and	r24, r24
     55c:	91 f0       	breq	.+36     	; 0x582 <REVERSE_Tick+0x64>
     55e:	80 91 34 07 	lds	r24, 0x0734	; 0x800734 <pwm_counter>
     562:	90 91 37 07 	lds	r25, 0x0737	; 0x800737 <reverse>
     566:	89 17       	cp	r24, r25
     568:	20 f4       	brcc	.+8      	; 0x572 <REVERSE_Tick+0x54>
     56a:	8f 5f       	subi	r24, 0xFF	; 255
     56c:	80 93 34 07 	sts	0x0734, r24	; 0x800734 <pwm_counter>
     570:	08 95       	ret
     572:	82 e0       	ldi	r24, 0x02	; 2
     574:	80 93 97 07 	sts	0x0797, r24	; 0x800797 <reverse_state>
     578:	10 92 34 07 	sts	0x0734, r1	; 0x800734 <pwm_counter>
     57c:	18 b8       	out	0x08, r1	; 8
     57e:	1b b8       	out	0x0b, r1	; 11
     580:	08 95       	ret
     582:	10 92 97 07 	sts	0x0797, r1	; 0x800797 <reverse_state>
     586:	18 b8       	out	0x08, r1	; 8
     588:	1b b8       	out	0x0b, r1	; 11
     58a:	08 95       	ret
     58c:	80 91 35 07 	lds	r24, 0x0735	; 0x800735 <going_reverse>
     590:	88 23       	and	r24, r24
     592:	99 f0       	breq	.+38     	; 0x5ba <REVERSE_Tick+0x9c>
     594:	80 91 34 07 	lds	r24, 0x0734	; 0x800734 <pwm_counter>
     598:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
     59c:	89 17       	cp	r24, r25
     59e:	20 f4       	brcc	.+8      	; 0x5a8 <REVERSE_Tick+0x8a>
     5a0:	8f 5f       	subi	r24, 0xFF	; 255
     5a2:	80 93 34 07 	sts	0x0734, r24	; 0x800734 <pwm_counter>
     5a6:	08 95       	ret
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	80 93 97 07 	sts	0x0797, r24	; 0x800797 <reverse_state>
     5ae:	10 92 34 07 	sts	0x0734, r1	; 0x800734 <pwm_counter>
     5b2:	82 e0       	ldi	r24, 0x02	; 2
     5b4:	88 b9       	out	0x08, r24	; 8
     5b6:	8b b9       	out	0x0b, r24	; 11
     5b8:	08 95       	ret
     5ba:	10 92 97 07 	sts	0x0797, r1	; 0x800797 <reverse_state>
     5be:	18 b8       	out	0x08, r1	; 8
     5c0:	1b b8       	out	0x0b, r1	; 11
     5c2:	08 95       	ret

000005c4 <ReverseSecTask>:
     5c4:	10 92 97 07 	sts	0x0797, r1	; 0x800797 <reverse_state>
     5c8:	aa df       	rcall	.-172    	; 0x51e <REVERSE_Tick>
     5ca:	83 e0       	ldi	r24, 0x03	; 3
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	8a d4       	rcall	.+2324   	; 0xee4 <vTaskDelay>
     5d0:	fb cf       	rjmp	.-10     	; 0x5c8 <ReverseSecTask+0x4>

000005d2 <ReverseSecPulse>:
     5d2:	af 92       	push	r10
     5d4:	bf 92       	push	r11
     5d6:	cf 92       	push	r12
     5d8:	df 92       	push	r13
     5da:	ef 92       	push	r14
     5dc:	ff 92       	push	r15
     5de:	0f 93       	push	r16
     5e0:	a1 2c       	mov	r10, r1
     5e2:	b1 2c       	mov	r11, r1
     5e4:	c1 2c       	mov	r12, r1
     5e6:	d1 2c       	mov	r13, r1
     5e8:	e1 2c       	mov	r14, r1
     5ea:	f1 2c       	mov	r15, r1
     5ec:	08 2f       	mov	r16, r24
     5ee:	20 e0       	ldi	r18, 0x00	; 0
     5f0:	30 e0       	ldi	r19, 0x00	; 0
     5f2:	45 e5       	ldi	r20, 0x55	; 85
     5f4:	50 e0       	ldi	r21, 0x00	; 0
     5f6:	6d e2       	ldi	r22, 0x2D	; 45
     5f8:	71 e0       	ldi	r23, 0x01	; 1
     5fa:	82 ee       	ldi	r24, 0xE2	; 226
     5fc:	92 e0       	ldi	r25, 0x02	; 2
     5fe:	0e d2       	rcall	.+1052   	; 0xa1c <xTaskGenericCreate>
     600:	0f 91       	pop	r16
     602:	ff 90       	pop	r15
     604:	ef 90       	pop	r14
     606:	df 90       	pop	r13
     608:	cf 90       	pop	r12
     60a:	bf 90       	pop	r11
     60c:	af 90       	pop	r10
     60e:	08 95       	ret

00000610 <SERVO_Tick>:
		default:
		break;
	}
	
	//Transitions
	switch(servo_state){
     610:	80 91 94 07 	lds	r24, 0x0794	; 0x800794 <servo_state>
     614:	88 23       	and	r24, r24
     616:	19 f0       	breq	.+6      	; 0x61e <SERVO_Tick+0xe>
     618:	81 30       	cpi	r24, 0x01	; 1
     61a:	a1 f0       	breq	.+40     	; 0x644 <SERVO_Tick+0x34>
     61c:	30 c0       	rjmp	.+96     	; 0x67e <SERVO_Tick+0x6e>
		case servo_init:
		if(left || right){
     61e:	80 91 30 07 	lds	r24, 0x0730	; 0x800730 <left>
     622:	81 11       	cpse	r24, r1
     624:	04 c0       	rjmp	.+8      	; 0x62e <SERVO_Tick+0x1e>
     626:	80 91 31 07 	lds	r24, 0x0731	; 0x800731 <right>
     62a:	88 23       	and	r24, r24
     62c:	39 f0       	breq	.+14     	; 0x63c <SERVO_Tick+0x2c>
			servo_state = drive_high;
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	80 93 94 07 	sts	0x0794, r24	; 0x800794 <servo_state>
			servo_counter = 0;
     634:	10 92 2e 07 	sts	0x072E, r1	; 0x80072e <servo_counter>
			//min_servo = 20 - max_servo;
			PORTB = 0x01;
     638:	85 b9       	out	0x05, r24	; 5
     63a:	08 95       	ret
		}
		
		else{
			PORTB = 0x00;
     63c:	15 b8       	out	0x05, r1	; 5
			servo_state = servo_init;
     63e:	10 92 94 07 	sts	0x0794, r1	; 0x800794 <servo_state>
     642:	08 95       	ret
		}
		break;
		
		case drive_high:
		if((servo_counter < max_servo) && (left || right)){
     644:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <servo_counter>
     648:	90 91 2f 07 	lds	r25, 0x072F	; 0x80072f <max_servo>
     64c:	89 17       	cp	r24, r25
     64e:	78 f4       	brcc	.+30     	; 0x66e <SERVO_Tick+0x5e>
     650:	90 91 30 07 	lds	r25, 0x0730	; 0x800730 <left>
     654:	91 11       	cpse	r25, r1
     656:	04 c0       	rjmp	.+8      	; 0x660 <SERVO_Tick+0x50>
     658:	90 91 31 07 	lds	r25, 0x0731	; 0x800731 <right>
     65c:	99 23       	and	r25, r25
     65e:	39 f0       	breq	.+14     	; 0x66e <SERVO_Tick+0x5e>
			++servo_counter;
     660:	8f 5f       	subi	r24, 0xFF	; 255
     662:	80 93 2e 07 	sts	0x072E, r24	; 0x80072e <servo_counter>
			servo_state = drive_high;
     666:	81 e0       	ldi	r24, 0x01	; 1
     668:	80 93 94 07 	sts	0x0794, r24	; 0x800794 <servo_state>
     66c:	08 95       	ret
			PORTB = 0x00;
			servo_state = drive_low;
		}
		*/
		else{
			left = 0;
     66e:	10 92 30 07 	sts	0x0730, r1	; 0x800730 <left>
			right = 0;
     672:	10 92 31 07 	sts	0x0731, r1	; 0x800731 <right>
			PORTB = 0x00;
     676:	15 b8       	out	0x05, r1	; 5
			servo_state = servo_init;
     678:	10 92 94 07 	sts	0x0794, r1	; 0x800794 <servo_state>
     67c:	08 95       	ret
		}
		
		break;
		*/
		default:
		servo_state = servo_init;
     67e:	10 92 94 07 	sts	0x0794, r1	; 0x800794 <servo_state>
     682:	08 95       	ret

00000684 <SERVOSecTask>:

//-------------------------------------------------- Start ServoMotor SM --------------------------------------------------//


void SERVO_Init(){
	servo_state = servo_init;
     684:	10 92 94 07 	sts	0x0794, r1	; 0x800794 <servo_state>
{
	SERVO_Init();
	for(;;)
	{
		SERVO_Tick();
		vTaskDelay(1);
     688:	c3 df       	rcall	.-122    	; 0x610 <SERVO_Tick>
     68a:	81 e0       	ldi	r24, 0x01	; 1
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	2a d4       	rcall	.+2132   	; 0xee4 <vTaskDelay>
     690:	fb cf       	rjmp	.-10     	; 0x688 <SERVOSecTask+0x4>

00000692 <SERVOSecPulse>:
	}
}

void SERVOSecPulse(unsigned portBASE_TYPE Priority)
{
     692:	af 92       	push	r10
     694:	bf 92       	push	r11
     696:	cf 92       	push	r12
     698:	df 92       	push	r13
     69a:	ef 92       	push	r14
     69c:	ff 92       	push	r15
     69e:	0f 93       	push	r16
	xTaskCreate(SERVOSecTask, (signed portCHAR *)"SERVOSecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
     6a0:	a1 2c       	mov	r10, r1
     6a2:	b1 2c       	mov	r11, r1
     6a4:	c1 2c       	mov	r12, r1
     6a6:	d1 2c       	mov	r13, r1
     6a8:	e1 2c       	mov	r14, r1
     6aa:	f1 2c       	mov	r15, r1
     6ac:	08 2f       	mov	r16, r24
     6ae:	20 e0       	ldi	r18, 0x00	; 0
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	45 e5       	ldi	r20, 0x55	; 85
     6b4:	50 e0       	ldi	r21, 0x00	; 0
     6b6:	6c e3       	ldi	r22, 0x3C	; 60
     6b8:	71 e0       	ldi	r23, 0x01	; 1
     6ba:	82 e4       	ldi	r24, 0x42	; 66
     6bc:	93 e0       	ldi	r25, 0x03	; 3
     6be:	ae d1       	rcall	.+860    	; 0xa1c <xTaskGenericCreate>
}
     6c0:	0f 91       	pop	r16
     6c2:	ff 90       	pop	r15
     6c4:	ef 90       	pop	r14
     6c6:	df 90       	pop	r13
     6c8:	cf 90       	pop	r12
     6ca:	bf 90       	pop	r11
     6cc:	af 90       	pop	r10
     6ce:	08 95       	ret

000006d0 <main>:


//-------------------------------------------------- End ServoMotor SM --------------------------------------------------//
int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
     6d0:	11 b8       	out	0x01, r1	; 1
     6d2:	8f ef       	ldi	r24, 0xFF	; 255
     6d4:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
     6d6:	84 b9       	out	0x04, r24	; 4
     6d8:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF; PORTC = 0x00;
     6da:	87 b9       	out	0x07, r24	; 7
     6dc:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00;
     6de:	8a b9       	out	0x0a, r24	; 10
	adc_init();
	//Start Tasks
	JOYSecPulse(1);
     6e0:	1b b8       	out	0x0b, r1	; 11
	STEERINGSecPulse(1);
     6e2:	b1 dd       	rcall	.-1182   	; 0x246 <adc_init>
	ForwardSecPulse(1);
	ReverseSecPulse(1);
     6e4:	81 e0       	ldi	r24, 0x01	; 1
     6e6:	31 de       	rcall	.-926    	; 0x34a <JOYSecPulse>
	SERVOSecPulse(1);
     6e8:	81 e0       	ldi	r24, 0x01	; 1
     6ea:	83 de       	rcall	.-762    	; 0x3f2 <STEERINGSecPulse>
     6ec:	81 e0       	ldi	r24, 0x01	; 1
	//RunSchedular
	vTaskStartScheduler();
     6ee:	f8 de       	rcall	.-528    	; 0x4e0 <ForwardSecPulse>
     6f0:	81 e0       	ldi	r24, 0x01	; 1
	
	return 0;
     6f2:	6f df       	rcall	.-290    	; 0x5d2 <ReverseSecPulse>
     6f4:	81 e0       	ldi	r24, 0x01	; 1
     6f6:	cd df       	rcall	.-102    	; 0x692 <SERVOSecPulse>
     6f8:	84 d2       	rcall	.+1288   	; 0xc02 <vTaskStartScheduler>
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	08 95       	ret

00000700 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     700:	31 e1       	ldi	r19, 0x11	; 17
     702:	fc 01       	movw	r30, r24
     704:	30 83       	st	Z, r19
     706:	31 97       	sbiw	r30, 0x01	; 1
     708:	22 e2       	ldi	r18, 0x22	; 34
     70a:	20 83       	st	Z, r18
     70c:	31 97       	sbiw	r30, 0x01	; 1
     70e:	a3 e3       	ldi	r26, 0x33	; 51
     710:	a0 83       	st	Z, r26
     712:	31 97       	sbiw	r30, 0x01	; 1
     714:	60 83       	st	Z, r22
     716:	31 97       	sbiw	r30, 0x01	; 1
     718:	70 83       	st	Z, r23
     71a:	31 97       	sbiw	r30, 0x01	; 1
     71c:	10 82       	st	Z, r1
     71e:	31 97       	sbiw	r30, 0x01	; 1
     720:	60 e8       	ldi	r22, 0x80	; 128
     722:	60 83       	st	Z, r22
     724:	31 97       	sbiw	r30, 0x01	; 1
     726:	10 82       	st	Z, r1
     728:	31 97       	sbiw	r30, 0x01	; 1
     72a:	62 e0       	ldi	r22, 0x02	; 2
     72c:	60 83       	st	Z, r22
     72e:	31 97       	sbiw	r30, 0x01	; 1
     730:	63 e0       	ldi	r22, 0x03	; 3
     732:	60 83       	st	Z, r22
     734:	31 97       	sbiw	r30, 0x01	; 1
     736:	64 e0       	ldi	r22, 0x04	; 4
     738:	60 83       	st	Z, r22
     73a:	31 97       	sbiw	r30, 0x01	; 1
     73c:	65 e0       	ldi	r22, 0x05	; 5
     73e:	60 83       	st	Z, r22
     740:	31 97       	sbiw	r30, 0x01	; 1
     742:	66 e0       	ldi	r22, 0x06	; 6
     744:	60 83       	st	Z, r22
     746:	31 97       	sbiw	r30, 0x01	; 1
     748:	67 e0       	ldi	r22, 0x07	; 7
     74a:	60 83       	st	Z, r22
     74c:	31 97       	sbiw	r30, 0x01	; 1
     74e:	68 e0       	ldi	r22, 0x08	; 8
     750:	60 83       	st	Z, r22
     752:	31 97       	sbiw	r30, 0x01	; 1
     754:	69 e0       	ldi	r22, 0x09	; 9
     756:	60 83       	st	Z, r22
     758:	31 97       	sbiw	r30, 0x01	; 1
     75a:	60 e1       	ldi	r22, 0x10	; 16
     75c:	60 83       	st	Z, r22
     75e:	31 97       	sbiw	r30, 0x01	; 1
     760:	30 83       	st	Z, r19
     762:	31 97       	sbiw	r30, 0x01	; 1
     764:	32 e1       	ldi	r19, 0x12	; 18
     766:	30 83       	st	Z, r19
     768:	31 97       	sbiw	r30, 0x01	; 1
     76a:	33 e1       	ldi	r19, 0x13	; 19
     76c:	30 83       	st	Z, r19
     76e:	31 97       	sbiw	r30, 0x01	; 1
     770:	34 e1       	ldi	r19, 0x14	; 20
     772:	30 83       	st	Z, r19
     774:	31 97       	sbiw	r30, 0x01	; 1
     776:	35 e1       	ldi	r19, 0x15	; 21
     778:	30 83       	st	Z, r19
     77a:	31 97       	sbiw	r30, 0x01	; 1
     77c:	36 e1       	ldi	r19, 0x16	; 22
     77e:	30 83       	st	Z, r19
     780:	31 97       	sbiw	r30, 0x01	; 1
     782:	37 e1       	ldi	r19, 0x17	; 23
     784:	30 83       	st	Z, r19
     786:	31 97       	sbiw	r30, 0x01	; 1
     788:	38 e1       	ldi	r19, 0x18	; 24
     78a:	30 83       	st	Z, r19
     78c:	31 97       	sbiw	r30, 0x01	; 1
     78e:	39 e1       	ldi	r19, 0x19	; 25
     790:	30 83       	st	Z, r19
     792:	31 97       	sbiw	r30, 0x01	; 1
     794:	30 e2       	ldi	r19, 0x20	; 32
     796:	30 83       	st	Z, r19
     798:	31 97       	sbiw	r30, 0x01	; 1
     79a:	31 e2       	ldi	r19, 0x21	; 33
     79c:	30 83       	st	Z, r19
     79e:	31 97       	sbiw	r30, 0x01	; 1
     7a0:	20 83       	st	Z, r18
     7a2:	31 97       	sbiw	r30, 0x01	; 1
     7a4:	23 e2       	ldi	r18, 0x23	; 35
     7a6:	20 83       	st	Z, r18
     7a8:	31 97       	sbiw	r30, 0x01	; 1
     7aa:	40 83       	st	Z, r20
     7ac:	31 97       	sbiw	r30, 0x01	; 1
     7ae:	50 83       	st	Z, r21
     7b0:	31 97       	sbiw	r30, 0x01	; 1
     7b2:	26 e2       	ldi	r18, 0x26	; 38
     7b4:	20 83       	st	Z, r18
     7b6:	31 97       	sbiw	r30, 0x01	; 1
     7b8:	27 e2       	ldi	r18, 0x27	; 39
     7ba:	20 83       	st	Z, r18
     7bc:	31 97       	sbiw	r30, 0x01	; 1
     7be:	28 e2       	ldi	r18, 0x28	; 40
     7c0:	20 83       	st	Z, r18
     7c2:	31 97       	sbiw	r30, 0x01	; 1
     7c4:	29 e2       	ldi	r18, 0x29	; 41
     7c6:	20 83       	st	Z, r18
     7c8:	31 97       	sbiw	r30, 0x01	; 1
     7ca:	20 e3       	ldi	r18, 0x30	; 48
     7cc:	20 83       	st	Z, r18
     7ce:	31 97       	sbiw	r30, 0x01	; 1
     7d0:	21 e3       	ldi	r18, 0x31	; 49
     7d2:	20 83       	st	Z, r18
     7d4:	86 97       	sbiw	r24, 0x26	; 38
     7d6:	08 95       	ret

000007d8 <xPortStartScheduler>:
     7d8:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     7dc:	8c e7       	ldi	r24, 0x7C	; 124
     7de:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     7e2:	8b e0       	ldi	r24, 0x0B	; 11
     7e4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     7e8:	ef e6       	ldi	r30, 0x6F	; 111
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	80 81       	ld	r24, Z
     7ee:	82 60       	ori	r24, 0x02	; 2
     7f0:	80 83       	st	Z, r24
     7f2:	a0 91 91 07 	lds	r26, 0x0791	; 0x800791 <pxCurrentTCB>
     7f6:	b0 91 92 07 	lds	r27, 0x0792	; 0x800792 <pxCurrentTCB+0x1>
     7fa:	cd 91       	ld	r28, X+
     7fc:	cd bf       	out	0x3d, r28	; 61
     7fe:	dd 91       	ld	r29, X+
     800:	de bf       	out	0x3e, r29	; 62
     802:	ff 91       	pop	r31
     804:	ef 91       	pop	r30
     806:	df 91       	pop	r29
     808:	cf 91       	pop	r28
     80a:	bf 91       	pop	r27
     80c:	af 91       	pop	r26
     80e:	9f 91       	pop	r25
     810:	8f 91       	pop	r24
     812:	7f 91       	pop	r23
     814:	6f 91       	pop	r22
     816:	5f 91       	pop	r21
     818:	4f 91       	pop	r20
     81a:	3f 91       	pop	r19
     81c:	2f 91       	pop	r18
     81e:	1f 91       	pop	r17
     820:	0f 91       	pop	r16
     822:	ff 90       	pop	r15
     824:	ef 90       	pop	r14
     826:	df 90       	pop	r13
     828:	cf 90       	pop	r12
     82a:	bf 90       	pop	r11
     82c:	af 90       	pop	r10
     82e:	9f 90       	pop	r9
     830:	8f 90       	pop	r8
     832:	7f 90       	pop	r7
     834:	6f 90       	pop	r6
     836:	5f 90       	pop	r5
     838:	4f 90       	pop	r4
     83a:	3f 90       	pop	r3
     83c:	2f 90       	pop	r2
     83e:	1f 90       	pop	r1
     840:	0f 90       	pop	r0
     842:	0f be       	out	0x3f, r0	; 63
     844:	0f 90       	pop	r0
     846:	08 95       	ret
     848:	81 e0       	ldi	r24, 0x01	; 1
     84a:	08 95       	ret

0000084c <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     84c:	0f 92       	push	r0
     84e:	0f b6       	in	r0, 0x3f	; 63
     850:	f8 94       	cli
     852:	0f 92       	push	r0
     854:	1f 92       	push	r1
     856:	11 24       	eor	r1, r1
     858:	2f 92       	push	r2
     85a:	3f 92       	push	r3
     85c:	4f 92       	push	r4
     85e:	5f 92       	push	r5
     860:	6f 92       	push	r6
     862:	7f 92       	push	r7
     864:	8f 92       	push	r8
     866:	9f 92       	push	r9
     868:	af 92       	push	r10
     86a:	bf 92       	push	r11
     86c:	cf 92       	push	r12
     86e:	df 92       	push	r13
     870:	ef 92       	push	r14
     872:	ff 92       	push	r15
     874:	0f 93       	push	r16
     876:	1f 93       	push	r17
     878:	2f 93       	push	r18
     87a:	3f 93       	push	r19
     87c:	4f 93       	push	r20
     87e:	5f 93       	push	r21
     880:	6f 93       	push	r22
     882:	7f 93       	push	r23
     884:	8f 93       	push	r24
     886:	9f 93       	push	r25
     888:	af 93       	push	r26
     88a:	bf 93       	push	r27
     88c:	cf 93       	push	r28
     88e:	df 93       	push	r29
     890:	ef 93       	push	r30
     892:	ff 93       	push	r31
     894:	a0 91 91 07 	lds	r26, 0x0791	; 0x800791 <pxCurrentTCB>
     898:	b0 91 92 07 	lds	r27, 0x0792	; 0x800792 <pxCurrentTCB+0x1>
     89c:	0d b6       	in	r0, 0x3d	; 61
     89e:	0d 92       	st	X+, r0
     8a0:	0e b6       	in	r0, 0x3e	; 62
	vTaskSwitchContext();
     8a2:	0d 92       	st	X+, r0
	portRESTORE_CONTEXT();
     8a4:	70 d3       	rcall	.+1760   	; 0xf86 <vTaskSwitchContext>
     8a6:	a0 91 91 07 	lds	r26, 0x0791	; 0x800791 <pxCurrentTCB>
     8aa:	b0 91 92 07 	lds	r27, 0x0792	; 0x800792 <pxCurrentTCB+0x1>
     8ae:	cd 91       	ld	r28, X+
     8b0:	cd bf       	out	0x3d, r28	; 61
     8b2:	dd 91       	ld	r29, X+
     8b4:	de bf       	out	0x3e, r29	; 62
     8b6:	ff 91       	pop	r31
     8b8:	ef 91       	pop	r30
     8ba:	df 91       	pop	r29
     8bc:	cf 91       	pop	r28
     8be:	bf 91       	pop	r27
     8c0:	af 91       	pop	r26
     8c2:	9f 91       	pop	r25
     8c4:	8f 91       	pop	r24
     8c6:	7f 91       	pop	r23
     8c8:	6f 91       	pop	r22
     8ca:	5f 91       	pop	r21
     8cc:	4f 91       	pop	r20
     8ce:	3f 91       	pop	r19
     8d0:	2f 91       	pop	r18
     8d2:	1f 91       	pop	r17
     8d4:	0f 91       	pop	r16
     8d6:	ff 90       	pop	r15
     8d8:	ef 90       	pop	r14
     8da:	df 90       	pop	r13
     8dc:	cf 90       	pop	r12
     8de:	bf 90       	pop	r11
     8e0:	af 90       	pop	r10
     8e2:	9f 90       	pop	r9
     8e4:	8f 90       	pop	r8
     8e6:	7f 90       	pop	r7
     8e8:	6f 90       	pop	r6
     8ea:	5f 90       	pop	r5
     8ec:	4f 90       	pop	r4
     8ee:	3f 90       	pop	r3
     8f0:	2f 90       	pop	r2
     8f2:	1f 90       	pop	r1
     8f4:	0f 90       	pop	r0
     8f6:	0f be       	out	0x3f, r0	; 63

	asm volatile ( "ret" );
     8f8:	0f 90       	pop	r0
     8fa:	08 95       	ret

000008fc <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     8fc:	0f 92       	push	r0
     8fe:	0f b6       	in	r0, 0x3f	; 63
     900:	f8 94       	cli
     902:	0f 92       	push	r0
     904:	1f 92       	push	r1
     906:	11 24       	eor	r1, r1
     908:	2f 92       	push	r2
     90a:	3f 92       	push	r3
     90c:	4f 92       	push	r4
     90e:	5f 92       	push	r5
     910:	6f 92       	push	r6
     912:	7f 92       	push	r7
     914:	8f 92       	push	r8
     916:	9f 92       	push	r9
     918:	af 92       	push	r10
     91a:	bf 92       	push	r11
     91c:	cf 92       	push	r12
     91e:	df 92       	push	r13
     920:	ef 92       	push	r14
     922:	ff 92       	push	r15
     924:	0f 93       	push	r16
     926:	1f 93       	push	r17
     928:	2f 93       	push	r18
     92a:	3f 93       	push	r19
     92c:	4f 93       	push	r20
     92e:	5f 93       	push	r21
     930:	6f 93       	push	r22
     932:	7f 93       	push	r23
     934:	8f 93       	push	r24
     936:	9f 93       	push	r25
     938:	af 93       	push	r26
     93a:	bf 93       	push	r27
     93c:	cf 93       	push	r28
     93e:	df 93       	push	r29
     940:	ef 93       	push	r30
     942:	ff 93       	push	r31
     944:	a0 91 91 07 	lds	r26, 0x0791	; 0x800791 <pxCurrentTCB>
     948:	b0 91 92 07 	lds	r27, 0x0792	; 0x800792 <pxCurrentTCB+0x1>
     94c:	0d b6       	in	r0, 0x3d	; 61
     94e:	0d 92       	st	X+, r0
     950:	0e b6       	in	r0, 0x3e	; 62
	vTaskIncrementTick();
	vTaskSwitchContext();
     952:	0d 92       	st	X+, r0
     954:	85 d1       	rcall	.+778    	; 0xc60 <vTaskIncrementTick>
	portRESTORE_CONTEXT();
     956:	17 d3       	rcall	.+1582   	; 0xf86 <vTaskSwitchContext>
     958:	a0 91 91 07 	lds	r26, 0x0791	; 0x800791 <pxCurrentTCB>
     95c:	b0 91 92 07 	lds	r27, 0x0792	; 0x800792 <pxCurrentTCB+0x1>
     960:	cd 91       	ld	r28, X+
     962:	cd bf       	out	0x3d, r28	; 61
     964:	dd 91       	ld	r29, X+
     966:	de bf       	out	0x3e, r29	; 62
     968:	ff 91       	pop	r31
     96a:	ef 91       	pop	r30
     96c:	df 91       	pop	r29
     96e:	cf 91       	pop	r28
     970:	bf 91       	pop	r27
     972:	af 91       	pop	r26
     974:	9f 91       	pop	r25
     976:	8f 91       	pop	r24
     978:	7f 91       	pop	r23
     97a:	6f 91       	pop	r22
     97c:	5f 91       	pop	r21
     97e:	4f 91       	pop	r20
     980:	3f 91       	pop	r19
     982:	2f 91       	pop	r18
     984:	1f 91       	pop	r17
     986:	0f 91       	pop	r16
     988:	ff 90       	pop	r15
     98a:	ef 90       	pop	r14
     98c:	df 90       	pop	r13
     98e:	cf 90       	pop	r12
     990:	bf 90       	pop	r11
     992:	af 90       	pop	r10
     994:	9f 90       	pop	r9
     996:	8f 90       	pop	r8
     998:	7f 90       	pop	r7
     99a:	6f 90       	pop	r6
     99c:	5f 90       	pop	r5
     99e:	4f 90       	pop	r4
     9a0:	3f 90       	pop	r3
     9a2:	2f 90       	pop	r2
     9a4:	1f 90       	pop	r1
     9a6:	0f 90       	pop	r0
     9a8:	0f be       	out	0x3f, r0	; 63

	asm volatile ( "ret" );
     9aa:	0f 90       	pop	r0
     9ac:	08 95       	ret

000009ae <__vector_13>:
}
     9ae:	a6 df       	rcall	.-180    	; 0x8fc <vPortYieldFromTick>
     9b0:	18 95       	reti

000009b2 <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
     9b2:	cf 93       	push	r28
     9b4:	df 93       	push	r29
     9b6:	ec 01       	movw	r28, r24
     9b8:	e0 91 91 07 	lds	r30, 0x0791	; 0x800791 <pxCurrentTCB>
     9bc:	f0 91 92 07 	lds	r31, 0x0792	; 0x800792 <pxCurrentTCB+0x1>
     9c0:	93 83       	std	Z+3, r25	; 0x03
     9c2:	82 83       	std	Z+2, r24	; 0x02
     9c4:	80 91 41 07 	lds	r24, 0x0741	; 0x800741 <xTickCount>
     9c8:	90 91 42 07 	lds	r25, 0x0742	; 0x800742 <xTickCount+0x1>
     9cc:	c8 17       	cp	r28, r24
     9ce:	d9 07       	cpc	r29, r25
     9d0:	60 f4       	brcc	.+24     	; 0x9ea <prvAddCurrentTaskToDelayedList+0x38>
     9d2:	60 91 91 07 	lds	r22, 0x0791	; 0x800791 <pxCurrentTCB>
     9d6:	70 91 92 07 	lds	r23, 0x0792	; 0x800792 <pxCurrentTCB+0x1>
     9da:	80 91 57 07 	lds	r24, 0x0757	; 0x800757 <pxOverflowDelayedTaskList>
     9de:	90 91 58 07 	lds	r25, 0x0758	; 0x800758 <pxOverflowDelayedTaskList+0x1>
     9e2:	6e 5f       	subi	r22, 0xFE	; 254
     9e4:	7f 4f       	sbci	r23, 0xFF	; 255
     9e6:	ce db       	rcall	.-2148   	; 0x184 <vListInsert>
     9e8:	16 c0       	rjmp	.+44     	; 0xa16 <prvAddCurrentTaskToDelayedList+0x64>
     9ea:	60 91 91 07 	lds	r22, 0x0791	; 0x800791 <pxCurrentTCB>
     9ee:	70 91 92 07 	lds	r23, 0x0792	; 0x800792 <pxCurrentTCB+0x1>
     9f2:	80 91 59 07 	lds	r24, 0x0759	; 0x800759 <pxDelayedTaskList>
     9f6:	90 91 5a 07 	lds	r25, 0x075A	; 0x80075a <pxDelayedTaskList+0x1>
     9fa:	6e 5f       	subi	r22, 0xFE	; 254
     9fc:	7f 4f       	sbci	r23, 0xFF	; 255
     9fe:	c2 db       	rcall	.-2172   	; 0x184 <vListInsert>
     a00:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <xNextTaskUnblockTime>
     a04:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <xNextTaskUnblockTime+0x1>
     a08:	c8 17       	cp	r28, r24
     a0a:	d9 07       	cpc	r29, r25
     a0c:	20 f4       	brcc	.+8      	; 0xa16 <prvAddCurrentTaskToDelayedList+0x64>
     a0e:	d0 93 02 01 	sts	0x0102, r29	; 0x800102 <xNextTaskUnblockTime+0x1>
     a12:	c0 93 01 01 	sts	0x0101, r28	; 0x800101 <xNextTaskUnblockTime>
     a16:	df 91       	pop	r29
     a18:	cf 91       	pop	r28
     a1a:	08 95       	ret

00000a1c <xTaskGenericCreate>:
     a1c:	4f 92       	push	r4
     a1e:	5f 92       	push	r5
     a20:	6f 92       	push	r6
     a22:	7f 92       	push	r7
     a24:	8f 92       	push	r8
     a26:	9f 92       	push	r9
     a28:	af 92       	push	r10
     a2a:	bf 92       	push	r11
     a2c:	cf 92       	push	r12
     a2e:	df 92       	push	r13
     a30:	ef 92       	push	r14
     a32:	ff 92       	push	r15
     a34:	0f 93       	push	r16
     a36:	1f 93       	push	r17
     a38:	cf 93       	push	r28
     a3a:	df 93       	push	r29
     a3c:	5c 01       	movw	r10, r24
     a3e:	4b 01       	movw	r8, r22
     a40:	3a 01       	movw	r6, r20
     a42:	29 01       	movw	r4, r18
     a44:	81 e2       	ldi	r24, 0x21	; 33
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	3f db       	rcall	.-2434   	; 0xc8 <pvPortMalloc>
     a4a:	ec 01       	movw	r28, r24
     a4c:	89 2b       	or	r24, r25
     a4e:	09 f4       	brne	.+2      	; 0xa52 <xTaskGenericCreate+0x36>
     a50:	c6 c0       	rjmp	.+396    	; 0xbde <xTaskGenericCreate+0x1c2>
     a52:	c1 14       	cp	r12, r1
     a54:	d1 04       	cpc	r13, r1
     a56:	09 f0       	breq	.+2      	; 0xa5a <xTaskGenericCreate+0x3e>
     a58:	be c0       	rjmp	.+380    	; 0xbd6 <xTaskGenericCreate+0x1ba>
     a5a:	c3 01       	movw	r24, r6
     a5c:	35 db       	rcall	.-2454   	; 0xc8 <pvPortMalloc>
     a5e:	98 8f       	std	Y+24, r25	; 0x18
     a60:	8f 8b       	std	Y+23, r24	; 0x17
     a62:	00 97       	sbiw	r24, 0x00	; 0
     a64:	19 f4       	brne	.+6      	; 0xa6c <xTaskGenericCreate+0x50>
     a66:	ce 01       	movw	r24, r28
     a68:	53 db       	rcall	.-2394   	; 0x110 <vPortFree>
     a6a:	b9 c0       	rjmp	.+370    	; 0xbde <xTaskGenericCreate+0x1c2>
     a6c:	a3 01       	movw	r20, r6
     a6e:	65 ea       	ldi	r22, 0xA5	; 165
     a70:	70 e0       	ldi	r23, 0x00	; 0
     a72:	f5 d2       	rcall	.+1514   	; 0x105e <memset>
     a74:	93 01       	movw	r18, r6
     a76:	21 50       	subi	r18, 0x01	; 1
     a78:	31 09       	sbc	r19, r1
     a7a:	8f 89       	ldd	r24, Y+23	; 0x17
     a7c:	98 8d       	ldd	r25, Y+24	; 0x18
     a7e:	3c 01       	movw	r6, r24
     a80:	62 0e       	add	r6, r18
     a82:	73 1e       	adc	r7, r19
     a84:	48 e0       	ldi	r20, 0x08	; 8
     a86:	50 e0       	ldi	r21, 0x00	; 0
     a88:	b4 01       	movw	r22, r8
     a8a:	ce 01       	movw	r24, r28
     a8c:	49 96       	adiw	r24, 0x19	; 25
     a8e:	ee d2       	rcall	.+1500   	; 0x106c <strncpy>
     a90:	18 a2       	std	Y+32, r1	; 0x20
     a92:	10 2f       	mov	r17, r16
     a94:	04 30       	cpi	r16, 0x04	; 4
     a96:	08 f0       	brcs	.+2      	; 0xa9a <xTaskGenericCreate+0x7e>
     a98:	13 e0       	ldi	r17, 0x03	; 3
     a9a:	1e 8b       	std	Y+22, r17	; 0x16
     a9c:	6e 01       	movw	r12, r28
     a9e:	82 e0       	ldi	r24, 0x02	; 2
     aa0:	c8 0e       	add	r12, r24
     aa2:	d1 1c       	adc	r13, r1
     aa4:	c6 01       	movw	r24, r12
     aa6:	43 db       	rcall	.-2426   	; 0x12e <vListInitialiseItem>
     aa8:	ce 01       	movw	r24, r28
     aaa:	0c 96       	adiw	r24, 0x0c	; 12
     aac:	40 db       	rcall	.-2432   	; 0x12e <vListInitialiseItem>
     aae:	d9 87       	std	Y+9, r29	; 0x09
     ab0:	c8 87       	std	Y+8, r28	; 0x08
     ab2:	84 e0       	ldi	r24, 0x04	; 4
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	81 1b       	sub	r24, r17
     ab8:	91 09       	sbc	r25, r1
     aba:	9d 87       	std	Y+13, r25	; 0x0d
     abc:	8c 87       	std	Y+12, r24	; 0x0c
     abe:	db 8b       	std	Y+19, r29	; 0x13
     ac0:	ca 8b       	std	Y+18, r28	; 0x12
     ac2:	a2 01       	movw	r20, r4
     ac4:	b5 01       	movw	r22, r10
     ac6:	c3 01       	movw	r24, r6
     ac8:	1b de       	rcall	.-970    	; 0x700 <pxPortInitialiseStack>
     aca:	99 83       	std	Y+1, r25	; 0x01
     acc:	88 83       	st	Y, r24
     ace:	e1 14       	cp	r14, r1
     ad0:	f1 04       	cpc	r15, r1
     ad2:	19 f0       	breq	.+6      	; 0xada <xTaskGenericCreate+0xbe>
     ad4:	f7 01       	movw	r30, r14
     ad6:	d1 83       	std	Z+1, r29	; 0x01
     ad8:	c0 83       	st	Z, r28
     ada:	0f b6       	in	r0, 0x3f	; 63
     adc:	f8 94       	cli
     ade:	0f 92       	push	r0
     ae0:	80 91 43 07 	lds	r24, 0x0743	; 0x800743 <uxCurrentNumberOfTasks>
     ae4:	8f 5f       	subi	r24, 0xFF	; 255
     ae6:	80 93 43 07 	sts	0x0743, r24	; 0x800743 <uxCurrentNumberOfTasks>
     aea:	80 91 91 07 	lds	r24, 0x0791	; 0x800791 <pxCurrentTCB>
     aee:	90 91 92 07 	lds	r25, 0x0792	; 0x800792 <pxCurrentTCB+0x1>
     af2:	89 2b       	or	r24, r25
     af4:	69 f5       	brne	.+90     	; 0xb50 <xTaskGenericCreate+0x134>
     af6:	d0 93 92 07 	sts	0x0792, r29	; 0x800792 <pxCurrentTCB+0x1>
     afa:	c0 93 91 07 	sts	0x0791, r28	; 0x800791 <pxCurrentTCB>
     afe:	80 91 43 07 	lds	r24, 0x0743	; 0x800743 <uxCurrentNumberOfTasks>
     b02:	81 30       	cpi	r24, 0x01	; 1
     b04:	a1 f5       	brne	.+104    	; 0xb6e <xTaskGenericCreate+0x152>
     b06:	8d e6       	ldi	r24, 0x6D	; 109
     b08:	97 e0       	ldi	r25, 0x07	; 7
     b0a:	03 db       	rcall	.-2554   	; 0x112 <vListInitialise>
     b0c:	86 e7       	ldi	r24, 0x76	; 118
     b0e:	97 e0       	ldi	r25, 0x07	; 7
     b10:	00 db       	rcall	.-2560   	; 0x112 <vListInitialise>
     b12:	8f e7       	ldi	r24, 0x7F	; 127
     b14:	97 e0       	ldi	r25, 0x07	; 7
     b16:	fd da       	rcall	.-2566   	; 0x112 <vListInitialise>
     b18:	88 e8       	ldi	r24, 0x88	; 136
     b1a:	97 e0       	ldi	r25, 0x07	; 7
     b1c:	fa da       	rcall	.-2572   	; 0x112 <vListInitialise>
     b1e:	84 e6       	ldi	r24, 0x64	; 100
     b20:	97 e0       	ldi	r25, 0x07	; 7
     b22:	f7 da       	rcall	.-2578   	; 0x112 <vListInitialise>
     b24:	8b e5       	ldi	r24, 0x5B	; 91
     b26:	97 e0       	ldi	r25, 0x07	; 7
     b28:	f4 da       	rcall	.-2584   	; 0x112 <vListInitialise>
     b2a:	8e e4       	ldi	r24, 0x4E	; 78
     b2c:	97 e0       	ldi	r25, 0x07	; 7
     b2e:	f1 da       	rcall	.-2590   	; 0x112 <vListInitialise>
     b30:	85 e4       	ldi	r24, 0x45	; 69
     b32:	97 e0       	ldi	r25, 0x07	; 7
     b34:	ee da       	rcall	.-2596   	; 0x112 <vListInitialise>
     b36:	84 e6       	ldi	r24, 0x64	; 100
     b38:	97 e0       	ldi	r25, 0x07	; 7
     b3a:	90 93 5a 07 	sts	0x075A, r25	; 0x80075a <pxDelayedTaskList+0x1>
     b3e:	80 93 59 07 	sts	0x0759, r24	; 0x800759 <pxDelayedTaskList>
     b42:	8b e5       	ldi	r24, 0x5B	; 91
     b44:	97 e0       	ldi	r25, 0x07	; 7
     b46:	90 93 58 07 	sts	0x0758, r25	; 0x800758 <pxOverflowDelayedTaskList+0x1>
     b4a:	80 93 57 07 	sts	0x0757, r24	; 0x800757 <pxOverflowDelayedTaskList>
     b4e:	0f c0       	rjmp	.+30     	; 0xb6e <xTaskGenericCreate+0x152>
     b50:	80 91 3e 07 	lds	r24, 0x073E	; 0x80073e <xSchedulerRunning>
     b54:	81 11       	cpse	r24, r1
     b56:	0b c0       	rjmp	.+22     	; 0xb6e <xTaskGenericCreate+0x152>
     b58:	e0 91 91 07 	lds	r30, 0x0791	; 0x800791 <pxCurrentTCB>
     b5c:	f0 91 92 07 	lds	r31, 0x0792	; 0x800792 <pxCurrentTCB+0x1>
     b60:	86 89       	ldd	r24, Z+22	; 0x16
     b62:	08 17       	cp	r16, r24
     b64:	20 f0       	brcs	.+8      	; 0xb6e <xTaskGenericCreate+0x152>
     b66:	d0 93 92 07 	sts	0x0792, r29	; 0x800792 <pxCurrentTCB+0x1>
     b6a:	c0 93 91 07 	sts	0x0791, r28	; 0x800791 <pxCurrentTCB>
     b6e:	8e 89       	ldd	r24, Y+22	; 0x16
     b70:	90 91 40 07 	lds	r25, 0x0740	; 0x800740 <uxTopUsedPriority>
     b74:	98 17       	cp	r25, r24
     b76:	10 f4       	brcc	.+4      	; 0xb7c <xTaskGenericCreate+0x160>
     b78:	80 93 40 07 	sts	0x0740, r24	; 0x800740 <uxTopUsedPriority>
     b7c:	90 91 39 07 	lds	r25, 0x0739	; 0x800739 <uxTaskNumber>
     b80:	9f 5f       	subi	r25, 0xFF	; 255
     b82:	90 93 39 07 	sts	0x0739, r25	; 0x800739 <uxTaskNumber>
     b86:	90 91 3f 07 	lds	r25, 0x073F	; 0x80073f <uxTopReadyPriority>
     b8a:	98 17       	cp	r25, r24
     b8c:	10 f4       	brcc	.+4      	; 0xb92 <xTaskGenericCreate+0x176>
     b8e:	80 93 3f 07 	sts	0x073F, r24	; 0x80073f <uxTopReadyPriority>
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	9c 01       	movw	r18, r24
     b96:	22 0f       	add	r18, r18
     b98:	33 1f       	adc	r19, r19
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	22 0f       	add	r18, r18
     ba0:	33 1f       	adc	r19, r19
     ba2:	82 0f       	add	r24, r18
     ba4:	93 1f       	adc	r25, r19
     ba6:	b6 01       	movw	r22, r12
     ba8:	83 59       	subi	r24, 0x93	; 147
     baa:	98 4f       	sbci	r25, 0xF8	; 248
     bac:	c4 da       	rcall	.-2680   	; 0x136 <vListInsertEnd>
     bae:	0f 90       	pop	r0
     bb0:	0f be       	out	0x3f, r0	; 63
     bb2:	80 91 3e 07 	lds	r24, 0x073E	; 0x80073e <xSchedulerRunning>
     bb6:	88 23       	and	r24, r24
     bb8:	51 f0       	breq	.+20     	; 0xbce <xTaskGenericCreate+0x1b2>
     bba:	e0 91 91 07 	lds	r30, 0x0791	; 0x800791 <pxCurrentTCB>
     bbe:	f0 91 92 07 	lds	r31, 0x0792	; 0x800792 <pxCurrentTCB+0x1>
     bc2:	86 89       	ldd	r24, Z+22	; 0x16
     bc4:	80 17       	cp	r24, r16
     bc6:	28 f4       	brcc	.+10     	; 0xbd2 <xTaskGenericCreate+0x1b6>
     bc8:	41 de       	rcall	.-894    	; 0x84c <vPortYield>
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	09 c0       	rjmp	.+18     	; 0xbe0 <xTaskGenericCreate+0x1c4>
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	07 c0       	rjmp	.+14     	; 0xbe0 <xTaskGenericCreate+0x1c4>
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	05 c0       	rjmp	.+10     	; 0xbe0 <xTaskGenericCreate+0x1c4>
     bd6:	d8 8e       	std	Y+24, r13	; 0x18
     bd8:	cf 8a       	std	Y+23, r12	; 0x17
     bda:	c6 01       	movw	r24, r12
     bdc:	47 cf       	rjmp	.-370    	; 0xa6c <xTaskGenericCreate+0x50>
     bde:	8f ef       	ldi	r24, 0xFF	; 255
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
     be4:	1f 91       	pop	r17
     be6:	0f 91       	pop	r16
     be8:	ff 90       	pop	r15
     bea:	ef 90       	pop	r14
     bec:	df 90       	pop	r13
     bee:	cf 90       	pop	r12
     bf0:	bf 90       	pop	r11
     bf2:	af 90       	pop	r10
     bf4:	9f 90       	pop	r9
     bf6:	8f 90       	pop	r8
     bf8:	7f 90       	pop	r7
     bfa:	6f 90       	pop	r6
     bfc:	5f 90       	pop	r5
     bfe:	4f 90       	pop	r4
     c00:	08 95       	ret

00000c02 <vTaskStartScheduler>:
     c02:	af 92       	push	r10
     c04:	bf 92       	push	r11
     c06:	cf 92       	push	r12
     c08:	df 92       	push	r13
     c0a:	ef 92       	push	r14
     c0c:	ff 92       	push	r15
     c0e:	0f 93       	push	r16
     c10:	a1 2c       	mov	r10, r1
     c12:	b1 2c       	mov	r11, r1
     c14:	c1 2c       	mov	r12, r1
     c16:	d1 2c       	mov	r13, r1
     c18:	e1 2c       	mov	r14, r1
     c1a:	f1 2c       	mov	r15, r1
     c1c:	00 e0       	ldi	r16, 0x00	; 0
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	45 e5       	ldi	r20, 0x55	; 85
     c24:	50 e0       	ldi	r21, 0x00	; 0
     c26:	69 e4       	ldi	r22, 0x49	; 73
     c28:	71 e0       	ldi	r23, 0x01	; 1
     c2a:	8d e8       	ldi	r24, 0x8D	; 141
     c2c:	97 e0       	ldi	r25, 0x07	; 7
     c2e:	f6 de       	rcall	.-532    	; 0xa1c <xTaskGenericCreate>
     c30:	81 30       	cpi	r24, 0x01	; 1
     c32:	41 f4       	brne	.+16     	; 0xc44 <vTaskStartScheduler+0x42>
     c34:	f8 94       	cli
     c36:	80 93 3e 07 	sts	0x073E, r24	; 0x80073e <xSchedulerRunning>
     c3a:	10 92 42 07 	sts	0x0742, r1	; 0x800742 <xTickCount+0x1>
     c3e:	10 92 41 07 	sts	0x0741, r1	; 0x800741 <xTickCount>
     c42:	ca dd       	rcall	.-1132   	; 0x7d8 <xPortStartScheduler>
     c44:	0f 91       	pop	r16
     c46:	ff 90       	pop	r15
     c48:	ef 90       	pop	r14
     c4a:	df 90       	pop	r13
     c4c:	cf 90       	pop	r12
     c4e:	bf 90       	pop	r11
     c50:	af 90       	pop	r10
     c52:	08 95       	ret

00000c54 <vTaskSuspendAll>:
     c54:	80 91 3d 07 	lds	r24, 0x073D	; 0x80073d <uxSchedulerSuspended>
     c58:	8f 5f       	subi	r24, 0xFF	; 255
     c5a:	80 93 3d 07 	sts	0x073D, r24	; 0x80073d <uxSchedulerSuspended>
     c5e:	08 95       	ret

00000c60 <vTaskIncrementTick>:
     c60:	0f 93       	push	r16
     c62:	1f 93       	push	r17
     c64:	cf 93       	push	r28
     c66:	df 93       	push	r29
     c68:	80 91 3d 07 	lds	r24, 0x073D	; 0x80073d <uxSchedulerSuspended>
     c6c:	81 11       	cpse	r24, r1
     c6e:	af c0       	rjmp	.+350    	; 0xdce <vTaskIncrementTick+0x16e>
     c70:	80 91 41 07 	lds	r24, 0x0741	; 0x800741 <xTickCount>
     c74:	90 91 42 07 	lds	r25, 0x0742	; 0x800742 <xTickCount+0x1>
     c78:	01 96       	adiw	r24, 0x01	; 1
     c7a:	90 93 42 07 	sts	0x0742, r25	; 0x800742 <xTickCount+0x1>
     c7e:	80 93 41 07 	sts	0x0741, r24	; 0x800741 <xTickCount>
     c82:	80 91 41 07 	lds	r24, 0x0741	; 0x800741 <xTickCount>
     c86:	90 91 42 07 	lds	r25, 0x0742	; 0x800742 <xTickCount+0x1>
     c8a:	89 2b       	or	r24, r25
     c8c:	99 f5       	brne	.+102    	; 0xcf4 <vTaskIncrementTick+0x94>
     c8e:	80 91 59 07 	lds	r24, 0x0759	; 0x800759 <pxDelayedTaskList>
     c92:	90 91 5a 07 	lds	r25, 0x075A	; 0x80075a <pxDelayedTaskList+0x1>
     c96:	20 91 57 07 	lds	r18, 0x0757	; 0x800757 <pxOverflowDelayedTaskList>
     c9a:	30 91 58 07 	lds	r19, 0x0758	; 0x800758 <pxOverflowDelayedTaskList+0x1>
     c9e:	30 93 5a 07 	sts	0x075A, r19	; 0x80075a <pxDelayedTaskList+0x1>
     ca2:	20 93 59 07 	sts	0x0759, r18	; 0x800759 <pxDelayedTaskList>
     ca6:	90 93 58 07 	sts	0x0758, r25	; 0x800758 <pxOverflowDelayedTaskList+0x1>
     caa:	80 93 57 07 	sts	0x0757, r24	; 0x800757 <pxOverflowDelayedTaskList>
     cae:	80 91 3a 07 	lds	r24, 0x073A	; 0x80073a <xNumOfOverflows>
     cb2:	8f 5f       	subi	r24, 0xFF	; 255
     cb4:	80 93 3a 07 	sts	0x073A, r24	; 0x80073a <xNumOfOverflows>
     cb8:	e0 91 59 07 	lds	r30, 0x0759	; 0x800759 <pxDelayedTaskList>
     cbc:	f0 91 5a 07 	lds	r31, 0x075A	; 0x80075a <pxDelayedTaskList+0x1>
     cc0:	80 81       	ld	r24, Z
     cc2:	81 11       	cpse	r24, r1
     cc4:	07 c0       	rjmp	.+14     	; 0xcd4 <vTaskIncrementTick+0x74>
     cc6:	8f ef       	ldi	r24, 0xFF	; 255
     cc8:	9f ef       	ldi	r25, 0xFF	; 255
     cca:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <xNextTaskUnblockTime+0x1>
     cce:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <xNextTaskUnblockTime>
     cd2:	10 c0       	rjmp	.+32     	; 0xcf4 <vTaskIncrementTick+0x94>
     cd4:	e0 91 59 07 	lds	r30, 0x0759	; 0x800759 <pxDelayedTaskList>
     cd8:	f0 91 5a 07 	lds	r31, 0x075A	; 0x80075a <pxDelayedTaskList+0x1>
     cdc:	05 80       	ldd	r0, Z+5	; 0x05
     cde:	f6 81       	ldd	r31, Z+6	; 0x06
     ce0:	e0 2d       	mov	r30, r0
     ce2:	06 80       	ldd	r0, Z+6	; 0x06
     ce4:	f7 81       	ldd	r31, Z+7	; 0x07
     ce6:	e0 2d       	mov	r30, r0
     ce8:	82 81       	ldd	r24, Z+2	; 0x02
     cea:	93 81       	ldd	r25, Z+3	; 0x03
     cec:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <xNextTaskUnblockTime+0x1>
     cf0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <xNextTaskUnblockTime>
     cf4:	20 91 41 07 	lds	r18, 0x0741	; 0x800741 <xTickCount>
     cf8:	30 91 42 07 	lds	r19, 0x0742	; 0x800742 <xTickCount+0x1>
     cfc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <xNextTaskUnblockTime>
     d00:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <xNextTaskUnblockTime+0x1>
     d04:	28 17       	cp	r18, r24
     d06:	39 07       	cpc	r19, r25
     d08:	08 f4       	brcc	.+2      	; 0xd0c <vTaskIncrementTick+0xac>
     d0a:	66 c0       	rjmp	.+204    	; 0xdd8 <vTaskIncrementTick+0x178>
     d0c:	e0 91 59 07 	lds	r30, 0x0759	; 0x800759 <pxDelayedTaskList>
     d10:	f0 91 5a 07 	lds	r31, 0x075A	; 0x80075a <pxDelayedTaskList+0x1>
     d14:	80 81       	ld	r24, Z
     d16:	88 23       	and	r24, r24
     d18:	99 f0       	breq	.+38     	; 0xd40 <vTaskIncrementTick+0xe0>
     d1a:	e0 91 59 07 	lds	r30, 0x0759	; 0x800759 <pxDelayedTaskList>
     d1e:	f0 91 5a 07 	lds	r31, 0x075A	; 0x80075a <pxDelayedTaskList+0x1>
     d22:	05 80       	ldd	r0, Z+5	; 0x05
     d24:	f6 81       	ldd	r31, Z+6	; 0x06
     d26:	e0 2d       	mov	r30, r0
     d28:	c6 81       	ldd	r28, Z+6	; 0x06
     d2a:	d7 81       	ldd	r29, Z+7	; 0x07
     d2c:	8a 81       	ldd	r24, Y+2	; 0x02
     d2e:	9b 81       	ldd	r25, Y+3	; 0x03
     d30:	20 91 41 07 	lds	r18, 0x0741	; 0x800741 <xTickCount>
     d34:	30 91 42 07 	lds	r19, 0x0742	; 0x800742 <xTickCount+0x1>
     d38:	28 17       	cp	r18, r24
     d3a:	39 07       	cpc	r19, r25
     d3c:	f8 f4       	brcc	.+62     	; 0xd7c <vTaskIncrementTick+0x11c>
     d3e:	19 c0       	rjmp	.+50     	; 0xd72 <vTaskIncrementTick+0x112>
     d40:	8f ef       	ldi	r24, 0xFF	; 255
     d42:	9f ef       	ldi	r25, 0xFF	; 255
     d44:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <xNextTaskUnblockTime+0x1>
     d48:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <xNextTaskUnblockTime>
     d4c:	45 c0       	rjmp	.+138    	; 0xdd8 <vTaskIncrementTick+0x178>
     d4e:	e0 91 59 07 	lds	r30, 0x0759	; 0x800759 <pxDelayedTaskList>
     d52:	f0 91 5a 07 	lds	r31, 0x075A	; 0x80075a <pxDelayedTaskList+0x1>
     d56:	05 80       	ldd	r0, Z+5	; 0x05
     d58:	f6 81       	ldd	r31, Z+6	; 0x06
     d5a:	e0 2d       	mov	r30, r0
     d5c:	c6 81       	ldd	r28, Z+6	; 0x06
     d5e:	d7 81       	ldd	r29, Z+7	; 0x07
     d60:	8a 81       	ldd	r24, Y+2	; 0x02
     d62:	9b 81       	ldd	r25, Y+3	; 0x03
     d64:	20 91 41 07 	lds	r18, 0x0741	; 0x800741 <xTickCount>
     d68:	30 91 42 07 	lds	r19, 0x0742	; 0x800742 <xTickCount+0x1>
     d6c:	28 17       	cp	r18, r24
     d6e:	39 07       	cpc	r19, r25
     d70:	28 f4       	brcc	.+10     	; 0xd7c <vTaskIncrementTick+0x11c>
     d72:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <xNextTaskUnblockTime+0x1>
     d76:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <xNextTaskUnblockTime>
     d7a:	2e c0       	rjmp	.+92     	; 0xdd8 <vTaskIncrementTick+0x178>
     d7c:	8e 01       	movw	r16, r28
     d7e:	0e 5f       	subi	r16, 0xFE	; 254
     d80:	1f 4f       	sbci	r17, 0xFF	; 255
     d82:	c8 01       	movw	r24, r16
     d84:	3a da       	rcall	.-2956   	; 0x1fa <vListRemove>
     d86:	8c 89       	ldd	r24, Y+20	; 0x14
     d88:	9d 89       	ldd	r25, Y+21	; 0x15
     d8a:	89 2b       	or	r24, r25
     d8c:	19 f0       	breq	.+6      	; 0xd94 <vTaskIncrementTick+0x134>
     d8e:	ce 01       	movw	r24, r28
     d90:	0c 96       	adiw	r24, 0x0c	; 12
     d92:	33 da       	rcall	.-2970   	; 0x1fa <vListRemove>
     d94:	8e 89       	ldd	r24, Y+22	; 0x16
     d96:	90 91 3f 07 	lds	r25, 0x073F	; 0x80073f <uxTopReadyPriority>
     d9a:	98 17       	cp	r25, r24
     d9c:	10 f4       	brcc	.+4      	; 0xda2 <vTaskIncrementTick+0x142>
     d9e:	80 93 3f 07 	sts	0x073F, r24	; 0x80073f <uxTopReadyPriority>
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	9c 01       	movw	r18, r24
     da6:	22 0f       	add	r18, r18
     da8:	33 1f       	adc	r19, r19
     daa:	22 0f       	add	r18, r18
     dac:	33 1f       	adc	r19, r19
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	82 0f       	add	r24, r18
     db4:	93 1f       	adc	r25, r19
     db6:	b8 01       	movw	r22, r16
     db8:	83 59       	subi	r24, 0x93	; 147
     dba:	98 4f       	sbci	r25, 0xF8	; 248
     dbc:	bc d9       	rcall	.-3208   	; 0x136 <vListInsertEnd>
     dbe:	e0 91 59 07 	lds	r30, 0x0759	; 0x800759 <pxDelayedTaskList>
     dc2:	f0 91 5a 07 	lds	r31, 0x075A	; 0x80075a <pxDelayedTaskList+0x1>
     dc6:	80 81       	ld	r24, Z
     dc8:	81 11       	cpse	r24, r1
     dca:	c1 cf       	rjmp	.-126    	; 0xd4e <vTaskIncrementTick+0xee>
     dcc:	b9 cf       	rjmp	.-142    	; 0xd40 <vTaskIncrementTick+0xe0>
     dce:	80 91 3c 07 	lds	r24, 0x073C	; 0x80073c <uxMissedTicks>
     dd2:	8f 5f       	subi	r24, 0xFF	; 255
     dd4:	80 93 3c 07 	sts	0x073C, r24	; 0x80073c <uxMissedTicks>
     dd8:	df 91       	pop	r29
     dda:	cf 91       	pop	r28
     ddc:	1f 91       	pop	r17
     dde:	0f 91       	pop	r16
     de0:	08 95       	ret

00000de2 <xTaskResumeAll>:
     de2:	cf 92       	push	r12
     de4:	df 92       	push	r13
     de6:	ef 92       	push	r14
     de8:	ff 92       	push	r15
     dea:	0f 93       	push	r16
     dec:	1f 93       	push	r17
     dee:	cf 93       	push	r28
     df0:	df 93       	push	r29
     df2:	0f b6       	in	r0, 0x3f	; 63
     df4:	f8 94       	cli
     df6:	0f 92       	push	r0
     df8:	80 91 3d 07 	lds	r24, 0x073D	; 0x80073d <uxSchedulerSuspended>
     dfc:	81 50       	subi	r24, 0x01	; 1
     dfe:	80 93 3d 07 	sts	0x073D, r24	; 0x80073d <uxSchedulerSuspended>
     e02:	80 91 3d 07 	lds	r24, 0x073D	; 0x80073d <uxSchedulerSuspended>
     e06:	81 11       	cpse	r24, r1
     e08:	5f c0       	rjmp	.+190    	; 0xec8 <xTaskResumeAll+0xe6>
     e0a:	80 91 43 07 	lds	r24, 0x0743	; 0x800743 <uxCurrentNumberOfTasks>
     e0e:	81 11       	cpse	r24, r1
     e10:	2f c0       	rjmp	.+94     	; 0xe70 <xTaskResumeAll+0x8e>
     e12:	5d c0       	rjmp	.+186    	; 0xece <xTaskResumeAll+0xec>
     e14:	d7 01       	movw	r26, r14
     e16:	15 96       	adiw	r26, 0x05	; 5
     e18:	ed 91       	ld	r30, X+
     e1a:	fc 91       	ld	r31, X
     e1c:	16 97       	sbiw	r26, 0x06	; 6
     e1e:	c6 81       	ldd	r28, Z+6	; 0x06
     e20:	d7 81       	ldd	r29, Z+7	; 0x07
     e22:	ce 01       	movw	r24, r28
     e24:	0c 96       	adiw	r24, 0x0c	; 12
     e26:	e9 d9       	rcall	.-3118   	; 0x1fa <vListRemove>
     e28:	8e 01       	movw	r16, r28
     e2a:	0e 5f       	subi	r16, 0xFE	; 254
     e2c:	1f 4f       	sbci	r17, 0xFF	; 255
     e2e:	c8 01       	movw	r24, r16
     e30:	e4 d9       	rcall	.-3128   	; 0x1fa <vListRemove>
     e32:	8e 89       	ldd	r24, Y+22	; 0x16
     e34:	90 91 3f 07 	lds	r25, 0x073F	; 0x80073f <uxTopReadyPriority>
     e38:	98 17       	cp	r25, r24
     e3a:	10 f4       	brcc	.+4      	; 0xe40 <xTaskResumeAll+0x5e>
     e3c:	80 93 3f 07 	sts	0x073F, r24	; 0x80073f <uxTopReadyPriority>
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	9c 01       	movw	r18, r24
     e44:	22 0f       	add	r18, r18
     e46:	33 1f       	adc	r19, r19
     e48:	22 0f       	add	r18, r18
     e4a:	33 1f       	adc	r19, r19
     e4c:	22 0f       	add	r18, r18
     e4e:	33 1f       	adc	r19, r19
     e50:	82 0f       	add	r24, r18
     e52:	93 1f       	adc	r25, r19
     e54:	b8 01       	movw	r22, r16
     e56:	83 59       	subi	r24, 0x93	; 147
     e58:	98 4f       	sbci	r25, 0xF8	; 248
     e5a:	6d d9       	rcall	.-3366   	; 0x136 <vListInsertEnd>
     e5c:	e0 91 91 07 	lds	r30, 0x0791	; 0x800791 <pxCurrentTCB>
     e60:	f0 91 92 07 	lds	r31, 0x0792	; 0x800792 <pxCurrentTCB+0x1>
     e64:	9e 89       	ldd	r25, Y+22	; 0x16
     e66:	86 89       	ldd	r24, Z+22	; 0x16
     e68:	98 17       	cp	r25, r24
     e6a:	58 f0       	brcs	.+22     	; 0xe82 <xTaskResumeAll+0xa0>
     e6c:	dc 2c       	mov	r13, r12
     e6e:	09 c0       	rjmp	.+18     	; 0xe82 <xTaskResumeAll+0xa0>
     e70:	d1 2c       	mov	r13, r1
     e72:	0f 2e       	mov	r0, r31
     e74:	fe e4       	ldi	r31, 0x4E	; 78
     e76:	ef 2e       	mov	r14, r31
     e78:	f7 e0       	ldi	r31, 0x07	; 7
     e7a:	ff 2e       	mov	r15, r31
     e7c:	f0 2d       	mov	r31, r0
     e7e:	cc 24       	eor	r12, r12
     e80:	c3 94       	inc	r12
     e82:	f7 01       	movw	r30, r14
     e84:	80 81       	ld	r24, Z
     e86:	81 11       	cpse	r24, r1
     e88:	c5 cf       	rjmp	.-118    	; 0xe14 <xTaskResumeAll+0x32>
     e8a:	80 91 3c 07 	lds	r24, 0x073C	; 0x80073c <uxMissedTicks>
     e8e:	88 23       	and	r24, r24
     e90:	79 f0       	breq	.+30     	; 0xeb0 <xTaskResumeAll+0xce>
     e92:	80 91 3c 07 	lds	r24, 0x073C	; 0x80073c <uxMissedTicks>
     e96:	88 23       	and	r24, r24
     e98:	91 f0       	breq	.+36     	; 0xebe <xTaskResumeAll+0xdc>
     e9a:	e2 de       	rcall	.-572    	; 0xc60 <vTaskIncrementTick>
     e9c:	80 91 3c 07 	lds	r24, 0x073C	; 0x80073c <uxMissedTicks>
     ea0:	81 50       	subi	r24, 0x01	; 1
     ea2:	80 93 3c 07 	sts	0x073C, r24	; 0x80073c <uxMissedTicks>
     ea6:	80 91 3c 07 	lds	r24, 0x073C	; 0x80073c <uxMissedTicks>
     eaa:	81 11       	cpse	r24, r1
     eac:	f6 cf       	rjmp	.-20     	; 0xe9a <xTaskResumeAll+0xb8>
     eae:	07 c0       	rjmp	.+14     	; 0xebe <xTaskResumeAll+0xdc>
     eb0:	f1 e0       	ldi	r31, 0x01	; 1
     eb2:	df 16       	cp	r13, r31
     eb4:	21 f0       	breq	.+8      	; 0xebe <xTaskResumeAll+0xdc>
     eb6:	80 91 3b 07 	lds	r24, 0x073B	; 0x80073b <xMissedYield>
     eba:	81 30       	cpi	r24, 0x01	; 1
     ebc:	39 f4       	brne	.+14     	; 0xecc <xTaskResumeAll+0xea>
     ebe:	10 92 3b 07 	sts	0x073B, r1	; 0x80073b <xMissedYield>
     ec2:	c4 dc       	rcall	.-1656   	; 0x84c <vPortYield>
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	03 c0       	rjmp	.+6      	; 0xece <xTaskResumeAll+0xec>
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	01 c0       	rjmp	.+2      	; 0xece <xTaskResumeAll+0xec>
     ecc:	80 e0       	ldi	r24, 0x00	; 0
     ece:	0f 90       	pop	r0
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	df 91       	pop	r29
     ed4:	cf 91       	pop	r28
     ed6:	1f 91       	pop	r17
     ed8:	0f 91       	pop	r16
     eda:	ff 90       	pop	r15
     edc:	ef 90       	pop	r14
     ede:	df 90       	pop	r13
     ee0:	cf 90       	pop	r12
     ee2:	08 95       	ret

00000ee4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
     ee4:	cf 93       	push	r28
     ee6:	df 93       	push	r29
     ee8:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
     eea:	89 2b       	or	r24, r25
		{
			vTaskSuspendAll();
     eec:	91 f0       	breq	.+36     	; 0xf12 <vTaskDelay+0x2e>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
     eee:	b2 de       	rcall	.-668    	; 0xc54 <vTaskSuspendAll>
     ef0:	80 91 41 07 	lds	r24, 0x0741	; 0x800741 <xTickCount>
     ef4:	90 91 42 07 	lds	r25, 0x0742	; 0x800742 <xTickCount+0x1>
     ef8:	c8 0f       	add	r28, r24

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
     efa:	d9 1f       	adc	r29, r25
     efc:	80 91 91 07 	lds	r24, 0x0791	; 0x800791 <pxCurrentTCB>
     f00:	90 91 92 07 	lds	r25, 0x0792	; 0x800792 <pxCurrentTCB+0x1>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
			}
			xAlreadyYielded = xTaskResumeAll();
     f04:	02 96       	adiw	r24, 0x02	; 2
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
     f06:	79 d9       	rcall	.-3342   	; 0x1fa <vListRemove>
     f08:	ce 01       	movw	r24, r28
		{
			portYIELD_WITHIN_API();
     f0a:	53 dd       	rcall	.-1370   	; 0x9b2 <prvAddCurrentTaskToDelayedList>
     f0c:	6a df       	rcall	.-300    	; 0xde2 <xTaskResumeAll>
		}
	}
     f0e:	81 11       	cpse	r24, r1
     f10:	01 c0       	rjmp	.+2      	; 0xf14 <vTaskDelay+0x30>
     f12:	9c dc       	rcall	.-1736   	; 0x84c <vPortYield>
     f14:	df 91       	pop	r29
     f16:	cf 91       	pop	r28
     f18:	08 95       	ret

00000f1a <prvIdleTask>:
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
     f1a:	0f 2e       	mov	r0, r31
     f1c:	f5 e4       	ldi	r31, 0x45	; 69
     f1e:	ef 2e       	mov	r14, r31
     f20:	f7 e0       	ldi	r31, 0x07	; 7
     f22:	ff 2e       	mov	r15, r31
     f24:	f0 2d       	mov	r31, r0

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
     f26:	cd e6       	ldi	r28, 0x6D	; 109
     f28:	d7 e0       	ldi	r29, 0x07	; 7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
     f2a:	80 91 44 07 	lds	r24, 0x0744	; 0x800744 <uxTasksDeleted>
     f2e:	88 23       	and	r24, r24
		{
			vTaskSuspendAll();
     f30:	29 f1       	breq	.+74     	; 0xf7c <prvIdleTask+0x62>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
     f32:	90 de       	rcall	.-736    	; 0xc54 <vTaskSuspendAll>
			xTaskResumeAll();
     f34:	d7 01       	movw	r26, r14
     f36:	1c 91       	ld	r17, X

			if( xListIsEmpty == pdFALSE )
     f38:	54 df       	rcall	.-344    	; 0xde2 <xTaskResumeAll>
     f3a:	11 23       	and	r17, r17
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
     f3c:	f9 f0       	breq	.+62     	; 0xf7c <prvIdleTask+0x62>
     f3e:	0f b6       	in	r0, 0x3f	; 63
     f40:	f8 94       	cli
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
     f42:	0f 92       	push	r0
     f44:	d7 01       	movw	r26, r14
     f46:	15 96       	adiw	r26, 0x05	; 5
     f48:	ed 91       	ld	r30, X+
     f4a:	fc 91       	ld	r31, X
     f4c:	16 97       	sbiw	r26, 0x06	; 6
					vListRemove( &( pxTCB->xGenericListItem ) );
     f4e:	06 81       	ldd	r16, Z+6	; 0x06
     f50:	17 81       	ldd	r17, Z+7	; 0x07
     f52:	c8 01       	movw	r24, r16
					--uxCurrentNumberOfTasks;
     f54:	02 96       	adiw	r24, 0x02	; 2
     f56:	51 d9       	rcall	.-3422   	; 0x1fa <vListRemove>
     f58:	80 91 43 07 	lds	r24, 0x0743	; 0x800743 <uxCurrentNumberOfTasks>
     f5c:	81 50       	subi	r24, 0x01	; 1
					--uxTasksDeleted;
     f5e:	80 93 43 07 	sts	0x0743, r24	; 0x800743 <uxCurrentNumberOfTasks>
     f62:	80 91 44 07 	lds	r24, 0x0744	; 0x800744 <uxTasksDeleted>
     f66:	81 50       	subi	r24, 0x01	; 1
				}
				taskEXIT_CRITICAL();
     f68:	80 93 44 07 	sts	0x0744, r24	; 0x800744 <uxTasksDeleted>
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
     f6c:	0f 90       	pop	r0
     f6e:	0f be       	out	0x3f, r0	; 63
		vPortFree( pxTCB );
     f70:	f8 01       	movw	r30, r16
     f72:	87 89       	ldd	r24, Z+23	; 0x17

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
     f74:	90 8d       	ldd	r25, Z+24	; 0x18
     f76:	cc d8       	rcall	.-3688   	; 0x110 <vPortFree>
     f78:	c8 01       	movw	r24, r16
			{
				taskYIELD();
     f7a:	ca d8       	rcall	.-3692   	; 0x110 <vPortFree>
     f7c:	88 81       	ld	r24, Y
     f7e:	82 30       	cpi	r24, 0x02	; 2
     f80:	a0 f2       	brcs	.-88     	; 0xf2a <prvIdleTask+0x10>
     f82:	64 dc       	rcall	.-1848   	; 0x84c <vPortYield>
     f84:	d2 cf       	rjmp	.-92     	; 0xf2a <prvIdleTask+0x10>

00000f86 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
     f86:	80 91 3d 07 	lds	r24, 0x073D	; 0x80073d <uxSchedulerSuspended>
     f8a:	81 11       	cpse	r24, r1
     f8c:	13 c0       	rjmp	.+38     	; 0xfb4 <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
     f8e:	80 91 3f 07 	lds	r24, 0x073F	; 0x80073f <uxTopReadyPriority>
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	fc 01       	movw	r30, r24
     f96:	ee 0f       	add	r30, r30
     f98:	ff 1f       	adc	r31, r31
     f9a:	ee 0f       	add	r30, r30
     f9c:	ff 1f       	adc	r31, r31
     f9e:	ee 0f       	add	r30, r30
     fa0:	ff 1f       	adc	r31, r31
     fa2:	8e 0f       	add	r24, r30
     fa4:	9f 1f       	adc	r25, r31
     fa6:	fc 01       	movw	r30, r24
     fa8:	e3 59       	subi	r30, 0x93	; 147
     faa:	f8 4f       	sbci	r31, 0xF8	; 248
     fac:	80 81       	ld	r24, Z
     fae:	88 23       	and	r24, r24
     fb0:	29 f0       	breq	.+10     	; 0xfbc <vTaskSwitchContext+0x36>
     fb2:	1b c0       	rjmp	.+54     	; 0xfea <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	80 93 3b 07 	sts	0x073B, r24	; 0x80073b <xMissedYield>
     fba:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
     fbc:	80 91 3f 07 	lds	r24, 0x073F	; 0x80073f <uxTopReadyPriority>
     fc0:	81 50       	subi	r24, 0x01	; 1
     fc2:	80 93 3f 07 	sts	0x073F, r24	; 0x80073f <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
     fc6:	80 91 3f 07 	lds	r24, 0x073F	; 0x80073f <uxTopReadyPriority>
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	fc 01       	movw	r30, r24
     fce:	ee 0f       	add	r30, r30
     fd0:	ff 1f       	adc	r31, r31
     fd2:	ee 0f       	add	r30, r30
     fd4:	ff 1f       	adc	r31, r31
     fd6:	ee 0f       	add	r30, r30
     fd8:	ff 1f       	adc	r31, r31
     fda:	8e 0f       	add	r24, r30
     fdc:	9f 1f       	adc	r25, r31
     fde:	fc 01       	movw	r30, r24
     fe0:	e3 59       	subi	r30, 0x93	; 147
     fe2:	f8 4f       	sbci	r31, 0xF8	; 248
     fe4:	80 81       	ld	r24, Z
     fe6:	88 23       	and	r24, r24
     fe8:	49 f3       	breq	.-46     	; 0xfbc <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
     fea:	80 91 3f 07 	lds	r24, 0x073F	; 0x80073f <uxTopReadyPriority>
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	9c 01       	movw	r18, r24
     ff2:	22 0f       	add	r18, r18
     ff4:	33 1f       	adc	r19, r19
     ff6:	22 0f       	add	r18, r18
     ff8:	33 1f       	adc	r19, r19
     ffa:	22 0f       	add	r18, r18
     ffc:	33 1f       	adc	r19, r19
     ffe:	28 0f       	add	r18, r24
    1000:	39 1f       	adc	r19, r25
    1002:	d9 01       	movw	r26, r18
    1004:	a3 59       	subi	r26, 0x93	; 147
    1006:	b8 4f       	sbci	r27, 0xF8	; 248
    1008:	11 96       	adiw	r26, 0x01	; 1
    100a:	ed 91       	ld	r30, X+
    100c:	fc 91       	ld	r31, X
    100e:	12 97       	sbiw	r26, 0x02	; 2
    1010:	02 80       	ldd	r0, Z+2	; 0x02
    1012:	f3 81       	ldd	r31, Z+3	; 0x03
    1014:	e0 2d       	mov	r30, r0
    1016:	12 96       	adiw	r26, 0x02	; 2
    1018:	fc 93       	st	X, r31
    101a:	ee 93       	st	-X, r30
    101c:	11 97       	sbiw	r26, 0x01	; 1
    101e:	20 59       	subi	r18, 0x90	; 144
    1020:	38 4f       	sbci	r19, 0xF8	; 248
    1022:	e2 17       	cp	r30, r18
    1024:	f3 07       	cpc	r31, r19
    1026:	29 f4       	brne	.+10     	; 0x1032 <vTaskSwitchContext+0xac>
    1028:	22 81       	ldd	r18, Z+2	; 0x02
    102a:	33 81       	ldd	r19, Z+3	; 0x03
    102c:	fd 01       	movw	r30, r26
    102e:	32 83       	std	Z+2, r19	; 0x02
    1030:	21 83       	std	Z+1, r18	; 0x01
    1032:	fc 01       	movw	r30, r24
    1034:	ee 0f       	add	r30, r30
    1036:	ff 1f       	adc	r31, r31
    1038:	ee 0f       	add	r30, r30
    103a:	ff 1f       	adc	r31, r31
    103c:	ee 0f       	add	r30, r30
    103e:	ff 1f       	adc	r31, r31
    1040:	8e 0f       	add	r24, r30
    1042:	9f 1f       	adc	r25, r31
    1044:	fc 01       	movw	r30, r24
    1046:	e3 59       	subi	r30, 0x93	; 147
    1048:	f8 4f       	sbci	r31, 0xF8	; 248
    104a:	01 80       	ldd	r0, Z+1	; 0x01
    104c:	f2 81       	ldd	r31, Z+2	; 0x02
    104e:	e0 2d       	mov	r30, r0
    1050:	86 81       	ldd	r24, Z+6	; 0x06
    1052:	97 81       	ldd	r25, Z+7	; 0x07
    1054:	90 93 92 07 	sts	0x0792, r25	; 0x800792 <pxCurrentTCB+0x1>
    1058:	80 93 91 07 	sts	0x0791, r24	; 0x800791 <pxCurrentTCB>
    105c:	08 95       	ret

0000105e <memset>:
    105e:	dc 01       	movw	r26, r24
    1060:	01 c0       	rjmp	.+2      	; 0x1064 <memset+0x6>
    1062:	6d 93       	st	X+, r22
    1064:	41 50       	subi	r20, 0x01	; 1
    1066:	50 40       	sbci	r21, 0x00	; 0
    1068:	e0 f7       	brcc	.-8      	; 0x1062 <memset+0x4>
    106a:	08 95       	ret

0000106c <strncpy>:
    106c:	fb 01       	movw	r30, r22
    106e:	dc 01       	movw	r26, r24
    1070:	41 50       	subi	r20, 0x01	; 1
    1072:	50 40       	sbci	r21, 0x00	; 0
    1074:	48 f0       	brcs	.+18     	; 0x1088 <strncpy+0x1c>
    1076:	01 90       	ld	r0, Z+
    1078:	0d 92       	st	X+, r0
    107a:	00 20       	and	r0, r0
    107c:	c9 f7       	brne	.-14     	; 0x1070 <strncpy+0x4>
    107e:	01 c0       	rjmp	.+2      	; 0x1082 <strncpy+0x16>
    1080:	1d 92       	st	X+, r1
    1082:	41 50       	subi	r20, 0x01	; 1
    1084:	50 40       	sbci	r21, 0x00	; 0
    1086:	e0 f7       	brcc	.-8      	; 0x1080 <strncpy+0x14>
    1088:	08 95       	ret

0000108a <_exit>:
    108a:	f8 94       	cli

0000108c <__stop_program>:
    108c:	ff cf       	rjmp	.-2      	; 0x108c <__stop_program>
