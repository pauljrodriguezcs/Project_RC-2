
ServoMotor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00000dc4  00000e58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dc4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000640  00800126  00800126  00000e7e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e7e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000eb0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  00000ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000245c  00000000  00000000  000010e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000efd  00000000  00000000  00003544  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000153b  00000000  00000000  00004441  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004ec  00000000  00000000  0000597c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d94  00000000  00000000  00005e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012e2  00000000  00000000  00006bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f0  00000000  00000000  00007ede  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	57 c3       	rjmp	.+1710   	; 0x6e4 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 ec       	ldi	r30, 0xC4	; 196
  a0:	fd e0       	ldi	r31, 0x0D	; 13
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 32       	cpi	r26, 0x26	; 38
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	27 e0       	ldi	r18, 0x07	; 7
  b4:	a6 e2       	ldi	r26, 0x26	; 38
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 36       	cpi	r26, 0x66	; 102
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	ab d1       	rcall	.+854    	; 0x41a <main>
  c4:	7d c6       	rjmp	.+3322   	; 0xdc0 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
  cc:	ec 01       	movw	r28, r24
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
  ce:	5d d4       	rcall	.+2234   	; 0x98a <vTaskSuspendAll>
  d0:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <__data_end>
  d4:	30 91 27 01 	lds	r19, 0x0127	; 0x800127 <__data_end+0x1>
  d8:	c9 01       	movw	r24, r18
  da:	8c 0f       	add	r24, r28
  dc:	9d 1f       	adc	r25, r29
  de:	8c 3d       	cpi	r24, 0xDC	; 220
  e0:	45 e0       	ldi	r20, 0x05	; 5
  e2:	94 07       	cpc	r25, r20
  e4:	58 f4       	brcc	.+22     	; 0xfc <pvPortMalloc+0x34>
  e6:	28 17       	cp	r18, r24
  e8:	39 07       	cpc	r19, r25
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
  ea:	58 f4       	brcc	.+22     	; 0x102 <pvPortMalloc+0x3a>
  ec:	e9 01       	movw	r28, r18
  ee:	c8 5d       	subi	r28, 0xD8	; 216
			xNextFreeByte += xWantedSize;			
  f0:	de 4f       	sbci	r29, 0xFE	; 254
  f2:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__data_end+0x1>
  f6:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
  fa:	05 c0       	rjmp	.+10     	; 0x106 <pvPortMalloc+0x3e>
  fc:	c0 e0       	ldi	r28, 0x00	; 0
  fe:	d0 e0       	ldi	r29, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <pvPortMalloc+0x3e>
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
 102:	c0 e0       	ldi	r28, 0x00	; 0
 104:	d0 e0       	ldi	r29, 0x00	; 0
		}
	}
	#endif	

	return pvReturn;
}
 106:	08 d5       	rcall	.+2576   	; 0xb18 <xTaskResumeAll>
 108:	ce 01       	movw	r24, r28
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 110:	08 95       	ret

00000112 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
 112:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 114:	03 96       	adiw	r24, 0x03	; 3
 116:	92 83       	std	Z+2, r25	; 0x02
 118:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 11a:	2f ef       	ldi	r18, 0xFF	; 255
 11c:	3f ef       	ldi	r19, 0xFF	; 255
 11e:	34 83       	std	Z+4, r19	; 0x04
 120:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 122:	96 83       	std	Z+6, r25	; 0x06
 124:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 126:	90 87       	std	Z+8, r25	; 0x08
 128:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 12a:	10 82       	st	Z, r1
 12c:	08 95       	ret

0000012e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 12e:	fc 01       	movw	r30, r24
 130:	11 86       	std	Z+9, r1	; 0x09
 132:	10 86       	std	Z+8, r1	; 0x08
 134:	08 95       	ret

00000136 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	fc 01       	movw	r30, r24
 13c:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
 13e:	21 81       	ldd	r18, Z+1	; 0x01
 140:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
 142:	e9 01       	movw	r28, r18
 144:	8a 81       	ldd	r24, Y+2	; 0x02
 146:	9b 81       	ldd	r25, Y+3	; 0x03
 148:	13 96       	adiw	r26, 0x03	; 3
 14a:	9c 93       	st	X, r25
 14c:	8e 93       	st	-X, r24
 14e:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
 150:	81 81       	ldd	r24, Z+1	; 0x01
 152:	92 81       	ldd	r25, Z+2	; 0x02
 154:	15 96       	adiw	r26, 0x05	; 5
 156:	9c 93       	st	X, r25
 158:	8e 93       	st	-X, r24
 15a:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 15c:	8a 81       	ldd	r24, Y+2	; 0x02
 15e:	9b 81       	ldd	r25, Y+3	; 0x03
 160:	ec 01       	movw	r28, r24
 162:	7d 83       	std	Y+5, r23	; 0x05
 164:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 166:	e9 01       	movw	r28, r18
 168:	7b 83       	std	Y+3, r23	; 0x03
 16a:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 16c:	72 83       	std	Z+2, r23	; 0x02
 16e:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 170:	19 96       	adiw	r26, 0x09	; 9
 172:	fc 93       	st	X, r31
 174:	ee 93       	st	-X, r30
 176:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
 178:	80 81       	ld	r24, Z
 17a:	8f 5f       	subi	r24, 0xFF	; 255
 17c:	80 83       	st	Z, r24
}
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 18a:	48 81       	ld	r20, Y
 18c:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 18e:	4f 3f       	cpi	r20, 0xFF	; 255
 190:	2f ef       	ldi	r18, 0xFF	; 255
 192:	52 07       	cpc	r21, r18
 194:	31 f4       	brne	.+12     	; 0x1a2 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 196:	dc 01       	movw	r26, r24
 198:	17 96       	adiw	r26, 0x07	; 7
 19a:	ed 91       	ld	r30, X+
 19c:	fc 91       	ld	r31, X
 19e:	18 97       	sbiw	r26, 0x08	; 8
 1a0:	17 c0       	rjmp	.+46     	; 0x1d0 <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 1a2:	fc 01       	movw	r30, r24
 1a4:	33 96       	adiw	r30, 0x03	; 3
 1a6:	dc 01       	movw	r26, r24
 1a8:	15 96       	adiw	r26, 0x05	; 5
 1aa:	2d 91       	ld	r18, X+
 1ac:	3c 91       	ld	r19, X
 1ae:	16 97       	sbiw	r26, 0x06	; 6
 1b0:	d9 01       	movw	r26, r18
 1b2:	2d 91       	ld	r18, X+
 1b4:	3c 91       	ld	r19, X
 1b6:	42 17       	cp	r20, r18
 1b8:	53 07       	cpc	r21, r19
 1ba:	50 f0       	brcs	.+20     	; 0x1d0 <vListInsert+0x4c>
 1bc:	02 80       	ldd	r0, Z+2	; 0x02
 1be:	f3 81       	ldd	r31, Z+3	; 0x03
 1c0:	e0 2d       	mov	r30, r0
 1c2:	a2 81       	ldd	r26, Z+2	; 0x02
 1c4:	b3 81       	ldd	r27, Z+3	; 0x03
 1c6:	2d 91       	ld	r18, X+
 1c8:	3c 91       	ld	r19, X
 1ca:	42 17       	cp	r20, r18
 1cc:	53 07       	cpc	r21, r19
 1ce:	b0 f7       	brcc	.-20     	; 0x1bc <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 1d0:	a2 81       	ldd	r26, Z+2	; 0x02
 1d2:	b3 81       	ldd	r27, Z+3	; 0x03
 1d4:	bb 83       	std	Y+3, r27	; 0x03
 1d6:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 1d8:	15 96       	adiw	r26, 0x05	; 5
 1da:	dc 93       	st	X, r29
 1dc:	ce 93       	st	-X, r28
 1de:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
 1e0:	fd 83       	std	Y+5, r31	; 0x05
 1e2:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 1e4:	d3 83       	std	Z+3, r29	; 0x03
 1e6:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 1e8:	99 87       	std	Y+9, r25	; 0x09
 1ea:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
 1ec:	fc 01       	movw	r30, r24
 1ee:	20 81       	ld	r18, Z
 1f0:	2f 5f       	subi	r18, 0xFF	; 255
 1f2:	20 83       	st	Z, r18
}
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
 1fa:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 1fc:	a2 81       	ldd	r26, Z+2	; 0x02
 1fe:	b3 81       	ldd	r27, Z+3	; 0x03
 200:	84 81       	ldd	r24, Z+4	; 0x04
 202:	95 81       	ldd	r25, Z+5	; 0x05
 204:	15 96       	adiw	r26, 0x05	; 5
 206:	9c 93       	st	X, r25
 208:	8e 93       	st	-X, r24
 20a:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 20c:	a4 81       	ldd	r26, Z+4	; 0x04
 20e:	b5 81       	ldd	r27, Z+5	; 0x05
 210:	82 81       	ldd	r24, Z+2	; 0x02
 212:	93 81       	ldd	r25, Z+3	; 0x03
 214:	13 96       	adiw	r26, 0x03	; 3
 216:	9c 93       	st	X, r25
 218:	8e 93       	st	-X, r24
 21a:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 21c:	a0 85       	ldd	r26, Z+8	; 0x08
 21e:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 220:	11 96       	adiw	r26, 0x01	; 1
 222:	8d 91       	ld	r24, X+
 224:	9c 91       	ld	r25, X
 226:	12 97       	sbiw	r26, 0x02	; 2
 228:	e8 17       	cp	r30, r24
 22a:	f9 07       	cpc	r31, r25
 22c:	31 f4       	brne	.+12     	; 0x23a <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 22e:	84 81       	ldd	r24, Z+4	; 0x04
 230:	95 81       	ldd	r25, Z+5	; 0x05
 232:	12 96       	adiw	r26, 0x02	; 2
 234:	9c 93       	st	X, r25
 236:	8e 93       	st	-X, r24
 238:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
 23a:	11 86       	std	Z+9, r1	; 0x09
 23c:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 23e:	8c 91       	ld	r24, X
 240:	81 50       	subi	r24, 0x01	; 1
 242:	8c 93       	st	X, r24
 244:	08 95       	ret

00000246 <adc_init>:
}

 enum SERVOState {servo_init, drive_high} servo_state;

 void SERVO_Init(){
	 servo_state = servo_init;
 246:	80 e4       	ldi	r24, 0x40	; 64
 248:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 24c:	87 e8       	ldi	r24, 0x87	; 135
 24e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 252:	08 95       	ret

00000254 <adc_read>:
 254:	ec e7       	ldi	r30, 0x7C	; 124
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	90 81       	ld	r25, Z
 25a:	98 7f       	andi	r25, 0xF8	; 248
 25c:	87 70       	andi	r24, 0x07	; 7
 25e:	89 2b       	or	r24, r25
 260:	80 83       	st	Z, r24
 262:	ea e7       	ldi	r30, 0x7A	; 122
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	80 81       	ld	r24, Z
 268:	80 64       	ori	r24, 0x40	; 64
 26a:	80 83       	st	Z, r24
 26c:	80 81       	ld	r24, Z
 26e:	86 fd       	sbrc	r24, 6
 270:	fd cf       	rjmp	.-6      	; 0x26c <adc_read+0x18>
 272:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 276:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 27a:	08 95       	ret

0000027c <STEERING_Tick>:
 27c:	80 91 65 07 	lds	r24, 0x0765	; 0x800765 <steering_state>
 280:	81 11       	cpse	r24, r1
 282:	2b c0       	rjmp	.+86     	; 0x2da <STEERING_Tick+0x5e>
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	e6 df       	rcall	.-52     	; 0x254 <adc_read>
 288:	90 93 05 07 	sts	0x0705, r25	; 0x800705 <steering+0x1>
 28c:	80 93 04 07 	sts	0x0704, r24	; 0x800704 <steering>
 290:	8b 33       	cpi	r24, 0x3B	; 59
 292:	22 e0       	ldi	r18, 0x02	; 2
 294:	92 07       	cpc	r25, r18
 296:	50 f0       	brcs	.+20     	; 0x2ac <STEERING_Tick+0x30>
 298:	10 92 09 07 	sts	0x0709, r1	; 0x800709 <right>
 29c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	80 93 08 07 	sts	0x0708, r24	; 0x800708 <left>
 2a6:	80 93 07 07 	sts	0x0707, r24	; 0x800707 <max_servo>
 2aa:	17 c0       	rjmp	.+46     	; 0x2da <STEERING_Tick+0x5e>
 2ac:	84 3f       	cpi	r24, 0xF4	; 244
 2ae:	91 40       	sbci	r25, 0x01	; 1
 2b0:	58 f4       	brcc	.+22     	; 0x2c8 <STEERING_Tick+0x4c>
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	80 93 09 07 	sts	0x0709, r24	; 0x800709 <right>
 2b8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 2bc:	10 92 08 07 	sts	0x0708, r1	; 0x800708 <left>
 2c0:	82 e0       	ldi	r24, 0x02	; 2
 2c2:	80 93 07 07 	sts	0x0707, r24	; 0x800707 <max_servo>
 2c6:	09 c0       	rjmp	.+18     	; 0x2da <STEERING_Tick+0x5e>
 2c8:	10 92 09 07 	sts	0x0709, r1	; 0x800709 <right>
 2cc:	10 92 08 07 	sts	0x0708, r1	; 0x800708 <left>
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 2d6:	10 92 07 07 	sts	0x0707, r1	; 0x800707 <max_servo>
 2da:	80 91 65 07 	lds	r24, 0x0765	; 0x800765 <steering_state>
 2de:	81 11       	cpse	r24, r1
 2e0:	10 92 65 07 	sts	0x0765, r1	; 0x800765 <steering_state>
 2e4:	08 95       	ret

000002e6 <STEERINGSecTask>:
 2e6:	10 92 65 07 	sts	0x0765, r1	; 0x800765 <steering_state>
 2ea:	c8 df       	rcall	.-112    	; 0x27c <STEERING_Tick>
 2ec:	84 e1       	ldi	r24, 0x14	; 20
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	94 d4       	rcall	.+2344   	; 0xc1a <vTaskDelay>
 2f2:	fb cf       	rjmp	.-10     	; 0x2ea <STEERINGSecTask+0x4>

000002f4 <STEERINGSecPulse>:
 2f4:	af 92       	push	r10
 2f6:	bf 92       	push	r11
 2f8:	cf 92       	push	r12
 2fa:	df 92       	push	r13
 2fc:	ef 92       	push	r14
 2fe:	ff 92       	push	r15
 300:	0f 93       	push	r16
 302:	a1 2c       	mov	r10, r1
 304:	b1 2c       	mov	r11, r1
 306:	c1 2c       	mov	r12, r1
 308:	d1 2c       	mov	r13, r1
 30a:	e1 2c       	mov	r14, r1
 30c:	f1 2c       	mov	r15, r1
 30e:	08 2f       	mov	r16, r24
 310:	20 e0       	ldi	r18, 0x00	; 0
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	45 e5       	ldi	r20, 0x55	; 85
 316:	50 e0       	ldi	r21, 0x00	; 0
 318:	63 e0       	ldi	r22, 0x03	; 3
 31a:	71 e0       	ldi	r23, 0x01	; 1
 31c:	83 e7       	ldi	r24, 0x73	; 115
 31e:	91 e0       	ldi	r25, 0x01	; 1
 320:	18 d2       	rcall	.+1072   	; 0x752 <xTaskGenericCreate>
 322:	0f 91       	pop	r16
 324:	ff 90       	pop	r15
 326:	ef 90       	pop	r14
 328:	df 90       	pop	r13
 32a:	cf 90       	pop	r12
 32c:	bf 90       	pop	r11
 32e:	af 90       	pop	r10
 330:	08 95       	ret

00000332 <SERVO_Tick>:
 }

void SERVO_Tick(){
	//Transitions
	switch(servo_state){
 332:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <servo_state>
 336:	88 23       	and	r24, r24
 338:	19 f0       	breq	.+6      	; 0x340 <SERVO_Tick+0xe>
 33a:	81 30       	cpi	r24, 0x01	; 1
 33c:	c1 f0       	breq	.+48     	; 0x36e <SERVO_Tick+0x3c>
 33e:	36 c0       	rjmp	.+108    	; 0x3ac <SERVO_Tick+0x7a>
		case servo_init:
			if(left || right){
 340:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <left>
 344:	81 11       	cpse	r24, r1
 346:	04 c0       	rjmp	.+8      	; 0x350 <SERVO_Tick+0x1e>
 348:	80 91 09 07 	lds	r24, 0x0709	; 0x800709 <right>
 34c:	88 23       	and	r24, r24
 34e:	59 f0       	breq	.+22     	; 0x366 <SERVO_Tick+0x34>
				servo_state = drive_high;
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <servo_state>
				servo_counter = 0;
 356:	10 92 06 07 	sts	0x0706, r1	; 0x800706 <servo_counter>
				//min_servo = 20 - max_servo;
				PORTB = 0x01;
 35a:	85 b9       	out	0x05, r24	; 5
			servo_state = servo_init;
			break;
	  }
	  
	//Actions
	switch(servo_state){
 35c:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <servo_state>
 360:	81 30       	cpi	r24, 0x01	; 1
 362:	39 f1       	breq	.+78     	; 0x3b2 <SERVO_Tick+0x80>
 364:	08 95       	ret
				//min_servo = 20 - max_servo;
				PORTB = 0x01;
			}
		  
			else{
				PORTB = 0x00;
 366:	15 b8       	out	0x05, r1	; 5
				servo_state = servo_init;
 368:	10 92 64 07 	sts	0x0764, r1	; 0x800764 <servo_state>
 36c:	08 95       	ret
			}
			break;
			
		case drive_high:
			if((servo_counter < max_servo) && (left || right)){
 36e:	80 91 06 07 	lds	r24, 0x0706	; 0x800706 <servo_counter>
 372:	90 91 07 07 	lds	r25, 0x0707	; 0x800707 <max_servo>
 376:	89 17       	cp	r24, r25
 378:	78 f4       	brcc	.+30     	; 0x398 <SERVO_Tick+0x66>
 37a:	90 91 08 07 	lds	r25, 0x0708	; 0x800708 <left>
 37e:	91 11       	cpse	r25, r1
 380:	04 c0       	rjmp	.+8      	; 0x38a <SERVO_Tick+0x58>
 382:	90 91 09 07 	lds	r25, 0x0709	; 0x800709 <right>
 386:	99 23       	and	r25, r25
 388:	39 f0       	breq	.+14     	; 0x398 <SERVO_Tick+0x66>
				 ++servo_counter;
 38a:	8f 5f       	subi	r24, 0xFF	; 255
 38c:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <servo_counter>
				servo_state = drive_high;
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <servo_state>
 396:	0d c0       	rjmp	.+26     	; 0x3b2 <SERVO_Tick+0x80>
			}
			
			else{
				 left = 0;
 398:	10 92 08 07 	sts	0x0708, r1	; 0x800708 <left>
				 center = 0;
 39c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
				 right = 0;
 3a0:	10 92 09 07 	sts	0x0709, r1	; 0x800709 <right>
				 PORTB = 0x00;
 3a4:	15 b8       	out	0x05, r1	; 5
				 servo_state = servo_init;
 3a6:	10 92 64 07 	sts	0x0764, r1	; 0x800764 <servo_state>
 3aa:	08 95       	ret
			}
		  
			break;
		  */
		default:
			servo_state = servo_init;
 3ac:	10 92 64 07 	sts	0x0764, r1	; 0x800764 <servo_state>
			break;
 3b0:	08 95       	ret
	switch(servo_state){
		case servo_init:
			break;
		  
		case drive_high:
			if(center){
 3b2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 3b6:	88 23       	and	r24, r24
 3b8:	49 f0       	breq	.+18     	; 0x3cc <SERVO_Tick+0x9a>
				left = 0;
 3ba:	10 92 08 07 	sts	0x0708, r1	; 0x800708 <left>
				center = 0;
 3be:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
				right = 0;
 3c2:	10 92 09 07 	sts	0x0709, r1	; 0x800709 <right>
				PORTB = 0x00;
 3c6:	15 b8       	out	0x05, r1	; 5
				servo_state = servo_init;
 3c8:	10 92 64 07 	sts	0x0764, r1	; 0x800764 <servo_state>
 3cc:	08 95       	ret

000003ce <SERVOSecTask>:
}

 enum SERVOState {servo_init, drive_high} servo_state;

 void SERVO_Init(){
	 servo_state = servo_init;
 3ce:	10 92 64 07 	sts	0x0764, r1	; 0x800764 <servo_state>
 {
	 SERVO_Init();
	 for(;;)
	 {
		 SERVO_Tick();
		 vTaskDelay(1);
 3d2:	af df       	rcall	.-162    	; 0x332 <SERVO_Tick>
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	20 d4       	rcall	.+2112   	; 0xc1a <vTaskDelay>
 3da:	fb cf       	rjmp	.-10     	; 0x3d2 <SERVOSecTask+0x4>

000003dc <SERVOSecPulse>:
	 }
 }

 void SERVOSecPulse(unsigned portBASE_TYPE Priority)
 {
 3dc:	af 92       	push	r10
 3de:	bf 92       	push	r11
 3e0:	cf 92       	push	r12
 3e2:	df 92       	push	r13
 3e4:	ef 92       	push	r14
 3e6:	ff 92       	push	r15
 3e8:	0f 93       	push	r16
	 xTaskCreate(SERVOSecTask, (signed portCHAR *)"SERVOSecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
 3ea:	a1 2c       	mov	r10, r1
 3ec:	b1 2c       	mov	r11, r1
 3ee:	c1 2c       	mov	r12, r1
 3f0:	d1 2c       	mov	r13, r1
 3f2:	e1 2c       	mov	r14, r1
 3f4:	f1 2c       	mov	r15, r1
 3f6:	08 2f       	mov	r16, r24
 3f8:	20 e0       	ldi	r18, 0x00	; 0
 3fa:	30 e0       	ldi	r19, 0x00	; 0
 3fc:	45 e5       	ldi	r20, 0x55	; 85
 3fe:	50 e0       	ldi	r21, 0x00	; 0
 400:	63 e1       	ldi	r22, 0x13	; 19
 402:	71 e0       	ldi	r23, 0x01	; 1
 404:	87 ee       	ldi	r24, 0xE7	; 231
 406:	91 e0       	ldi	r25, 0x01	; 1
 408:	a4 d1       	rcall	.+840    	; 0x752 <xTaskGenericCreate>
 }
 40a:	0f 91       	pop	r16
 40c:	ff 90       	pop	r15
 40e:	ef 90       	pop	r14
 410:	df 90       	pop	r13
 412:	cf 90       	pop	r12
 414:	bf 90       	pop	r11
 416:	af 90       	pop	r10
 418:	08 95       	ret

0000041a <main>:
 
int main(void) 
{ 
   DDRA = 0x00; PORTA = 0xFF;
 41a:	11 b8       	out	0x01, r1	; 1
 41c:	8f ef       	ldi	r24, 0xFF	; 255
 41e:	82 b9       	out	0x02, r24	; 2
   DDRB = 0xFF; PORTB = 0x00;
 420:	84 b9       	out	0x04, r24	; 4
   
   adc_init();
   
   //Start Tasks  
   STEERINGSecPulse(1);
   SERVOSecPulse(1);
 422:	15 b8       	out	0x05, r1	; 5
 424:	10 df       	rcall	.-480    	; 0x246 <adc_init>
    //RunSchedular 
   vTaskStartScheduler(); 
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	65 df       	rcall	.-310    	; 0x2f4 <STEERINGSecPulse>
 
   return 0; 
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	d7 df       	rcall	.-82     	; 0x3dc <SERVOSecPulse>
 42e:	84 d2       	rcall	.+1288   	; 0x938 <vTaskStartScheduler>
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	08 95       	ret

00000436 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 436:	31 e1       	ldi	r19, 0x11	; 17
 438:	fc 01       	movw	r30, r24
 43a:	30 83       	st	Z, r19
 43c:	31 97       	sbiw	r30, 0x01	; 1
 43e:	22 e2       	ldi	r18, 0x22	; 34
 440:	20 83       	st	Z, r18
 442:	31 97       	sbiw	r30, 0x01	; 1
 444:	a3 e3       	ldi	r26, 0x33	; 51
 446:	a0 83       	st	Z, r26
 448:	31 97       	sbiw	r30, 0x01	; 1
 44a:	60 83       	st	Z, r22
 44c:	31 97       	sbiw	r30, 0x01	; 1
 44e:	70 83       	st	Z, r23
 450:	31 97       	sbiw	r30, 0x01	; 1
 452:	10 82       	st	Z, r1
 454:	31 97       	sbiw	r30, 0x01	; 1
 456:	60 e8       	ldi	r22, 0x80	; 128
 458:	60 83       	st	Z, r22
 45a:	31 97       	sbiw	r30, 0x01	; 1
 45c:	10 82       	st	Z, r1
 45e:	31 97       	sbiw	r30, 0x01	; 1
 460:	62 e0       	ldi	r22, 0x02	; 2
 462:	60 83       	st	Z, r22
 464:	31 97       	sbiw	r30, 0x01	; 1
 466:	63 e0       	ldi	r22, 0x03	; 3
 468:	60 83       	st	Z, r22
 46a:	31 97       	sbiw	r30, 0x01	; 1
 46c:	64 e0       	ldi	r22, 0x04	; 4
 46e:	60 83       	st	Z, r22
 470:	31 97       	sbiw	r30, 0x01	; 1
 472:	65 e0       	ldi	r22, 0x05	; 5
 474:	60 83       	st	Z, r22
 476:	31 97       	sbiw	r30, 0x01	; 1
 478:	66 e0       	ldi	r22, 0x06	; 6
 47a:	60 83       	st	Z, r22
 47c:	31 97       	sbiw	r30, 0x01	; 1
 47e:	67 e0       	ldi	r22, 0x07	; 7
 480:	60 83       	st	Z, r22
 482:	31 97       	sbiw	r30, 0x01	; 1
 484:	68 e0       	ldi	r22, 0x08	; 8
 486:	60 83       	st	Z, r22
 488:	31 97       	sbiw	r30, 0x01	; 1
 48a:	69 e0       	ldi	r22, 0x09	; 9
 48c:	60 83       	st	Z, r22
 48e:	31 97       	sbiw	r30, 0x01	; 1
 490:	60 e1       	ldi	r22, 0x10	; 16
 492:	60 83       	st	Z, r22
 494:	31 97       	sbiw	r30, 0x01	; 1
 496:	30 83       	st	Z, r19
 498:	31 97       	sbiw	r30, 0x01	; 1
 49a:	32 e1       	ldi	r19, 0x12	; 18
 49c:	30 83       	st	Z, r19
 49e:	31 97       	sbiw	r30, 0x01	; 1
 4a0:	33 e1       	ldi	r19, 0x13	; 19
 4a2:	30 83       	st	Z, r19
 4a4:	31 97       	sbiw	r30, 0x01	; 1
 4a6:	34 e1       	ldi	r19, 0x14	; 20
 4a8:	30 83       	st	Z, r19
 4aa:	31 97       	sbiw	r30, 0x01	; 1
 4ac:	35 e1       	ldi	r19, 0x15	; 21
 4ae:	30 83       	st	Z, r19
 4b0:	31 97       	sbiw	r30, 0x01	; 1
 4b2:	36 e1       	ldi	r19, 0x16	; 22
 4b4:	30 83       	st	Z, r19
 4b6:	31 97       	sbiw	r30, 0x01	; 1
 4b8:	37 e1       	ldi	r19, 0x17	; 23
 4ba:	30 83       	st	Z, r19
 4bc:	31 97       	sbiw	r30, 0x01	; 1
 4be:	38 e1       	ldi	r19, 0x18	; 24
 4c0:	30 83       	st	Z, r19
 4c2:	31 97       	sbiw	r30, 0x01	; 1
 4c4:	39 e1       	ldi	r19, 0x19	; 25
 4c6:	30 83       	st	Z, r19
 4c8:	31 97       	sbiw	r30, 0x01	; 1
 4ca:	30 e2       	ldi	r19, 0x20	; 32
 4cc:	30 83       	st	Z, r19
 4ce:	31 97       	sbiw	r30, 0x01	; 1
 4d0:	31 e2       	ldi	r19, 0x21	; 33
 4d2:	30 83       	st	Z, r19
 4d4:	31 97       	sbiw	r30, 0x01	; 1
 4d6:	20 83       	st	Z, r18
 4d8:	31 97       	sbiw	r30, 0x01	; 1
 4da:	23 e2       	ldi	r18, 0x23	; 35
 4dc:	20 83       	st	Z, r18
 4de:	31 97       	sbiw	r30, 0x01	; 1
 4e0:	40 83       	st	Z, r20
 4e2:	31 97       	sbiw	r30, 0x01	; 1
 4e4:	50 83       	st	Z, r21
 4e6:	31 97       	sbiw	r30, 0x01	; 1
 4e8:	26 e2       	ldi	r18, 0x26	; 38
 4ea:	20 83       	st	Z, r18
 4ec:	31 97       	sbiw	r30, 0x01	; 1
 4ee:	27 e2       	ldi	r18, 0x27	; 39
 4f0:	20 83       	st	Z, r18
 4f2:	31 97       	sbiw	r30, 0x01	; 1
 4f4:	28 e2       	ldi	r18, 0x28	; 40
 4f6:	20 83       	st	Z, r18
 4f8:	31 97       	sbiw	r30, 0x01	; 1
 4fa:	29 e2       	ldi	r18, 0x29	; 41
 4fc:	20 83       	st	Z, r18
 4fe:	31 97       	sbiw	r30, 0x01	; 1
 500:	20 e3       	ldi	r18, 0x30	; 48
 502:	20 83       	st	Z, r18
 504:	31 97       	sbiw	r30, 0x01	; 1
 506:	21 e3       	ldi	r18, 0x31	; 49
 508:	20 83       	st	Z, r18
 50a:	86 97       	sbiw	r24, 0x26	; 38
 50c:	08 95       	ret

0000050e <xPortStartScheduler>:
 50e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 512:	8c e7       	ldi	r24, 0x7C	; 124
 514:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 518:	8b e0       	ldi	r24, 0x0B	; 11
 51a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 51e:	ef e6       	ldi	r30, 0x6F	; 111
 520:	f0 e0       	ldi	r31, 0x00	; 0
 522:	80 81       	ld	r24, Z
 524:	82 60       	ori	r24, 0x02	; 2
 526:	80 83       	st	Z, r24
 528:	a0 91 62 07 	lds	r26, 0x0762	; 0x800762 <pxCurrentTCB>
 52c:	b0 91 63 07 	lds	r27, 0x0763	; 0x800763 <pxCurrentTCB+0x1>
 530:	cd 91       	ld	r28, X+
 532:	cd bf       	out	0x3d, r28	; 61
 534:	dd 91       	ld	r29, X+
 536:	de bf       	out	0x3e, r29	; 62
 538:	ff 91       	pop	r31
 53a:	ef 91       	pop	r30
 53c:	df 91       	pop	r29
 53e:	cf 91       	pop	r28
 540:	bf 91       	pop	r27
 542:	af 91       	pop	r26
 544:	9f 91       	pop	r25
 546:	8f 91       	pop	r24
 548:	7f 91       	pop	r23
 54a:	6f 91       	pop	r22
 54c:	5f 91       	pop	r21
 54e:	4f 91       	pop	r20
 550:	3f 91       	pop	r19
 552:	2f 91       	pop	r18
 554:	1f 91       	pop	r17
 556:	0f 91       	pop	r16
 558:	ff 90       	pop	r15
 55a:	ef 90       	pop	r14
 55c:	df 90       	pop	r13
 55e:	cf 90       	pop	r12
 560:	bf 90       	pop	r11
 562:	af 90       	pop	r10
 564:	9f 90       	pop	r9
 566:	8f 90       	pop	r8
 568:	7f 90       	pop	r7
 56a:	6f 90       	pop	r6
 56c:	5f 90       	pop	r5
 56e:	4f 90       	pop	r4
 570:	3f 90       	pop	r3
 572:	2f 90       	pop	r2
 574:	1f 90       	pop	r1
 576:	0f 90       	pop	r0
 578:	0f be       	out	0x3f, r0	; 63
 57a:	0f 90       	pop	r0
 57c:	08 95       	ret
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	08 95       	ret

00000582 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 582:	0f 92       	push	r0
 584:	0f b6       	in	r0, 0x3f	; 63
 586:	f8 94       	cli
 588:	0f 92       	push	r0
 58a:	1f 92       	push	r1
 58c:	11 24       	eor	r1, r1
 58e:	2f 92       	push	r2
 590:	3f 92       	push	r3
 592:	4f 92       	push	r4
 594:	5f 92       	push	r5
 596:	6f 92       	push	r6
 598:	7f 92       	push	r7
 59a:	8f 92       	push	r8
 59c:	9f 92       	push	r9
 59e:	af 92       	push	r10
 5a0:	bf 92       	push	r11
 5a2:	cf 92       	push	r12
 5a4:	df 92       	push	r13
 5a6:	ef 92       	push	r14
 5a8:	ff 92       	push	r15
 5aa:	0f 93       	push	r16
 5ac:	1f 93       	push	r17
 5ae:	2f 93       	push	r18
 5b0:	3f 93       	push	r19
 5b2:	4f 93       	push	r20
 5b4:	5f 93       	push	r21
 5b6:	6f 93       	push	r22
 5b8:	7f 93       	push	r23
 5ba:	8f 93       	push	r24
 5bc:	9f 93       	push	r25
 5be:	af 93       	push	r26
 5c0:	bf 93       	push	r27
 5c2:	cf 93       	push	r28
 5c4:	df 93       	push	r29
 5c6:	ef 93       	push	r30
 5c8:	ff 93       	push	r31
 5ca:	a0 91 62 07 	lds	r26, 0x0762	; 0x800762 <pxCurrentTCB>
 5ce:	b0 91 63 07 	lds	r27, 0x0763	; 0x800763 <pxCurrentTCB+0x1>
 5d2:	0d b6       	in	r0, 0x3d	; 61
 5d4:	0d 92       	st	X+, r0
 5d6:	0e b6       	in	r0, 0x3e	; 62
	vTaskSwitchContext();
 5d8:	0d 92       	st	X+, r0
	portRESTORE_CONTEXT();
 5da:	70 d3       	rcall	.+1760   	; 0xcbc <vTaskSwitchContext>
 5dc:	a0 91 62 07 	lds	r26, 0x0762	; 0x800762 <pxCurrentTCB>
 5e0:	b0 91 63 07 	lds	r27, 0x0763	; 0x800763 <pxCurrentTCB+0x1>
 5e4:	cd 91       	ld	r28, X+
 5e6:	cd bf       	out	0x3d, r28	; 61
 5e8:	dd 91       	ld	r29, X+
 5ea:	de bf       	out	0x3e, r29	; 62
 5ec:	ff 91       	pop	r31
 5ee:	ef 91       	pop	r30
 5f0:	df 91       	pop	r29
 5f2:	cf 91       	pop	r28
 5f4:	bf 91       	pop	r27
 5f6:	af 91       	pop	r26
 5f8:	9f 91       	pop	r25
 5fa:	8f 91       	pop	r24
 5fc:	7f 91       	pop	r23
 5fe:	6f 91       	pop	r22
 600:	5f 91       	pop	r21
 602:	4f 91       	pop	r20
 604:	3f 91       	pop	r19
 606:	2f 91       	pop	r18
 608:	1f 91       	pop	r17
 60a:	0f 91       	pop	r16
 60c:	ff 90       	pop	r15
 60e:	ef 90       	pop	r14
 610:	df 90       	pop	r13
 612:	cf 90       	pop	r12
 614:	bf 90       	pop	r11
 616:	af 90       	pop	r10
 618:	9f 90       	pop	r9
 61a:	8f 90       	pop	r8
 61c:	7f 90       	pop	r7
 61e:	6f 90       	pop	r6
 620:	5f 90       	pop	r5
 622:	4f 90       	pop	r4
 624:	3f 90       	pop	r3
 626:	2f 90       	pop	r2
 628:	1f 90       	pop	r1
 62a:	0f 90       	pop	r0
 62c:	0f be       	out	0x3f, r0	; 63

	asm volatile ( "ret" );
 62e:	0f 90       	pop	r0
 630:	08 95       	ret

00000632 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 632:	0f 92       	push	r0
 634:	0f b6       	in	r0, 0x3f	; 63
 636:	f8 94       	cli
 638:	0f 92       	push	r0
 63a:	1f 92       	push	r1
 63c:	11 24       	eor	r1, r1
 63e:	2f 92       	push	r2
 640:	3f 92       	push	r3
 642:	4f 92       	push	r4
 644:	5f 92       	push	r5
 646:	6f 92       	push	r6
 648:	7f 92       	push	r7
 64a:	8f 92       	push	r8
 64c:	9f 92       	push	r9
 64e:	af 92       	push	r10
 650:	bf 92       	push	r11
 652:	cf 92       	push	r12
 654:	df 92       	push	r13
 656:	ef 92       	push	r14
 658:	ff 92       	push	r15
 65a:	0f 93       	push	r16
 65c:	1f 93       	push	r17
 65e:	2f 93       	push	r18
 660:	3f 93       	push	r19
 662:	4f 93       	push	r20
 664:	5f 93       	push	r21
 666:	6f 93       	push	r22
 668:	7f 93       	push	r23
 66a:	8f 93       	push	r24
 66c:	9f 93       	push	r25
 66e:	af 93       	push	r26
 670:	bf 93       	push	r27
 672:	cf 93       	push	r28
 674:	df 93       	push	r29
 676:	ef 93       	push	r30
 678:	ff 93       	push	r31
 67a:	a0 91 62 07 	lds	r26, 0x0762	; 0x800762 <pxCurrentTCB>
 67e:	b0 91 63 07 	lds	r27, 0x0763	; 0x800763 <pxCurrentTCB+0x1>
 682:	0d b6       	in	r0, 0x3d	; 61
 684:	0d 92       	st	X+, r0
 686:	0e b6       	in	r0, 0x3e	; 62
	vTaskIncrementTick();
	vTaskSwitchContext();
 688:	0d 92       	st	X+, r0
 68a:	85 d1       	rcall	.+778    	; 0x996 <vTaskIncrementTick>
	portRESTORE_CONTEXT();
 68c:	17 d3       	rcall	.+1582   	; 0xcbc <vTaskSwitchContext>
 68e:	a0 91 62 07 	lds	r26, 0x0762	; 0x800762 <pxCurrentTCB>
 692:	b0 91 63 07 	lds	r27, 0x0763	; 0x800763 <pxCurrentTCB+0x1>
 696:	cd 91       	ld	r28, X+
 698:	cd bf       	out	0x3d, r28	; 61
 69a:	dd 91       	ld	r29, X+
 69c:	de bf       	out	0x3e, r29	; 62
 69e:	ff 91       	pop	r31
 6a0:	ef 91       	pop	r30
 6a2:	df 91       	pop	r29
 6a4:	cf 91       	pop	r28
 6a6:	bf 91       	pop	r27
 6a8:	af 91       	pop	r26
 6aa:	9f 91       	pop	r25
 6ac:	8f 91       	pop	r24
 6ae:	7f 91       	pop	r23
 6b0:	6f 91       	pop	r22
 6b2:	5f 91       	pop	r21
 6b4:	4f 91       	pop	r20
 6b6:	3f 91       	pop	r19
 6b8:	2f 91       	pop	r18
 6ba:	1f 91       	pop	r17
 6bc:	0f 91       	pop	r16
 6be:	ff 90       	pop	r15
 6c0:	ef 90       	pop	r14
 6c2:	df 90       	pop	r13
 6c4:	cf 90       	pop	r12
 6c6:	bf 90       	pop	r11
 6c8:	af 90       	pop	r10
 6ca:	9f 90       	pop	r9
 6cc:	8f 90       	pop	r8
 6ce:	7f 90       	pop	r7
 6d0:	6f 90       	pop	r6
 6d2:	5f 90       	pop	r5
 6d4:	4f 90       	pop	r4
 6d6:	3f 90       	pop	r3
 6d8:	2f 90       	pop	r2
 6da:	1f 90       	pop	r1
 6dc:	0f 90       	pop	r0
 6de:	0f be       	out	0x3f, r0	; 63

	asm volatile ( "ret" );
 6e0:	0f 90       	pop	r0
 6e2:	08 95       	ret

000006e4 <__vector_13>:
}
 6e4:	a6 df       	rcall	.-180    	; 0x632 <vPortYieldFromTick>
 6e6:	18 95       	reti

000006e8 <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
 6e8:	cf 93       	push	r28
 6ea:	df 93       	push	r29
 6ec:	ec 01       	movw	r28, r24
 6ee:	e0 91 62 07 	lds	r30, 0x0762	; 0x800762 <pxCurrentTCB>
 6f2:	f0 91 63 07 	lds	r31, 0x0763	; 0x800763 <pxCurrentTCB+0x1>
 6f6:	93 83       	std	Z+3, r25	; 0x03
 6f8:	82 83       	std	Z+2, r24	; 0x02
 6fa:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <xTickCount>
 6fe:	90 91 13 07 	lds	r25, 0x0713	; 0x800713 <xTickCount+0x1>
 702:	c8 17       	cp	r28, r24
 704:	d9 07       	cpc	r29, r25
 706:	60 f4       	brcc	.+24     	; 0x720 <prvAddCurrentTaskToDelayedList+0x38>
 708:	60 91 62 07 	lds	r22, 0x0762	; 0x800762 <pxCurrentTCB>
 70c:	70 91 63 07 	lds	r23, 0x0763	; 0x800763 <pxCurrentTCB+0x1>
 710:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <pxOverflowDelayedTaskList>
 714:	90 91 29 07 	lds	r25, 0x0729	; 0x800729 <pxOverflowDelayedTaskList+0x1>
 718:	6e 5f       	subi	r22, 0xFE	; 254
 71a:	7f 4f       	sbci	r23, 0xFF	; 255
 71c:	33 dd       	rcall	.-1434   	; 0x184 <vListInsert>
 71e:	16 c0       	rjmp	.+44     	; 0x74c <prvAddCurrentTaskToDelayedList+0x64>
 720:	60 91 62 07 	lds	r22, 0x0762	; 0x800762 <pxCurrentTCB>
 724:	70 91 63 07 	lds	r23, 0x0763	; 0x800763 <pxCurrentTCB+0x1>
 728:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <pxDelayedTaskList>
 72c:	90 91 2b 07 	lds	r25, 0x072B	; 0x80072b <pxDelayedTaskList+0x1>
 730:	6e 5f       	subi	r22, 0xFE	; 254
 732:	7f 4f       	sbci	r23, 0xFF	; 255
 734:	27 dd       	rcall	.-1458   	; 0x184 <vListInsert>
 736:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <xNextTaskUnblockTime>
 73a:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <xNextTaskUnblockTime+0x1>
 73e:	c8 17       	cp	r28, r24
 740:	d9 07       	cpc	r29, r25
 742:	20 f4       	brcc	.+8      	; 0x74c <prvAddCurrentTaskToDelayedList+0x64>
 744:	d0 93 02 01 	sts	0x0102, r29	; 0x800102 <xNextTaskUnblockTime+0x1>
 748:	c0 93 01 01 	sts	0x0101, r28	; 0x800101 <xNextTaskUnblockTime>
 74c:	df 91       	pop	r29
 74e:	cf 91       	pop	r28
 750:	08 95       	ret

00000752 <xTaskGenericCreate>:
 752:	4f 92       	push	r4
 754:	5f 92       	push	r5
 756:	6f 92       	push	r6
 758:	7f 92       	push	r7
 75a:	8f 92       	push	r8
 75c:	9f 92       	push	r9
 75e:	af 92       	push	r10
 760:	bf 92       	push	r11
 762:	cf 92       	push	r12
 764:	df 92       	push	r13
 766:	ef 92       	push	r14
 768:	ff 92       	push	r15
 76a:	0f 93       	push	r16
 76c:	1f 93       	push	r17
 76e:	cf 93       	push	r28
 770:	df 93       	push	r29
 772:	5c 01       	movw	r10, r24
 774:	4b 01       	movw	r8, r22
 776:	3a 01       	movw	r6, r20
 778:	29 01       	movw	r4, r18
 77a:	81 e2       	ldi	r24, 0x21	; 33
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	a4 dc       	rcall	.-1720   	; 0xc8 <pvPortMalloc>
 780:	ec 01       	movw	r28, r24
 782:	89 2b       	or	r24, r25
 784:	09 f4       	brne	.+2      	; 0x788 <xTaskGenericCreate+0x36>
 786:	c6 c0       	rjmp	.+396    	; 0x914 <xTaskGenericCreate+0x1c2>
 788:	c1 14       	cp	r12, r1
 78a:	d1 04       	cpc	r13, r1
 78c:	09 f0       	breq	.+2      	; 0x790 <xTaskGenericCreate+0x3e>
 78e:	be c0       	rjmp	.+380    	; 0x90c <xTaskGenericCreate+0x1ba>
 790:	c3 01       	movw	r24, r6
 792:	9a dc       	rcall	.-1740   	; 0xc8 <pvPortMalloc>
 794:	98 8f       	std	Y+24, r25	; 0x18
 796:	8f 8b       	std	Y+23, r24	; 0x17
 798:	00 97       	sbiw	r24, 0x00	; 0
 79a:	19 f4       	brne	.+6      	; 0x7a2 <xTaskGenericCreate+0x50>
 79c:	ce 01       	movw	r24, r28
 79e:	b8 dc       	rcall	.-1680   	; 0x110 <vPortFree>
 7a0:	b9 c0       	rjmp	.+370    	; 0x914 <xTaskGenericCreate+0x1c2>
 7a2:	a3 01       	movw	r20, r6
 7a4:	65 ea       	ldi	r22, 0xA5	; 165
 7a6:	70 e0       	ldi	r23, 0x00	; 0
 7a8:	f5 d2       	rcall	.+1514   	; 0xd94 <memset>
 7aa:	93 01       	movw	r18, r6
 7ac:	21 50       	subi	r18, 0x01	; 1
 7ae:	31 09       	sbc	r19, r1
 7b0:	8f 89       	ldd	r24, Y+23	; 0x17
 7b2:	98 8d       	ldd	r25, Y+24	; 0x18
 7b4:	3c 01       	movw	r6, r24
 7b6:	62 0e       	add	r6, r18
 7b8:	73 1e       	adc	r7, r19
 7ba:	48 e0       	ldi	r20, 0x08	; 8
 7bc:	50 e0       	ldi	r21, 0x00	; 0
 7be:	b4 01       	movw	r22, r8
 7c0:	ce 01       	movw	r24, r28
 7c2:	49 96       	adiw	r24, 0x19	; 25
 7c4:	ee d2       	rcall	.+1500   	; 0xda2 <strncpy>
 7c6:	18 a2       	std	Y+32, r1	; 0x20
 7c8:	10 2f       	mov	r17, r16
 7ca:	04 30       	cpi	r16, 0x04	; 4
 7cc:	08 f0       	brcs	.+2      	; 0x7d0 <xTaskGenericCreate+0x7e>
 7ce:	13 e0       	ldi	r17, 0x03	; 3
 7d0:	1e 8b       	std	Y+22, r17	; 0x16
 7d2:	6e 01       	movw	r12, r28
 7d4:	82 e0       	ldi	r24, 0x02	; 2
 7d6:	c8 0e       	add	r12, r24
 7d8:	d1 1c       	adc	r13, r1
 7da:	c6 01       	movw	r24, r12
 7dc:	a8 dc       	rcall	.-1712   	; 0x12e <vListInitialiseItem>
 7de:	ce 01       	movw	r24, r28
 7e0:	0c 96       	adiw	r24, 0x0c	; 12
 7e2:	a5 dc       	rcall	.-1718   	; 0x12e <vListInitialiseItem>
 7e4:	d9 87       	std	Y+9, r29	; 0x09
 7e6:	c8 87       	std	Y+8, r28	; 0x08
 7e8:	84 e0       	ldi	r24, 0x04	; 4
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	81 1b       	sub	r24, r17
 7ee:	91 09       	sbc	r25, r1
 7f0:	9d 87       	std	Y+13, r25	; 0x0d
 7f2:	8c 87       	std	Y+12, r24	; 0x0c
 7f4:	db 8b       	std	Y+19, r29	; 0x13
 7f6:	ca 8b       	std	Y+18, r28	; 0x12
 7f8:	a2 01       	movw	r20, r4
 7fa:	b5 01       	movw	r22, r10
 7fc:	c3 01       	movw	r24, r6
 7fe:	1b de       	rcall	.-970    	; 0x436 <pxPortInitialiseStack>
 800:	99 83       	std	Y+1, r25	; 0x01
 802:	88 83       	st	Y, r24
 804:	e1 14       	cp	r14, r1
 806:	f1 04       	cpc	r15, r1
 808:	19 f0       	breq	.+6      	; 0x810 <xTaskGenericCreate+0xbe>
 80a:	f7 01       	movw	r30, r14
 80c:	d1 83       	std	Z+1, r29	; 0x01
 80e:	c0 83       	st	Z, r28
 810:	0f b6       	in	r0, 0x3f	; 63
 812:	f8 94       	cli
 814:	0f 92       	push	r0
 816:	80 91 14 07 	lds	r24, 0x0714	; 0x800714 <uxCurrentNumberOfTasks>
 81a:	8f 5f       	subi	r24, 0xFF	; 255
 81c:	80 93 14 07 	sts	0x0714, r24	; 0x800714 <uxCurrentNumberOfTasks>
 820:	80 91 62 07 	lds	r24, 0x0762	; 0x800762 <pxCurrentTCB>
 824:	90 91 63 07 	lds	r25, 0x0763	; 0x800763 <pxCurrentTCB+0x1>
 828:	89 2b       	or	r24, r25
 82a:	69 f5       	brne	.+90     	; 0x886 <xTaskGenericCreate+0x134>
 82c:	d0 93 63 07 	sts	0x0763, r29	; 0x800763 <pxCurrentTCB+0x1>
 830:	c0 93 62 07 	sts	0x0762, r28	; 0x800762 <pxCurrentTCB>
 834:	80 91 14 07 	lds	r24, 0x0714	; 0x800714 <uxCurrentNumberOfTasks>
 838:	81 30       	cpi	r24, 0x01	; 1
 83a:	a1 f5       	brne	.+104    	; 0x8a4 <xTaskGenericCreate+0x152>
 83c:	8e e3       	ldi	r24, 0x3E	; 62
 83e:	97 e0       	ldi	r25, 0x07	; 7
 840:	68 dc       	rcall	.-1840   	; 0x112 <vListInitialise>
 842:	87 e4       	ldi	r24, 0x47	; 71
 844:	97 e0       	ldi	r25, 0x07	; 7
 846:	65 dc       	rcall	.-1846   	; 0x112 <vListInitialise>
 848:	80 e5       	ldi	r24, 0x50	; 80
 84a:	97 e0       	ldi	r25, 0x07	; 7
 84c:	62 dc       	rcall	.-1852   	; 0x112 <vListInitialise>
 84e:	89 e5       	ldi	r24, 0x59	; 89
 850:	97 e0       	ldi	r25, 0x07	; 7
 852:	5f dc       	rcall	.-1858   	; 0x112 <vListInitialise>
 854:	85 e3       	ldi	r24, 0x35	; 53
 856:	97 e0       	ldi	r25, 0x07	; 7
 858:	5c dc       	rcall	.-1864   	; 0x112 <vListInitialise>
 85a:	8c e2       	ldi	r24, 0x2C	; 44
 85c:	97 e0       	ldi	r25, 0x07	; 7
 85e:	59 dc       	rcall	.-1870   	; 0x112 <vListInitialise>
 860:	8f e1       	ldi	r24, 0x1F	; 31
 862:	97 e0       	ldi	r25, 0x07	; 7
 864:	56 dc       	rcall	.-1876   	; 0x112 <vListInitialise>
 866:	86 e1       	ldi	r24, 0x16	; 22
 868:	97 e0       	ldi	r25, 0x07	; 7
 86a:	53 dc       	rcall	.-1882   	; 0x112 <vListInitialise>
 86c:	85 e3       	ldi	r24, 0x35	; 53
 86e:	97 e0       	ldi	r25, 0x07	; 7
 870:	90 93 2b 07 	sts	0x072B, r25	; 0x80072b <pxDelayedTaskList+0x1>
 874:	80 93 2a 07 	sts	0x072A, r24	; 0x80072a <pxDelayedTaskList>
 878:	8c e2       	ldi	r24, 0x2C	; 44
 87a:	97 e0       	ldi	r25, 0x07	; 7
 87c:	90 93 29 07 	sts	0x0729, r25	; 0x800729 <pxOverflowDelayedTaskList+0x1>
 880:	80 93 28 07 	sts	0x0728, r24	; 0x800728 <pxOverflowDelayedTaskList>
 884:	0f c0       	rjmp	.+30     	; 0x8a4 <xTaskGenericCreate+0x152>
 886:	80 91 0f 07 	lds	r24, 0x070F	; 0x80070f <xSchedulerRunning>
 88a:	81 11       	cpse	r24, r1
 88c:	0b c0       	rjmp	.+22     	; 0x8a4 <xTaskGenericCreate+0x152>
 88e:	e0 91 62 07 	lds	r30, 0x0762	; 0x800762 <pxCurrentTCB>
 892:	f0 91 63 07 	lds	r31, 0x0763	; 0x800763 <pxCurrentTCB+0x1>
 896:	86 89       	ldd	r24, Z+22	; 0x16
 898:	08 17       	cp	r16, r24
 89a:	20 f0       	brcs	.+8      	; 0x8a4 <xTaskGenericCreate+0x152>
 89c:	d0 93 63 07 	sts	0x0763, r29	; 0x800763 <pxCurrentTCB+0x1>
 8a0:	c0 93 62 07 	sts	0x0762, r28	; 0x800762 <pxCurrentTCB>
 8a4:	8e 89       	ldd	r24, Y+22	; 0x16
 8a6:	90 91 11 07 	lds	r25, 0x0711	; 0x800711 <uxTopUsedPriority>
 8aa:	98 17       	cp	r25, r24
 8ac:	10 f4       	brcc	.+4      	; 0x8b2 <xTaskGenericCreate+0x160>
 8ae:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <uxTopUsedPriority>
 8b2:	90 91 0a 07 	lds	r25, 0x070A	; 0x80070a <uxTaskNumber>
 8b6:	9f 5f       	subi	r25, 0xFF	; 255
 8b8:	90 93 0a 07 	sts	0x070A, r25	; 0x80070a <uxTaskNumber>
 8bc:	90 91 10 07 	lds	r25, 0x0710	; 0x800710 <uxTopReadyPriority>
 8c0:	98 17       	cp	r25, r24
 8c2:	10 f4       	brcc	.+4      	; 0x8c8 <xTaskGenericCreate+0x176>
 8c4:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <uxTopReadyPriority>
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	9c 01       	movw	r18, r24
 8cc:	22 0f       	add	r18, r18
 8ce:	33 1f       	adc	r19, r19
 8d0:	22 0f       	add	r18, r18
 8d2:	33 1f       	adc	r19, r19
 8d4:	22 0f       	add	r18, r18
 8d6:	33 1f       	adc	r19, r19
 8d8:	82 0f       	add	r24, r18
 8da:	93 1f       	adc	r25, r19
 8dc:	b6 01       	movw	r22, r12
 8de:	82 5c       	subi	r24, 0xC2	; 194
 8e0:	98 4f       	sbci	r25, 0xF8	; 248
 8e2:	29 dc       	rcall	.-1966   	; 0x136 <vListInsertEnd>
 8e4:	0f 90       	pop	r0
 8e6:	0f be       	out	0x3f, r0	; 63
 8e8:	80 91 0f 07 	lds	r24, 0x070F	; 0x80070f <xSchedulerRunning>
 8ec:	88 23       	and	r24, r24
 8ee:	51 f0       	breq	.+20     	; 0x904 <xTaskGenericCreate+0x1b2>
 8f0:	e0 91 62 07 	lds	r30, 0x0762	; 0x800762 <pxCurrentTCB>
 8f4:	f0 91 63 07 	lds	r31, 0x0763	; 0x800763 <pxCurrentTCB+0x1>
 8f8:	86 89       	ldd	r24, Z+22	; 0x16
 8fa:	80 17       	cp	r24, r16
 8fc:	28 f4       	brcc	.+10     	; 0x908 <xTaskGenericCreate+0x1b6>
 8fe:	41 de       	rcall	.-894    	; 0x582 <vPortYield>
 900:	81 e0       	ldi	r24, 0x01	; 1
 902:	09 c0       	rjmp	.+18     	; 0x916 <xTaskGenericCreate+0x1c4>
 904:	81 e0       	ldi	r24, 0x01	; 1
 906:	07 c0       	rjmp	.+14     	; 0x916 <xTaskGenericCreate+0x1c4>
 908:	81 e0       	ldi	r24, 0x01	; 1
 90a:	05 c0       	rjmp	.+10     	; 0x916 <xTaskGenericCreate+0x1c4>
 90c:	d8 8e       	std	Y+24, r13	; 0x18
 90e:	cf 8a       	std	Y+23, r12	; 0x17
 910:	c6 01       	movw	r24, r12
 912:	47 cf       	rjmp	.-370    	; 0x7a2 <xTaskGenericCreate+0x50>
 914:	8f ef       	ldi	r24, 0xFF	; 255
 916:	df 91       	pop	r29
 918:	cf 91       	pop	r28
 91a:	1f 91       	pop	r17
 91c:	0f 91       	pop	r16
 91e:	ff 90       	pop	r15
 920:	ef 90       	pop	r14
 922:	df 90       	pop	r13
 924:	cf 90       	pop	r12
 926:	bf 90       	pop	r11
 928:	af 90       	pop	r10
 92a:	9f 90       	pop	r9
 92c:	8f 90       	pop	r8
 92e:	7f 90       	pop	r7
 930:	6f 90       	pop	r6
 932:	5f 90       	pop	r5
 934:	4f 90       	pop	r4
 936:	08 95       	ret

00000938 <vTaskStartScheduler>:
 938:	af 92       	push	r10
 93a:	bf 92       	push	r11
 93c:	cf 92       	push	r12
 93e:	df 92       	push	r13
 940:	ef 92       	push	r14
 942:	ff 92       	push	r15
 944:	0f 93       	push	r16
 946:	a1 2c       	mov	r10, r1
 948:	b1 2c       	mov	r11, r1
 94a:	c1 2c       	mov	r12, r1
 94c:	d1 2c       	mov	r13, r1
 94e:	e1 2c       	mov	r14, r1
 950:	f1 2c       	mov	r15, r1
 952:	00 e0       	ldi	r16, 0x00	; 0
 954:	20 e0       	ldi	r18, 0x00	; 0
 956:	30 e0       	ldi	r19, 0x00	; 0
 958:	45 e5       	ldi	r20, 0x55	; 85
 95a:	50 e0       	ldi	r21, 0x00	; 0
 95c:	60 e2       	ldi	r22, 0x20	; 32
 95e:	71 e0       	ldi	r23, 0x01	; 1
 960:	88 e2       	ldi	r24, 0x28	; 40
 962:	96 e0       	ldi	r25, 0x06	; 6
 964:	f6 de       	rcall	.-532    	; 0x752 <xTaskGenericCreate>
 966:	81 30       	cpi	r24, 0x01	; 1
 968:	41 f4       	brne	.+16     	; 0x97a <vTaskStartScheduler+0x42>
 96a:	f8 94       	cli
 96c:	80 93 0f 07 	sts	0x070F, r24	; 0x80070f <xSchedulerRunning>
 970:	10 92 13 07 	sts	0x0713, r1	; 0x800713 <xTickCount+0x1>
 974:	10 92 12 07 	sts	0x0712, r1	; 0x800712 <xTickCount>
 978:	ca dd       	rcall	.-1132   	; 0x50e <xPortStartScheduler>
 97a:	0f 91       	pop	r16
 97c:	ff 90       	pop	r15
 97e:	ef 90       	pop	r14
 980:	df 90       	pop	r13
 982:	cf 90       	pop	r12
 984:	bf 90       	pop	r11
 986:	af 90       	pop	r10
 988:	08 95       	ret

0000098a <vTaskSuspendAll>:
 98a:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <uxSchedulerSuspended>
 98e:	8f 5f       	subi	r24, 0xFF	; 255
 990:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <uxSchedulerSuspended>
 994:	08 95       	ret

00000996 <vTaskIncrementTick>:
 996:	0f 93       	push	r16
 998:	1f 93       	push	r17
 99a:	cf 93       	push	r28
 99c:	df 93       	push	r29
 99e:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <uxSchedulerSuspended>
 9a2:	81 11       	cpse	r24, r1
 9a4:	af c0       	rjmp	.+350    	; 0xb04 <vTaskIncrementTick+0x16e>
 9a6:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <xTickCount>
 9aa:	90 91 13 07 	lds	r25, 0x0713	; 0x800713 <xTickCount+0x1>
 9ae:	01 96       	adiw	r24, 0x01	; 1
 9b0:	90 93 13 07 	sts	0x0713, r25	; 0x800713 <xTickCount+0x1>
 9b4:	80 93 12 07 	sts	0x0712, r24	; 0x800712 <xTickCount>
 9b8:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <xTickCount>
 9bc:	90 91 13 07 	lds	r25, 0x0713	; 0x800713 <xTickCount+0x1>
 9c0:	89 2b       	or	r24, r25
 9c2:	99 f5       	brne	.+102    	; 0xa2a <vTaskIncrementTick+0x94>
 9c4:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <pxDelayedTaskList>
 9c8:	90 91 2b 07 	lds	r25, 0x072B	; 0x80072b <pxDelayedTaskList+0x1>
 9cc:	20 91 28 07 	lds	r18, 0x0728	; 0x800728 <pxOverflowDelayedTaskList>
 9d0:	30 91 29 07 	lds	r19, 0x0729	; 0x800729 <pxOverflowDelayedTaskList+0x1>
 9d4:	30 93 2b 07 	sts	0x072B, r19	; 0x80072b <pxDelayedTaskList+0x1>
 9d8:	20 93 2a 07 	sts	0x072A, r18	; 0x80072a <pxDelayedTaskList>
 9dc:	90 93 29 07 	sts	0x0729, r25	; 0x800729 <pxOverflowDelayedTaskList+0x1>
 9e0:	80 93 28 07 	sts	0x0728, r24	; 0x800728 <pxOverflowDelayedTaskList>
 9e4:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <xNumOfOverflows>
 9e8:	8f 5f       	subi	r24, 0xFF	; 255
 9ea:	80 93 0b 07 	sts	0x070B, r24	; 0x80070b <xNumOfOverflows>
 9ee:	e0 91 2a 07 	lds	r30, 0x072A	; 0x80072a <pxDelayedTaskList>
 9f2:	f0 91 2b 07 	lds	r31, 0x072B	; 0x80072b <pxDelayedTaskList+0x1>
 9f6:	80 81       	ld	r24, Z
 9f8:	81 11       	cpse	r24, r1
 9fa:	07 c0       	rjmp	.+14     	; 0xa0a <vTaskIncrementTick+0x74>
 9fc:	8f ef       	ldi	r24, 0xFF	; 255
 9fe:	9f ef       	ldi	r25, 0xFF	; 255
 a00:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <xNextTaskUnblockTime+0x1>
 a04:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <xNextTaskUnblockTime>
 a08:	10 c0       	rjmp	.+32     	; 0xa2a <vTaskIncrementTick+0x94>
 a0a:	e0 91 2a 07 	lds	r30, 0x072A	; 0x80072a <pxDelayedTaskList>
 a0e:	f0 91 2b 07 	lds	r31, 0x072B	; 0x80072b <pxDelayedTaskList+0x1>
 a12:	05 80       	ldd	r0, Z+5	; 0x05
 a14:	f6 81       	ldd	r31, Z+6	; 0x06
 a16:	e0 2d       	mov	r30, r0
 a18:	06 80       	ldd	r0, Z+6	; 0x06
 a1a:	f7 81       	ldd	r31, Z+7	; 0x07
 a1c:	e0 2d       	mov	r30, r0
 a1e:	82 81       	ldd	r24, Z+2	; 0x02
 a20:	93 81       	ldd	r25, Z+3	; 0x03
 a22:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <xNextTaskUnblockTime+0x1>
 a26:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <xNextTaskUnblockTime>
 a2a:	20 91 12 07 	lds	r18, 0x0712	; 0x800712 <xTickCount>
 a2e:	30 91 13 07 	lds	r19, 0x0713	; 0x800713 <xTickCount+0x1>
 a32:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <xNextTaskUnblockTime>
 a36:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <xNextTaskUnblockTime+0x1>
 a3a:	28 17       	cp	r18, r24
 a3c:	39 07       	cpc	r19, r25
 a3e:	08 f4       	brcc	.+2      	; 0xa42 <vTaskIncrementTick+0xac>
 a40:	66 c0       	rjmp	.+204    	; 0xb0e <vTaskIncrementTick+0x178>
 a42:	e0 91 2a 07 	lds	r30, 0x072A	; 0x80072a <pxDelayedTaskList>
 a46:	f0 91 2b 07 	lds	r31, 0x072B	; 0x80072b <pxDelayedTaskList+0x1>
 a4a:	80 81       	ld	r24, Z
 a4c:	88 23       	and	r24, r24
 a4e:	99 f0       	breq	.+38     	; 0xa76 <vTaskIncrementTick+0xe0>
 a50:	e0 91 2a 07 	lds	r30, 0x072A	; 0x80072a <pxDelayedTaskList>
 a54:	f0 91 2b 07 	lds	r31, 0x072B	; 0x80072b <pxDelayedTaskList+0x1>
 a58:	05 80       	ldd	r0, Z+5	; 0x05
 a5a:	f6 81       	ldd	r31, Z+6	; 0x06
 a5c:	e0 2d       	mov	r30, r0
 a5e:	c6 81       	ldd	r28, Z+6	; 0x06
 a60:	d7 81       	ldd	r29, Z+7	; 0x07
 a62:	8a 81       	ldd	r24, Y+2	; 0x02
 a64:	9b 81       	ldd	r25, Y+3	; 0x03
 a66:	20 91 12 07 	lds	r18, 0x0712	; 0x800712 <xTickCount>
 a6a:	30 91 13 07 	lds	r19, 0x0713	; 0x800713 <xTickCount+0x1>
 a6e:	28 17       	cp	r18, r24
 a70:	39 07       	cpc	r19, r25
 a72:	f8 f4       	brcc	.+62     	; 0xab2 <vTaskIncrementTick+0x11c>
 a74:	19 c0       	rjmp	.+50     	; 0xaa8 <vTaskIncrementTick+0x112>
 a76:	8f ef       	ldi	r24, 0xFF	; 255
 a78:	9f ef       	ldi	r25, 0xFF	; 255
 a7a:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <xNextTaskUnblockTime+0x1>
 a7e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <xNextTaskUnblockTime>
 a82:	45 c0       	rjmp	.+138    	; 0xb0e <vTaskIncrementTick+0x178>
 a84:	e0 91 2a 07 	lds	r30, 0x072A	; 0x80072a <pxDelayedTaskList>
 a88:	f0 91 2b 07 	lds	r31, 0x072B	; 0x80072b <pxDelayedTaskList+0x1>
 a8c:	05 80       	ldd	r0, Z+5	; 0x05
 a8e:	f6 81       	ldd	r31, Z+6	; 0x06
 a90:	e0 2d       	mov	r30, r0
 a92:	c6 81       	ldd	r28, Z+6	; 0x06
 a94:	d7 81       	ldd	r29, Z+7	; 0x07
 a96:	8a 81       	ldd	r24, Y+2	; 0x02
 a98:	9b 81       	ldd	r25, Y+3	; 0x03
 a9a:	20 91 12 07 	lds	r18, 0x0712	; 0x800712 <xTickCount>
 a9e:	30 91 13 07 	lds	r19, 0x0713	; 0x800713 <xTickCount+0x1>
 aa2:	28 17       	cp	r18, r24
 aa4:	39 07       	cpc	r19, r25
 aa6:	28 f4       	brcc	.+10     	; 0xab2 <vTaskIncrementTick+0x11c>
 aa8:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <xNextTaskUnblockTime+0x1>
 aac:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <xNextTaskUnblockTime>
 ab0:	2e c0       	rjmp	.+92     	; 0xb0e <vTaskIncrementTick+0x178>
 ab2:	8e 01       	movw	r16, r28
 ab4:	0e 5f       	subi	r16, 0xFE	; 254
 ab6:	1f 4f       	sbci	r17, 0xFF	; 255
 ab8:	c8 01       	movw	r24, r16
 aba:	9f db       	rcall	.-2242   	; 0x1fa <vListRemove>
 abc:	8c 89       	ldd	r24, Y+20	; 0x14
 abe:	9d 89       	ldd	r25, Y+21	; 0x15
 ac0:	89 2b       	or	r24, r25
 ac2:	19 f0       	breq	.+6      	; 0xaca <vTaskIncrementTick+0x134>
 ac4:	ce 01       	movw	r24, r28
 ac6:	0c 96       	adiw	r24, 0x0c	; 12
 ac8:	98 db       	rcall	.-2256   	; 0x1fa <vListRemove>
 aca:	8e 89       	ldd	r24, Y+22	; 0x16
 acc:	90 91 10 07 	lds	r25, 0x0710	; 0x800710 <uxTopReadyPriority>
 ad0:	98 17       	cp	r25, r24
 ad2:	10 f4       	brcc	.+4      	; 0xad8 <vTaskIncrementTick+0x142>
 ad4:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <uxTopReadyPriority>
 ad8:	90 e0       	ldi	r25, 0x00	; 0
 ada:	9c 01       	movw	r18, r24
 adc:	22 0f       	add	r18, r18
 ade:	33 1f       	adc	r19, r19
 ae0:	22 0f       	add	r18, r18
 ae2:	33 1f       	adc	r19, r19
 ae4:	22 0f       	add	r18, r18
 ae6:	33 1f       	adc	r19, r19
 ae8:	82 0f       	add	r24, r18
 aea:	93 1f       	adc	r25, r19
 aec:	b8 01       	movw	r22, r16
 aee:	82 5c       	subi	r24, 0xC2	; 194
 af0:	98 4f       	sbci	r25, 0xF8	; 248
 af2:	21 db       	rcall	.-2494   	; 0x136 <vListInsertEnd>
 af4:	e0 91 2a 07 	lds	r30, 0x072A	; 0x80072a <pxDelayedTaskList>
 af8:	f0 91 2b 07 	lds	r31, 0x072B	; 0x80072b <pxDelayedTaskList+0x1>
 afc:	80 81       	ld	r24, Z
 afe:	81 11       	cpse	r24, r1
 b00:	c1 cf       	rjmp	.-126    	; 0xa84 <vTaskIncrementTick+0xee>
 b02:	b9 cf       	rjmp	.-142    	; 0xa76 <vTaskIncrementTick+0xe0>
 b04:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <uxMissedTicks>
 b08:	8f 5f       	subi	r24, 0xFF	; 255
 b0a:	80 93 0d 07 	sts	0x070D, r24	; 0x80070d <uxMissedTicks>
 b0e:	df 91       	pop	r29
 b10:	cf 91       	pop	r28
 b12:	1f 91       	pop	r17
 b14:	0f 91       	pop	r16
 b16:	08 95       	ret

00000b18 <xTaskResumeAll>:
 b18:	cf 92       	push	r12
 b1a:	df 92       	push	r13
 b1c:	ef 92       	push	r14
 b1e:	ff 92       	push	r15
 b20:	0f 93       	push	r16
 b22:	1f 93       	push	r17
 b24:	cf 93       	push	r28
 b26:	df 93       	push	r29
 b28:	0f b6       	in	r0, 0x3f	; 63
 b2a:	f8 94       	cli
 b2c:	0f 92       	push	r0
 b2e:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <uxSchedulerSuspended>
 b32:	81 50       	subi	r24, 0x01	; 1
 b34:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <uxSchedulerSuspended>
 b38:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <uxSchedulerSuspended>
 b3c:	81 11       	cpse	r24, r1
 b3e:	5f c0       	rjmp	.+190    	; 0xbfe <xTaskResumeAll+0xe6>
 b40:	80 91 14 07 	lds	r24, 0x0714	; 0x800714 <uxCurrentNumberOfTasks>
 b44:	81 11       	cpse	r24, r1
 b46:	2f c0       	rjmp	.+94     	; 0xba6 <xTaskResumeAll+0x8e>
 b48:	5d c0       	rjmp	.+186    	; 0xc04 <xTaskResumeAll+0xec>
 b4a:	d7 01       	movw	r26, r14
 b4c:	15 96       	adiw	r26, 0x05	; 5
 b4e:	ed 91       	ld	r30, X+
 b50:	fc 91       	ld	r31, X
 b52:	16 97       	sbiw	r26, 0x06	; 6
 b54:	c6 81       	ldd	r28, Z+6	; 0x06
 b56:	d7 81       	ldd	r29, Z+7	; 0x07
 b58:	ce 01       	movw	r24, r28
 b5a:	0c 96       	adiw	r24, 0x0c	; 12
 b5c:	4e db       	rcall	.-2404   	; 0x1fa <vListRemove>
 b5e:	8e 01       	movw	r16, r28
 b60:	0e 5f       	subi	r16, 0xFE	; 254
 b62:	1f 4f       	sbci	r17, 0xFF	; 255
 b64:	c8 01       	movw	r24, r16
 b66:	49 db       	rcall	.-2414   	; 0x1fa <vListRemove>
 b68:	8e 89       	ldd	r24, Y+22	; 0x16
 b6a:	90 91 10 07 	lds	r25, 0x0710	; 0x800710 <uxTopReadyPriority>
 b6e:	98 17       	cp	r25, r24
 b70:	10 f4       	brcc	.+4      	; 0xb76 <xTaskResumeAll+0x5e>
 b72:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <uxTopReadyPriority>
 b76:	90 e0       	ldi	r25, 0x00	; 0
 b78:	9c 01       	movw	r18, r24
 b7a:	22 0f       	add	r18, r18
 b7c:	33 1f       	adc	r19, r19
 b7e:	22 0f       	add	r18, r18
 b80:	33 1f       	adc	r19, r19
 b82:	22 0f       	add	r18, r18
 b84:	33 1f       	adc	r19, r19
 b86:	82 0f       	add	r24, r18
 b88:	93 1f       	adc	r25, r19
 b8a:	b8 01       	movw	r22, r16
 b8c:	82 5c       	subi	r24, 0xC2	; 194
 b8e:	98 4f       	sbci	r25, 0xF8	; 248
 b90:	d2 da       	rcall	.-2652   	; 0x136 <vListInsertEnd>
 b92:	e0 91 62 07 	lds	r30, 0x0762	; 0x800762 <pxCurrentTCB>
 b96:	f0 91 63 07 	lds	r31, 0x0763	; 0x800763 <pxCurrentTCB+0x1>
 b9a:	9e 89       	ldd	r25, Y+22	; 0x16
 b9c:	86 89       	ldd	r24, Z+22	; 0x16
 b9e:	98 17       	cp	r25, r24
 ba0:	58 f0       	brcs	.+22     	; 0xbb8 <xTaskResumeAll+0xa0>
 ba2:	dc 2c       	mov	r13, r12
 ba4:	09 c0       	rjmp	.+18     	; 0xbb8 <xTaskResumeAll+0xa0>
 ba6:	d1 2c       	mov	r13, r1
 ba8:	0f 2e       	mov	r0, r31
 baa:	ff e1       	ldi	r31, 0x1F	; 31
 bac:	ef 2e       	mov	r14, r31
 bae:	f7 e0       	ldi	r31, 0x07	; 7
 bb0:	ff 2e       	mov	r15, r31
 bb2:	f0 2d       	mov	r31, r0
 bb4:	cc 24       	eor	r12, r12
 bb6:	c3 94       	inc	r12
 bb8:	f7 01       	movw	r30, r14
 bba:	80 81       	ld	r24, Z
 bbc:	81 11       	cpse	r24, r1
 bbe:	c5 cf       	rjmp	.-118    	; 0xb4a <xTaskResumeAll+0x32>
 bc0:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <uxMissedTicks>
 bc4:	88 23       	and	r24, r24
 bc6:	79 f0       	breq	.+30     	; 0xbe6 <xTaskResumeAll+0xce>
 bc8:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <uxMissedTicks>
 bcc:	88 23       	and	r24, r24
 bce:	91 f0       	breq	.+36     	; 0xbf4 <xTaskResumeAll+0xdc>
 bd0:	e2 de       	rcall	.-572    	; 0x996 <vTaskIncrementTick>
 bd2:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <uxMissedTicks>
 bd6:	81 50       	subi	r24, 0x01	; 1
 bd8:	80 93 0d 07 	sts	0x070D, r24	; 0x80070d <uxMissedTicks>
 bdc:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <uxMissedTicks>
 be0:	81 11       	cpse	r24, r1
 be2:	f6 cf       	rjmp	.-20     	; 0xbd0 <xTaskResumeAll+0xb8>
 be4:	07 c0       	rjmp	.+14     	; 0xbf4 <xTaskResumeAll+0xdc>
 be6:	f1 e0       	ldi	r31, 0x01	; 1
 be8:	df 16       	cp	r13, r31
 bea:	21 f0       	breq	.+8      	; 0xbf4 <xTaskResumeAll+0xdc>
 bec:	80 91 0c 07 	lds	r24, 0x070C	; 0x80070c <xMissedYield>
 bf0:	81 30       	cpi	r24, 0x01	; 1
 bf2:	39 f4       	brne	.+14     	; 0xc02 <xTaskResumeAll+0xea>
 bf4:	10 92 0c 07 	sts	0x070C, r1	; 0x80070c <xMissedYield>
 bf8:	c4 dc       	rcall	.-1656   	; 0x582 <vPortYield>
 bfa:	81 e0       	ldi	r24, 0x01	; 1
 bfc:	03 c0       	rjmp	.+6      	; 0xc04 <xTaskResumeAll+0xec>
 bfe:	80 e0       	ldi	r24, 0x00	; 0
 c00:	01 c0       	rjmp	.+2      	; 0xc04 <xTaskResumeAll+0xec>
 c02:	80 e0       	ldi	r24, 0x00	; 0
 c04:	0f 90       	pop	r0
 c06:	0f be       	out	0x3f, r0	; 63
 c08:	df 91       	pop	r29
 c0a:	cf 91       	pop	r28
 c0c:	1f 91       	pop	r17
 c0e:	0f 91       	pop	r16
 c10:	ff 90       	pop	r15
 c12:	ef 90       	pop	r14
 c14:	df 90       	pop	r13
 c16:	cf 90       	pop	r12
 c18:	08 95       	ret

00000c1a <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
 c1a:	cf 93       	push	r28
 c1c:	df 93       	push	r29
 c1e:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
 c20:	89 2b       	or	r24, r25
		{
			vTaskSuspendAll();
 c22:	91 f0       	breq	.+36     	; 0xc48 <vTaskDelay+0x2e>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 c24:	b2 de       	rcall	.-668    	; 0x98a <vTaskSuspendAll>
 c26:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <xTickCount>
 c2a:	90 91 13 07 	lds	r25, 0x0713	; 0x800713 <xTickCount+0x1>
 c2e:	c8 0f       	add	r28, r24

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 c30:	d9 1f       	adc	r29, r25
 c32:	80 91 62 07 	lds	r24, 0x0762	; 0x800762 <pxCurrentTCB>
 c36:	90 91 63 07 	lds	r25, 0x0763	; 0x800763 <pxCurrentTCB+0x1>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
			}
			xAlreadyYielded = xTaskResumeAll();
 c3a:	02 96       	adiw	r24, 0x02	; 2
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 c3c:	de da       	rcall	.-2628   	; 0x1fa <vListRemove>
 c3e:	ce 01       	movw	r24, r28
		{
			portYIELD_WITHIN_API();
 c40:	53 dd       	rcall	.-1370   	; 0x6e8 <prvAddCurrentTaskToDelayedList>
 c42:	6a df       	rcall	.-300    	; 0xb18 <xTaskResumeAll>
		}
	}
 c44:	81 11       	cpse	r24, r1
 c46:	01 c0       	rjmp	.+2      	; 0xc4a <vTaskDelay+0x30>
 c48:	9c dc       	rcall	.-1736   	; 0x582 <vPortYield>
 c4a:	df 91       	pop	r29
 c4c:	cf 91       	pop	r28
 c4e:	08 95       	ret

00000c50 <prvIdleTask>:
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 c50:	0f 2e       	mov	r0, r31
 c52:	f6 e1       	ldi	r31, 0x16	; 22
 c54:	ef 2e       	mov	r14, r31
 c56:	f7 e0       	ldi	r31, 0x07	; 7
 c58:	ff 2e       	mov	r15, r31
 c5a:	f0 2d       	mov	r31, r0

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 c5c:	ce e3       	ldi	r28, 0x3E	; 62
 c5e:	d7 e0       	ldi	r29, 0x07	; 7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 c60:	80 91 15 07 	lds	r24, 0x0715	; 0x800715 <uxTasksDeleted>
 c64:	88 23       	and	r24, r24
		{
			vTaskSuspendAll();
 c66:	29 f1       	breq	.+74     	; 0xcb2 <prvIdleTask+0x62>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 c68:	90 de       	rcall	.-736    	; 0x98a <vTaskSuspendAll>
			xTaskResumeAll();
 c6a:	d7 01       	movw	r26, r14
 c6c:	1c 91       	ld	r17, X

			if( xListIsEmpty == pdFALSE )
 c6e:	54 df       	rcall	.-344    	; 0xb18 <xTaskResumeAll>
 c70:	11 23       	and	r17, r17
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 c72:	f9 f0       	breq	.+62     	; 0xcb2 <prvIdleTask+0x62>
 c74:	0f b6       	in	r0, 0x3f	; 63
 c76:	f8 94       	cli
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 c78:	0f 92       	push	r0
 c7a:	d7 01       	movw	r26, r14
 c7c:	15 96       	adiw	r26, 0x05	; 5
 c7e:	ed 91       	ld	r30, X+
 c80:	fc 91       	ld	r31, X
 c82:	16 97       	sbiw	r26, 0x06	; 6
					vListRemove( &( pxTCB->xGenericListItem ) );
 c84:	06 81       	ldd	r16, Z+6	; 0x06
 c86:	17 81       	ldd	r17, Z+7	; 0x07
 c88:	c8 01       	movw	r24, r16
					--uxCurrentNumberOfTasks;
 c8a:	02 96       	adiw	r24, 0x02	; 2
 c8c:	b6 da       	rcall	.-2708   	; 0x1fa <vListRemove>
 c8e:	80 91 14 07 	lds	r24, 0x0714	; 0x800714 <uxCurrentNumberOfTasks>
 c92:	81 50       	subi	r24, 0x01	; 1
					--uxTasksDeleted;
 c94:	80 93 14 07 	sts	0x0714, r24	; 0x800714 <uxCurrentNumberOfTasks>
 c98:	80 91 15 07 	lds	r24, 0x0715	; 0x800715 <uxTasksDeleted>
 c9c:	81 50       	subi	r24, 0x01	; 1
				}
				taskEXIT_CRITICAL();
 c9e:	80 93 15 07 	sts	0x0715, r24	; 0x800715 <uxTasksDeleted>
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 ca2:	0f 90       	pop	r0
 ca4:	0f be       	out	0x3f, r0	; 63
		vPortFree( pxTCB );
 ca6:	f8 01       	movw	r30, r16
 ca8:	87 89       	ldd	r24, Z+23	; 0x17

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 caa:	90 8d       	ldd	r25, Z+24	; 0x18
 cac:	31 da       	rcall	.-2974   	; 0x110 <vPortFree>
 cae:	c8 01       	movw	r24, r16
			{
				taskYIELD();
 cb0:	2f da       	rcall	.-2978   	; 0x110 <vPortFree>
 cb2:	88 81       	ld	r24, Y
 cb4:	82 30       	cpi	r24, 0x02	; 2
 cb6:	a0 f2       	brcs	.-88     	; 0xc60 <prvIdleTask+0x10>
 cb8:	64 dc       	rcall	.-1848   	; 0x582 <vPortYield>
 cba:	d2 cf       	rjmp	.-92     	; 0xc60 <prvIdleTask+0x10>

00000cbc <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 cbc:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <uxSchedulerSuspended>
 cc0:	81 11       	cpse	r24, r1
 cc2:	13 c0       	rjmp	.+38     	; 0xcea <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 cc4:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <uxTopReadyPriority>
 cc8:	90 e0       	ldi	r25, 0x00	; 0
 cca:	fc 01       	movw	r30, r24
 ccc:	ee 0f       	add	r30, r30
 cce:	ff 1f       	adc	r31, r31
 cd0:	ee 0f       	add	r30, r30
 cd2:	ff 1f       	adc	r31, r31
 cd4:	ee 0f       	add	r30, r30
 cd6:	ff 1f       	adc	r31, r31
 cd8:	8e 0f       	add	r24, r30
 cda:	9f 1f       	adc	r25, r31
 cdc:	fc 01       	movw	r30, r24
 cde:	e2 5c       	subi	r30, 0xC2	; 194
 ce0:	f8 4f       	sbci	r31, 0xF8	; 248
 ce2:	80 81       	ld	r24, Z
 ce4:	88 23       	and	r24, r24
 ce6:	29 f0       	breq	.+10     	; 0xcf2 <vTaskSwitchContext+0x36>
 ce8:	1b c0       	rjmp	.+54     	; 0xd20 <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 cea:	81 e0       	ldi	r24, 0x01	; 1
 cec:	80 93 0c 07 	sts	0x070C, r24	; 0x80070c <xMissedYield>
 cf0:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
 cf2:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <uxTopReadyPriority>
 cf6:	81 50       	subi	r24, 0x01	; 1
 cf8:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 cfc:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <uxTopReadyPriority>
 d00:	90 e0       	ldi	r25, 0x00	; 0
 d02:	fc 01       	movw	r30, r24
 d04:	ee 0f       	add	r30, r30
 d06:	ff 1f       	adc	r31, r31
 d08:	ee 0f       	add	r30, r30
 d0a:	ff 1f       	adc	r31, r31
 d0c:	ee 0f       	add	r30, r30
 d0e:	ff 1f       	adc	r31, r31
 d10:	8e 0f       	add	r24, r30
 d12:	9f 1f       	adc	r25, r31
 d14:	fc 01       	movw	r30, r24
 d16:	e2 5c       	subi	r30, 0xC2	; 194
 d18:	f8 4f       	sbci	r31, 0xF8	; 248
 d1a:	80 81       	ld	r24, Z
 d1c:	88 23       	and	r24, r24
 d1e:	49 f3       	breq	.-46     	; 0xcf2 <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 d20:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <uxTopReadyPriority>
 d24:	90 e0       	ldi	r25, 0x00	; 0
 d26:	9c 01       	movw	r18, r24
 d28:	22 0f       	add	r18, r18
 d2a:	33 1f       	adc	r19, r19
 d2c:	22 0f       	add	r18, r18
 d2e:	33 1f       	adc	r19, r19
 d30:	22 0f       	add	r18, r18
 d32:	33 1f       	adc	r19, r19
 d34:	28 0f       	add	r18, r24
 d36:	39 1f       	adc	r19, r25
 d38:	d9 01       	movw	r26, r18
 d3a:	a2 5c       	subi	r26, 0xC2	; 194
 d3c:	b8 4f       	sbci	r27, 0xF8	; 248
 d3e:	11 96       	adiw	r26, 0x01	; 1
 d40:	ed 91       	ld	r30, X+
 d42:	fc 91       	ld	r31, X
 d44:	12 97       	sbiw	r26, 0x02	; 2
 d46:	02 80       	ldd	r0, Z+2	; 0x02
 d48:	f3 81       	ldd	r31, Z+3	; 0x03
 d4a:	e0 2d       	mov	r30, r0
 d4c:	12 96       	adiw	r26, 0x02	; 2
 d4e:	fc 93       	st	X, r31
 d50:	ee 93       	st	-X, r30
 d52:	11 97       	sbiw	r26, 0x01	; 1
 d54:	2f 5b       	subi	r18, 0xBF	; 191
 d56:	38 4f       	sbci	r19, 0xF8	; 248
 d58:	e2 17       	cp	r30, r18
 d5a:	f3 07       	cpc	r31, r19
 d5c:	29 f4       	brne	.+10     	; 0xd68 <vTaskSwitchContext+0xac>
 d5e:	22 81       	ldd	r18, Z+2	; 0x02
 d60:	33 81       	ldd	r19, Z+3	; 0x03
 d62:	fd 01       	movw	r30, r26
 d64:	32 83       	std	Z+2, r19	; 0x02
 d66:	21 83       	std	Z+1, r18	; 0x01
 d68:	fc 01       	movw	r30, r24
 d6a:	ee 0f       	add	r30, r30
 d6c:	ff 1f       	adc	r31, r31
 d6e:	ee 0f       	add	r30, r30
 d70:	ff 1f       	adc	r31, r31
 d72:	ee 0f       	add	r30, r30
 d74:	ff 1f       	adc	r31, r31
 d76:	8e 0f       	add	r24, r30
 d78:	9f 1f       	adc	r25, r31
 d7a:	fc 01       	movw	r30, r24
 d7c:	e2 5c       	subi	r30, 0xC2	; 194
 d7e:	f8 4f       	sbci	r31, 0xF8	; 248
 d80:	01 80       	ldd	r0, Z+1	; 0x01
 d82:	f2 81       	ldd	r31, Z+2	; 0x02
 d84:	e0 2d       	mov	r30, r0
 d86:	86 81       	ldd	r24, Z+6	; 0x06
 d88:	97 81       	ldd	r25, Z+7	; 0x07
 d8a:	90 93 63 07 	sts	0x0763, r25	; 0x800763 <pxCurrentTCB+0x1>
 d8e:	80 93 62 07 	sts	0x0762, r24	; 0x800762 <pxCurrentTCB>
 d92:	08 95       	ret

00000d94 <memset>:
 d94:	dc 01       	movw	r26, r24
 d96:	01 c0       	rjmp	.+2      	; 0xd9a <memset+0x6>
 d98:	6d 93       	st	X+, r22
 d9a:	41 50       	subi	r20, 0x01	; 1
 d9c:	50 40       	sbci	r21, 0x00	; 0
 d9e:	e0 f7       	brcc	.-8      	; 0xd98 <memset+0x4>
 da0:	08 95       	ret

00000da2 <strncpy>:
 da2:	fb 01       	movw	r30, r22
 da4:	dc 01       	movw	r26, r24
 da6:	41 50       	subi	r20, 0x01	; 1
 da8:	50 40       	sbci	r21, 0x00	; 0
 daa:	48 f0       	brcs	.+18     	; 0xdbe <strncpy+0x1c>
 dac:	01 90       	ld	r0, Z+
 dae:	0d 92       	st	X+, r0
 db0:	00 20       	and	r0, r0
 db2:	c9 f7       	brne	.-14     	; 0xda6 <strncpy+0x4>
 db4:	01 c0       	rjmp	.+2      	; 0xdb8 <strncpy+0x16>
 db6:	1d 92       	st	X+, r1
 db8:	41 50       	subi	r20, 0x01	; 1
 dba:	50 40       	sbci	r21, 0x00	; 0
 dbc:	e0 f7       	brcc	.-8      	; 0xdb6 <strncpy+0x14>
 dbe:	08 95       	ret

00000dc0 <_exit>:
 dc0:	f8 94       	cli

00000dc2 <__stop_program>:
 dc2:	ff cf       	rjmp	.-2      	; 0xdc2 <__stop_program>
