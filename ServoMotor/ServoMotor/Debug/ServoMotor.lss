
ServoMotor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00000e7a  00000f0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e7a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000642  00800126  00800126  00000f34  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f34  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  00000fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002464  00000000  00000000  0000119c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f26  00000000  00000000  00003600  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015eb  00000000  00000000  00004526  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004ec  00000000  00000000  00005b14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000da7  00000000  00000000  00006000  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012e2  00000000  00000000  00006da7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f0  00000000  00000000  00008089  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	b2 c3       	rjmp	.+1892   	; 0x79a <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e7       	ldi	r30, 0x7A	; 122
  a0:	fe e0       	ldi	r31, 0x0E	; 14
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 32       	cpi	r26, 0x26	; 38
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	27 e0       	ldi	r18, 0x07	; 7
  b4:	a6 e2       	ldi	r26, 0x26	; 38
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 36       	cpi	r26, 0x68	; 104
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	06 d2       	rcall	.+1036   	; 0x4d0 <main>
  c4:	d8 c6       	rjmp	.+3504   	; 0xe76 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
  ce:	b8 d4       	rcall	.+2416   	; 0xa40 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
  d0:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <__data_end>
  d4:	30 91 27 01 	lds	r19, 0x0127	; 0x800127 <__data_end+0x1>
  d8:	c9 01       	movw	r24, r18
  da:	8c 0f       	add	r24, r28
  dc:	9d 1f       	adc	r25, r29
  de:	8c 3d       	cpi	r24, 0xDC	; 220
  e0:	45 e0       	ldi	r20, 0x05	; 5
  e2:	94 07       	cpc	r25, r20
  e4:	58 f4       	brcc	.+22     	; 0xfc <pvPortMalloc+0x34>
  e6:	28 17       	cp	r18, r24
  e8:	39 07       	cpc	r19, r25
  ea:	58 f4       	brcc	.+22     	; 0x102 <pvPortMalloc+0x3a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
  ec:	e9 01       	movw	r28, r18
  ee:	c8 5d       	subi	r28, 0xD8	; 216
  f0:	de 4f       	sbci	r29, 0xFE	; 254
			xNextFreeByte += xWantedSize;			
  f2:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__data_end+0x1>
  f6:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
  fa:	05 c0       	rjmp	.+10     	; 0x106 <pvPortMalloc+0x3e>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
  fc:	c0 e0       	ldi	r28, 0x00	; 0
  fe:	d0 e0       	ldi	r29, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <pvPortMalloc+0x3e>
 102:	c0 e0       	ldi	r28, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
 104:	d0 e0       	ldi	r29, 0x00	; 0
 106:	63 d5       	rcall	.+2758   	; 0xbce <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
 108:	ce 01       	movw	r24, r28
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 110:	08 95       	ret

00000112 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
 112:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 114:	03 96       	adiw	r24, 0x03	; 3
 116:	92 83       	std	Z+2, r25	; 0x02
 118:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 11a:	2f ef       	ldi	r18, 0xFF	; 255
 11c:	3f ef       	ldi	r19, 0xFF	; 255
 11e:	34 83       	std	Z+4, r19	; 0x04
 120:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 122:	96 83       	std	Z+6, r25	; 0x06
 124:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 126:	90 87       	std	Z+8, r25	; 0x08
 128:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 12a:	10 82       	st	Z, r1
 12c:	08 95       	ret

0000012e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 12e:	fc 01       	movw	r30, r24
 130:	11 86       	std	Z+9, r1	; 0x09
 132:	10 86       	std	Z+8, r1	; 0x08
 134:	08 95       	ret

00000136 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	fc 01       	movw	r30, r24
 13c:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
 13e:	21 81       	ldd	r18, Z+1	; 0x01
 140:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
 142:	e9 01       	movw	r28, r18
 144:	8a 81       	ldd	r24, Y+2	; 0x02
 146:	9b 81       	ldd	r25, Y+3	; 0x03
 148:	13 96       	adiw	r26, 0x03	; 3
 14a:	9c 93       	st	X, r25
 14c:	8e 93       	st	-X, r24
 14e:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
 150:	81 81       	ldd	r24, Z+1	; 0x01
 152:	92 81       	ldd	r25, Z+2	; 0x02
 154:	15 96       	adiw	r26, 0x05	; 5
 156:	9c 93       	st	X, r25
 158:	8e 93       	st	-X, r24
 15a:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 15c:	8a 81       	ldd	r24, Y+2	; 0x02
 15e:	9b 81       	ldd	r25, Y+3	; 0x03
 160:	ec 01       	movw	r28, r24
 162:	7d 83       	std	Y+5, r23	; 0x05
 164:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 166:	e9 01       	movw	r28, r18
 168:	7b 83       	std	Y+3, r23	; 0x03
 16a:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 16c:	72 83       	std	Z+2, r23	; 0x02
 16e:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 170:	19 96       	adiw	r26, 0x09	; 9
 172:	fc 93       	st	X, r31
 174:	ee 93       	st	-X, r30
 176:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
 178:	80 81       	ld	r24, Z
 17a:	8f 5f       	subi	r24, 0xFF	; 255
 17c:	80 83       	st	Z, r24
}
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 18a:	48 81       	ld	r20, Y
 18c:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 18e:	4f 3f       	cpi	r20, 0xFF	; 255
 190:	2f ef       	ldi	r18, 0xFF	; 255
 192:	52 07       	cpc	r21, r18
 194:	31 f4       	brne	.+12     	; 0x1a2 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 196:	dc 01       	movw	r26, r24
 198:	17 96       	adiw	r26, 0x07	; 7
 19a:	ed 91       	ld	r30, X+
 19c:	fc 91       	ld	r31, X
 19e:	18 97       	sbiw	r26, 0x08	; 8
 1a0:	17 c0       	rjmp	.+46     	; 0x1d0 <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 1a2:	fc 01       	movw	r30, r24
 1a4:	33 96       	adiw	r30, 0x03	; 3
 1a6:	dc 01       	movw	r26, r24
 1a8:	15 96       	adiw	r26, 0x05	; 5
 1aa:	2d 91       	ld	r18, X+
 1ac:	3c 91       	ld	r19, X
 1ae:	16 97       	sbiw	r26, 0x06	; 6
 1b0:	d9 01       	movw	r26, r18
 1b2:	2d 91       	ld	r18, X+
 1b4:	3c 91       	ld	r19, X
 1b6:	42 17       	cp	r20, r18
 1b8:	53 07       	cpc	r21, r19
 1ba:	50 f0       	brcs	.+20     	; 0x1d0 <vListInsert+0x4c>
 1bc:	02 80       	ldd	r0, Z+2	; 0x02
 1be:	f3 81       	ldd	r31, Z+3	; 0x03
 1c0:	e0 2d       	mov	r30, r0
 1c2:	a2 81       	ldd	r26, Z+2	; 0x02
 1c4:	b3 81       	ldd	r27, Z+3	; 0x03
 1c6:	2d 91       	ld	r18, X+
 1c8:	3c 91       	ld	r19, X
 1ca:	42 17       	cp	r20, r18
 1cc:	53 07       	cpc	r21, r19
 1ce:	b0 f7       	brcc	.-20     	; 0x1bc <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 1d0:	a2 81       	ldd	r26, Z+2	; 0x02
 1d2:	b3 81       	ldd	r27, Z+3	; 0x03
 1d4:	bb 83       	std	Y+3, r27	; 0x03
 1d6:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 1d8:	15 96       	adiw	r26, 0x05	; 5
 1da:	dc 93       	st	X, r29
 1dc:	ce 93       	st	-X, r28
 1de:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
 1e0:	fd 83       	std	Y+5, r31	; 0x05
 1e2:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 1e4:	d3 83       	std	Z+3, r29	; 0x03
 1e6:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 1e8:	99 87       	std	Y+9, r25	; 0x09
 1ea:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
 1ec:	fc 01       	movw	r30, r24
 1ee:	20 81       	ld	r18, Z
 1f0:	2f 5f       	subi	r18, 0xFF	; 255
 1f2:	20 83       	st	Z, r18
}
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
 1fa:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 1fc:	a2 81       	ldd	r26, Z+2	; 0x02
 1fe:	b3 81       	ldd	r27, Z+3	; 0x03
 200:	84 81       	ldd	r24, Z+4	; 0x04
 202:	95 81       	ldd	r25, Z+5	; 0x05
 204:	15 96       	adiw	r26, 0x05	; 5
 206:	9c 93       	st	X, r25
 208:	8e 93       	st	-X, r24
 20a:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 20c:	a4 81       	ldd	r26, Z+4	; 0x04
 20e:	b5 81       	ldd	r27, Z+5	; 0x05
 210:	82 81       	ldd	r24, Z+2	; 0x02
 212:	93 81       	ldd	r25, Z+3	; 0x03
 214:	13 96       	adiw	r26, 0x03	; 3
 216:	9c 93       	st	X, r25
 218:	8e 93       	st	-X, r24
 21a:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 21c:	a0 85       	ldd	r26, Z+8	; 0x08
 21e:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 220:	11 96       	adiw	r26, 0x01	; 1
 222:	8d 91       	ld	r24, X+
 224:	9c 91       	ld	r25, X
 226:	12 97       	sbiw	r26, 0x02	; 2
 228:	e8 17       	cp	r30, r24
 22a:	f9 07       	cpc	r31, r25
 22c:	31 f4       	brne	.+12     	; 0x23a <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 22e:	84 81       	ldd	r24, Z+4	; 0x04
 230:	95 81       	ldd	r25, Z+5	; 0x05
 232:	12 96       	adiw	r26, 0x02	; 2
 234:	9c 93       	st	X, r25
 236:	8e 93       	st	-X, r24
 238:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
 23a:	11 86       	std	Z+9, r1	; 0x09
 23c:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 23e:	8c 91       	ld	r24, X
 240:	81 50       	subi	r24, 0x01	; 1
 242:	8c 93       	st	X, r24
 244:	08 95       	ret

00000246 <adc_init>:
}

 enum SERVOState {servo_init,drive_low, drive_high} servo_state;

 void SERVO_Init(){
	 servo_state = servo_init;
 246:	80 e4       	ldi	r24, 0x40	; 64
 248:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 24c:	87 e8       	ldi	r24, 0x87	; 135
 24e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 252:	08 95       	ret

00000254 <adc_read>:
 254:	ec e7       	ldi	r30, 0x7C	; 124
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	90 81       	ld	r25, Z
 25a:	98 7f       	andi	r25, 0xF8	; 248
 25c:	87 70       	andi	r24, 0x07	; 7
 25e:	89 2b       	or	r24, r25
 260:	80 83       	st	Z, r24
 262:	ea e7       	ldi	r30, 0x7A	; 122
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	80 81       	ld	r24, Z
 268:	80 64       	ori	r24, 0x40	; 64
 26a:	80 83       	st	Z, r24
 26c:	80 81       	ld	r24, Z
 26e:	86 fd       	sbrc	r24, 6
 270:	fd cf       	rjmp	.-6      	; 0x26c <adc_read+0x18>
 272:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 276:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 27a:	08 95       	ret

0000027c <STEERING_Tick>:
 27c:	80 91 67 07 	lds	r24, 0x0767	; 0x800767 <steering_state>
 280:	81 11       	cpse	r24, r1
 282:	65 c0       	rjmp	.+202    	; 0x34e <STEERING_Tick+0xd2>
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	e6 df       	rcall	.-52     	; 0x254 <adc_read>
 288:	90 93 05 07 	sts	0x0705, r25	; 0x800705 <steering+0x1>
 28c:	80 93 04 07 	sts	0x0704, r24	; 0x800704 <steering>
 290:	85 34       	cpi	r24, 0x45	; 69
 292:	22 e0       	ldi	r18, 0x02	; 2
 294:	92 07       	cpc	r25, r18
 296:	c0 f0       	brcs	.+48     	; 0x2c8 <STEERING_Tick+0x4c>
 298:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 29c:	88 23       	and	r24, r24
 29e:	09 f4       	brne	.+2      	; 0x2a2 <STEERING_Tick+0x26>
 2a0:	56 c0       	rjmp	.+172    	; 0x34e <STEERING_Tick+0xd2>
 2a2:	10 92 0b 07 	sts	0x070B, r1	; 0x80070b <right>
 2a6:	91 e0       	ldi	r25, 0x01	; 1
 2a8:	90 93 0a 07 	sts	0x070A, r25	; 0x80070a <left>
 2ac:	90 93 09 07 	sts	0x0709, r25	; 0x800709 <max_servo>
 2b0:	81 50       	subi	r24, 0x01	; 1
 2b2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 2b6:	81 30       	cpi	r24, 0x01	; 1
 2b8:	21 f0       	breq	.+8      	; 0x2c2 <STEERING_Tick+0x46>
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <needs_centering>
 2c0:	46 c0       	rjmp	.+140    	; 0x34e <STEERING_Tick+0xd2>
 2c2:	10 92 06 07 	sts	0x0706, r1	; 0x800706 <needs_centering>
 2c6:	43 c0       	rjmp	.+134    	; 0x34e <STEERING_Tick+0xd2>
 2c8:	84 3f       	cpi	r24, 0xF4	; 244
 2ca:	91 40       	sbci	r25, 0x01	; 1
 2cc:	c0 f4       	brcc	.+48     	; 0x2fe <STEERING_Tick+0x82>
 2ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2d2:	82 30       	cpi	r24, 0x02	; 2
 2d4:	e0 f5       	brcc	.+120    	; 0x34e <STEERING_Tick+0xd2>
 2d6:	91 e0       	ldi	r25, 0x01	; 1
 2d8:	90 93 0b 07 	sts	0x070B, r25	; 0x80070b <right>
 2dc:	10 92 0a 07 	sts	0x070A, r1	; 0x80070a <left>
 2e0:	92 e0       	ldi	r25, 0x02	; 2
 2e2:	90 93 09 07 	sts	0x0709, r25	; 0x800709 <max_servo>
 2e6:	8f 5f       	subi	r24, 0xFF	; 255
 2e8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 2ec:	81 30       	cpi	r24, 0x01	; 1
 2ee:	21 f0       	breq	.+8      	; 0x2f8 <STEERING_Tick+0x7c>
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <needs_centering>
 2f6:	2b c0       	rjmp	.+86     	; 0x34e <STEERING_Tick+0xd2>
 2f8:	10 92 06 07 	sts	0x0706, r1	; 0x800706 <needs_centering>
 2fc:	28 c0       	rjmp	.+80     	; 0x34e <STEERING_Tick+0xd2>
 2fe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 302:	81 11       	cpse	r24, r1
 304:	0d c0       	rjmp	.+26     	; 0x320 <STEERING_Tick+0xa4>
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	80 93 0b 07 	sts	0x070B, r24	; 0x80070b <right>
 30c:	10 92 0a 07 	sts	0x070A, r1	; 0x80070a <left>
 310:	92 e0       	ldi	r25, 0x02	; 2
 312:	90 93 09 07 	sts	0x0709, r25	; 0x800709 <max_servo>
 316:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 31a:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <needs_centering>
 31e:	17 c0       	rjmp	.+46     	; 0x34e <STEERING_Tick+0xd2>
 320:	82 30       	cpi	r24, 0x02	; 2
 322:	68 f0       	brcs	.+26     	; 0x33e <STEERING_Tick+0xc2>
 324:	10 92 0b 07 	sts	0x070B, r1	; 0x80070b <right>
 328:	91 e0       	ldi	r25, 0x01	; 1
 32a:	90 93 0a 07 	sts	0x070A, r25	; 0x80070a <left>
 32e:	90 93 09 07 	sts	0x0709, r25	; 0x800709 <max_servo>
 332:	81 50       	subi	r24, 0x01	; 1
 334:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 338:	90 93 06 07 	sts	0x0706, r25	; 0x800706 <needs_centering>
 33c:	08 c0       	rjmp	.+16     	; 0x34e <STEERING_Tick+0xd2>
 33e:	10 92 0b 07 	sts	0x070B, r1	; 0x80070b <right>
 342:	10 92 0a 07 	sts	0x070A, r1	; 0x80070a <left>
 346:	10 92 09 07 	sts	0x0709, r1	; 0x800709 <max_servo>
 34a:	10 92 06 07 	sts	0x0706, r1	; 0x800706 <needs_centering>
 34e:	80 91 67 07 	lds	r24, 0x0767	; 0x800767 <steering_state>
 352:	81 11       	cpse	r24, r1
 354:	10 92 67 07 	sts	0x0767, r1	; 0x800767 <steering_state>
 358:	08 95       	ret

0000035a <STEERINGSecTask>:
 35a:	10 92 67 07 	sts	0x0767, r1	; 0x800767 <steering_state>
 35e:	8e df       	rcall	.-228    	; 0x27c <STEERING_Tick>
 360:	8f e0       	ldi	r24, 0x0F	; 15
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	b5 d4       	rcall	.+2410   	; 0xcd0 <vTaskDelay>
 366:	fb cf       	rjmp	.-10     	; 0x35e <STEERINGSecTask+0x4>

00000368 <STEERINGSecPulse>:
 368:	af 92       	push	r10
 36a:	bf 92       	push	r11
 36c:	cf 92       	push	r12
 36e:	df 92       	push	r13
 370:	ef 92       	push	r14
 372:	ff 92       	push	r15
 374:	0f 93       	push	r16
 376:	a1 2c       	mov	r10, r1
 378:	b1 2c       	mov	r11, r1
 37a:	c1 2c       	mov	r12, r1
 37c:	d1 2c       	mov	r13, r1
 37e:	e1 2c       	mov	r14, r1
 380:	f1 2c       	mov	r15, r1
 382:	08 2f       	mov	r16, r24
 384:	20 e0       	ldi	r18, 0x00	; 0
 386:	30 e0       	ldi	r19, 0x00	; 0
 388:	45 e5       	ldi	r20, 0x55	; 85
 38a:	50 e0       	ldi	r21, 0x00	; 0
 38c:	63 e0       	ldi	r22, 0x03	; 3
 38e:	71 e0       	ldi	r23, 0x01	; 1
 390:	8d ea       	ldi	r24, 0xAD	; 173
 392:	91 e0       	ldi	r25, 0x01	; 1
 394:	39 d2       	rcall	.+1138   	; 0x808 <xTaskGenericCreate>
 396:	0f 91       	pop	r16
 398:	ff 90       	pop	r15
 39a:	ef 90       	pop	r14
 39c:	df 90       	pop	r13
 39e:	cf 90       	pop	r12
 3a0:	bf 90       	pop	r11
 3a2:	af 90       	pop	r10
 3a4:	08 95       	ret

000003a6 <SERVO_Tick>:
		default:
			break;
	}
	
	//Transitions
	switch(servo_state){
 3a6:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <servo_state>
 3aa:	81 30       	cpi	r24, 0x01	; 1
 3ac:	09 f4       	brne	.+2      	; 0x3b0 <SERVO_Tick+0xa>
 3ae:	4a c0       	rjmp	.+148    	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 3b0:	18 f0       	brcs	.+6      	; 0x3b8 <SERVO_Tick+0x12>
 3b2:	82 30       	cpi	r24, 0x02	; 2
 3b4:	d9 f0       	breq	.+54     	; 0x3ec <SERVO_Tick+0x46>
 3b6:	63 c0       	rjmp	.+198    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
		case servo_init:
			if(left || right){
 3b8:	80 91 0a 07 	lds	r24, 0x070A	; 0x80070a <left>
 3bc:	81 11       	cpse	r24, r1
 3be:	04 c0       	rjmp	.+8      	; 0x3c8 <SERVO_Tick+0x22>
 3c0:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <right>
 3c4:	88 23       	and	r24, r24
 3c6:	71 f0       	breq	.+28     	; 0x3e4 <SERVO_Tick+0x3e>
				servo_state = drive_high;
 3c8:	82 e0       	ldi	r24, 0x02	; 2
 3ca:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <servo_state>
				servo_counter = 0;
 3ce:	10 92 07 07 	sts	0x0707, r1	; 0x800707 <servo_counter>
				min_servo = 20 - max_servo;
 3d2:	90 91 09 07 	lds	r25, 0x0709	; 0x800709 <max_servo>
 3d6:	84 e1       	ldi	r24, 0x14	; 20
 3d8:	89 1b       	sub	r24, r25
 3da:	80 93 08 07 	sts	0x0708, r24	; 0x800708 <min_servo>
				PORTB = 0x01;
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	85 b9       	out	0x05, r24	; 5
 3e2:	08 95       	ret
			}
		  
			else{
				PORTB = 0x00;
 3e4:	15 b8       	out	0x05, r1	; 5
				servo_state = servo_init;
 3e6:	10 92 66 07 	sts	0x0766, r1	; 0x800766 <servo_state>
 3ea:	08 95       	ret
			}
			break;
		case drive_high:
			if((servo_counter < max_servo) && (left || right)){
 3ec:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <servo_counter>
 3f0:	90 91 09 07 	lds	r25, 0x0709	; 0x800709 <max_servo>
 3f4:	89 17       	cp	r24, r25
 3f6:	78 f4       	brcc	.+30     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3f8:	90 91 0a 07 	lds	r25, 0x070A	; 0x80070a <left>
 3fc:	91 11       	cpse	r25, r1
 3fe:	04 c0       	rjmp	.+8      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 400:	90 91 0b 07 	lds	r25, 0x070B	; 0x80070b <right>
 404:	99 23       	and	r25, r25
 406:	b1 f0       	breq	.+44     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
				 ++servo_counter;
 408:	8f 5f       	subi	r24, 0xFF	; 255
 40a:	80 93 07 07 	sts	0x0707, r24	; 0x800707 <servo_counter>
				servo_state = drive_high;
 40e:	82 e0       	ldi	r24, 0x02	; 2
 410:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <servo_state>
 414:	08 95       	ret
			}
		  
			else if(!(servo_counter < max_servo) && (left || right)){
 416:	80 91 0a 07 	lds	r24, 0x070A	; 0x80070a <left>
 41a:	81 11       	cpse	r24, r1
 41c:	04 c0       	rjmp	.+8      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 41e:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <right>
 422:	88 23       	and	r24, r24
 424:	39 f0       	breq	.+14     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
				servo_counter = 0;
 426:	10 92 07 07 	sts	0x0707, r1	; 0x800707 <servo_counter>
				PORTB = 0x00;
 42a:	15 b8       	out	0x05, r1	; 5
				servo_state = drive_low;
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <servo_state>
 432:	08 95       	ret
			}
		  
			else{
				 left = 0;
 434:	10 92 0a 07 	sts	0x070A, r1	; 0x80070a <left>
				right = 0;
 438:	10 92 0b 07 	sts	0x070B, r1	; 0x80070b <right>
				PORTB = 0x00;
 43c:	15 b8       	out	0x05, r1	; 5
				servo_state = servo_init;
 43e:	10 92 66 07 	sts	0x0766, r1	; 0x800766 <servo_state>
 442:	08 95       	ret
			}
			break;
		  
		case drive_low:
			if((servo_counter < min_servo) && (left || right)){
 444:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <servo_counter>
 448:	90 91 08 07 	lds	r25, 0x0708	; 0x800708 <min_servo>
 44c:	89 17       	cp	r24, r25
 44e:	78 f4       	brcc	.+30     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 450:	90 91 0a 07 	lds	r25, 0x070A	; 0x80070a <left>
 454:	91 11       	cpse	r25, r1
 456:	04 c0       	rjmp	.+8      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 458:	90 91 0b 07 	lds	r25, 0x070B	; 0x80070b <right>
 45c:	99 23       	and	r25, r25
 45e:	39 f0       	breq	.+14     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
				++servo_counter;
 460:	8f 5f       	subi	r24, 0xFF	; 255
 462:	80 93 07 07 	sts	0x0707, r24	; 0x800707 <servo_counter>
				servo_state = drive_low;
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <servo_state>
 46c:	08 95       	ret
			}
		  
			 else{
				left = 0;
 46e:	10 92 0a 07 	sts	0x070A, r1	; 0x80070a <left>
				right = 0;
 472:	10 92 0b 07 	sts	0x070B, r1	; 0x80070b <right>
				PORTB = 0x00;
 476:	15 b8       	out	0x05, r1	; 5
				servo_state = servo_init;
 478:	10 92 66 07 	sts	0x0766, r1	; 0x800766 <servo_state>
 47c:	08 95       	ret
			}
		  
			break;
		  
		default:
			servo_state = servo_init;
 47e:	10 92 66 07 	sts	0x0766, r1	; 0x800766 <servo_state>
 482:	08 95       	ret

00000484 <SERVOSecTask>:
}

 enum SERVOState {servo_init,drive_low, drive_high} servo_state;

 void SERVO_Init(){
	 servo_state = servo_init;
 484:	10 92 66 07 	sts	0x0766, r1	; 0x800766 <servo_state>
 void SERVOSecTask()
 {
	 SERVO_Init();
	 for(;;)
	 {
		 SERVO_Tick();
 488:	8e df       	rcall	.-228    	; 0x3a6 <SERVO_Tick>
		 vTaskDelay(1);
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	20 d4       	rcall	.+2112   	; 0xcd0 <vTaskDelay>
 490:	fb cf       	rjmp	.-10     	; 0x488 <SERVOSecTask+0x4>

00000492 <SERVOSecPulse>:
	 }
 }

 void SERVOSecPulse(unsigned portBASE_TYPE Priority)
 {
 492:	af 92       	push	r10
 494:	bf 92       	push	r11
 496:	cf 92       	push	r12
 498:	df 92       	push	r13
 49a:	ef 92       	push	r14
 49c:	ff 92       	push	r15
 49e:	0f 93       	push	r16
	 xTaskCreate(SERVOSecTask, (signed portCHAR *)"SERVOSecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
 4a0:	a1 2c       	mov	r10, r1
 4a2:	b1 2c       	mov	r11, r1
 4a4:	c1 2c       	mov	r12, r1
 4a6:	d1 2c       	mov	r13, r1
 4a8:	e1 2c       	mov	r14, r1
 4aa:	f1 2c       	mov	r15, r1
 4ac:	08 2f       	mov	r16, r24
 4ae:	20 e0       	ldi	r18, 0x00	; 0
 4b0:	30 e0       	ldi	r19, 0x00	; 0
 4b2:	45 e5       	ldi	r20, 0x55	; 85
 4b4:	50 e0       	ldi	r21, 0x00	; 0
 4b6:	63 e1       	ldi	r22, 0x13	; 19
 4b8:	71 e0       	ldi	r23, 0x01	; 1
 4ba:	82 e4       	ldi	r24, 0x42	; 66
 4bc:	92 e0       	ldi	r25, 0x02	; 2
 4be:	a4 d1       	rcall	.+840    	; 0x808 <xTaskGenericCreate>
 }
 4c0:	0f 91       	pop	r16
 4c2:	ff 90       	pop	r15
 4c4:	ef 90       	pop	r14
 4c6:	df 90       	pop	r13
 4c8:	cf 90       	pop	r12
 4ca:	bf 90       	pop	r11
 4cc:	af 90       	pop	r10
 4ce:	08 95       	ret

000004d0 <main>:
 
int main(void) 
{ 
   DDRA = 0x00; PORTA = 0xFF;
 4d0:	11 b8       	out	0x01, r1	; 1
 4d2:	8f ef       	ldi	r24, 0xFF	; 255
 4d4:	82 b9       	out	0x02, r24	; 2
   DDRB = 0xFF; PORTB = 0x00;
 4d6:	84 b9       	out	0x04, r24	; 4
 4d8:	15 b8       	out	0x05, r1	; 5
   
   adc_init();
 4da:	b5 de       	rcall	.-662    	; 0x246 <adc_init>
   
   //Start Tasks  
   STEERINGSecPulse(1);
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	44 df       	rcall	.-376    	; 0x368 <STEERINGSecPulse>
   SERVOSecPulse(1);
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	d7 df       	rcall	.-82     	; 0x492 <SERVOSecPulse>
    //RunSchedular 
   vTaskStartScheduler(); 
 4e4:	84 d2       	rcall	.+1288   	; 0x9ee <vTaskStartScheduler>
 4e6:	80 e0       	ldi	r24, 0x00	; 0
 
   return 0; 
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	08 95       	ret

000004ec <pxPortInitialiseStack>:
 4ec:	31 e1       	ldi	r19, 0x11	; 17
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 4ee:	fc 01       	movw	r30, r24
 4f0:	30 83       	st	Z, r19
 4f2:	31 97       	sbiw	r30, 0x01	; 1
 4f4:	22 e2       	ldi	r18, 0x22	; 34
 4f6:	20 83       	st	Z, r18
 4f8:	31 97       	sbiw	r30, 0x01	; 1
 4fa:	a3 e3       	ldi	r26, 0x33	; 51
 4fc:	a0 83       	st	Z, r26
 4fe:	31 97       	sbiw	r30, 0x01	; 1
 500:	60 83       	st	Z, r22
 502:	31 97       	sbiw	r30, 0x01	; 1
 504:	70 83       	st	Z, r23
 506:	31 97       	sbiw	r30, 0x01	; 1
 508:	10 82       	st	Z, r1
 50a:	31 97       	sbiw	r30, 0x01	; 1
 50c:	60 e8       	ldi	r22, 0x80	; 128
 50e:	60 83       	st	Z, r22
 510:	31 97       	sbiw	r30, 0x01	; 1
 512:	10 82       	st	Z, r1
 514:	31 97       	sbiw	r30, 0x01	; 1
 516:	62 e0       	ldi	r22, 0x02	; 2
 518:	60 83       	st	Z, r22
 51a:	31 97       	sbiw	r30, 0x01	; 1
 51c:	63 e0       	ldi	r22, 0x03	; 3
 51e:	60 83       	st	Z, r22
 520:	31 97       	sbiw	r30, 0x01	; 1
 522:	64 e0       	ldi	r22, 0x04	; 4
 524:	60 83       	st	Z, r22
 526:	31 97       	sbiw	r30, 0x01	; 1
 528:	65 e0       	ldi	r22, 0x05	; 5
 52a:	60 83       	st	Z, r22
 52c:	31 97       	sbiw	r30, 0x01	; 1
 52e:	66 e0       	ldi	r22, 0x06	; 6
 530:	60 83       	st	Z, r22
 532:	31 97       	sbiw	r30, 0x01	; 1
 534:	67 e0       	ldi	r22, 0x07	; 7
 536:	60 83       	st	Z, r22
 538:	31 97       	sbiw	r30, 0x01	; 1
 53a:	68 e0       	ldi	r22, 0x08	; 8
 53c:	60 83       	st	Z, r22
 53e:	31 97       	sbiw	r30, 0x01	; 1
 540:	69 e0       	ldi	r22, 0x09	; 9
 542:	60 83       	st	Z, r22
 544:	31 97       	sbiw	r30, 0x01	; 1
 546:	60 e1       	ldi	r22, 0x10	; 16
 548:	60 83       	st	Z, r22
 54a:	31 97       	sbiw	r30, 0x01	; 1
 54c:	30 83       	st	Z, r19
 54e:	31 97       	sbiw	r30, 0x01	; 1
 550:	32 e1       	ldi	r19, 0x12	; 18
 552:	30 83       	st	Z, r19
 554:	31 97       	sbiw	r30, 0x01	; 1
 556:	33 e1       	ldi	r19, 0x13	; 19
 558:	30 83       	st	Z, r19
 55a:	31 97       	sbiw	r30, 0x01	; 1
 55c:	34 e1       	ldi	r19, 0x14	; 20
 55e:	30 83       	st	Z, r19
 560:	31 97       	sbiw	r30, 0x01	; 1
 562:	35 e1       	ldi	r19, 0x15	; 21
 564:	30 83       	st	Z, r19
 566:	31 97       	sbiw	r30, 0x01	; 1
 568:	36 e1       	ldi	r19, 0x16	; 22
 56a:	30 83       	st	Z, r19
 56c:	31 97       	sbiw	r30, 0x01	; 1
 56e:	37 e1       	ldi	r19, 0x17	; 23
 570:	30 83       	st	Z, r19
 572:	31 97       	sbiw	r30, 0x01	; 1
 574:	38 e1       	ldi	r19, 0x18	; 24
 576:	30 83       	st	Z, r19
 578:	31 97       	sbiw	r30, 0x01	; 1
 57a:	39 e1       	ldi	r19, 0x19	; 25
 57c:	30 83       	st	Z, r19
 57e:	31 97       	sbiw	r30, 0x01	; 1
 580:	30 e2       	ldi	r19, 0x20	; 32
 582:	30 83       	st	Z, r19
 584:	31 97       	sbiw	r30, 0x01	; 1
 586:	31 e2       	ldi	r19, 0x21	; 33
 588:	30 83       	st	Z, r19
 58a:	31 97       	sbiw	r30, 0x01	; 1
 58c:	20 83       	st	Z, r18
 58e:	31 97       	sbiw	r30, 0x01	; 1
 590:	23 e2       	ldi	r18, 0x23	; 35
 592:	20 83       	st	Z, r18
 594:	31 97       	sbiw	r30, 0x01	; 1
 596:	40 83       	st	Z, r20
 598:	31 97       	sbiw	r30, 0x01	; 1
 59a:	50 83       	st	Z, r21
 59c:	31 97       	sbiw	r30, 0x01	; 1
 59e:	26 e2       	ldi	r18, 0x26	; 38
 5a0:	20 83       	st	Z, r18
 5a2:	31 97       	sbiw	r30, 0x01	; 1
 5a4:	27 e2       	ldi	r18, 0x27	; 39
 5a6:	20 83       	st	Z, r18
 5a8:	31 97       	sbiw	r30, 0x01	; 1
 5aa:	28 e2       	ldi	r18, 0x28	; 40
 5ac:	20 83       	st	Z, r18
 5ae:	31 97       	sbiw	r30, 0x01	; 1
 5b0:	29 e2       	ldi	r18, 0x29	; 41
 5b2:	20 83       	st	Z, r18
 5b4:	31 97       	sbiw	r30, 0x01	; 1
 5b6:	20 e3       	ldi	r18, 0x30	; 48
 5b8:	20 83       	st	Z, r18
 5ba:	31 97       	sbiw	r30, 0x01	; 1
 5bc:	21 e3       	ldi	r18, 0x31	; 49
 5be:	20 83       	st	Z, r18
 5c0:	86 97       	sbiw	r24, 0x26	; 38
 5c2:	08 95       	ret

000005c4 <xPortStartScheduler>:
 5c4:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 5c8:	8c e7       	ldi	r24, 0x7C	; 124
 5ca:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 5ce:	8b e0       	ldi	r24, 0x0B	; 11
 5d0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 5d4:	ef e6       	ldi	r30, 0x6F	; 111
 5d6:	f0 e0       	ldi	r31, 0x00	; 0
 5d8:	80 81       	ld	r24, Z
 5da:	82 60       	ori	r24, 0x02	; 2
 5dc:	80 83       	st	Z, r24
 5de:	a0 91 64 07 	lds	r26, 0x0764	; 0x800764 <pxCurrentTCB>
 5e2:	b0 91 65 07 	lds	r27, 0x0765	; 0x800765 <pxCurrentTCB+0x1>
 5e6:	cd 91       	ld	r28, X+
 5e8:	cd bf       	out	0x3d, r28	; 61
 5ea:	dd 91       	ld	r29, X+
 5ec:	de bf       	out	0x3e, r29	; 62
 5ee:	ff 91       	pop	r31
 5f0:	ef 91       	pop	r30
 5f2:	df 91       	pop	r29
 5f4:	cf 91       	pop	r28
 5f6:	bf 91       	pop	r27
 5f8:	af 91       	pop	r26
 5fa:	9f 91       	pop	r25
 5fc:	8f 91       	pop	r24
 5fe:	7f 91       	pop	r23
 600:	6f 91       	pop	r22
 602:	5f 91       	pop	r21
 604:	4f 91       	pop	r20
 606:	3f 91       	pop	r19
 608:	2f 91       	pop	r18
 60a:	1f 91       	pop	r17
 60c:	0f 91       	pop	r16
 60e:	ff 90       	pop	r15
 610:	ef 90       	pop	r14
 612:	df 90       	pop	r13
 614:	cf 90       	pop	r12
 616:	bf 90       	pop	r11
 618:	af 90       	pop	r10
 61a:	9f 90       	pop	r9
 61c:	8f 90       	pop	r8
 61e:	7f 90       	pop	r7
 620:	6f 90       	pop	r6
 622:	5f 90       	pop	r5
 624:	4f 90       	pop	r4
 626:	3f 90       	pop	r3
 628:	2f 90       	pop	r2
 62a:	1f 90       	pop	r1
 62c:	0f 90       	pop	r0
 62e:	0f be       	out	0x3f, r0	; 63
 630:	0f 90       	pop	r0
 632:	08 95       	ret
 634:	81 e0       	ldi	r24, 0x01	; 1
 636:	08 95       	ret

00000638 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 638:	0f 92       	push	r0
 63a:	0f b6       	in	r0, 0x3f	; 63
 63c:	f8 94       	cli
 63e:	0f 92       	push	r0
 640:	1f 92       	push	r1
 642:	11 24       	eor	r1, r1
 644:	2f 92       	push	r2
 646:	3f 92       	push	r3
 648:	4f 92       	push	r4
 64a:	5f 92       	push	r5
 64c:	6f 92       	push	r6
 64e:	7f 92       	push	r7
 650:	8f 92       	push	r8
 652:	9f 92       	push	r9
 654:	af 92       	push	r10
 656:	bf 92       	push	r11
 658:	cf 92       	push	r12
 65a:	df 92       	push	r13
 65c:	ef 92       	push	r14
 65e:	ff 92       	push	r15
 660:	0f 93       	push	r16
 662:	1f 93       	push	r17
 664:	2f 93       	push	r18
 666:	3f 93       	push	r19
 668:	4f 93       	push	r20
 66a:	5f 93       	push	r21
 66c:	6f 93       	push	r22
 66e:	7f 93       	push	r23
 670:	8f 93       	push	r24
 672:	9f 93       	push	r25
 674:	af 93       	push	r26
 676:	bf 93       	push	r27
 678:	cf 93       	push	r28
 67a:	df 93       	push	r29
 67c:	ef 93       	push	r30
 67e:	ff 93       	push	r31
 680:	a0 91 64 07 	lds	r26, 0x0764	; 0x800764 <pxCurrentTCB>
 684:	b0 91 65 07 	lds	r27, 0x0765	; 0x800765 <pxCurrentTCB+0x1>
 688:	0d b6       	in	r0, 0x3d	; 61
 68a:	0d 92       	st	X+, r0
 68c:	0e b6       	in	r0, 0x3e	; 62
 68e:	0d 92       	st	X+, r0
	vTaskSwitchContext();
 690:	70 d3       	rcall	.+1760   	; 0xd72 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 692:	a0 91 64 07 	lds	r26, 0x0764	; 0x800764 <pxCurrentTCB>
 696:	b0 91 65 07 	lds	r27, 0x0765	; 0x800765 <pxCurrentTCB+0x1>
 69a:	cd 91       	ld	r28, X+
 69c:	cd bf       	out	0x3d, r28	; 61
 69e:	dd 91       	ld	r29, X+
 6a0:	de bf       	out	0x3e, r29	; 62
 6a2:	ff 91       	pop	r31
 6a4:	ef 91       	pop	r30
 6a6:	df 91       	pop	r29
 6a8:	cf 91       	pop	r28
 6aa:	bf 91       	pop	r27
 6ac:	af 91       	pop	r26
 6ae:	9f 91       	pop	r25
 6b0:	8f 91       	pop	r24
 6b2:	7f 91       	pop	r23
 6b4:	6f 91       	pop	r22
 6b6:	5f 91       	pop	r21
 6b8:	4f 91       	pop	r20
 6ba:	3f 91       	pop	r19
 6bc:	2f 91       	pop	r18
 6be:	1f 91       	pop	r17
 6c0:	0f 91       	pop	r16
 6c2:	ff 90       	pop	r15
 6c4:	ef 90       	pop	r14
 6c6:	df 90       	pop	r13
 6c8:	cf 90       	pop	r12
 6ca:	bf 90       	pop	r11
 6cc:	af 90       	pop	r10
 6ce:	9f 90       	pop	r9
 6d0:	8f 90       	pop	r8
 6d2:	7f 90       	pop	r7
 6d4:	6f 90       	pop	r6
 6d6:	5f 90       	pop	r5
 6d8:	4f 90       	pop	r4
 6da:	3f 90       	pop	r3
 6dc:	2f 90       	pop	r2
 6de:	1f 90       	pop	r1
 6e0:	0f 90       	pop	r0
 6e2:	0f be       	out	0x3f, r0	; 63
 6e4:	0f 90       	pop	r0

	asm volatile ( "ret" );
 6e6:	08 95       	ret

000006e8 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 6e8:	0f 92       	push	r0
 6ea:	0f b6       	in	r0, 0x3f	; 63
 6ec:	f8 94       	cli
 6ee:	0f 92       	push	r0
 6f0:	1f 92       	push	r1
 6f2:	11 24       	eor	r1, r1
 6f4:	2f 92       	push	r2
 6f6:	3f 92       	push	r3
 6f8:	4f 92       	push	r4
 6fa:	5f 92       	push	r5
 6fc:	6f 92       	push	r6
 6fe:	7f 92       	push	r7
 700:	8f 92       	push	r8
 702:	9f 92       	push	r9
 704:	af 92       	push	r10
 706:	bf 92       	push	r11
 708:	cf 92       	push	r12
 70a:	df 92       	push	r13
 70c:	ef 92       	push	r14
 70e:	ff 92       	push	r15
 710:	0f 93       	push	r16
 712:	1f 93       	push	r17
 714:	2f 93       	push	r18
 716:	3f 93       	push	r19
 718:	4f 93       	push	r20
 71a:	5f 93       	push	r21
 71c:	6f 93       	push	r22
 71e:	7f 93       	push	r23
 720:	8f 93       	push	r24
 722:	9f 93       	push	r25
 724:	af 93       	push	r26
 726:	bf 93       	push	r27
 728:	cf 93       	push	r28
 72a:	df 93       	push	r29
 72c:	ef 93       	push	r30
 72e:	ff 93       	push	r31
 730:	a0 91 64 07 	lds	r26, 0x0764	; 0x800764 <pxCurrentTCB>
 734:	b0 91 65 07 	lds	r27, 0x0765	; 0x800765 <pxCurrentTCB+0x1>
 738:	0d b6       	in	r0, 0x3d	; 61
 73a:	0d 92       	st	X+, r0
 73c:	0e b6       	in	r0, 0x3e	; 62
 73e:	0d 92       	st	X+, r0
	vTaskIncrementTick();
 740:	85 d1       	rcall	.+778    	; 0xa4c <vTaskIncrementTick>
	vTaskSwitchContext();
 742:	17 d3       	rcall	.+1582   	; 0xd72 <vTaskSwitchContext>
 744:	a0 91 64 07 	lds	r26, 0x0764	; 0x800764 <pxCurrentTCB>
	portRESTORE_CONTEXT();
 748:	b0 91 65 07 	lds	r27, 0x0765	; 0x800765 <pxCurrentTCB+0x1>
 74c:	cd 91       	ld	r28, X+
 74e:	cd bf       	out	0x3d, r28	; 61
 750:	dd 91       	ld	r29, X+
 752:	de bf       	out	0x3e, r29	; 62
 754:	ff 91       	pop	r31
 756:	ef 91       	pop	r30
 758:	df 91       	pop	r29
 75a:	cf 91       	pop	r28
 75c:	bf 91       	pop	r27
 75e:	af 91       	pop	r26
 760:	9f 91       	pop	r25
 762:	8f 91       	pop	r24
 764:	7f 91       	pop	r23
 766:	6f 91       	pop	r22
 768:	5f 91       	pop	r21
 76a:	4f 91       	pop	r20
 76c:	3f 91       	pop	r19
 76e:	2f 91       	pop	r18
 770:	1f 91       	pop	r17
 772:	0f 91       	pop	r16
 774:	ff 90       	pop	r15
 776:	ef 90       	pop	r14
 778:	df 90       	pop	r13
 77a:	cf 90       	pop	r12
 77c:	bf 90       	pop	r11
 77e:	af 90       	pop	r10
 780:	9f 90       	pop	r9
 782:	8f 90       	pop	r8
 784:	7f 90       	pop	r7
 786:	6f 90       	pop	r6
 788:	5f 90       	pop	r5
 78a:	4f 90       	pop	r4
 78c:	3f 90       	pop	r3
 78e:	2f 90       	pop	r2
 790:	1f 90       	pop	r1
 792:	0f 90       	pop	r0
 794:	0f be       	out	0x3f, r0	; 63
 796:	0f 90       	pop	r0
 798:	08 95       	ret

0000079a <__vector_13>:

	asm volatile ( "ret" );
 79a:	a6 df       	rcall	.-180    	; 0x6e8 <vPortYieldFromTick>
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
		asm volatile ( "reti" );
 79c:	18 95       	reti

0000079e <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
 79e:	cf 93       	push	r28
 7a0:	df 93       	push	r29
 7a2:	ec 01       	movw	r28, r24
 7a4:	e0 91 64 07 	lds	r30, 0x0764	; 0x800764 <pxCurrentTCB>
 7a8:	f0 91 65 07 	lds	r31, 0x0765	; 0x800765 <pxCurrentTCB+0x1>
 7ac:	93 83       	std	Z+3, r25	; 0x03
 7ae:	82 83       	std	Z+2, r24	; 0x02
 7b0:	80 91 14 07 	lds	r24, 0x0714	; 0x800714 <xTickCount>
 7b4:	90 91 15 07 	lds	r25, 0x0715	; 0x800715 <xTickCount+0x1>
 7b8:	c8 17       	cp	r28, r24
 7ba:	d9 07       	cpc	r29, r25
 7bc:	60 f4       	brcc	.+24     	; 0x7d6 <prvAddCurrentTaskToDelayedList+0x38>
 7be:	60 91 64 07 	lds	r22, 0x0764	; 0x800764 <pxCurrentTCB>
 7c2:	70 91 65 07 	lds	r23, 0x0765	; 0x800765 <pxCurrentTCB+0x1>
 7c6:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <pxOverflowDelayedTaskList>
 7ca:	90 91 2b 07 	lds	r25, 0x072B	; 0x80072b <pxOverflowDelayedTaskList+0x1>
 7ce:	6e 5f       	subi	r22, 0xFE	; 254
 7d0:	7f 4f       	sbci	r23, 0xFF	; 255
 7d2:	d8 dc       	rcall	.-1616   	; 0x184 <vListInsert>
 7d4:	16 c0       	rjmp	.+44     	; 0x802 <prvAddCurrentTaskToDelayedList+0x64>
 7d6:	60 91 64 07 	lds	r22, 0x0764	; 0x800764 <pxCurrentTCB>
 7da:	70 91 65 07 	lds	r23, 0x0765	; 0x800765 <pxCurrentTCB+0x1>
 7de:	80 91 2c 07 	lds	r24, 0x072C	; 0x80072c <pxDelayedTaskList>
 7e2:	90 91 2d 07 	lds	r25, 0x072D	; 0x80072d <pxDelayedTaskList+0x1>
 7e6:	6e 5f       	subi	r22, 0xFE	; 254
 7e8:	7f 4f       	sbci	r23, 0xFF	; 255
 7ea:	cc dc       	rcall	.-1640   	; 0x184 <vListInsert>
 7ec:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <xNextTaskUnblockTime>
 7f0:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <xNextTaskUnblockTime+0x1>
 7f4:	c8 17       	cp	r28, r24
 7f6:	d9 07       	cpc	r29, r25
 7f8:	20 f4       	brcc	.+8      	; 0x802 <prvAddCurrentTaskToDelayedList+0x64>
 7fa:	d0 93 02 01 	sts	0x0102, r29	; 0x800102 <xNextTaskUnblockTime+0x1>
 7fe:	c0 93 01 01 	sts	0x0101, r28	; 0x800101 <xNextTaskUnblockTime>
 802:	df 91       	pop	r29
 804:	cf 91       	pop	r28
 806:	08 95       	ret

00000808 <xTaskGenericCreate>:
 808:	4f 92       	push	r4
 80a:	5f 92       	push	r5
 80c:	6f 92       	push	r6
 80e:	7f 92       	push	r7
 810:	8f 92       	push	r8
 812:	9f 92       	push	r9
 814:	af 92       	push	r10
 816:	bf 92       	push	r11
 818:	cf 92       	push	r12
 81a:	df 92       	push	r13
 81c:	ef 92       	push	r14
 81e:	ff 92       	push	r15
 820:	0f 93       	push	r16
 822:	1f 93       	push	r17
 824:	cf 93       	push	r28
 826:	df 93       	push	r29
 828:	5c 01       	movw	r10, r24
 82a:	4b 01       	movw	r8, r22
 82c:	3a 01       	movw	r6, r20
 82e:	29 01       	movw	r4, r18
 830:	81 e2       	ldi	r24, 0x21	; 33
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	49 dc       	rcall	.-1902   	; 0xc8 <pvPortMalloc>
 836:	ec 01       	movw	r28, r24
 838:	89 2b       	or	r24, r25
 83a:	09 f4       	brne	.+2      	; 0x83e <xTaskGenericCreate+0x36>
 83c:	c6 c0       	rjmp	.+396    	; 0x9ca <xTaskGenericCreate+0x1c2>
 83e:	c1 14       	cp	r12, r1
 840:	d1 04       	cpc	r13, r1
 842:	09 f0       	breq	.+2      	; 0x846 <xTaskGenericCreate+0x3e>
 844:	be c0       	rjmp	.+380    	; 0x9c2 <xTaskGenericCreate+0x1ba>
 846:	c3 01       	movw	r24, r6
 848:	3f dc       	rcall	.-1922   	; 0xc8 <pvPortMalloc>
 84a:	98 8f       	std	Y+24, r25	; 0x18
 84c:	8f 8b       	std	Y+23, r24	; 0x17
 84e:	00 97       	sbiw	r24, 0x00	; 0
 850:	19 f4       	brne	.+6      	; 0x858 <xTaskGenericCreate+0x50>
 852:	ce 01       	movw	r24, r28
 854:	5d dc       	rcall	.-1862   	; 0x110 <vPortFree>
 856:	b9 c0       	rjmp	.+370    	; 0x9ca <xTaskGenericCreate+0x1c2>
 858:	a3 01       	movw	r20, r6
 85a:	65 ea       	ldi	r22, 0xA5	; 165
 85c:	70 e0       	ldi	r23, 0x00	; 0
 85e:	f5 d2       	rcall	.+1514   	; 0xe4a <memset>
 860:	93 01       	movw	r18, r6
 862:	21 50       	subi	r18, 0x01	; 1
 864:	31 09       	sbc	r19, r1
 866:	8f 89       	ldd	r24, Y+23	; 0x17
 868:	98 8d       	ldd	r25, Y+24	; 0x18
 86a:	3c 01       	movw	r6, r24
 86c:	62 0e       	add	r6, r18
 86e:	73 1e       	adc	r7, r19
 870:	48 e0       	ldi	r20, 0x08	; 8
 872:	50 e0       	ldi	r21, 0x00	; 0
 874:	b4 01       	movw	r22, r8
 876:	ce 01       	movw	r24, r28
 878:	49 96       	adiw	r24, 0x19	; 25
 87a:	ee d2       	rcall	.+1500   	; 0xe58 <strncpy>
 87c:	18 a2       	std	Y+32, r1	; 0x20
 87e:	10 2f       	mov	r17, r16
 880:	04 30       	cpi	r16, 0x04	; 4
 882:	08 f0       	brcs	.+2      	; 0x886 <xTaskGenericCreate+0x7e>
 884:	13 e0       	ldi	r17, 0x03	; 3
 886:	1e 8b       	std	Y+22, r17	; 0x16
 888:	6e 01       	movw	r12, r28
 88a:	82 e0       	ldi	r24, 0x02	; 2
 88c:	c8 0e       	add	r12, r24
 88e:	d1 1c       	adc	r13, r1
 890:	c6 01       	movw	r24, r12
 892:	4d dc       	rcall	.-1894   	; 0x12e <vListInitialiseItem>
 894:	ce 01       	movw	r24, r28
 896:	0c 96       	adiw	r24, 0x0c	; 12
 898:	4a dc       	rcall	.-1900   	; 0x12e <vListInitialiseItem>
 89a:	d9 87       	std	Y+9, r29	; 0x09
 89c:	c8 87       	std	Y+8, r28	; 0x08
 89e:	84 e0       	ldi	r24, 0x04	; 4
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	81 1b       	sub	r24, r17
 8a4:	91 09       	sbc	r25, r1
 8a6:	9d 87       	std	Y+13, r25	; 0x0d
 8a8:	8c 87       	std	Y+12, r24	; 0x0c
 8aa:	db 8b       	std	Y+19, r29	; 0x13
 8ac:	ca 8b       	std	Y+18, r28	; 0x12
 8ae:	a2 01       	movw	r20, r4
 8b0:	b5 01       	movw	r22, r10
 8b2:	c3 01       	movw	r24, r6
 8b4:	1b de       	rcall	.-970    	; 0x4ec <pxPortInitialiseStack>
 8b6:	99 83       	std	Y+1, r25	; 0x01
 8b8:	88 83       	st	Y, r24
 8ba:	e1 14       	cp	r14, r1
 8bc:	f1 04       	cpc	r15, r1
 8be:	19 f0       	breq	.+6      	; 0x8c6 <xTaskGenericCreate+0xbe>
 8c0:	f7 01       	movw	r30, r14
 8c2:	d1 83       	std	Z+1, r29	; 0x01
 8c4:	c0 83       	st	Z, r28
 8c6:	0f b6       	in	r0, 0x3f	; 63
 8c8:	f8 94       	cli
 8ca:	0f 92       	push	r0
 8cc:	80 91 16 07 	lds	r24, 0x0716	; 0x800716 <uxCurrentNumberOfTasks>
 8d0:	8f 5f       	subi	r24, 0xFF	; 255
 8d2:	80 93 16 07 	sts	0x0716, r24	; 0x800716 <uxCurrentNumberOfTasks>
 8d6:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <pxCurrentTCB>
 8da:	90 91 65 07 	lds	r25, 0x0765	; 0x800765 <pxCurrentTCB+0x1>
 8de:	89 2b       	or	r24, r25
 8e0:	69 f5       	brne	.+90     	; 0x93c <xTaskGenericCreate+0x134>
 8e2:	d0 93 65 07 	sts	0x0765, r29	; 0x800765 <pxCurrentTCB+0x1>
 8e6:	c0 93 64 07 	sts	0x0764, r28	; 0x800764 <pxCurrentTCB>
 8ea:	80 91 16 07 	lds	r24, 0x0716	; 0x800716 <uxCurrentNumberOfTasks>
 8ee:	81 30       	cpi	r24, 0x01	; 1
 8f0:	a1 f5       	brne	.+104    	; 0x95a <xTaskGenericCreate+0x152>
 8f2:	80 e4       	ldi	r24, 0x40	; 64
 8f4:	97 e0       	ldi	r25, 0x07	; 7
 8f6:	0d dc       	rcall	.-2022   	; 0x112 <vListInitialise>
 8f8:	89 e4       	ldi	r24, 0x49	; 73
 8fa:	97 e0       	ldi	r25, 0x07	; 7
 8fc:	0a dc       	rcall	.-2028   	; 0x112 <vListInitialise>
 8fe:	82 e5       	ldi	r24, 0x52	; 82
 900:	97 e0       	ldi	r25, 0x07	; 7
 902:	07 dc       	rcall	.-2034   	; 0x112 <vListInitialise>
 904:	8b e5       	ldi	r24, 0x5B	; 91
 906:	97 e0       	ldi	r25, 0x07	; 7
 908:	04 dc       	rcall	.-2040   	; 0x112 <vListInitialise>
 90a:	87 e3       	ldi	r24, 0x37	; 55
 90c:	97 e0       	ldi	r25, 0x07	; 7
 90e:	01 dc       	rcall	.-2046   	; 0x112 <vListInitialise>
 910:	8e e2       	ldi	r24, 0x2E	; 46
 912:	97 e0       	ldi	r25, 0x07	; 7
 914:	fe db       	rcall	.-2052   	; 0x112 <vListInitialise>
 916:	81 e2       	ldi	r24, 0x21	; 33
 918:	97 e0       	ldi	r25, 0x07	; 7
 91a:	fb db       	rcall	.-2058   	; 0x112 <vListInitialise>
 91c:	88 e1       	ldi	r24, 0x18	; 24
 91e:	97 e0       	ldi	r25, 0x07	; 7
 920:	f8 db       	rcall	.-2064   	; 0x112 <vListInitialise>
 922:	87 e3       	ldi	r24, 0x37	; 55
 924:	97 e0       	ldi	r25, 0x07	; 7
 926:	90 93 2d 07 	sts	0x072D, r25	; 0x80072d <pxDelayedTaskList+0x1>
 92a:	80 93 2c 07 	sts	0x072C, r24	; 0x80072c <pxDelayedTaskList>
 92e:	8e e2       	ldi	r24, 0x2E	; 46
 930:	97 e0       	ldi	r25, 0x07	; 7
 932:	90 93 2b 07 	sts	0x072B, r25	; 0x80072b <pxOverflowDelayedTaskList+0x1>
 936:	80 93 2a 07 	sts	0x072A, r24	; 0x80072a <pxOverflowDelayedTaskList>
 93a:	0f c0       	rjmp	.+30     	; 0x95a <xTaskGenericCreate+0x152>
 93c:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <xSchedulerRunning>
 940:	81 11       	cpse	r24, r1
 942:	0b c0       	rjmp	.+22     	; 0x95a <xTaskGenericCreate+0x152>
 944:	e0 91 64 07 	lds	r30, 0x0764	; 0x800764 <pxCurrentTCB>
 948:	f0 91 65 07 	lds	r31, 0x0765	; 0x800765 <pxCurrentTCB+0x1>
 94c:	86 89       	ldd	r24, Z+22	; 0x16
 94e:	08 17       	cp	r16, r24
 950:	20 f0       	brcs	.+8      	; 0x95a <xTaskGenericCreate+0x152>
 952:	d0 93 65 07 	sts	0x0765, r29	; 0x800765 <pxCurrentTCB+0x1>
 956:	c0 93 64 07 	sts	0x0764, r28	; 0x800764 <pxCurrentTCB>
 95a:	8e 89       	ldd	r24, Y+22	; 0x16
 95c:	90 91 13 07 	lds	r25, 0x0713	; 0x800713 <uxTopUsedPriority>
 960:	98 17       	cp	r25, r24
 962:	10 f4       	brcc	.+4      	; 0x968 <xTaskGenericCreate+0x160>
 964:	80 93 13 07 	sts	0x0713, r24	; 0x800713 <uxTopUsedPriority>
 968:	90 91 0c 07 	lds	r25, 0x070C	; 0x80070c <uxTaskNumber>
 96c:	9f 5f       	subi	r25, 0xFF	; 255
 96e:	90 93 0c 07 	sts	0x070C, r25	; 0x80070c <uxTaskNumber>
 972:	90 91 12 07 	lds	r25, 0x0712	; 0x800712 <uxTopReadyPriority>
 976:	98 17       	cp	r25, r24
 978:	10 f4       	brcc	.+4      	; 0x97e <xTaskGenericCreate+0x176>
 97a:	80 93 12 07 	sts	0x0712, r24	; 0x800712 <uxTopReadyPriority>
 97e:	90 e0       	ldi	r25, 0x00	; 0
 980:	9c 01       	movw	r18, r24
 982:	22 0f       	add	r18, r18
 984:	33 1f       	adc	r19, r19
 986:	22 0f       	add	r18, r18
 988:	33 1f       	adc	r19, r19
 98a:	22 0f       	add	r18, r18
 98c:	33 1f       	adc	r19, r19
 98e:	82 0f       	add	r24, r18
 990:	93 1f       	adc	r25, r19
 992:	b6 01       	movw	r22, r12
 994:	80 5c       	subi	r24, 0xC0	; 192
 996:	98 4f       	sbci	r25, 0xF8	; 248
 998:	ce db       	rcall	.-2148   	; 0x136 <vListInsertEnd>
 99a:	0f 90       	pop	r0
 99c:	0f be       	out	0x3f, r0	; 63
 99e:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <xSchedulerRunning>
 9a2:	88 23       	and	r24, r24
 9a4:	51 f0       	breq	.+20     	; 0x9ba <xTaskGenericCreate+0x1b2>
 9a6:	e0 91 64 07 	lds	r30, 0x0764	; 0x800764 <pxCurrentTCB>
 9aa:	f0 91 65 07 	lds	r31, 0x0765	; 0x800765 <pxCurrentTCB+0x1>
 9ae:	86 89       	ldd	r24, Z+22	; 0x16
 9b0:	80 17       	cp	r24, r16
 9b2:	28 f4       	brcc	.+10     	; 0x9be <xTaskGenericCreate+0x1b6>
 9b4:	41 de       	rcall	.-894    	; 0x638 <vPortYield>
 9b6:	81 e0       	ldi	r24, 0x01	; 1
 9b8:	09 c0       	rjmp	.+18     	; 0x9cc <xTaskGenericCreate+0x1c4>
 9ba:	81 e0       	ldi	r24, 0x01	; 1
 9bc:	07 c0       	rjmp	.+14     	; 0x9cc <xTaskGenericCreate+0x1c4>
 9be:	81 e0       	ldi	r24, 0x01	; 1
 9c0:	05 c0       	rjmp	.+10     	; 0x9cc <xTaskGenericCreate+0x1c4>
 9c2:	d8 8e       	std	Y+24, r13	; 0x18
 9c4:	cf 8a       	std	Y+23, r12	; 0x17
 9c6:	c6 01       	movw	r24, r12
 9c8:	47 cf       	rjmp	.-370    	; 0x858 <xTaskGenericCreate+0x50>
 9ca:	8f ef       	ldi	r24, 0xFF	; 255
 9cc:	df 91       	pop	r29
 9ce:	cf 91       	pop	r28
 9d0:	1f 91       	pop	r17
 9d2:	0f 91       	pop	r16
 9d4:	ff 90       	pop	r15
 9d6:	ef 90       	pop	r14
 9d8:	df 90       	pop	r13
 9da:	cf 90       	pop	r12
 9dc:	bf 90       	pop	r11
 9de:	af 90       	pop	r10
 9e0:	9f 90       	pop	r9
 9e2:	8f 90       	pop	r8
 9e4:	7f 90       	pop	r7
 9e6:	6f 90       	pop	r6
 9e8:	5f 90       	pop	r5
 9ea:	4f 90       	pop	r4
 9ec:	08 95       	ret

000009ee <vTaskStartScheduler>:
 9ee:	af 92       	push	r10
 9f0:	bf 92       	push	r11
 9f2:	cf 92       	push	r12
 9f4:	df 92       	push	r13
 9f6:	ef 92       	push	r14
 9f8:	ff 92       	push	r15
 9fa:	0f 93       	push	r16
 9fc:	a1 2c       	mov	r10, r1
 9fe:	b1 2c       	mov	r11, r1
 a00:	c1 2c       	mov	r12, r1
 a02:	d1 2c       	mov	r13, r1
 a04:	e1 2c       	mov	r14, r1
 a06:	f1 2c       	mov	r15, r1
 a08:	00 e0       	ldi	r16, 0x00	; 0
 a0a:	20 e0       	ldi	r18, 0x00	; 0
 a0c:	30 e0       	ldi	r19, 0x00	; 0
 a0e:	45 e5       	ldi	r20, 0x55	; 85
 a10:	50 e0       	ldi	r21, 0x00	; 0
 a12:	60 e2       	ldi	r22, 0x20	; 32
 a14:	71 e0       	ldi	r23, 0x01	; 1
 a16:	83 e8       	ldi	r24, 0x83	; 131
 a18:	96 e0       	ldi	r25, 0x06	; 6
 a1a:	f6 de       	rcall	.-532    	; 0x808 <xTaskGenericCreate>
 a1c:	81 30       	cpi	r24, 0x01	; 1
 a1e:	41 f4       	brne	.+16     	; 0xa30 <vTaskStartScheduler+0x42>
 a20:	f8 94       	cli
 a22:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <xSchedulerRunning>
 a26:	10 92 15 07 	sts	0x0715, r1	; 0x800715 <xTickCount+0x1>
 a2a:	10 92 14 07 	sts	0x0714, r1	; 0x800714 <xTickCount>
 a2e:	ca dd       	rcall	.-1132   	; 0x5c4 <xPortStartScheduler>
 a30:	0f 91       	pop	r16
 a32:	ff 90       	pop	r15
 a34:	ef 90       	pop	r14
 a36:	df 90       	pop	r13
 a38:	cf 90       	pop	r12
 a3a:	bf 90       	pop	r11
 a3c:	af 90       	pop	r10
 a3e:	08 95       	ret

00000a40 <vTaskSuspendAll>:
 a40:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <uxSchedulerSuspended>
 a44:	8f 5f       	subi	r24, 0xFF	; 255
 a46:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <uxSchedulerSuspended>
 a4a:	08 95       	ret

00000a4c <vTaskIncrementTick>:
 a4c:	0f 93       	push	r16
 a4e:	1f 93       	push	r17
 a50:	cf 93       	push	r28
 a52:	df 93       	push	r29
 a54:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <uxSchedulerSuspended>
 a58:	81 11       	cpse	r24, r1
 a5a:	af c0       	rjmp	.+350    	; 0xbba <vTaskIncrementTick+0x16e>
 a5c:	80 91 14 07 	lds	r24, 0x0714	; 0x800714 <xTickCount>
 a60:	90 91 15 07 	lds	r25, 0x0715	; 0x800715 <xTickCount+0x1>
 a64:	01 96       	adiw	r24, 0x01	; 1
 a66:	90 93 15 07 	sts	0x0715, r25	; 0x800715 <xTickCount+0x1>
 a6a:	80 93 14 07 	sts	0x0714, r24	; 0x800714 <xTickCount>
 a6e:	80 91 14 07 	lds	r24, 0x0714	; 0x800714 <xTickCount>
 a72:	90 91 15 07 	lds	r25, 0x0715	; 0x800715 <xTickCount+0x1>
 a76:	89 2b       	or	r24, r25
 a78:	99 f5       	brne	.+102    	; 0xae0 <vTaskIncrementTick+0x94>
 a7a:	80 91 2c 07 	lds	r24, 0x072C	; 0x80072c <pxDelayedTaskList>
 a7e:	90 91 2d 07 	lds	r25, 0x072D	; 0x80072d <pxDelayedTaskList+0x1>
 a82:	20 91 2a 07 	lds	r18, 0x072A	; 0x80072a <pxOverflowDelayedTaskList>
 a86:	30 91 2b 07 	lds	r19, 0x072B	; 0x80072b <pxOverflowDelayedTaskList+0x1>
 a8a:	30 93 2d 07 	sts	0x072D, r19	; 0x80072d <pxDelayedTaskList+0x1>
 a8e:	20 93 2c 07 	sts	0x072C, r18	; 0x80072c <pxDelayedTaskList>
 a92:	90 93 2b 07 	sts	0x072B, r25	; 0x80072b <pxOverflowDelayedTaskList+0x1>
 a96:	80 93 2a 07 	sts	0x072A, r24	; 0x80072a <pxOverflowDelayedTaskList>
 a9a:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <xNumOfOverflows>
 a9e:	8f 5f       	subi	r24, 0xFF	; 255
 aa0:	80 93 0d 07 	sts	0x070D, r24	; 0x80070d <xNumOfOverflows>
 aa4:	e0 91 2c 07 	lds	r30, 0x072C	; 0x80072c <pxDelayedTaskList>
 aa8:	f0 91 2d 07 	lds	r31, 0x072D	; 0x80072d <pxDelayedTaskList+0x1>
 aac:	80 81       	ld	r24, Z
 aae:	81 11       	cpse	r24, r1
 ab0:	07 c0       	rjmp	.+14     	; 0xac0 <vTaskIncrementTick+0x74>
 ab2:	8f ef       	ldi	r24, 0xFF	; 255
 ab4:	9f ef       	ldi	r25, 0xFF	; 255
 ab6:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <xNextTaskUnblockTime+0x1>
 aba:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <xNextTaskUnblockTime>
 abe:	10 c0       	rjmp	.+32     	; 0xae0 <vTaskIncrementTick+0x94>
 ac0:	e0 91 2c 07 	lds	r30, 0x072C	; 0x80072c <pxDelayedTaskList>
 ac4:	f0 91 2d 07 	lds	r31, 0x072D	; 0x80072d <pxDelayedTaskList+0x1>
 ac8:	05 80       	ldd	r0, Z+5	; 0x05
 aca:	f6 81       	ldd	r31, Z+6	; 0x06
 acc:	e0 2d       	mov	r30, r0
 ace:	06 80       	ldd	r0, Z+6	; 0x06
 ad0:	f7 81       	ldd	r31, Z+7	; 0x07
 ad2:	e0 2d       	mov	r30, r0
 ad4:	82 81       	ldd	r24, Z+2	; 0x02
 ad6:	93 81       	ldd	r25, Z+3	; 0x03
 ad8:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <xNextTaskUnblockTime+0x1>
 adc:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <xNextTaskUnblockTime>
 ae0:	20 91 14 07 	lds	r18, 0x0714	; 0x800714 <xTickCount>
 ae4:	30 91 15 07 	lds	r19, 0x0715	; 0x800715 <xTickCount+0x1>
 ae8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <xNextTaskUnblockTime>
 aec:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <xNextTaskUnblockTime+0x1>
 af0:	28 17       	cp	r18, r24
 af2:	39 07       	cpc	r19, r25
 af4:	08 f4       	brcc	.+2      	; 0xaf8 <vTaskIncrementTick+0xac>
 af6:	66 c0       	rjmp	.+204    	; 0xbc4 <vTaskIncrementTick+0x178>
 af8:	e0 91 2c 07 	lds	r30, 0x072C	; 0x80072c <pxDelayedTaskList>
 afc:	f0 91 2d 07 	lds	r31, 0x072D	; 0x80072d <pxDelayedTaskList+0x1>
 b00:	80 81       	ld	r24, Z
 b02:	88 23       	and	r24, r24
 b04:	99 f0       	breq	.+38     	; 0xb2c <vTaskIncrementTick+0xe0>
 b06:	e0 91 2c 07 	lds	r30, 0x072C	; 0x80072c <pxDelayedTaskList>
 b0a:	f0 91 2d 07 	lds	r31, 0x072D	; 0x80072d <pxDelayedTaskList+0x1>
 b0e:	05 80       	ldd	r0, Z+5	; 0x05
 b10:	f6 81       	ldd	r31, Z+6	; 0x06
 b12:	e0 2d       	mov	r30, r0
 b14:	c6 81       	ldd	r28, Z+6	; 0x06
 b16:	d7 81       	ldd	r29, Z+7	; 0x07
 b18:	8a 81       	ldd	r24, Y+2	; 0x02
 b1a:	9b 81       	ldd	r25, Y+3	; 0x03
 b1c:	20 91 14 07 	lds	r18, 0x0714	; 0x800714 <xTickCount>
 b20:	30 91 15 07 	lds	r19, 0x0715	; 0x800715 <xTickCount+0x1>
 b24:	28 17       	cp	r18, r24
 b26:	39 07       	cpc	r19, r25
 b28:	f8 f4       	brcc	.+62     	; 0xb68 <vTaskIncrementTick+0x11c>
 b2a:	19 c0       	rjmp	.+50     	; 0xb5e <vTaskIncrementTick+0x112>
 b2c:	8f ef       	ldi	r24, 0xFF	; 255
 b2e:	9f ef       	ldi	r25, 0xFF	; 255
 b30:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <xNextTaskUnblockTime+0x1>
 b34:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <xNextTaskUnblockTime>
 b38:	45 c0       	rjmp	.+138    	; 0xbc4 <vTaskIncrementTick+0x178>
 b3a:	e0 91 2c 07 	lds	r30, 0x072C	; 0x80072c <pxDelayedTaskList>
 b3e:	f0 91 2d 07 	lds	r31, 0x072D	; 0x80072d <pxDelayedTaskList+0x1>
 b42:	05 80       	ldd	r0, Z+5	; 0x05
 b44:	f6 81       	ldd	r31, Z+6	; 0x06
 b46:	e0 2d       	mov	r30, r0
 b48:	c6 81       	ldd	r28, Z+6	; 0x06
 b4a:	d7 81       	ldd	r29, Z+7	; 0x07
 b4c:	8a 81       	ldd	r24, Y+2	; 0x02
 b4e:	9b 81       	ldd	r25, Y+3	; 0x03
 b50:	20 91 14 07 	lds	r18, 0x0714	; 0x800714 <xTickCount>
 b54:	30 91 15 07 	lds	r19, 0x0715	; 0x800715 <xTickCount+0x1>
 b58:	28 17       	cp	r18, r24
 b5a:	39 07       	cpc	r19, r25
 b5c:	28 f4       	brcc	.+10     	; 0xb68 <vTaskIncrementTick+0x11c>
 b5e:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <xNextTaskUnblockTime+0x1>
 b62:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <xNextTaskUnblockTime>
 b66:	2e c0       	rjmp	.+92     	; 0xbc4 <vTaskIncrementTick+0x178>
 b68:	8e 01       	movw	r16, r28
 b6a:	0e 5f       	subi	r16, 0xFE	; 254
 b6c:	1f 4f       	sbci	r17, 0xFF	; 255
 b6e:	c8 01       	movw	r24, r16
 b70:	44 db       	rcall	.-2424   	; 0x1fa <vListRemove>
 b72:	8c 89       	ldd	r24, Y+20	; 0x14
 b74:	9d 89       	ldd	r25, Y+21	; 0x15
 b76:	89 2b       	or	r24, r25
 b78:	19 f0       	breq	.+6      	; 0xb80 <vTaskIncrementTick+0x134>
 b7a:	ce 01       	movw	r24, r28
 b7c:	0c 96       	adiw	r24, 0x0c	; 12
 b7e:	3d db       	rcall	.-2438   	; 0x1fa <vListRemove>
 b80:	8e 89       	ldd	r24, Y+22	; 0x16
 b82:	90 91 12 07 	lds	r25, 0x0712	; 0x800712 <uxTopReadyPriority>
 b86:	98 17       	cp	r25, r24
 b88:	10 f4       	brcc	.+4      	; 0xb8e <vTaskIncrementTick+0x142>
 b8a:	80 93 12 07 	sts	0x0712, r24	; 0x800712 <uxTopReadyPriority>
 b8e:	90 e0       	ldi	r25, 0x00	; 0
 b90:	9c 01       	movw	r18, r24
 b92:	22 0f       	add	r18, r18
 b94:	33 1f       	adc	r19, r19
 b96:	22 0f       	add	r18, r18
 b98:	33 1f       	adc	r19, r19
 b9a:	22 0f       	add	r18, r18
 b9c:	33 1f       	adc	r19, r19
 b9e:	82 0f       	add	r24, r18
 ba0:	93 1f       	adc	r25, r19
 ba2:	b8 01       	movw	r22, r16
 ba4:	80 5c       	subi	r24, 0xC0	; 192
 ba6:	98 4f       	sbci	r25, 0xF8	; 248
 ba8:	c6 da       	rcall	.-2676   	; 0x136 <vListInsertEnd>
 baa:	e0 91 2c 07 	lds	r30, 0x072C	; 0x80072c <pxDelayedTaskList>
 bae:	f0 91 2d 07 	lds	r31, 0x072D	; 0x80072d <pxDelayedTaskList+0x1>
 bb2:	80 81       	ld	r24, Z
 bb4:	81 11       	cpse	r24, r1
 bb6:	c1 cf       	rjmp	.-126    	; 0xb3a <vTaskIncrementTick+0xee>
 bb8:	b9 cf       	rjmp	.-142    	; 0xb2c <vTaskIncrementTick+0xe0>
 bba:	80 91 0f 07 	lds	r24, 0x070F	; 0x80070f <uxMissedTicks>
 bbe:	8f 5f       	subi	r24, 0xFF	; 255
 bc0:	80 93 0f 07 	sts	0x070F, r24	; 0x80070f <uxMissedTicks>
 bc4:	df 91       	pop	r29
 bc6:	cf 91       	pop	r28
 bc8:	1f 91       	pop	r17
 bca:	0f 91       	pop	r16
 bcc:	08 95       	ret

00000bce <xTaskResumeAll>:
 bce:	cf 92       	push	r12
 bd0:	df 92       	push	r13
 bd2:	ef 92       	push	r14
 bd4:	ff 92       	push	r15
 bd6:	0f 93       	push	r16
 bd8:	1f 93       	push	r17
 bda:	cf 93       	push	r28
 bdc:	df 93       	push	r29
 bde:	0f b6       	in	r0, 0x3f	; 63
 be0:	f8 94       	cli
 be2:	0f 92       	push	r0
 be4:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <uxSchedulerSuspended>
 be8:	81 50       	subi	r24, 0x01	; 1
 bea:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <uxSchedulerSuspended>
 bee:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <uxSchedulerSuspended>
 bf2:	81 11       	cpse	r24, r1
 bf4:	5f c0       	rjmp	.+190    	; 0xcb4 <xTaskResumeAll+0xe6>
 bf6:	80 91 16 07 	lds	r24, 0x0716	; 0x800716 <uxCurrentNumberOfTasks>
 bfa:	81 11       	cpse	r24, r1
 bfc:	2f c0       	rjmp	.+94     	; 0xc5c <xTaskResumeAll+0x8e>
 bfe:	5d c0       	rjmp	.+186    	; 0xcba <xTaskResumeAll+0xec>
 c00:	d7 01       	movw	r26, r14
 c02:	15 96       	adiw	r26, 0x05	; 5
 c04:	ed 91       	ld	r30, X+
 c06:	fc 91       	ld	r31, X
 c08:	16 97       	sbiw	r26, 0x06	; 6
 c0a:	c6 81       	ldd	r28, Z+6	; 0x06
 c0c:	d7 81       	ldd	r29, Z+7	; 0x07
 c0e:	ce 01       	movw	r24, r28
 c10:	0c 96       	adiw	r24, 0x0c	; 12
 c12:	f3 da       	rcall	.-2586   	; 0x1fa <vListRemove>
 c14:	8e 01       	movw	r16, r28
 c16:	0e 5f       	subi	r16, 0xFE	; 254
 c18:	1f 4f       	sbci	r17, 0xFF	; 255
 c1a:	c8 01       	movw	r24, r16
 c1c:	ee da       	rcall	.-2596   	; 0x1fa <vListRemove>
 c1e:	8e 89       	ldd	r24, Y+22	; 0x16
 c20:	90 91 12 07 	lds	r25, 0x0712	; 0x800712 <uxTopReadyPriority>
 c24:	98 17       	cp	r25, r24
 c26:	10 f4       	brcc	.+4      	; 0xc2c <xTaskResumeAll+0x5e>
 c28:	80 93 12 07 	sts	0x0712, r24	; 0x800712 <uxTopReadyPriority>
 c2c:	90 e0       	ldi	r25, 0x00	; 0
 c2e:	9c 01       	movw	r18, r24
 c30:	22 0f       	add	r18, r18
 c32:	33 1f       	adc	r19, r19
 c34:	22 0f       	add	r18, r18
 c36:	33 1f       	adc	r19, r19
 c38:	22 0f       	add	r18, r18
 c3a:	33 1f       	adc	r19, r19
 c3c:	82 0f       	add	r24, r18
 c3e:	93 1f       	adc	r25, r19
 c40:	b8 01       	movw	r22, r16
 c42:	80 5c       	subi	r24, 0xC0	; 192
 c44:	98 4f       	sbci	r25, 0xF8	; 248
 c46:	77 da       	rcall	.-2834   	; 0x136 <vListInsertEnd>
 c48:	e0 91 64 07 	lds	r30, 0x0764	; 0x800764 <pxCurrentTCB>
 c4c:	f0 91 65 07 	lds	r31, 0x0765	; 0x800765 <pxCurrentTCB+0x1>
 c50:	9e 89       	ldd	r25, Y+22	; 0x16
 c52:	86 89       	ldd	r24, Z+22	; 0x16
 c54:	98 17       	cp	r25, r24
 c56:	58 f0       	brcs	.+22     	; 0xc6e <xTaskResumeAll+0xa0>
 c58:	dc 2c       	mov	r13, r12
 c5a:	09 c0       	rjmp	.+18     	; 0xc6e <xTaskResumeAll+0xa0>
 c5c:	d1 2c       	mov	r13, r1
 c5e:	0f 2e       	mov	r0, r31
 c60:	f1 e2       	ldi	r31, 0x21	; 33
 c62:	ef 2e       	mov	r14, r31
 c64:	f7 e0       	ldi	r31, 0x07	; 7
 c66:	ff 2e       	mov	r15, r31
 c68:	f0 2d       	mov	r31, r0
 c6a:	cc 24       	eor	r12, r12
 c6c:	c3 94       	inc	r12
 c6e:	f7 01       	movw	r30, r14
 c70:	80 81       	ld	r24, Z
 c72:	81 11       	cpse	r24, r1
 c74:	c5 cf       	rjmp	.-118    	; 0xc00 <xTaskResumeAll+0x32>
 c76:	80 91 0f 07 	lds	r24, 0x070F	; 0x80070f <uxMissedTicks>
 c7a:	88 23       	and	r24, r24
 c7c:	79 f0       	breq	.+30     	; 0xc9c <xTaskResumeAll+0xce>
 c7e:	80 91 0f 07 	lds	r24, 0x070F	; 0x80070f <uxMissedTicks>
 c82:	88 23       	and	r24, r24
 c84:	91 f0       	breq	.+36     	; 0xcaa <xTaskResumeAll+0xdc>
 c86:	e2 de       	rcall	.-572    	; 0xa4c <vTaskIncrementTick>
 c88:	80 91 0f 07 	lds	r24, 0x070F	; 0x80070f <uxMissedTicks>
 c8c:	81 50       	subi	r24, 0x01	; 1
 c8e:	80 93 0f 07 	sts	0x070F, r24	; 0x80070f <uxMissedTicks>
 c92:	80 91 0f 07 	lds	r24, 0x070F	; 0x80070f <uxMissedTicks>
 c96:	81 11       	cpse	r24, r1
 c98:	f6 cf       	rjmp	.-20     	; 0xc86 <xTaskResumeAll+0xb8>
 c9a:	07 c0       	rjmp	.+14     	; 0xcaa <xTaskResumeAll+0xdc>
 c9c:	f1 e0       	ldi	r31, 0x01	; 1
 c9e:	df 16       	cp	r13, r31
 ca0:	21 f0       	breq	.+8      	; 0xcaa <xTaskResumeAll+0xdc>
 ca2:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <xMissedYield>
 ca6:	81 30       	cpi	r24, 0x01	; 1
 ca8:	39 f4       	brne	.+14     	; 0xcb8 <xTaskResumeAll+0xea>
 caa:	10 92 0e 07 	sts	0x070E, r1	; 0x80070e <xMissedYield>
 cae:	c4 dc       	rcall	.-1656   	; 0x638 <vPortYield>
 cb0:	81 e0       	ldi	r24, 0x01	; 1
 cb2:	03 c0       	rjmp	.+6      	; 0xcba <xTaskResumeAll+0xec>
 cb4:	80 e0       	ldi	r24, 0x00	; 0
 cb6:	01 c0       	rjmp	.+2      	; 0xcba <xTaskResumeAll+0xec>
 cb8:	80 e0       	ldi	r24, 0x00	; 0
 cba:	0f 90       	pop	r0
 cbc:	0f be       	out	0x3f, r0	; 63
 cbe:	df 91       	pop	r29
 cc0:	cf 91       	pop	r28
 cc2:	1f 91       	pop	r17
 cc4:	0f 91       	pop	r16
 cc6:	ff 90       	pop	r15
 cc8:	ef 90       	pop	r14
 cca:	df 90       	pop	r13
 ccc:	cf 90       	pop	r12
 cce:	08 95       	ret

00000cd0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
 cd0:	cf 93       	push	r28
 cd2:	df 93       	push	r29
 cd4:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
 cd6:	89 2b       	or	r24, r25
 cd8:	91 f0       	breq	.+36     	; 0xcfe <vTaskDelay+0x2e>
		{
			vTaskSuspendAll();
 cda:	b2 de       	rcall	.-668    	; 0xa40 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 cdc:	80 91 14 07 	lds	r24, 0x0714	; 0x800714 <xTickCount>
 ce0:	90 91 15 07 	lds	r25, 0x0715	; 0x800715 <xTickCount+0x1>
 ce4:	c8 0f       	add	r28, r24
 ce6:	d9 1f       	adc	r29, r25

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 ce8:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <pxCurrentTCB>
 cec:	90 91 65 07 	lds	r25, 0x0765	; 0x800765 <pxCurrentTCB+0x1>
 cf0:	02 96       	adiw	r24, 0x02	; 2
 cf2:	83 da       	rcall	.-2810   	; 0x1fa <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 cf4:	ce 01       	movw	r24, r28
 cf6:	53 dd       	rcall	.-1370   	; 0x79e <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 cf8:	6a df       	rcall	.-300    	; 0xbce <xTaskResumeAll>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 cfa:	81 11       	cpse	r24, r1
 cfc:	01 c0       	rjmp	.+2      	; 0xd00 <vTaskDelay+0x30>
		{
			portYIELD_WITHIN_API();
 cfe:	9c dc       	rcall	.-1736   	; 0x638 <vPortYield>
 d00:	df 91       	pop	r29
		}
	}
 d02:	cf 91       	pop	r28
 d04:	08 95       	ret

00000d06 <prvIdleTask>:
 d06:	0f 2e       	mov	r0, r31
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 d08:	f8 e1       	ldi	r31, 0x18	; 24
 d0a:	ef 2e       	mov	r14, r31
 d0c:	f7 e0       	ldi	r31, 0x07	; 7
 d0e:	ff 2e       	mov	r15, r31
 d10:	f0 2d       	mov	r31, r0

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 d12:	c0 e4       	ldi	r28, 0x40	; 64
 d14:	d7 e0       	ldi	r29, 0x07	; 7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 d16:	80 91 17 07 	lds	r24, 0x0717	; 0x800717 <uxTasksDeleted>
 d1a:	88 23       	and	r24, r24
 d1c:	29 f1       	breq	.+74     	; 0xd68 <prvIdleTask+0x62>
		{
			vTaskSuspendAll();
 d1e:	90 de       	rcall	.-736    	; 0xa40 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 d20:	d7 01       	movw	r26, r14
			xTaskResumeAll();
 d22:	1c 91       	ld	r17, X
 d24:	54 df       	rcall	.-344    	; 0xbce <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 d26:	11 23       	and	r17, r17
 d28:	f9 f0       	breq	.+62     	; 0xd68 <prvIdleTask+0x62>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 d2a:	0f b6       	in	r0, 0x3f	; 63
 d2c:	f8 94       	cli
 d2e:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 d30:	d7 01       	movw	r26, r14
 d32:	15 96       	adiw	r26, 0x05	; 5
 d34:	ed 91       	ld	r30, X+
 d36:	fc 91       	ld	r31, X
 d38:	16 97       	sbiw	r26, 0x06	; 6
 d3a:	06 81       	ldd	r16, Z+6	; 0x06
 d3c:	17 81       	ldd	r17, Z+7	; 0x07
					vListRemove( &( pxTCB->xGenericListItem ) );
 d3e:	c8 01       	movw	r24, r16
 d40:	02 96       	adiw	r24, 0x02	; 2
 d42:	5b da       	rcall	.-2890   	; 0x1fa <vListRemove>
					--uxCurrentNumberOfTasks;
 d44:	80 91 16 07 	lds	r24, 0x0716	; 0x800716 <uxCurrentNumberOfTasks>
 d48:	81 50       	subi	r24, 0x01	; 1
 d4a:	80 93 16 07 	sts	0x0716, r24	; 0x800716 <uxCurrentNumberOfTasks>
					--uxTasksDeleted;
 d4e:	80 91 17 07 	lds	r24, 0x0717	; 0x800717 <uxTasksDeleted>
 d52:	81 50       	subi	r24, 0x01	; 1
 d54:	80 93 17 07 	sts	0x0717, r24	; 0x800717 <uxTasksDeleted>
				}
				taskEXIT_CRITICAL();
 d58:	0f 90       	pop	r0
 d5a:	0f be       	out	0x3f, r0	; 63
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 d5c:	f8 01       	movw	r30, r16
 d5e:	87 89       	ldd	r24, Z+23	; 0x17
 d60:	90 8d       	ldd	r25, Z+24	; 0x18
		vPortFree( pxTCB );
 d62:	d6 d9       	rcall	.-3156   	; 0x110 <vPortFree>
 d64:	c8 01       	movw	r24, r16

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 d66:	d4 d9       	rcall	.-3160   	; 0x110 <vPortFree>
 d68:	88 81       	ld	r24, Y
 d6a:	82 30       	cpi	r24, 0x02	; 2
			{
				taskYIELD();
 d6c:	a0 f2       	brcs	.-88     	; 0xd16 <prvIdleTask+0x10>
 d6e:	64 dc       	rcall	.-1848   	; 0x638 <vPortYield>
 d70:	d2 cf       	rjmp	.-92     	; 0xd16 <prvIdleTask+0x10>

00000d72 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 d72:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <uxSchedulerSuspended>
 d76:	81 11       	cpse	r24, r1
 d78:	13 c0       	rjmp	.+38     	; 0xda0 <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 d7a:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <uxTopReadyPriority>
 d7e:	90 e0       	ldi	r25, 0x00	; 0
 d80:	fc 01       	movw	r30, r24
 d82:	ee 0f       	add	r30, r30
 d84:	ff 1f       	adc	r31, r31
 d86:	ee 0f       	add	r30, r30
 d88:	ff 1f       	adc	r31, r31
 d8a:	ee 0f       	add	r30, r30
 d8c:	ff 1f       	adc	r31, r31
 d8e:	8e 0f       	add	r24, r30
 d90:	9f 1f       	adc	r25, r31
 d92:	fc 01       	movw	r30, r24
 d94:	e0 5c       	subi	r30, 0xC0	; 192
 d96:	f8 4f       	sbci	r31, 0xF8	; 248
 d98:	80 81       	ld	r24, Z
 d9a:	88 23       	and	r24, r24
 d9c:	29 f0       	breq	.+10     	; 0xda8 <vTaskSwitchContext+0x36>
 d9e:	1b c0       	rjmp	.+54     	; 0xdd6 <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 da0:	81 e0       	ldi	r24, 0x01	; 1
 da2:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <xMissedYield>
 da6:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
 da8:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <uxTopReadyPriority>
 dac:	81 50       	subi	r24, 0x01	; 1
 dae:	80 93 12 07 	sts	0x0712, r24	; 0x800712 <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 db2:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <uxTopReadyPriority>
 db6:	90 e0       	ldi	r25, 0x00	; 0
 db8:	fc 01       	movw	r30, r24
 dba:	ee 0f       	add	r30, r30
 dbc:	ff 1f       	adc	r31, r31
 dbe:	ee 0f       	add	r30, r30
 dc0:	ff 1f       	adc	r31, r31
 dc2:	ee 0f       	add	r30, r30
 dc4:	ff 1f       	adc	r31, r31
 dc6:	8e 0f       	add	r24, r30
 dc8:	9f 1f       	adc	r25, r31
 dca:	fc 01       	movw	r30, r24
 dcc:	e0 5c       	subi	r30, 0xC0	; 192
 dce:	f8 4f       	sbci	r31, 0xF8	; 248
 dd0:	80 81       	ld	r24, Z
 dd2:	88 23       	and	r24, r24
 dd4:	49 f3       	breq	.-46     	; 0xda8 <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 dd6:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <uxTopReadyPriority>
 dda:	90 e0       	ldi	r25, 0x00	; 0
 ddc:	9c 01       	movw	r18, r24
 dde:	22 0f       	add	r18, r18
 de0:	33 1f       	adc	r19, r19
 de2:	22 0f       	add	r18, r18
 de4:	33 1f       	adc	r19, r19
 de6:	22 0f       	add	r18, r18
 de8:	33 1f       	adc	r19, r19
 dea:	28 0f       	add	r18, r24
 dec:	39 1f       	adc	r19, r25
 dee:	d9 01       	movw	r26, r18
 df0:	a0 5c       	subi	r26, 0xC0	; 192
 df2:	b8 4f       	sbci	r27, 0xF8	; 248
 df4:	11 96       	adiw	r26, 0x01	; 1
 df6:	ed 91       	ld	r30, X+
 df8:	fc 91       	ld	r31, X
 dfa:	12 97       	sbiw	r26, 0x02	; 2
 dfc:	02 80       	ldd	r0, Z+2	; 0x02
 dfe:	f3 81       	ldd	r31, Z+3	; 0x03
 e00:	e0 2d       	mov	r30, r0
 e02:	12 96       	adiw	r26, 0x02	; 2
 e04:	fc 93       	st	X, r31
 e06:	ee 93       	st	-X, r30
 e08:	11 97       	sbiw	r26, 0x01	; 1
 e0a:	2d 5b       	subi	r18, 0xBD	; 189
 e0c:	38 4f       	sbci	r19, 0xF8	; 248
 e0e:	e2 17       	cp	r30, r18
 e10:	f3 07       	cpc	r31, r19
 e12:	29 f4       	brne	.+10     	; 0xe1e <vTaskSwitchContext+0xac>
 e14:	22 81       	ldd	r18, Z+2	; 0x02
 e16:	33 81       	ldd	r19, Z+3	; 0x03
 e18:	fd 01       	movw	r30, r26
 e1a:	32 83       	std	Z+2, r19	; 0x02
 e1c:	21 83       	std	Z+1, r18	; 0x01
 e1e:	fc 01       	movw	r30, r24
 e20:	ee 0f       	add	r30, r30
 e22:	ff 1f       	adc	r31, r31
 e24:	ee 0f       	add	r30, r30
 e26:	ff 1f       	adc	r31, r31
 e28:	ee 0f       	add	r30, r30
 e2a:	ff 1f       	adc	r31, r31
 e2c:	8e 0f       	add	r24, r30
 e2e:	9f 1f       	adc	r25, r31
 e30:	fc 01       	movw	r30, r24
 e32:	e0 5c       	subi	r30, 0xC0	; 192
 e34:	f8 4f       	sbci	r31, 0xF8	; 248
 e36:	01 80       	ldd	r0, Z+1	; 0x01
 e38:	f2 81       	ldd	r31, Z+2	; 0x02
 e3a:	e0 2d       	mov	r30, r0
 e3c:	86 81       	ldd	r24, Z+6	; 0x06
 e3e:	97 81       	ldd	r25, Z+7	; 0x07
 e40:	90 93 65 07 	sts	0x0765, r25	; 0x800765 <pxCurrentTCB+0x1>
 e44:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <pxCurrentTCB>
 e48:	08 95       	ret

00000e4a <memset>:
 e4a:	dc 01       	movw	r26, r24
 e4c:	01 c0       	rjmp	.+2      	; 0xe50 <memset+0x6>
 e4e:	6d 93       	st	X+, r22
 e50:	41 50       	subi	r20, 0x01	; 1
 e52:	50 40       	sbci	r21, 0x00	; 0
 e54:	e0 f7       	brcc	.-8      	; 0xe4e <memset+0x4>
 e56:	08 95       	ret

00000e58 <strncpy>:
 e58:	fb 01       	movw	r30, r22
 e5a:	dc 01       	movw	r26, r24
 e5c:	41 50       	subi	r20, 0x01	; 1
 e5e:	50 40       	sbci	r21, 0x00	; 0
 e60:	48 f0       	brcs	.+18     	; 0xe74 <strncpy+0x1c>
 e62:	01 90       	ld	r0, Z+
 e64:	0d 92       	st	X+, r0
 e66:	00 20       	and	r0, r0
 e68:	c9 f7       	brne	.-14     	; 0xe5c <strncpy+0x4>
 e6a:	01 c0       	rjmp	.+2      	; 0xe6e <strncpy+0x16>
 e6c:	1d 92       	st	X+, r1
 e6e:	41 50       	subi	r20, 0x01	; 1
 e70:	50 40       	sbci	r21, 0x00	; 0
 e72:	e0 f7       	brcc	.-8      	; 0xe6c <strncpy+0x14>
 e74:	08 95       	ret

00000e76 <_exit>:
 e76:	f8 94       	cli

00000e78 <__stop_program>:
 e78:	ff cf       	rjmp	.-2      	; 0xe78 <__stop_program>
