
ServoMotor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00000dea  00000e7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000063d  00800124  00800124  00000ea2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ea2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ed4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  00000f14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023e7  00000000  00000000  00001104  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f0f  00000000  00000000  000034eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000156c  00000000  00000000  000043fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004dc  00000000  00000000  00005968  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d3f  00000000  00000000  00005e44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012a5  00000000  00000000  00006b83  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e8  00000000  00000000  00007e28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	6a c3       	rjmp	.+1748   	; 0x70a <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ee       	ldi	r30, 0xEA	; 234
  a0:	fd e0       	ldi	r31, 0x0D	; 13
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 32       	cpi	r26, 0x24	; 36
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	27 e0       	ldi	r18, 0x07	; 7
  b4:	a4 e2       	ldi	r26, 0x24	; 36
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 36       	cpi	r26, 0x61	; 97
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	bc d1       	rcall	.+888    	; 0x43c <main>
  c4:	90 c6       	rjmp	.+3360   	; 0xde6 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
  cc:	ec 01       	movw	r28, r24
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
  ce:	70 d4       	rcall	.+2272   	; 0x9b0 <vTaskSuspendAll>
  d0:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <__data_end>
  d4:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <__data_end+0x1>
  d8:	c9 01       	movw	r24, r18
  da:	8c 0f       	add	r24, r28
  dc:	9d 1f       	adc	r25, r29
  de:	8c 3d       	cpi	r24, 0xDC	; 220
  e0:	45 e0       	ldi	r20, 0x05	; 5
  e2:	94 07       	cpc	r25, r20
  e4:	58 f4       	brcc	.+22     	; 0xfc <pvPortMalloc+0x34>
  e6:	28 17       	cp	r18, r24
  e8:	39 07       	cpc	r19, r25
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
  ea:	58 f4       	brcc	.+22     	; 0x102 <pvPortMalloc+0x3a>
  ec:	e9 01       	movw	r28, r18
  ee:	ca 5d       	subi	r28, 0xDA	; 218
			xNextFreeByte += xWantedSize;			
  f0:	de 4f       	sbci	r29, 0xFE	; 254
  f2:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <__data_end+0x1>
  f6:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
  fa:	05 c0       	rjmp	.+10     	; 0x106 <pvPortMalloc+0x3e>
  fc:	c0 e0       	ldi	r28, 0x00	; 0
  fe:	d0 e0       	ldi	r29, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <pvPortMalloc+0x3e>
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
 102:	c0 e0       	ldi	r28, 0x00	; 0
 104:	d0 e0       	ldi	r29, 0x00	; 0
		}
	}
	#endif	

	return pvReturn;
}
 106:	1b d5       	rcall	.+2614   	; 0xb3e <xTaskResumeAll>
 108:	ce 01       	movw	r24, r28
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 110:	08 95       	ret

00000112 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
 112:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 114:	03 96       	adiw	r24, 0x03	; 3
 116:	92 83       	std	Z+2, r25	; 0x02
 118:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 11a:	2f ef       	ldi	r18, 0xFF	; 255
 11c:	3f ef       	ldi	r19, 0xFF	; 255
 11e:	34 83       	std	Z+4, r19	; 0x04
 120:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 122:	96 83       	std	Z+6, r25	; 0x06
 124:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 126:	90 87       	std	Z+8, r25	; 0x08
 128:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 12a:	10 82       	st	Z, r1
 12c:	08 95       	ret

0000012e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 12e:	fc 01       	movw	r30, r24
 130:	11 86       	std	Z+9, r1	; 0x09
 132:	10 86       	std	Z+8, r1	; 0x08
 134:	08 95       	ret

00000136 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	fc 01       	movw	r30, r24
 13c:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
 13e:	21 81       	ldd	r18, Z+1	; 0x01
 140:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
 142:	e9 01       	movw	r28, r18
 144:	8a 81       	ldd	r24, Y+2	; 0x02
 146:	9b 81       	ldd	r25, Y+3	; 0x03
 148:	13 96       	adiw	r26, 0x03	; 3
 14a:	9c 93       	st	X, r25
 14c:	8e 93       	st	-X, r24
 14e:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
 150:	81 81       	ldd	r24, Z+1	; 0x01
 152:	92 81       	ldd	r25, Z+2	; 0x02
 154:	15 96       	adiw	r26, 0x05	; 5
 156:	9c 93       	st	X, r25
 158:	8e 93       	st	-X, r24
 15a:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 15c:	8a 81       	ldd	r24, Y+2	; 0x02
 15e:	9b 81       	ldd	r25, Y+3	; 0x03
 160:	ec 01       	movw	r28, r24
 162:	7d 83       	std	Y+5, r23	; 0x05
 164:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 166:	e9 01       	movw	r28, r18
 168:	7b 83       	std	Y+3, r23	; 0x03
 16a:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 16c:	72 83       	std	Z+2, r23	; 0x02
 16e:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 170:	19 96       	adiw	r26, 0x09	; 9
 172:	fc 93       	st	X, r31
 174:	ee 93       	st	-X, r30
 176:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
 178:	80 81       	ld	r24, Z
 17a:	8f 5f       	subi	r24, 0xFF	; 255
 17c:	80 83       	st	Z, r24
}
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 18a:	48 81       	ld	r20, Y
 18c:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 18e:	4f 3f       	cpi	r20, 0xFF	; 255
 190:	2f ef       	ldi	r18, 0xFF	; 255
 192:	52 07       	cpc	r21, r18
 194:	31 f4       	brne	.+12     	; 0x1a2 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 196:	dc 01       	movw	r26, r24
 198:	17 96       	adiw	r26, 0x07	; 7
 19a:	ed 91       	ld	r30, X+
 19c:	fc 91       	ld	r31, X
 19e:	18 97       	sbiw	r26, 0x08	; 8
 1a0:	17 c0       	rjmp	.+46     	; 0x1d0 <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 1a2:	fc 01       	movw	r30, r24
 1a4:	33 96       	adiw	r30, 0x03	; 3
 1a6:	dc 01       	movw	r26, r24
 1a8:	15 96       	adiw	r26, 0x05	; 5
 1aa:	2d 91       	ld	r18, X+
 1ac:	3c 91       	ld	r19, X
 1ae:	16 97       	sbiw	r26, 0x06	; 6
 1b0:	d9 01       	movw	r26, r18
 1b2:	2d 91       	ld	r18, X+
 1b4:	3c 91       	ld	r19, X
 1b6:	42 17       	cp	r20, r18
 1b8:	53 07       	cpc	r21, r19
 1ba:	50 f0       	brcs	.+20     	; 0x1d0 <vListInsert+0x4c>
 1bc:	02 80       	ldd	r0, Z+2	; 0x02
 1be:	f3 81       	ldd	r31, Z+3	; 0x03
 1c0:	e0 2d       	mov	r30, r0
 1c2:	a2 81       	ldd	r26, Z+2	; 0x02
 1c4:	b3 81       	ldd	r27, Z+3	; 0x03
 1c6:	2d 91       	ld	r18, X+
 1c8:	3c 91       	ld	r19, X
 1ca:	42 17       	cp	r20, r18
 1cc:	53 07       	cpc	r21, r19
 1ce:	b0 f7       	brcc	.-20     	; 0x1bc <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 1d0:	a2 81       	ldd	r26, Z+2	; 0x02
 1d2:	b3 81       	ldd	r27, Z+3	; 0x03
 1d4:	bb 83       	std	Y+3, r27	; 0x03
 1d6:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 1d8:	15 96       	adiw	r26, 0x05	; 5
 1da:	dc 93       	st	X, r29
 1dc:	ce 93       	st	-X, r28
 1de:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
 1e0:	fd 83       	std	Y+5, r31	; 0x05
 1e2:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 1e4:	d3 83       	std	Z+3, r29	; 0x03
 1e6:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 1e8:	99 87       	std	Y+9, r25	; 0x09
 1ea:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
 1ec:	fc 01       	movw	r30, r24
 1ee:	20 81       	ld	r18, Z
 1f0:	2f 5f       	subi	r18, 0xFF	; 255
 1f2:	20 83       	st	Z, r18
}
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
 1fa:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 1fc:	a2 81       	ldd	r26, Z+2	; 0x02
 1fe:	b3 81       	ldd	r27, Z+3	; 0x03
 200:	84 81       	ldd	r24, Z+4	; 0x04
 202:	95 81       	ldd	r25, Z+5	; 0x05
 204:	15 96       	adiw	r26, 0x05	; 5
 206:	9c 93       	st	X, r25
 208:	8e 93       	st	-X, r24
 20a:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 20c:	a4 81       	ldd	r26, Z+4	; 0x04
 20e:	b5 81       	ldd	r27, Z+5	; 0x05
 210:	82 81       	ldd	r24, Z+2	; 0x02
 212:	93 81       	ldd	r25, Z+3	; 0x03
 214:	13 96       	adiw	r26, 0x03	; 3
 216:	9c 93       	st	X, r25
 218:	8e 93       	st	-X, r24
 21a:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 21c:	a0 85       	ldd	r26, Z+8	; 0x08
 21e:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 220:	11 96       	adiw	r26, 0x01	; 1
 222:	8d 91       	ld	r24, X+
 224:	9c 91       	ld	r25, X
 226:	12 97       	sbiw	r26, 0x02	; 2
 228:	e8 17       	cp	r30, r24
 22a:	f9 07       	cpc	r31, r25
 22c:	31 f4       	brne	.+12     	; 0x23a <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 22e:	84 81       	ldd	r24, Z+4	; 0x04
 230:	95 81       	ldd	r25, Z+5	; 0x05
 232:	12 96       	adiw	r26, 0x02	; 2
 234:	9c 93       	st	X, r25
 236:	8e 93       	st	-X, r24
 238:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
 23a:	11 86       	std	Z+9, r1	; 0x09
 23c:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 23e:	8c 91       	ld	r24, X
 240:	81 50       	subi	r24, 0x01	; 1
 242:	8c 93       	st	X, r24
 244:	08 95       	ret

00000246 <pwm_init>:
}	
 
 enum SERVOState {drive} servo_state;

 void SERVO_Init(){
	 servo_state = drive;
 246:	80 e4       	ldi	r24, 0x40	; 64
 248:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 24c:	8b e0       	ldi	r24, 0x0B	; 11
 24e:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
 252:	82 ee       	ldi	r24, 0xE2	; 226
 254:	94 e0       	ldi	r25, 0x04	; 4
 256:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 25a:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 25e:	08 95       	ret

00000260 <BUTTON_Tick>:
 260:	80 91 60 07 	lds	r24, 0x0760	; 0x800760 <button_state>
 264:	88 23       	and	r24, r24
 266:	21 f0       	breq	.+8      	; 0x270 <BUTTON_Tick+0x10>
 268:	81 30       	cpi	r24, 0x01	; 1
 26a:	09 f4       	brne	.+2      	; 0x26e <BUTTON_Tick+0xe>
 26c:	53 c0       	rjmp	.+166    	; 0x314 <BUTTON_Tick+0xb4>
 26e:	73 c0       	rjmp	.+230    	; 0x356 <BUTTON_Tick+0xf6>
 270:	00 99       	sbic	0x00, 0	; 0
 272:	15 c0       	rjmp	.+42     	; 0x29e <BUTTON_Tick+0x3e>
 274:	80 b1       	in	r24, 0x00	; 0
 276:	80 95       	com	r24
 278:	81 fd       	sbrc	r24, 1
 27a:	11 c0       	rjmp	.+34     	; 0x29e <BUTTON_Tick+0x3e>
 27c:	80 b1       	in	r24, 0x00	; 0
 27e:	80 95       	com	r24
 280:	82 fd       	sbrc	r24, 2
 282:	0d c0       	rjmp	.+26     	; 0x29e <BUTTON_Tick+0x3e>
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	80 93 04 07 	sts	0x0704, r24	; 0x800704 <right>
 28a:	10 92 03 07 	sts	0x0703, r1	; 0x800703 <center>
 28e:	10 92 02 07 	sts	0x0702, r1	; 0x800702 <left>
 292:	9a e1       	ldi	r25, 0x1A	; 26
 294:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
 298:	80 93 60 07 	sts	0x0760, r24	; 0x800760 <button_state>
 29c:	08 95       	ret
 29e:	00 9b       	sbis	0x00, 0	; 0
 2a0:	15 c0       	rjmp	.+42     	; 0x2cc <BUTTON_Tick+0x6c>
 2a2:	80 b1       	in	r24, 0x00	; 0
 2a4:	80 95       	com	r24
 2a6:	81 ff       	sbrs	r24, 1
 2a8:	11 c0       	rjmp	.+34     	; 0x2cc <BUTTON_Tick+0x6c>
 2aa:	80 b1       	in	r24, 0x00	; 0
 2ac:	80 95       	com	r24
 2ae:	82 fd       	sbrc	r24, 2
 2b0:	0d c0       	rjmp	.+26     	; 0x2cc <BUTTON_Tick+0x6c>
 2b2:	10 92 04 07 	sts	0x0704, r1	; 0x800704 <right>
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	80 93 03 07 	sts	0x0703, r24	; 0x800703 <center>
 2bc:	10 92 02 07 	sts	0x0702, r1	; 0x800702 <left>
 2c0:	93 e1       	ldi	r25, 0x13	; 19
 2c2:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
 2c6:	80 93 60 07 	sts	0x0760, r24	; 0x800760 <button_state>
 2ca:	08 95       	ret
 2cc:	00 9b       	sbis	0x00, 0	; 0
 2ce:	15 c0       	rjmp	.+42     	; 0x2fa <BUTTON_Tick+0x9a>
 2d0:	80 b1       	in	r24, 0x00	; 0
 2d2:	80 95       	com	r24
 2d4:	81 fd       	sbrc	r24, 1
 2d6:	11 c0       	rjmp	.+34     	; 0x2fa <BUTTON_Tick+0x9a>
 2d8:	80 b1       	in	r24, 0x00	; 0
 2da:	80 95       	com	r24
 2dc:	82 ff       	sbrs	r24, 2
 2de:	0d c0       	rjmp	.+26     	; 0x2fa <BUTTON_Tick+0x9a>
 2e0:	10 92 04 07 	sts	0x0704, r1	; 0x800704 <right>
 2e4:	10 92 03 07 	sts	0x0703, r1	; 0x800703 <center>
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	80 93 02 07 	sts	0x0702, r24	; 0x800702 <left>
 2ee:	9d e0       	ldi	r25, 0x0D	; 13
 2f0:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
 2f4:	80 93 60 07 	sts	0x0760, r24	; 0x800760 <button_state>
 2f8:	08 95       	ret
 2fa:	10 92 04 07 	sts	0x0704, r1	; 0x800704 <right>
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	80 93 03 07 	sts	0x0703, r24	; 0x800703 <center>
 304:	10 92 02 07 	sts	0x0702, r1	; 0x800702 <left>
 308:	8d e0       	ldi	r24, 0x0D	; 13
 30a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 30e:	10 92 60 07 	sts	0x0760, r1	; 0x800760 <button_state>
 312:	08 95       	ret
 314:	00 99       	sbic	0x00, 0	; 0
 316:	08 c0       	rjmp	.+16     	; 0x328 <BUTTON_Tick+0xc8>
 318:	80 b1       	in	r24, 0x00	; 0
 31a:	80 95       	com	r24
 31c:	81 fd       	sbrc	r24, 1
 31e:	04 c0       	rjmp	.+8      	; 0x328 <BUTTON_Tick+0xc8>
 320:	80 b1       	in	r24, 0x00	; 0
 322:	80 95       	com	r24
 324:	82 ff       	sbrs	r24, 2
 326:	19 c0       	rjmp	.+50     	; 0x35a <BUTTON_Tick+0xfa>
 328:	00 9b       	sbis	0x00, 0	; 0
 32a:	08 c0       	rjmp	.+16     	; 0x33c <BUTTON_Tick+0xdc>
 32c:	80 b1       	in	r24, 0x00	; 0
 32e:	80 95       	com	r24
 330:	81 ff       	sbrs	r24, 1
 332:	04 c0       	rjmp	.+8      	; 0x33c <BUTTON_Tick+0xdc>
 334:	80 b1       	in	r24, 0x00	; 0
 336:	80 95       	com	r24
 338:	82 ff       	sbrs	r24, 2
 33a:	0f c0       	rjmp	.+30     	; 0x35a <BUTTON_Tick+0xfa>
 33c:	00 9b       	sbis	0x00, 0	; 0
 33e:	08 c0       	rjmp	.+16     	; 0x350 <BUTTON_Tick+0xf0>
 340:	80 b1       	in	r24, 0x00	; 0
 342:	80 95       	com	r24
 344:	81 fd       	sbrc	r24, 1
 346:	04 c0       	rjmp	.+8      	; 0x350 <BUTTON_Tick+0xf0>
 348:	80 b1       	in	r24, 0x00	; 0
 34a:	80 95       	com	r24
 34c:	82 fd       	sbrc	r24, 2
 34e:	05 c0       	rjmp	.+10     	; 0x35a <BUTTON_Tick+0xfa>
 350:	10 92 60 07 	sts	0x0760, r1	; 0x800760 <button_state>
 354:	08 95       	ret
 356:	10 92 60 07 	sts	0x0760, r1	; 0x800760 <button_state>
 35a:	08 95       	ret

0000035c <BUTTONSecTask>:
 35c:	10 92 60 07 	sts	0x0760, r1	; 0x800760 <button_state>
 360:	7f df       	rcall	.-258    	; 0x260 <BUTTON_Tick>
 362:	8a e0       	ldi	r24, 0x0A	; 10
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	6c d4       	rcall	.+2264   	; 0xc40 <vTaskDelay>
 368:	fb cf       	rjmp	.-10     	; 0x360 <BUTTONSecTask+0x4>

0000036a <BUTTONSecPulse>:
 36a:	af 92       	push	r10
 36c:	bf 92       	push	r11
 36e:	cf 92       	push	r12
 370:	df 92       	push	r13
 372:	ef 92       	push	r14
 374:	ff 92       	push	r15
 376:	0f 93       	push	r16
 378:	a1 2c       	mov	r10, r1
 37a:	b1 2c       	mov	r11, r1
 37c:	c1 2c       	mov	r12, r1
 37e:	d1 2c       	mov	r13, r1
 380:	e1 2c       	mov	r14, r1
 382:	f1 2c       	mov	r15, r1
 384:	08 2f       	mov	r16, r24
 386:	20 e0       	ldi	r18, 0x00	; 0
 388:	30 e0       	ldi	r19, 0x00	; 0
 38a:	45 e5       	ldi	r20, 0x55	; 85
 38c:	50 e0       	ldi	r21, 0x00	; 0
 38e:	63 e0       	ldi	r22, 0x03	; 3
 390:	71 e0       	ldi	r23, 0x01	; 1
 392:	8e ea       	ldi	r24, 0xAE	; 174
 394:	91 e0       	ldi	r25, 0x01	; 1
 396:	f0 d1       	rcall	.+992    	; 0x778 <xTaskGenericCreate>
 398:	0f 91       	pop	r16
 39a:	ff 90       	pop	r15
 39c:	ef 90       	pop	r14
 39e:	df 90       	pop	r13
 3a0:	cf 90       	pop	r12
 3a2:	bf 90       	pop	r11
 3a4:	af 90       	pop	r10
 3a6:	08 95       	ret

000003a8 <SERVO_Tick>:
 }

 void SERVO_Tick(){
	 //Actions
	 switch(servo_state){
 3a8:	80 91 5f 07 	lds	r24, 0x075F	; 0x80075f <servo_state>
 3ac:	81 11       	cpse	r24, r1
 3ae:	1a c0       	rjmp	.+52     	; 0x3e4 <SERVO_Tick+0x3c>
		 case drive:
			if(right){
 3b0:	80 91 04 07 	lds	r24, 0x0704	; 0x800704 <right>
 3b4:	88 23       	and	r24, r24
 3b6:	29 f0       	breq	.+10     	; 0x3c2 <SERVO_Tick+0x1a>
				//OCR0A = 1250;
				PORTB = 0x40;
 3b8:	80 e4       	ldi	r24, 0x40	; 64
 3ba:	85 b9       	out	0x05, r24	; 5
				PORTD = 0x01;
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	8b b9       	out	0x0b, r24	; 11
 3c0:	11 c0       	rjmp	.+34     	; 0x3e4 <SERVO_Tick+0x3c>
			}
			
			else if(center){
 3c2:	80 91 03 07 	lds	r24, 0x0703	; 0x800703 <center>
 3c6:	88 23       	and	r24, r24
 3c8:	19 f0       	breq	.+6      	; 0x3d0 <SERVO_Tick+0x28>
				//OCR0A = 1250;
				// PORTB = 0x00;
				PORTD = 0x02;
 3ca:	82 e0       	ldi	r24, 0x02	; 2
 3cc:	8b b9       	out	0x0b, r24	; 11
 3ce:	0a c0       	rjmp	.+20     	; 0x3e4 <SERVO_Tick+0x3c>
			}
			
			else if(left){
 3d0:	80 91 02 07 	lds	r24, 0x0702	; 0x800702 <left>
 3d4:	88 23       	and	r24, r24
 3d6:	29 f0       	breq	.+10     	; 0x3e2 <SERVO_Tick+0x3a>
				//OCR0A = duty;
				PORTB = 0x40;
 3d8:	80 e4       	ldi	r24, 0x40	; 64
 3da:	85 b9       	out	0x05, r24	; 5
				PORTD = 0x04;
 3dc:	84 e0       	ldi	r24, 0x04	; 4
 3de:	8b b9       	out	0x0b, r24	; 11
 3e0:	01 c0       	rjmp	.+2      	; 0x3e4 <SERVO_Tick+0x3c>
			}
			
			else{
				//OCR0A = duty;
				// PORTB = 0x00;
				PORTD = 0x00;
 3e2:	1b b8       	out	0x0b, r1	; 11
		 default:
		 
			break;
	 }
	 //Transitions
	 switch(servo_state){
 3e4:	80 91 5f 07 	lds	r24, 0x075F	; 0x80075f <servo_state>
 3e8:	81 11       	cpse	r24, r1
		 case drive:
			servo_state = drive;
			break;
		 default:
			servo_state = drive;
 3ea:	10 92 5f 07 	sts	0x075F, r1	; 0x80075f <servo_state>
 3ee:	08 95       	ret

000003f0 <SERVOSecTask>:
}	
 
 enum SERVOState {drive} servo_state;

 void SERVO_Init(){
	 servo_state = drive;
 3f0:	10 92 5f 07 	sts	0x075F, r1	; 0x80075f <servo_state>
 {
	 SERVO_Init();
	 for(;;)
	 {
		 SERVO_Tick();
		 vTaskDelay(1);
 3f4:	d9 df       	rcall	.-78     	; 0x3a8 <SERVO_Tick>
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	22 d4       	rcall	.+2116   	; 0xc40 <vTaskDelay>
 3fc:	fb cf       	rjmp	.-10     	; 0x3f4 <SERVOSecTask+0x4>

000003fe <SERVOSecPulse>:
	 }
 }

 void SERVOSecPulse(unsigned portBASE_TYPE Priority)
 {
 3fe:	af 92       	push	r10
 400:	bf 92       	push	r11
 402:	cf 92       	push	r12
 404:	df 92       	push	r13
 406:	ef 92       	push	r14
 408:	ff 92       	push	r15
 40a:	0f 93       	push	r16
	 xTaskCreate(SERVOSecTask, (signed portCHAR *)"SERVOSecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
 40c:	a1 2c       	mov	r10, r1
 40e:	b1 2c       	mov	r11, r1
 410:	c1 2c       	mov	r12, r1
 412:	d1 2c       	mov	r13, r1
 414:	e1 2c       	mov	r14, r1
 416:	f1 2c       	mov	r15, r1
 418:	08 2f       	mov	r16, r24
 41a:	20 e0       	ldi	r18, 0x00	; 0
 41c:	30 e0       	ldi	r19, 0x00	; 0
 41e:	45 e5       	ldi	r20, 0x55	; 85
 420:	50 e0       	ldi	r21, 0x00	; 0
 422:	61 e1       	ldi	r22, 0x11	; 17
 424:	71 e0       	ldi	r23, 0x01	; 1
 426:	88 ef       	ldi	r24, 0xF8	; 248
 428:	91 e0       	ldi	r25, 0x01	; 1
 42a:	a6 d1       	rcall	.+844    	; 0x778 <xTaskGenericCreate>
 }
 42c:	0f 91       	pop	r16
 42e:	ff 90       	pop	r15
 430:	ef 90       	pop	r14
 432:	df 90       	pop	r13
 434:	cf 90       	pop	r12
 436:	bf 90       	pop	r11
 438:	af 90       	pop	r10
 43a:	08 95       	ret

0000043c <main>:
 
int main(void) 
{ 
   DDRA = 0x00; PORTA = 0xFF;
 43c:	11 b8       	out	0x01, r1	; 1
 43e:	8f ef       	ldi	r24, 0xFF	; 255
 440:	82 b9       	out	0x02, r24	; 2
   DDRB = 0xFF; PORTB = 0x00;
 442:	84 b9       	out	0x04, r24	; 4
 444:	15 b8       	out	0x05, r1	; 5
   DDRD = 0xFF; PORTD = 0x00;
 446:	8a b9       	out	0x0a, r24	; 10
   
   pwm_init();
   //Start Tasks  
   BUTTONSecPulse(1);
   SERVOSecPulse(1);
 448:	1b b8       	out	0x0b, r1	; 11
 44a:	fd de       	rcall	.-518    	; 0x246 <pwm_init>
    //RunSchedular 
   vTaskStartScheduler(); 
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	8d df       	rcall	.-230    	; 0x36a <BUTTONSecPulse>
 
   return 0; 
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	d5 df       	rcall	.-86     	; 0x3fe <SERVOSecPulse>
 454:	84 d2       	rcall	.+1288   	; 0x95e <vTaskStartScheduler>
 456:	80 e0       	ldi	r24, 0x00	; 0
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	08 95       	ret

0000045c <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 45c:	31 e1       	ldi	r19, 0x11	; 17
 45e:	fc 01       	movw	r30, r24
 460:	30 83       	st	Z, r19
 462:	31 97       	sbiw	r30, 0x01	; 1
 464:	22 e2       	ldi	r18, 0x22	; 34
 466:	20 83       	st	Z, r18
 468:	31 97       	sbiw	r30, 0x01	; 1
 46a:	a3 e3       	ldi	r26, 0x33	; 51
 46c:	a0 83       	st	Z, r26
 46e:	31 97       	sbiw	r30, 0x01	; 1
 470:	60 83       	st	Z, r22
 472:	31 97       	sbiw	r30, 0x01	; 1
 474:	70 83       	st	Z, r23
 476:	31 97       	sbiw	r30, 0x01	; 1
 478:	10 82       	st	Z, r1
 47a:	31 97       	sbiw	r30, 0x01	; 1
 47c:	60 e8       	ldi	r22, 0x80	; 128
 47e:	60 83       	st	Z, r22
 480:	31 97       	sbiw	r30, 0x01	; 1
 482:	10 82       	st	Z, r1
 484:	31 97       	sbiw	r30, 0x01	; 1
 486:	62 e0       	ldi	r22, 0x02	; 2
 488:	60 83       	st	Z, r22
 48a:	31 97       	sbiw	r30, 0x01	; 1
 48c:	63 e0       	ldi	r22, 0x03	; 3
 48e:	60 83       	st	Z, r22
 490:	31 97       	sbiw	r30, 0x01	; 1
 492:	64 e0       	ldi	r22, 0x04	; 4
 494:	60 83       	st	Z, r22
 496:	31 97       	sbiw	r30, 0x01	; 1
 498:	65 e0       	ldi	r22, 0x05	; 5
 49a:	60 83       	st	Z, r22
 49c:	31 97       	sbiw	r30, 0x01	; 1
 49e:	66 e0       	ldi	r22, 0x06	; 6
 4a0:	60 83       	st	Z, r22
 4a2:	31 97       	sbiw	r30, 0x01	; 1
 4a4:	67 e0       	ldi	r22, 0x07	; 7
 4a6:	60 83       	st	Z, r22
 4a8:	31 97       	sbiw	r30, 0x01	; 1
 4aa:	68 e0       	ldi	r22, 0x08	; 8
 4ac:	60 83       	st	Z, r22
 4ae:	31 97       	sbiw	r30, 0x01	; 1
 4b0:	69 e0       	ldi	r22, 0x09	; 9
 4b2:	60 83       	st	Z, r22
 4b4:	31 97       	sbiw	r30, 0x01	; 1
 4b6:	60 e1       	ldi	r22, 0x10	; 16
 4b8:	60 83       	st	Z, r22
 4ba:	31 97       	sbiw	r30, 0x01	; 1
 4bc:	30 83       	st	Z, r19
 4be:	31 97       	sbiw	r30, 0x01	; 1
 4c0:	32 e1       	ldi	r19, 0x12	; 18
 4c2:	30 83       	st	Z, r19
 4c4:	31 97       	sbiw	r30, 0x01	; 1
 4c6:	33 e1       	ldi	r19, 0x13	; 19
 4c8:	30 83       	st	Z, r19
 4ca:	31 97       	sbiw	r30, 0x01	; 1
 4cc:	34 e1       	ldi	r19, 0x14	; 20
 4ce:	30 83       	st	Z, r19
 4d0:	31 97       	sbiw	r30, 0x01	; 1
 4d2:	35 e1       	ldi	r19, 0x15	; 21
 4d4:	30 83       	st	Z, r19
 4d6:	31 97       	sbiw	r30, 0x01	; 1
 4d8:	36 e1       	ldi	r19, 0x16	; 22
 4da:	30 83       	st	Z, r19
 4dc:	31 97       	sbiw	r30, 0x01	; 1
 4de:	37 e1       	ldi	r19, 0x17	; 23
 4e0:	30 83       	st	Z, r19
 4e2:	31 97       	sbiw	r30, 0x01	; 1
 4e4:	38 e1       	ldi	r19, 0x18	; 24
 4e6:	30 83       	st	Z, r19
 4e8:	31 97       	sbiw	r30, 0x01	; 1
 4ea:	39 e1       	ldi	r19, 0x19	; 25
 4ec:	30 83       	st	Z, r19
 4ee:	31 97       	sbiw	r30, 0x01	; 1
 4f0:	30 e2       	ldi	r19, 0x20	; 32
 4f2:	30 83       	st	Z, r19
 4f4:	31 97       	sbiw	r30, 0x01	; 1
 4f6:	31 e2       	ldi	r19, 0x21	; 33
 4f8:	30 83       	st	Z, r19
 4fa:	31 97       	sbiw	r30, 0x01	; 1
 4fc:	20 83       	st	Z, r18
 4fe:	31 97       	sbiw	r30, 0x01	; 1
 500:	23 e2       	ldi	r18, 0x23	; 35
 502:	20 83       	st	Z, r18
 504:	31 97       	sbiw	r30, 0x01	; 1
 506:	40 83       	st	Z, r20
 508:	31 97       	sbiw	r30, 0x01	; 1
 50a:	50 83       	st	Z, r21
 50c:	31 97       	sbiw	r30, 0x01	; 1
 50e:	26 e2       	ldi	r18, 0x26	; 38
 510:	20 83       	st	Z, r18
 512:	31 97       	sbiw	r30, 0x01	; 1
 514:	27 e2       	ldi	r18, 0x27	; 39
 516:	20 83       	st	Z, r18
 518:	31 97       	sbiw	r30, 0x01	; 1
 51a:	28 e2       	ldi	r18, 0x28	; 40
 51c:	20 83       	st	Z, r18
 51e:	31 97       	sbiw	r30, 0x01	; 1
 520:	29 e2       	ldi	r18, 0x29	; 41
 522:	20 83       	st	Z, r18
 524:	31 97       	sbiw	r30, 0x01	; 1
 526:	20 e3       	ldi	r18, 0x30	; 48
 528:	20 83       	st	Z, r18
 52a:	31 97       	sbiw	r30, 0x01	; 1
 52c:	21 e3       	ldi	r18, 0x31	; 49
 52e:	20 83       	st	Z, r18
 530:	86 97       	sbiw	r24, 0x26	; 38
 532:	08 95       	ret

00000534 <xPortStartScheduler>:
 534:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 538:	8c e7       	ldi	r24, 0x7C	; 124
 53a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 53e:	8b e0       	ldi	r24, 0x0B	; 11
 540:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 544:	ef e6       	ldi	r30, 0x6F	; 111
 546:	f0 e0       	ldi	r31, 0x00	; 0
 548:	80 81       	ld	r24, Z
 54a:	82 60       	ori	r24, 0x02	; 2
 54c:	80 83       	st	Z, r24
 54e:	a0 91 5d 07 	lds	r26, 0x075D	; 0x80075d <pxCurrentTCB>
 552:	b0 91 5e 07 	lds	r27, 0x075E	; 0x80075e <pxCurrentTCB+0x1>
 556:	cd 91       	ld	r28, X+
 558:	cd bf       	out	0x3d, r28	; 61
 55a:	dd 91       	ld	r29, X+
 55c:	de bf       	out	0x3e, r29	; 62
 55e:	ff 91       	pop	r31
 560:	ef 91       	pop	r30
 562:	df 91       	pop	r29
 564:	cf 91       	pop	r28
 566:	bf 91       	pop	r27
 568:	af 91       	pop	r26
 56a:	9f 91       	pop	r25
 56c:	8f 91       	pop	r24
 56e:	7f 91       	pop	r23
 570:	6f 91       	pop	r22
 572:	5f 91       	pop	r21
 574:	4f 91       	pop	r20
 576:	3f 91       	pop	r19
 578:	2f 91       	pop	r18
 57a:	1f 91       	pop	r17
 57c:	0f 91       	pop	r16
 57e:	ff 90       	pop	r15
 580:	ef 90       	pop	r14
 582:	df 90       	pop	r13
 584:	cf 90       	pop	r12
 586:	bf 90       	pop	r11
 588:	af 90       	pop	r10
 58a:	9f 90       	pop	r9
 58c:	8f 90       	pop	r8
 58e:	7f 90       	pop	r7
 590:	6f 90       	pop	r6
 592:	5f 90       	pop	r5
 594:	4f 90       	pop	r4
 596:	3f 90       	pop	r3
 598:	2f 90       	pop	r2
 59a:	1f 90       	pop	r1
 59c:	0f 90       	pop	r0
 59e:	0f be       	out	0x3f, r0	; 63
 5a0:	0f 90       	pop	r0
 5a2:	08 95       	ret
 5a4:	81 e0       	ldi	r24, 0x01	; 1
 5a6:	08 95       	ret

000005a8 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 5a8:	0f 92       	push	r0
 5aa:	0f b6       	in	r0, 0x3f	; 63
 5ac:	f8 94       	cli
 5ae:	0f 92       	push	r0
 5b0:	1f 92       	push	r1
 5b2:	11 24       	eor	r1, r1
 5b4:	2f 92       	push	r2
 5b6:	3f 92       	push	r3
 5b8:	4f 92       	push	r4
 5ba:	5f 92       	push	r5
 5bc:	6f 92       	push	r6
 5be:	7f 92       	push	r7
 5c0:	8f 92       	push	r8
 5c2:	9f 92       	push	r9
 5c4:	af 92       	push	r10
 5c6:	bf 92       	push	r11
 5c8:	cf 92       	push	r12
 5ca:	df 92       	push	r13
 5cc:	ef 92       	push	r14
 5ce:	ff 92       	push	r15
 5d0:	0f 93       	push	r16
 5d2:	1f 93       	push	r17
 5d4:	2f 93       	push	r18
 5d6:	3f 93       	push	r19
 5d8:	4f 93       	push	r20
 5da:	5f 93       	push	r21
 5dc:	6f 93       	push	r22
 5de:	7f 93       	push	r23
 5e0:	8f 93       	push	r24
 5e2:	9f 93       	push	r25
 5e4:	af 93       	push	r26
 5e6:	bf 93       	push	r27
 5e8:	cf 93       	push	r28
 5ea:	df 93       	push	r29
 5ec:	ef 93       	push	r30
 5ee:	ff 93       	push	r31
 5f0:	a0 91 5d 07 	lds	r26, 0x075D	; 0x80075d <pxCurrentTCB>
 5f4:	b0 91 5e 07 	lds	r27, 0x075E	; 0x80075e <pxCurrentTCB+0x1>
 5f8:	0d b6       	in	r0, 0x3d	; 61
 5fa:	0d 92       	st	X+, r0
 5fc:	0e b6       	in	r0, 0x3e	; 62
	vTaskSwitchContext();
 5fe:	0d 92       	st	X+, r0
	portRESTORE_CONTEXT();
 600:	70 d3       	rcall	.+1760   	; 0xce2 <vTaskSwitchContext>
 602:	a0 91 5d 07 	lds	r26, 0x075D	; 0x80075d <pxCurrentTCB>
 606:	b0 91 5e 07 	lds	r27, 0x075E	; 0x80075e <pxCurrentTCB+0x1>
 60a:	cd 91       	ld	r28, X+
 60c:	cd bf       	out	0x3d, r28	; 61
 60e:	dd 91       	ld	r29, X+
 610:	de bf       	out	0x3e, r29	; 62
 612:	ff 91       	pop	r31
 614:	ef 91       	pop	r30
 616:	df 91       	pop	r29
 618:	cf 91       	pop	r28
 61a:	bf 91       	pop	r27
 61c:	af 91       	pop	r26
 61e:	9f 91       	pop	r25
 620:	8f 91       	pop	r24
 622:	7f 91       	pop	r23
 624:	6f 91       	pop	r22
 626:	5f 91       	pop	r21
 628:	4f 91       	pop	r20
 62a:	3f 91       	pop	r19
 62c:	2f 91       	pop	r18
 62e:	1f 91       	pop	r17
 630:	0f 91       	pop	r16
 632:	ff 90       	pop	r15
 634:	ef 90       	pop	r14
 636:	df 90       	pop	r13
 638:	cf 90       	pop	r12
 63a:	bf 90       	pop	r11
 63c:	af 90       	pop	r10
 63e:	9f 90       	pop	r9
 640:	8f 90       	pop	r8
 642:	7f 90       	pop	r7
 644:	6f 90       	pop	r6
 646:	5f 90       	pop	r5
 648:	4f 90       	pop	r4
 64a:	3f 90       	pop	r3
 64c:	2f 90       	pop	r2
 64e:	1f 90       	pop	r1
 650:	0f 90       	pop	r0
 652:	0f be       	out	0x3f, r0	; 63

	asm volatile ( "ret" );
 654:	0f 90       	pop	r0
 656:	08 95       	ret

00000658 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 658:	0f 92       	push	r0
 65a:	0f b6       	in	r0, 0x3f	; 63
 65c:	f8 94       	cli
 65e:	0f 92       	push	r0
 660:	1f 92       	push	r1
 662:	11 24       	eor	r1, r1
 664:	2f 92       	push	r2
 666:	3f 92       	push	r3
 668:	4f 92       	push	r4
 66a:	5f 92       	push	r5
 66c:	6f 92       	push	r6
 66e:	7f 92       	push	r7
 670:	8f 92       	push	r8
 672:	9f 92       	push	r9
 674:	af 92       	push	r10
 676:	bf 92       	push	r11
 678:	cf 92       	push	r12
 67a:	df 92       	push	r13
 67c:	ef 92       	push	r14
 67e:	ff 92       	push	r15
 680:	0f 93       	push	r16
 682:	1f 93       	push	r17
 684:	2f 93       	push	r18
 686:	3f 93       	push	r19
 688:	4f 93       	push	r20
 68a:	5f 93       	push	r21
 68c:	6f 93       	push	r22
 68e:	7f 93       	push	r23
 690:	8f 93       	push	r24
 692:	9f 93       	push	r25
 694:	af 93       	push	r26
 696:	bf 93       	push	r27
 698:	cf 93       	push	r28
 69a:	df 93       	push	r29
 69c:	ef 93       	push	r30
 69e:	ff 93       	push	r31
 6a0:	a0 91 5d 07 	lds	r26, 0x075D	; 0x80075d <pxCurrentTCB>
 6a4:	b0 91 5e 07 	lds	r27, 0x075E	; 0x80075e <pxCurrentTCB+0x1>
 6a8:	0d b6       	in	r0, 0x3d	; 61
 6aa:	0d 92       	st	X+, r0
 6ac:	0e b6       	in	r0, 0x3e	; 62
	vTaskIncrementTick();
	vTaskSwitchContext();
 6ae:	0d 92       	st	X+, r0
 6b0:	85 d1       	rcall	.+778    	; 0x9bc <vTaskIncrementTick>
	portRESTORE_CONTEXT();
 6b2:	17 d3       	rcall	.+1582   	; 0xce2 <vTaskSwitchContext>
 6b4:	a0 91 5d 07 	lds	r26, 0x075D	; 0x80075d <pxCurrentTCB>
 6b8:	b0 91 5e 07 	lds	r27, 0x075E	; 0x80075e <pxCurrentTCB+0x1>
 6bc:	cd 91       	ld	r28, X+
 6be:	cd bf       	out	0x3d, r28	; 61
 6c0:	dd 91       	ld	r29, X+
 6c2:	de bf       	out	0x3e, r29	; 62
 6c4:	ff 91       	pop	r31
 6c6:	ef 91       	pop	r30
 6c8:	df 91       	pop	r29
 6ca:	cf 91       	pop	r28
 6cc:	bf 91       	pop	r27
 6ce:	af 91       	pop	r26
 6d0:	9f 91       	pop	r25
 6d2:	8f 91       	pop	r24
 6d4:	7f 91       	pop	r23
 6d6:	6f 91       	pop	r22
 6d8:	5f 91       	pop	r21
 6da:	4f 91       	pop	r20
 6dc:	3f 91       	pop	r19
 6de:	2f 91       	pop	r18
 6e0:	1f 91       	pop	r17
 6e2:	0f 91       	pop	r16
 6e4:	ff 90       	pop	r15
 6e6:	ef 90       	pop	r14
 6e8:	df 90       	pop	r13
 6ea:	cf 90       	pop	r12
 6ec:	bf 90       	pop	r11
 6ee:	af 90       	pop	r10
 6f0:	9f 90       	pop	r9
 6f2:	8f 90       	pop	r8
 6f4:	7f 90       	pop	r7
 6f6:	6f 90       	pop	r6
 6f8:	5f 90       	pop	r5
 6fa:	4f 90       	pop	r4
 6fc:	3f 90       	pop	r3
 6fe:	2f 90       	pop	r2
 700:	1f 90       	pop	r1
 702:	0f 90       	pop	r0
 704:	0f be       	out	0x3f, r0	; 63

	asm volatile ( "ret" );
 706:	0f 90       	pop	r0
 708:	08 95       	ret

0000070a <__vector_13>:
}
 70a:	a6 df       	rcall	.-180    	; 0x658 <vPortYieldFromTick>
 70c:	18 95       	reti

0000070e <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
 70e:	cf 93       	push	r28
 710:	df 93       	push	r29
 712:	ec 01       	movw	r28, r24
 714:	e0 91 5d 07 	lds	r30, 0x075D	; 0x80075d <pxCurrentTCB>
 718:	f0 91 5e 07 	lds	r31, 0x075E	; 0x80075e <pxCurrentTCB+0x1>
 71c:	93 83       	std	Z+3, r25	; 0x03
 71e:	82 83       	std	Z+2, r24	; 0x02
 720:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <xTickCount>
 724:	90 91 0e 07 	lds	r25, 0x070E	; 0x80070e <xTickCount+0x1>
 728:	c8 17       	cp	r28, r24
 72a:	d9 07       	cpc	r29, r25
 72c:	60 f4       	brcc	.+24     	; 0x746 <prvAddCurrentTaskToDelayedList+0x38>
 72e:	60 91 5d 07 	lds	r22, 0x075D	; 0x80075d <pxCurrentTCB>
 732:	70 91 5e 07 	lds	r23, 0x075E	; 0x80075e <pxCurrentTCB+0x1>
 736:	80 91 23 07 	lds	r24, 0x0723	; 0x800723 <pxOverflowDelayedTaskList>
 73a:	90 91 24 07 	lds	r25, 0x0724	; 0x800724 <pxOverflowDelayedTaskList+0x1>
 73e:	6e 5f       	subi	r22, 0xFE	; 254
 740:	7f 4f       	sbci	r23, 0xFF	; 255
 742:	20 dd       	rcall	.-1472   	; 0x184 <vListInsert>
 744:	16 c0       	rjmp	.+44     	; 0x772 <prvAddCurrentTaskToDelayedList+0x64>
 746:	60 91 5d 07 	lds	r22, 0x075D	; 0x80075d <pxCurrentTCB>
 74a:	70 91 5e 07 	lds	r23, 0x075E	; 0x80075e <pxCurrentTCB+0x1>
 74e:	80 91 25 07 	lds	r24, 0x0725	; 0x800725 <pxDelayedTaskList>
 752:	90 91 26 07 	lds	r25, 0x0726	; 0x800726 <pxDelayedTaskList+0x1>
 756:	6e 5f       	subi	r22, 0xFE	; 254
 758:	7f 4f       	sbci	r23, 0xFF	; 255
 75a:	14 dd       	rcall	.-1496   	; 0x184 <vListInsert>
 75c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <xNextTaskUnblockTime>
 760:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <xNextTaskUnblockTime+0x1>
 764:	c8 17       	cp	r28, r24
 766:	d9 07       	cpc	r29, r25
 768:	20 f4       	brcc	.+8      	; 0x772 <prvAddCurrentTaskToDelayedList+0x64>
 76a:	d0 93 02 01 	sts	0x0102, r29	; 0x800102 <xNextTaskUnblockTime+0x1>
 76e:	c0 93 01 01 	sts	0x0101, r28	; 0x800101 <xNextTaskUnblockTime>
 772:	df 91       	pop	r29
 774:	cf 91       	pop	r28
 776:	08 95       	ret

00000778 <xTaskGenericCreate>:
 778:	4f 92       	push	r4
 77a:	5f 92       	push	r5
 77c:	6f 92       	push	r6
 77e:	7f 92       	push	r7
 780:	8f 92       	push	r8
 782:	9f 92       	push	r9
 784:	af 92       	push	r10
 786:	bf 92       	push	r11
 788:	cf 92       	push	r12
 78a:	df 92       	push	r13
 78c:	ef 92       	push	r14
 78e:	ff 92       	push	r15
 790:	0f 93       	push	r16
 792:	1f 93       	push	r17
 794:	cf 93       	push	r28
 796:	df 93       	push	r29
 798:	5c 01       	movw	r10, r24
 79a:	4b 01       	movw	r8, r22
 79c:	3a 01       	movw	r6, r20
 79e:	29 01       	movw	r4, r18
 7a0:	81 e2       	ldi	r24, 0x21	; 33
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	91 dc       	rcall	.-1758   	; 0xc8 <pvPortMalloc>
 7a6:	ec 01       	movw	r28, r24
 7a8:	89 2b       	or	r24, r25
 7aa:	09 f4       	brne	.+2      	; 0x7ae <xTaskGenericCreate+0x36>
 7ac:	c6 c0       	rjmp	.+396    	; 0x93a <xTaskGenericCreate+0x1c2>
 7ae:	c1 14       	cp	r12, r1
 7b0:	d1 04       	cpc	r13, r1
 7b2:	09 f0       	breq	.+2      	; 0x7b6 <xTaskGenericCreate+0x3e>
 7b4:	be c0       	rjmp	.+380    	; 0x932 <xTaskGenericCreate+0x1ba>
 7b6:	c3 01       	movw	r24, r6
 7b8:	87 dc       	rcall	.-1778   	; 0xc8 <pvPortMalloc>
 7ba:	98 8f       	std	Y+24, r25	; 0x18
 7bc:	8f 8b       	std	Y+23, r24	; 0x17
 7be:	00 97       	sbiw	r24, 0x00	; 0
 7c0:	19 f4       	brne	.+6      	; 0x7c8 <xTaskGenericCreate+0x50>
 7c2:	ce 01       	movw	r24, r28
 7c4:	a5 dc       	rcall	.-1718   	; 0x110 <vPortFree>
 7c6:	b9 c0       	rjmp	.+370    	; 0x93a <xTaskGenericCreate+0x1c2>
 7c8:	a3 01       	movw	r20, r6
 7ca:	65 ea       	ldi	r22, 0xA5	; 165
 7cc:	70 e0       	ldi	r23, 0x00	; 0
 7ce:	f5 d2       	rcall	.+1514   	; 0xdba <memset>
 7d0:	93 01       	movw	r18, r6
 7d2:	21 50       	subi	r18, 0x01	; 1
 7d4:	31 09       	sbc	r19, r1
 7d6:	8f 89       	ldd	r24, Y+23	; 0x17
 7d8:	98 8d       	ldd	r25, Y+24	; 0x18
 7da:	3c 01       	movw	r6, r24
 7dc:	62 0e       	add	r6, r18
 7de:	73 1e       	adc	r7, r19
 7e0:	48 e0       	ldi	r20, 0x08	; 8
 7e2:	50 e0       	ldi	r21, 0x00	; 0
 7e4:	b4 01       	movw	r22, r8
 7e6:	ce 01       	movw	r24, r28
 7e8:	49 96       	adiw	r24, 0x19	; 25
 7ea:	ee d2       	rcall	.+1500   	; 0xdc8 <strncpy>
 7ec:	18 a2       	std	Y+32, r1	; 0x20
 7ee:	10 2f       	mov	r17, r16
 7f0:	04 30       	cpi	r16, 0x04	; 4
 7f2:	08 f0       	brcs	.+2      	; 0x7f6 <xTaskGenericCreate+0x7e>
 7f4:	13 e0       	ldi	r17, 0x03	; 3
 7f6:	1e 8b       	std	Y+22, r17	; 0x16
 7f8:	6e 01       	movw	r12, r28
 7fa:	82 e0       	ldi	r24, 0x02	; 2
 7fc:	c8 0e       	add	r12, r24
 7fe:	d1 1c       	adc	r13, r1
 800:	c6 01       	movw	r24, r12
 802:	95 dc       	rcall	.-1750   	; 0x12e <vListInitialiseItem>
 804:	ce 01       	movw	r24, r28
 806:	0c 96       	adiw	r24, 0x0c	; 12
 808:	92 dc       	rcall	.-1756   	; 0x12e <vListInitialiseItem>
 80a:	d9 87       	std	Y+9, r29	; 0x09
 80c:	c8 87       	std	Y+8, r28	; 0x08
 80e:	84 e0       	ldi	r24, 0x04	; 4
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	81 1b       	sub	r24, r17
 814:	91 09       	sbc	r25, r1
 816:	9d 87       	std	Y+13, r25	; 0x0d
 818:	8c 87       	std	Y+12, r24	; 0x0c
 81a:	db 8b       	std	Y+19, r29	; 0x13
 81c:	ca 8b       	std	Y+18, r28	; 0x12
 81e:	a2 01       	movw	r20, r4
 820:	b5 01       	movw	r22, r10
 822:	c3 01       	movw	r24, r6
 824:	1b de       	rcall	.-970    	; 0x45c <pxPortInitialiseStack>
 826:	99 83       	std	Y+1, r25	; 0x01
 828:	88 83       	st	Y, r24
 82a:	e1 14       	cp	r14, r1
 82c:	f1 04       	cpc	r15, r1
 82e:	19 f0       	breq	.+6      	; 0x836 <xTaskGenericCreate+0xbe>
 830:	f7 01       	movw	r30, r14
 832:	d1 83       	std	Z+1, r29	; 0x01
 834:	c0 83       	st	Z, r28
 836:	0f b6       	in	r0, 0x3f	; 63
 838:	f8 94       	cli
 83a:	0f 92       	push	r0
 83c:	80 91 0f 07 	lds	r24, 0x070F	; 0x80070f <uxCurrentNumberOfTasks>
 840:	8f 5f       	subi	r24, 0xFF	; 255
 842:	80 93 0f 07 	sts	0x070F, r24	; 0x80070f <uxCurrentNumberOfTasks>
 846:	80 91 5d 07 	lds	r24, 0x075D	; 0x80075d <pxCurrentTCB>
 84a:	90 91 5e 07 	lds	r25, 0x075E	; 0x80075e <pxCurrentTCB+0x1>
 84e:	89 2b       	or	r24, r25
 850:	69 f5       	brne	.+90     	; 0x8ac <xTaskGenericCreate+0x134>
 852:	d0 93 5e 07 	sts	0x075E, r29	; 0x80075e <pxCurrentTCB+0x1>
 856:	c0 93 5d 07 	sts	0x075D, r28	; 0x80075d <pxCurrentTCB>
 85a:	80 91 0f 07 	lds	r24, 0x070F	; 0x80070f <uxCurrentNumberOfTasks>
 85e:	81 30       	cpi	r24, 0x01	; 1
 860:	a1 f5       	brne	.+104    	; 0x8ca <xTaskGenericCreate+0x152>
 862:	89 e3       	ldi	r24, 0x39	; 57
 864:	97 e0       	ldi	r25, 0x07	; 7
 866:	55 dc       	rcall	.-1878   	; 0x112 <vListInitialise>
 868:	82 e4       	ldi	r24, 0x42	; 66
 86a:	97 e0       	ldi	r25, 0x07	; 7
 86c:	52 dc       	rcall	.-1884   	; 0x112 <vListInitialise>
 86e:	8b e4       	ldi	r24, 0x4B	; 75
 870:	97 e0       	ldi	r25, 0x07	; 7
 872:	4f dc       	rcall	.-1890   	; 0x112 <vListInitialise>
 874:	84 e5       	ldi	r24, 0x54	; 84
 876:	97 e0       	ldi	r25, 0x07	; 7
 878:	4c dc       	rcall	.-1896   	; 0x112 <vListInitialise>
 87a:	80 e3       	ldi	r24, 0x30	; 48
 87c:	97 e0       	ldi	r25, 0x07	; 7
 87e:	49 dc       	rcall	.-1902   	; 0x112 <vListInitialise>
 880:	87 e2       	ldi	r24, 0x27	; 39
 882:	97 e0       	ldi	r25, 0x07	; 7
 884:	46 dc       	rcall	.-1908   	; 0x112 <vListInitialise>
 886:	8a e1       	ldi	r24, 0x1A	; 26
 888:	97 e0       	ldi	r25, 0x07	; 7
 88a:	43 dc       	rcall	.-1914   	; 0x112 <vListInitialise>
 88c:	81 e1       	ldi	r24, 0x11	; 17
 88e:	97 e0       	ldi	r25, 0x07	; 7
 890:	40 dc       	rcall	.-1920   	; 0x112 <vListInitialise>
 892:	80 e3       	ldi	r24, 0x30	; 48
 894:	97 e0       	ldi	r25, 0x07	; 7
 896:	90 93 26 07 	sts	0x0726, r25	; 0x800726 <pxDelayedTaskList+0x1>
 89a:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <pxDelayedTaskList>
 89e:	87 e2       	ldi	r24, 0x27	; 39
 8a0:	97 e0       	ldi	r25, 0x07	; 7
 8a2:	90 93 24 07 	sts	0x0724, r25	; 0x800724 <pxOverflowDelayedTaskList+0x1>
 8a6:	80 93 23 07 	sts	0x0723, r24	; 0x800723 <pxOverflowDelayedTaskList>
 8aa:	0f c0       	rjmp	.+30     	; 0x8ca <xTaskGenericCreate+0x152>
 8ac:	80 91 0a 07 	lds	r24, 0x070A	; 0x80070a <xSchedulerRunning>
 8b0:	81 11       	cpse	r24, r1
 8b2:	0b c0       	rjmp	.+22     	; 0x8ca <xTaskGenericCreate+0x152>
 8b4:	e0 91 5d 07 	lds	r30, 0x075D	; 0x80075d <pxCurrentTCB>
 8b8:	f0 91 5e 07 	lds	r31, 0x075E	; 0x80075e <pxCurrentTCB+0x1>
 8bc:	86 89       	ldd	r24, Z+22	; 0x16
 8be:	08 17       	cp	r16, r24
 8c0:	20 f0       	brcs	.+8      	; 0x8ca <xTaskGenericCreate+0x152>
 8c2:	d0 93 5e 07 	sts	0x075E, r29	; 0x80075e <pxCurrentTCB+0x1>
 8c6:	c0 93 5d 07 	sts	0x075D, r28	; 0x80075d <pxCurrentTCB>
 8ca:	8e 89       	ldd	r24, Y+22	; 0x16
 8cc:	90 91 0c 07 	lds	r25, 0x070C	; 0x80070c <uxTopUsedPriority>
 8d0:	98 17       	cp	r25, r24
 8d2:	10 f4       	brcc	.+4      	; 0x8d8 <xTaskGenericCreate+0x160>
 8d4:	80 93 0c 07 	sts	0x070C, r24	; 0x80070c <uxTopUsedPriority>
 8d8:	90 91 05 07 	lds	r25, 0x0705	; 0x800705 <uxTaskNumber>
 8dc:	9f 5f       	subi	r25, 0xFF	; 255
 8de:	90 93 05 07 	sts	0x0705, r25	; 0x800705 <uxTaskNumber>
 8e2:	90 91 0b 07 	lds	r25, 0x070B	; 0x80070b <uxTopReadyPriority>
 8e6:	98 17       	cp	r25, r24
 8e8:	10 f4       	brcc	.+4      	; 0x8ee <xTaskGenericCreate+0x176>
 8ea:	80 93 0b 07 	sts	0x070B, r24	; 0x80070b <uxTopReadyPriority>
 8ee:	90 e0       	ldi	r25, 0x00	; 0
 8f0:	9c 01       	movw	r18, r24
 8f2:	22 0f       	add	r18, r18
 8f4:	33 1f       	adc	r19, r19
 8f6:	22 0f       	add	r18, r18
 8f8:	33 1f       	adc	r19, r19
 8fa:	22 0f       	add	r18, r18
 8fc:	33 1f       	adc	r19, r19
 8fe:	82 0f       	add	r24, r18
 900:	93 1f       	adc	r25, r19
 902:	b6 01       	movw	r22, r12
 904:	87 5c       	subi	r24, 0xC7	; 199
 906:	98 4f       	sbci	r25, 0xF8	; 248
 908:	16 dc       	rcall	.-2004   	; 0x136 <vListInsertEnd>
 90a:	0f 90       	pop	r0
 90c:	0f be       	out	0x3f, r0	; 63
 90e:	80 91 0a 07 	lds	r24, 0x070A	; 0x80070a <xSchedulerRunning>
 912:	88 23       	and	r24, r24
 914:	51 f0       	breq	.+20     	; 0x92a <xTaskGenericCreate+0x1b2>
 916:	e0 91 5d 07 	lds	r30, 0x075D	; 0x80075d <pxCurrentTCB>
 91a:	f0 91 5e 07 	lds	r31, 0x075E	; 0x80075e <pxCurrentTCB+0x1>
 91e:	86 89       	ldd	r24, Z+22	; 0x16
 920:	80 17       	cp	r24, r16
 922:	28 f4       	brcc	.+10     	; 0x92e <xTaskGenericCreate+0x1b6>
 924:	41 de       	rcall	.-894    	; 0x5a8 <vPortYield>
 926:	81 e0       	ldi	r24, 0x01	; 1
 928:	09 c0       	rjmp	.+18     	; 0x93c <xTaskGenericCreate+0x1c4>
 92a:	81 e0       	ldi	r24, 0x01	; 1
 92c:	07 c0       	rjmp	.+14     	; 0x93c <xTaskGenericCreate+0x1c4>
 92e:	81 e0       	ldi	r24, 0x01	; 1
 930:	05 c0       	rjmp	.+10     	; 0x93c <xTaskGenericCreate+0x1c4>
 932:	d8 8e       	std	Y+24, r13	; 0x18
 934:	cf 8a       	std	Y+23, r12	; 0x17
 936:	c6 01       	movw	r24, r12
 938:	47 cf       	rjmp	.-370    	; 0x7c8 <xTaskGenericCreate+0x50>
 93a:	8f ef       	ldi	r24, 0xFF	; 255
 93c:	df 91       	pop	r29
 93e:	cf 91       	pop	r28
 940:	1f 91       	pop	r17
 942:	0f 91       	pop	r16
 944:	ff 90       	pop	r15
 946:	ef 90       	pop	r14
 948:	df 90       	pop	r13
 94a:	cf 90       	pop	r12
 94c:	bf 90       	pop	r11
 94e:	af 90       	pop	r10
 950:	9f 90       	pop	r9
 952:	8f 90       	pop	r8
 954:	7f 90       	pop	r7
 956:	6f 90       	pop	r6
 958:	5f 90       	pop	r5
 95a:	4f 90       	pop	r4
 95c:	08 95       	ret

0000095e <vTaskStartScheduler>:
 95e:	af 92       	push	r10
 960:	bf 92       	push	r11
 962:	cf 92       	push	r12
 964:	df 92       	push	r13
 966:	ef 92       	push	r14
 968:	ff 92       	push	r15
 96a:	0f 93       	push	r16
 96c:	a1 2c       	mov	r10, r1
 96e:	b1 2c       	mov	r11, r1
 970:	c1 2c       	mov	r12, r1
 972:	d1 2c       	mov	r13, r1
 974:	e1 2c       	mov	r14, r1
 976:	f1 2c       	mov	r15, r1
 978:	00 e0       	ldi	r16, 0x00	; 0
 97a:	20 e0       	ldi	r18, 0x00	; 0
 97c:	30 e0       	ldi	r19, 0x00	; 0
 97e:	45 e5       	ldi	r20, 0x55	; 85
 980:	50 e0       	ldi	r21, 0x00	; 0
 982:	6e e1       	ldi	r22, 0x1E	; 30
 984:	71 e0       	ldi	r23, 0x01	; 1
 986:	8b e3       	ldi	r24, 0x3B	; 59
 988:	96 e0       	ldi	r25, 0x06	; 6
 98a:	f6 de       	rcall	.-532    	; 0x778 <xTaskGenericCreate>
 98c:	81 30       	cpi	r24, 0x01	; 1
 98e:	41 f4       	brne	.+16     	; 0x9a0 <vTaskStartScheduler+0x42>
 990:	f8 94       	cli
 992:	80 93 0a 07 	sts	0x070A, r24	; 0x80070a <xSchedulerRunning>
 996:	10 92 0e 07 	sts	0x070E, r1	; 0x80070e <xTickCount+0x1>
 99a:	10 92 0d 07 	sts	0x070D, r1	; 0x80070d <xTickCount>
 99e:	ca dd       	rcall	.-1132   	; 0x534 <xPortStartScheduler>
 9a0:	0f 91       	pop	r16
 9a2:	ff 90       	pop	r15
 9a4:	ef 90       	pop	r14
 9a6:	df 90       	pop	r13
 9a8:	cf 90       	pop	r12
 9aa:	bf 90       	pop	r11
 9ac:	af 90       	pop	r10
 9ae:	08 95       	ret

000009b0 <vTaskSuspendAll>:
 9b0:	80 91 09 07 	lds	r24, 0x0709	; 0x800709 <uxSchedulerSuspended>
 9b4:	8f 5f       	subi	r24, 0xFF	; 255
 9b6:	80 93 09 07 	sts	0x0709, r24	; 0x800709 <uxSchedulerSuspended>
 9ba:	08 95       	ret

000009bc <vTaskIncrementTick>:
 9bc:	0f 93       	push	r16
 9be:	1f 93       	push	r17
 9c0:	cf 93       	push	r28
 9c2:	df 93       	push	r29
 9c4:	80 91 09 07 	lds	r24, 0x0709	; 0x800709 <uxSchedulerSuspended>
 9c8:	81 11       	cpse	r24, r1
 9ca:	af c0       	rjmp	.+350    	; 0xb2a <vTaskIncrementTick+0x16e>
 9cc:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <xTickCount>
 9d0:	90 91 0e 07 	lds	r25, 0x070E	; 0x80070e <xTickCount+0x1>
 9d4:	01 96       	adiw	r24, 0x01	; 1
 9d6:	90 93 0e 07 	sts	0x070E, r25	; 0x80070e <xTickCount+0x1>
 9da:	80 93 0d 07 	sts	0x070D, r24	; 0x80070d <xTickCount>
 9de:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <xTickCount>
 9e2:	90 91 0e 07 	lds	r25, 0x070E	; 0x80070e <xTickCount+0x1>
 9e6:	89 2b       	or	r24, r25
 9e8:	99 f5       	brne	.+102    	; 0xa50 <vTaskIncrementTick+0x94>
 9ea:	80 91 25 07 	lds	r24, 0x0725	; 0x800725 <pxDelayedTaskList>
 9ee:	90 91 26 07 	lds	r25, 0x0726	; 0x800726 <pxDelayedTaskList+0x1>
 9f2:	20 91 23 07 	lds	r18, 0x0723	; 0x800723 <pxOverflowDelayedTaskList>
 9f6:	30 91 24 07 	lds	r19, 0x0724	; 0x800724 <pxOverflowDelayedTaskList+0x1>
 9fa:	30 93 26 07 	sts	0x0726, r19	; 0x800726 <pxDelayedTaskList+0x1>
 9fe:	20 93 25 07 	sts	0x0725, r18	; 0x800725 <pxDelayedTaskList>
 a02:	90 93 24 07 	sts	0x0724, r25	; 0x800724 <pxOverflowDelayedTaskList+0x1>
 a06:	80 93 23 07 	sts	0x0723, r24	; 0x800723 <pxOverflowDelayedTaskList>
 a0a:	80 91 06 07 	lds	r24, 0x0706	; 0x800706 <xNumOfOverflows>
 a0e:	8f 5f       	subi	r24, 0xFF	; 255
 a10:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <xNumOfOverflows>
 a14:	e0 91 25 07 	lds	r30, 0x0725	; 0x800725 <pxDelayedTaskList>
 a18:	f0 91 26 07 	lds	r31, 0x0726	; 0x800726 <pxDelayedTaskList+0x1>
 a1c:	80 81       	ld	r24, Z
 a1e:	81 11       	cpse	r24, r1
 a20:	07 c0       	rjmp	.+14     	; 0xa30 <vTaskIncrementTick+0x74>
 a22:	8f ef       	ldi	r24, 0xFF	; 255
 a24:	9f ef       	ldi	r25, 0xFF	; 255
 a26:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <xNextTaskUnblockTime+0x1>
 a2a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <xNextTaskUnblockTime>
 a2e:	10 c0       	rjmp	.+32     	; 0xa50 <vTaskIncrementTick+0x94>
 a30:	e0 91 25 07 	lds	r30, 0x0725	; 0x800725 <pxDelayedTaskList>
 a34:	f0 91 26 07 	lds	r31, 0x0726	; 0x800726 <pxDelayedTaskList+0x1>
 a38:	05 80       	ldd	r0, Z+5	; 0x05
 a3a:	f6 81       	ldd	r31, Z+6	; 0x06
 a3c:	e0 2d       	mov	r30, r0
 a3e:	06 80       	ldd	r0, Z+6	; 0x06
 a40:	f7 81       	ldd	r31, Z+7	; 0x07
 a42:	e0 2d       	mov	r30, r0
 a44:	82 81       	ldd	r24, Z+2	; 0x02
 a46:	93 81       	ldd	r25, Z+3	; 0x03
 a48:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <xNextTaskUnblockTime+0x1>
 a4c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <xNextTaskUnblockTime>
 a50:	20 91 0d 07 	lds	r18, 0x070D	; 0x80070d <xTickCount>
 a54:	30 91 0e 07 	lds	r19, 0x070E	; 0x80070e <xTickCount+0x1>
 a58:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <xNextTaskUnblockTime>
 a5c:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <xNextTaskUnblockTime+0x1>
 a60:	28 17       	cp	r18, r24
 a62:	39 07       	cpc	r19, r25
 a64:	08 f4       	brcc	.+2      	; 0xa68 <vTaskIncrementTick+0xac>
 a66:	66 c0       	rjmp	.+204    	; 0xb34 <vTaskIncrementTick+0x178>
 a68:	e0 91 25 07 	lds	r30, 0x0725	; 0x800725 <pxDelayedTaskList>
 a6c:	f0 91 26 07 	lds	r31, 0x0726	; 0x800726 <pxDelayedTaskList+0x1>
 a70:	80 81       	ld	r24, Z
 a72:	88 23       	and	r24, r24
 a74:	99 f0       	breq	.+38     	; 0xa9c <vTaskIncrementTick+0xe0>
 a76:	e0 91 25 07 	lds	r30, 0x0725	; 0x800725 <pxDelayedTaskList>
 a7a:	f0 91 26 07 	lds	r31, 0x0726	; 0x800726 <pxDelayedTaskList+0x1>
 a7e:	05 80       	ldd	r0, Z+5	; 0x05
 a80:	f6 81       	ldd	r31, Z+6	; 0x06
 a82:	e0 2d       	mov	r30, r0
 a84:	c6 81       	ldd	r28, Z+6	; 0x06
 a86:	d7 81       	ldd	r29, Z+7	; 0x07
 a88:	8a 81       	ldd	r24, Y+2	; 0x02
 a8a:	9b 81       	ldd	r25, Y+3	; 0x03
 a8c:	20 91 0d 07 	lds	r18, 0x070D	; 0x80070d <xTickCount>
 a90:	30 91 0e 07 	lds	r19, 0x070E	; 0x80070e <xTickCount+0x1>
 a94:	28 17       	cp	r18, r24
 a96:	39 07       	cpc	r19, r25
 a98:	f8 f4       	brcc	.+62     	; 0xad8 <vTaskIncrementTick+0x11c>
 a9a:	19 c0       	rjmp	.+50     	; 0xace <vTaskIncrementTick+0x112>
 a9c:	8f ef       	ldi	r24, 0xFF	; 255
 a9e:	9f ef       	ldi	r25, 0xFF	; 255
 aa0:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <xNextTaskUnblockTime+0x1>
 aa4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <xNextTaskUnblockTime>
 aa8:	45 c0       	rjmp	.+138    	; 0xb34 <vTaskIncrementTick+0x178>
 aaa:	e0 91 25 07 	lds	r30, 0x0725	; 0x800725 <pxDelayedTaskList>
 aae:	f0 91 26 07 	lds	r31, 0x0726	; 0x800726 <pxDelayedTaskList+0x1>
 ab2:	05 80       	ldd	r0, Z+5	; 0x05
 ab4:	f6 81       	ldd	r31, Z+6	; 0x06
 ab6:	e0 2d       	mov	r30, r0
 ab8:	c6 81       	ldd	r28, Z+6	; 0x06
 aba:	d7 81       	ldd	r29, Z+7	; 0x07
 abc:	8a 81       	ldd	r24, Y+2	; 0x02
 abe:	9b 81       	ldd	r25, Y+3	; 0x03
 ac0:	20 91 0d 07 	lds	r18, 0x070D	; 0x80070d <xTickCount>
 ac4:	30 91 0e 07 	lds	r19, 0x070E	; 0x80070e <xTickCount+0x1>
 ac8:	28 17       	cp	r18, r24
 aca:	39 07       	cpc	r19, r25
 acc:	28 f4       	brcc	.+10     	; 0xad8 <vTaskIncrementTick+0x11c>
 ace:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <xNextTaskUnblockTime+0x1>
 ad2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <xNextTaskUnblockTime>
 ad6:	2e c0       	rjmp	.+92     	; 0xb34 <vTaskIncrementTick+0x178>
 ad8:	8e 01       	movw	r16, r28
 ada:	0e 5f       	subi	r16, 0xFE	; 254
 adc:	1f 4f       	sbci	r17, 0xFF	; 255
 ade:	c8 01       	movw	r24, r16
 ae0:	8c db       	rcall	.-2280   	; 0x1fa <vListRemove>
 ae2:	8c 89       	ldd	r24, Y+20	; 0x14
 ae4:	9d 89       	ldd	r25, Y+21	; 0x15
 ae6:	89 2b       	or	r24, r25
 ae8:	19 f0       	breq	.+6      	; 0xaf0 <vTaskIncrementTick+0x134>
 aea:	ce 01       	movw	r24, r28
 aec:	0c 96       	adiw	r24, 0x0c	; 12
 aee:	85 db       	rcall	.-2294   	; 0x1fa <vListRemove>
 af0:	8e 89       	ldd	r24, Y+22	; 0x16
 af2:	90 91 0b 07 	lds	r25, 0x070B	; 0x80070b <uxTopReadyPriority>
 af6:	98 17       	cp	r25, r24
 af8:	10 f4       	brcc	.+4      	; 0xafe <vTaskIncrementTick+0x142>
 afa:	80 93 0b 07 	sts	0x070B, r24	; 0x80070b <uxTopReadyPriority>
 afe:	90 e0       	ldi	r25, 0x00	; 0
 b00:	9c 01       	movw	r18, r24
 b02:	22 0f       	add	r18, r18
 b04:	33 1f       	adc	r19, r19
 b06:	22 0f       	add	r18, r18
 b08:	33 1f       	adc	r19, r19
 b0a:	22 0f       	add	r18, r18
 b0c:	33 1f       	adc	r19, r19
 b0e:	82 0f       	add	r24, r18
 b10:	93 1f       	adc	r25, r19
 b12:	b8 01       	movw	r22, r16
 b14:	87 5c       	subi	r24, 0xC7	; 199
 b16:	98 4f       	sbci	r25, 0xF8	; 248
 b18:	0e db       	rcall	.-2532   	; 0x136 <vListInsertEnd>
 b1a:	e0 91 25 07 	lds	r30, 0x0725	; 0x800725 <pxDelayedTaskList>
 b1e:	f0 91 26 07 	lds	r31, 0x0726	; 0x800726 <pxDelayedTaskList+0x1>
 b22:	80 81       	ld	r24, Z
 b24:	81 11       	cpse	r24, r1
 b26:	c1 cf       	rjmp	.-126    	; 0xaaa <vTaskIncrementTick+0xee>
 b28:	b9 cf       	rjmp	.-142    	; 0xa9c <vTaskIncrementTick+0xe0>
 b2a:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <uxMissedTicks>
 b2e:	8f 5f       	subi	r24, 0xFF	; 255
 b30:	80 93 08 07 	sts	0x0708, r24	; 0x800708 <uxMissedTicks>
 b34:	df 91       	pop	r29
 b36:	cf 91       	pop	r28
 b38:	1f 91       	pop	r17
 b3a:	0f 91       	pop	r16
 b3c:	08 95       	ret

00000b3e <xTaskResumeAll>:
 b3e:	cf 92       	push	r12
 b40:	df 92       	push	r13
 b42:	ef 92       	push	r14
 b44:	ff 92       	push	r15
 b46:	0f 93       	push	r16
 b48:	1f 93       	push	r17
 b4a:	cf 93       	push	r28
 b4c:	df 93       	push	r29
 b4e:	0f b6       	in	r0, 0x3f	; 63
 b50:	f8 94       	cli
 b52:	0f 92       	push	r0
 b54:	80 91 09 07 	lds	r24, 0x0709	; 0x800709 <uxSchedulerSuspended>
 b58:	81 50       	subi	r24, 0x01	; 1
 b5a:	80 93 09 07 	sts	0x0709, r24	; 0x800709 <uxSchedulerSuspended>
 b5e:	80 91 09 07 	lds	r24, 0x0709	; 0x800709 <uxSchedulerSuspended>
 b62:	81 11       	cpse	r24, r1
 b64:	5f c0       	rjmp	.+190    	; 0xc24 <xTaskResumeAll+0xe6>
 b66:	80 91 0f 07 	lds	r24, 0x070F	; 0x80070f <uxCurrentNumberOfTasks>
 b6a:	81 11       	cpse	r24, r1
 b6c:	2f c0       	rjmp	.+94     	; 0xbcc <xTaskResumeAll+0x8e>
 b6e:	5d c0       	rjmp	.+186    	; 0xc2a <xTaskResumeAll+0xec>
 b70:	d7 01       	movw	r26, r14
 b72:	15 96       	adiw	r26, 0x05	; 5
 b74:	ed 91       	ld	r30, X+
 b76:	fc 91       	ld	r31, X
 b78:	16 97       	sbiw	r26, 0x06	; 6
 b7a:	c6 81       	ldd	r28, Z+6	; 0x06
 b7c:	d7 81       	ldd	r29, Z+7	; 0x07
 b7e:	ce 01       	movw	r24, r28
 b80:	0c 96       	adiw	r24, 0x0c	; 12
 b82:	3b db       	rcall	.-2442   	; 0x1fa <vListRemove>
 b84:	8e 01       	movw	r16, r28
 b86:	0e 5f       	subi	r16, 0xFE	; 254
 b88:	1f 4f       	sbci	r17, 0xFF	; 255
 b8a:	c8 01       	movw	r24, r16
 b8c:	36 db       	rcall	.-2452   	; 0x1fa <vListRemove>
 b8e:	8e 89       	ldd	r24, Y+22	; 0x16
 b90:	90 91 0b 07 	lds	r25, 0x070B	; 0x80070b <uxTopReadyPriority>
 b94:	98 17       	cp	r25, r24
 b96:	10 f4       	brcc	.+4      	; 0xb9c <xTaskResumeAll+0x5e>
 b98:	80 93 0b 07 	sts	0x070B, r24	; 0x80070b <uxTopReadyPriority>
 b9c:	90 e0       	ldi	r25, 0x00	; 0
 b9e:	9c 01       	movw	r18, r24
 ba0:	22 0f       	add	r18, r18
 ba2:	33 1f       	adc	r19, r19
 ba4:	22 0f       	add	r18, r18
 ba6:	33 1f       	adc	r19, r19
 ba8:	22 0f       	add	r18, r18
 baa:	33 1f       	adc	r19, r19
 bac:	82 0f       	add	r24, r18
 bae:	93 1f       	adc	r25, r19
 bb0:	b8 01       	movw	r22, r16
 bb2:	87 5c       	subi	r24, 0xC7	; 199
 bb4:	98 4f       	sbci	r25, 0xF8	; 248
 bb6:	bf da       	rcall	.-2690   	; 0x136 <vListInsertEnd>
 bb8:	e0 91 5d 07 	lds	r30, 0x075D	; 0x80075d <pxCurrentTCB>
 bbc:	f0 91 5e 07 	lds	r31, 0x075E	; 0x80075e <pxCurrentTCB+0x1>
 bc0:	9e 89       	ldd	r25, Y+22	; 0x16
 bc2:	86 89       	ldd	r24, Z+22	; 0x16
 bc4:	98 17       	cp	r25, r24
 bc6:	58 f0       	brcs	.+22     	; 0xbde <xTaskResumeAll+0xa0>
 bc8:	dc 2c       	mov	r13, r12
 bca:	09 c0       	rjmp	.+18     	; 0xbde <xTaskResumeAll+0xa0>
 bcc:	d1 2c       	mov	r13, r1
 bce:	0f 2e       	mov	r0, r31
 bd0:	fa e1       	ldi	r31, 0x1A	; 26
 bd2:	ef 2e       	mov	r14, r31
 bd4:	f7 e0       	ldi	r31, 0x07	; 7
 bd6:	ff 2e       	mov	r15, r31
 bd8:	f0 2d       	mov	r31, r0
 bda:	cc 24       	eor	r12, r12
 bdc:	c3 94       	inc	r12
 bde:	f7 01       	movw	r30, r14
 be0:	80 81       	ld	r24, Z
 be2:	81 11       	cpse	r24, r1
 be4:	c5 cf       	rjmp	.-118    	; 0xb70 <xTaskResumeAll+0x32>
 be6:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <uxMissedTicks>
 bea:	88 23       	and	r24, r24
 bec:	79 f0       	breq	.+30     	; 0xc0c <xTaskResumeAll+0xce>
 bee:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <uxMissedTicks>
 bf2:	88 23       	and	r24, r24
 bf4:	91 f0       	breq	.+36     	; 0xc1a <xTaskResumeAll+0xdc>
 bf6:	e2 de       	rcall	.-572    	; 0x9bc <vTaskIncrementTick>
 bf8:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <uxMissedTicks>
 bfc:	81 50       	subi	r24, 0x01	; 1
 bfe:	80 93 08 07 	sts	0x0708, r24	; 0x800708 <uxMissedTicks>
 c02:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <uxMissedTicks>
 c06:	81 11       	cpse	r24, r1
 c08:	f6 cf       	rjmp	.-20     	; 0xbf6 <xTaskResumeAll+0xb8>
 c0a:	07 c0       	rjmp	.+14     	; 0xc1a <xTaskResumeAll+0xdc>
 c0c:	f1 e0       	ldi	r31, 0x01	; 1
 c0e:	df 16       	cp	r13, r31
 c10:	21 f0       	breq	.+8      	; 0xc1a <xTaskResumeAll+0xdc>
 c12:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <xMissedYield>
 c16:	81 30       	cpi	r24, 0x01	; 1
 c18:	39 f4       	brne	.+14     	; 0xc28 <xTaskResumeAll+0xea>
 c1a:	10 92 07 07 	sts	0x0707, r1	; 0x800707 <xMissedYield>
 c1e:	c4 dc       	rcall	.-1656   	; 0x5a8 <vPortYield>
 c20:	81 e0       	ldi	r24, 0x01	; 1
 c22:	03 c0       	rjmp	.+6      	; 0xc2a <xTaskResumeAll+0xec>
 c24:	80 e0       	ldi	r24, 0x00	; 0
 c26:	01 c0       	rjmp	.+2      	; 0xc2a <xTaskResumeAll+0xec>
 c28:	80 e0       	ldi	r24, 0x00	; 0
 c2a:	0f 90       	pop	r0
 c2c:	0f be       	out	0x3f, r0	; 63
 c2e:	df 91       	pop	r29
 c30:	cf 91       	pop	r28
 c32:	1f 91       	pop	r17
 c34:	0f 91       	pop	r16
 c36:	ff 90       	pop	r15
 c38:	ef 90       	pop	r14
 c3a:	df 90       	pop	r13
 c3c:	cf 90       	pop	r12
 c3e:	08 95       	ret

00000c40 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
 c40:	cf 93       	push	r28
 c42:	df 93       	push	r29
 c44:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
 c46:	89 2b       	or	r24, r25
		{
			vTaskSuspendAll();
 c48:	91 f0       	breq	.+36     	; 0xc6e <vTaskDelay+0x2e>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 c4a:	b2 de       	rcall	.-668    	; 0x9b0 <vTaskSuspendAll>
 c4c:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <xTickCount>
 c50:	90 91 0e 07 	lds	r25, 0x070E	; 0x80070e <xTickCount+0x1>
 c54:	c8 0f       	add	r28, r24

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 c56:	d9 1f       	adc	r29, r25
 c58:	80 91 5d 07 	lds	r24, 0x075D	; 0x80075d <pxCurrentTCB>
 c5c:	90 91 5e 07 	lds	r25, 0x075E	; 0x80075e <pxCurrentTCB+0x1>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
			}
			xAlreadyYielded = xTaskResumeAll();
 c60:	02 96       	adiw	r24, 0x02	; 2
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 c62:	cb da       	rcall	.-2666   	; 0x1fa <vListRemove>
 c64:	ce 01       	movw	r24, r28
		{
			portYIELD_WITHIN_API();
 c66:	53 dd       	rcall	.-1370   	; 0x70e <prvAddCurrentTaskToDelayedList>
 c68:	6a df       	rcall	.-300    	; 0xb3e <xTaskResumeAll>
		}
	}
 c6a:	81 11       	cpse	r24, r1
 c6c:	01 c0       	rjmp	.+2      	; 0xc70 <vTaskDelay+0x30>
 c6e:	9c dc       	rcall	.-1736   	; 0x5a8 <vPortYield>
 c70:	df 91       	pop	r29
 c72:	cf 91       	pop	r28
 c74:	08 95       	ret

00000c76 <prvIdleTask>:
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 c76:	0f 2e       	mov	r0, r31
 c78:	f1 e1       	ldi	r31, 0x11	; 17
 c7a:	ef 2e       	mov	r14, r31
 c7c:	f7 e0       	ldi	r31, 0x07	; 7
 c7e:	ff 2e       	mov	r15, r31
 c80:	f0 2d       	mov	r31, r0

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 c82:	c9 e3       	ldi	r28, 0x39	; 57
 c84:	d7 e0       	ldi	r29, 0x07	; 7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 c86:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <uxTasksDeleted>
 c8a:	88 23       	and	r24, r24
		{
			vTaskSuspendAll();
 c8c:	29 f1       	breq	.+74     	; 0xcd8 <prvIdleTask+0x62>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 c8e:	90 de       	rcall	.-736    	; 0x9b0 <vTaskSuspendAll>
			xTaskResumeAll();
 c90:	d7 01       	movw	r26, r14
 c92:	1c 91       	ld	r17, X

			if( xListIsEmpty == pdFALSE )
 c94:	54 df       	rcall	.-344    	; 0xb3e <xTaskResumeAll>
 c96:	11 23       	and	r17, r17
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 c98:	f9 f0       	breq	.+62     	; 0xcd8 <prvIdleTask+0x62>
 c9a:	0f b6       	in	r0, 0x3f	; 63
 c9c:	f8 94       	cli
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 c9e:	0f 92       	push	r0
 ca0:	d7 01       	movw	r26, r14
 ca2:	15 96       	adiw	r26, 0x05	; 5
 ca4:	ed 91       	ld	r30, X+
 ca6:	fc 91       	ld	r31, X
 ca8:	16 97       	sbiw	r26, 0x06	; 6
					vListRemove( &( pxTCB->xGenericListItem ) );
 caa:	06 81       	ldd	r16, Z+6	; 0x06
 cac:	17 81       	ldd	r17, Z+7	; 0x07
 cae:	c8 01       	movw	r24, r16
					--uxCurrentNumberOfTasks;
 cb0:	02 96       	adiw	r24, 0x02	; 2
 cb2:	a3 da       	rcall	.-2746   	; 0x1fa <vListRemove>
 cb4:	80 91 0f 07 	lds	r24, 0x070F	; 0x80070f <uxCurrentNumberOfTasks>
 cb8:	81 50       	subi	r24, 0x01	; 1
					--uxTasksDeleted;
 cba:	80 93 0f 07 	sts	0x070F, r24	; 0x80070f <uxCurrentNumberOfTasks>
 cbe:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <uxTasksDeleted>
 cc2:	81 50       	subi	r24, 0x01	; 1
				}
				taskEXIT_CRITICAL();
 cc4:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <uxTasksDeleted>
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 cc8:	0f 90       	pop	r0
 cca:	0f be       	out	0x3f, r0	; 63
		vPortFree( pxTCB );
 ccc:	f8 01       	movw	r30, r16
 cce:	87 89       	ldd	r24, Z+23	; 0x17

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 cd0:	90 8d       	ldd	r25, Z+24	; 0x18
 cd2:	1e da       	rcall	.-3012   	; 0x110 <vPortFree>
 cd4:	c8 01       	movw	r24, r16
			{
				taskYIELD();
 cd6:	1c da       	rcall	.-3016   	; 0x110 <vPortFree>
 cd8:	88 81       	ld	r24, Y
 cda:	82 30       	cpi	r24, 0x02	; 2
 cdc:	a0 f2       	brcs	.-88     	; 0xc86 <prvIdleTask+0x10>
 cde:	64 dc       	rcall	.-1848   	; 0x5a8 <vPortYield>
 ce0:	d2 cf       	rjmp	.-92     	; 0xc86 <prvIdleTask+0x10>

00000ce2 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 ce2:	80 91 09 07 	lds	r24, 0x0709	; 0x800709 <uxSchedulerSuspended>
 ce6:	81 11       	cpse	r24, r1
 ce8:	13 c0       	rjmp	.+38     	; 0xd10 <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 cea:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <uxTopReadyPriority>
 cee:	90 e0       	ldi	r25, 0x00	; 0
 cf0:	fc 01       	movw	r30, r24
 cf2:	ee 0f       	add	r30, r30
 cf4:	ff 1f       	adc	r31, r31
 cf6:	ee 0f       	add	r30, r30
 cf8:	ff 1f       	adc	r31, r31
 cfa:	ee 0f       	add	r30, r30
 cfc:	ff 1f       	adc	r31, r31
 cfe:	8e 0f       	add	r24, r30
 d00:	9f 1f       	adc	r25, r31
 d02:	fc 01       	movw	r30, r24
 d04:	e7 5c       	subi	r30, 0xC7	; 199
 d06:	f8 4f       	sbci	r31, 0xF8	; 248
 d08:	80 81       	ld	r24, Z
 d0a:	88 23       	and	r24, r24
 d0c:	29 f0       	breq	.+10     	; 0xd18 <vTaskSwitchContext+0x36>
 d0e:	1b c0       	rjmp	.+54     	; 0xd46 <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 d10:	81 e0       	ldi	r24, 0x01	; 1
 d12:	80 93 07 07 	sts	0x0707, r24	; 0x800707 <xMissedYield>
 d16:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
 d18:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <uxTopReadyPriority>
 d1c:	81 50       	subi	r24, 0x01	; 1
 d1e:	80 93 0b 07 	sts	0x070B, r24	; 0x80070b <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 d22:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <uxTopReadyPriority>
 d26:	90 e0       	ldi	r25, 0x00	; 0
 d28:	fc 01       	movw	r30, r24
 d2a:	ee 0f       	add	r30, r30
 d2c:	ff 1f       	adc	r31, r31
 d2e:	ee 0f       	add	r30, r30
 d30:	ff 1f       	adc	r31, r31
 d32:	ee 0f       	add	r30, r30
 d34:	ff 1f       	adc	r31, r31
 d36:	8e 0f       	add	r24, r30
 d38:	9f 1f       	adc	r25, r31
 d3a:	fc 01       	movw	r30, r24
 d3c:	e7 5c       	subi	r30, 0xC7	; 199
 d3e:	f8 4f       	sbci	r31, 0xF8	; 248
 d40:	80 81       	ld	r24, Z
 d42:	88 23       	and	r24, r24
 d44:	49 f3       	breq	.-46     	; 0xd18 <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 d46:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <uxTopReadyPriority>
 d4a:	90 e0       	ldi	r25, 0x00	; 0
 d4c:	9c 01       	movw	r18, r24
 d4e:	22 0f       	add	r18, r18
 d50:	33 1f       	adc	r19, r19
 d52:	22 0f       	add	r18, r18
 d54:	33 1f       	adc	r19, r19
 d56:	22 0f       	add	r18, r18
 d58:	33 1f       	adc	r19, r19
 d5a:	28 0f       	add	r18, r24
 d5c:	39 1f       	adc	r19, r25
 d5e:	d9 01       	movw	r26, r18
 d60:	a7 5c       	subi	r26, 0xC7	; 199
 d62:	b8 4f       	sbci	r27, 0xF8	; 248
 d64:	11 96       	adiw	r26, 0x01	; 1
 d66:	ed 91       	ld	r30, X+
 d68:	fc 91       	ld	r31, X
 d6a:	12 97       	sbiw	r26, 0x02	; 2
 d6c:	02 80       	ldd	r0, Z+2	; 0x02
 d6e:	f3 81       	ldd	r31, Z+3	; 0x03
 d70:	e0 2d       	mov	r30, r0
 d72:	12 96       	adiw	r26, 0x02	; 2
 d74:	fc 93       	st	X, r31
 d76:	ee 93       	st	-X, r30
 d78:	11 97       	sbiw	r26, 0x01	; 1
 d7a:	24 5c       	subi	r18, 0xC4	; 196
 d7c:	38 4f       	sbci	r19, 0xF8	; 248
 d7e:	e2 17       	cp	r30, r18
 d80:	f3 07       	cpc	r31, r19
 d82:	29 f4       	brne	.+10     	; 0xd8e <vTaskSwitchContext+0xac>
 d84:	22 81       	ldd	r18, Z+2	; 0x02
 d86:	33 81       	ldd	r19, Z+3	; 0x03
 d88:	fd 01       	movw	r30, r26
 d8a:	32 83       	std	Z+2, r19	; 0x02
 d8c:	21 83       	std	Z+1, r18	; 0x01
 d8e:	fc 01       	movw	r30, r24
 d90:	ee 0f       	add	r30, r30
 d92:	ff 1f       	adc	r31, r31
 d94:	ee 0f       	add	r30, r30
 d96:	ff 1f       	adc	r31, r31
 d98:	ee 0f       	add	r30, r30
 d9a:	ff 1f       	adc	r31, r31
 d9c:	8e 0f       	add	r24, r30
 d9e:	9f 1f       	adc	r25, r31
 da0:	fc 01       	movw	r30, r24
 da2:	e7 5c       	subi	r30, 0xC7	; 199
 da4:	f8 4f       	sbci	r31, 0xF8	; 248
 da6:	01 80       	ldd	r0, Z+1	; 0x01
 da8:	f2 81       	ldd	r31, Z+2	; 0x02
 daa:	e0 2d       	mov	r30, r0
 dac:	86 81       	ldd	r24, Z+6	; 0x06
 dae:	97 81       	ldd	r25, Z+7	; 0x07
 db0:	90 93 5e 07 	sts	0x075E, r25	; 0x80075e <pxCurrentTCB+0x1>
 db4:	80 93 5d 07 	sts	0x075D, r24	; 0x80075d <pxCurrentTCB>
 db8:	08 95       	ret

00000dba <memset>:
 dba:	dc 01       	movw	r26, r24
 dbc:	01 c0       	rjmp	.+2      	; 0xdc0 <memset+0x6>
 dbe:	6d 93       	st	X+, r22
 dc0:	41 50       	subi	r20, 0x01	; 1
 dc2:	50 40       	sbci	r21, 0x00	; 0
 dc4:	e0 f7       	brcc	.-8      	; 0xdbe <memset+0x4>
 dc6:	08 95       	ret

00000dc8 <strncpy>:
 dc8:	fb 01       	movw	r30, r22
 dca:	dc 01       	movw	r26, r24
 dcc:	41 50       	subi	r20, 0x01	; 1
 dce:	50 40       	sbci	r21, 0x00	; 0
 dd0:	48 f0       	brcs	.+18     	; 0xde4 <strncpy+0x1c>
 dd2:	01 90       	ld	r0, Z+
 dd4:	0d 92       	st	X+, r0
 dd6:	00 20       	and	r0, r0
 dd8:	c9 f7       	brne	.-14     	; 0xdcc <strncpy+0x4>
 dda:	01 c0       	rjmp	.+2      	; 0xdde <strncpy+0x16>
 ddc:	1d 92       	st	X+, r1
 dde:	41 50       	subi	r20, 0x01	; 1
 de0:	50 40       	sbci	r21, 0x00	; 0
 de2:	e0 f7       	brcc	.-8      	; 0xddc <strncpy+0x14>
 de4:	08 95       	ret

00000de6 <_exit>:
 de6:	f8 94       	cli

00000de8 <__stop_program>:
 de8:	ff cf       	rjmp	.-2      	; 0xde8 <__stop_program>
