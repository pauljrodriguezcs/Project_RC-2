
Bluetooth.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000d10  00000da4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d10  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000063a  0080011c  0080011c  00000dc0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000dc0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000df0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  00000e30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023e6  00000000  00000000  00001030  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f4f  00000000  00000000  00003416  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000153e  00000000  00000000  00004365  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004d8  00000000  00000000  000058a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d85  00000000  00000000  00005d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001379  00000000  00000000  00006b01  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f8  00000000  00000000  00007e7a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	fd c2       	rjmp	.+1530   	; 0x630 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e1       	ldi	r30, 0x10	; 16
  a0:	fd e0       	ldi	r31, 0x0D	; 13
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 31       	cpi	r26, 0x1C	; 28
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	27 e0       	ldi	r18, 0x07	; 7
  b4:	ac e1       	ldi	r26, 0x1C	; 28
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 35       	cpi	r26, 0x56	; 86
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	54 d1       	rcall	.+680    	; 0x36c <main>
  c4:	23 c6       	rjmp	.+3142   	; 0xd0c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
  ce:	03 d4       	rcall	.+2054   	; 0x8d6 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
  d0:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
  d4:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
  d8:	c9 01       	movw	r24, r18
  da:	8c 0f       	add	r24, r28
  dc:	9d 1f       	adc	r25, r29
  de:	8c 3d       	cpi	r24, 0xDC	; 220
  e0:	45 e0       	ldi	r20, 0x05	; 5
  e2:	94 07       	cpc	r25, r20
  e4:	58 f4       	brcc	.+22     	; 0xfc <pvPortMalloc+0x34>
  e6:	28 17       	cp	r18, r24
  e8:	39 07       	cpc	r19, r25
  ea:	58 f4       	brcc	.+22     	; 0x102 <pvPortMalloc+0x3a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
  ec:	e9 01       	movw	r28, r18
  ee:	c2 5e       	subi	r28, 0xE2	; 226
  f0:	de 4f       	sbci	r29, 0xFE	; 254
			xNextFreeByte += xWantedSize;			
  f2:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__data_end+0x1>
  f6:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
  fa:	05 c0       	rjmp	.+10     	; 0x106 <pvPortMalloc+0x3e>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
  fc:	c0 e0       	ldi	r28, 0x00	; 0
  fe:	d0 e0       	ldi	r29, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <pvPortMalloc+0x3e>
 102:	c0 e0       	ldi	r28, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
 104:	d0 e0       	ldi	r29, 0x00	; 0
 106:	ae d4       	rcall	.+2396   	; 0xa64 <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
 108:	ce 01       	movw	r24, r28
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 110:	08 95       	ret

00000112 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
 112:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 114:	03 96       	adiw	r24, 0x03	; 3
 116:	92 83       	std	Z+2, r25	; 0x02
 118:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 11a:	2f ef       	ldi	r18, 0xFF	; 255
 11c:	3f ef       	ldi	r19, 0xFF	; 255
 11e:	34 83       	std	Z+4, r19	; 0x04
 120:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 122:	96 83       	std	Z+6, r25	; 0x06
 124:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 126:	90 87       	std	Z+8, r25	; 0x08
 128:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 12a:	10 82       	st	Z, r1
 12c:	08 95       	ret

0000012e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 12e:	fc 01       	movw	r30, r24
 130:	11 86       	std	Z+9, r1	; 0x09
 132:	10 86       	std	Z+8, r1	; 0x08
 134:	08 95       	ret

00000136 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	fc 01       	movw	r30, r24
 13c:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
 13e:	21 81       	ldd	r18, Z+1	; 0x01
 140:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
 142:	e9 01       	movw	r28, r18
 144:	8a 81       	ldd	r24, Y+2	; 0x02
 146:	9b 81       	ldd	r25, Y+3	; 0x03
 148:	13 96       	adiw	r26, 0x03	; 3
 14a:	9c 93       	st	X, r25
 14c:	8e 93       	st	-X, r24
 14e:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
 150:	81 81       	ldd	r24, Z+1	; 0x01
 152:	92 81       	ldd	r25, Z+2	; 0x02
 154:	15 96       	adiw	r26, 0x05	; 5
 156:	9c 93       	st	X, r25
 158:	8e 93       	st	-X, r24
 15a:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 15c:	8a 81       	ldd	r24, Y+2	; 0x02
 15e:	9b 81       	ldd	r25, Y+3	; 0x03
 160:	ec 01       	movw	r28, r24
 162:	7d 83       	std	Y+5, r23	; 0x05
 164:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 166:	e9 01       	movw	r28, r18
 168:	7b 83       	std	Y+3, r23	; 0x03
 16a:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 16c:	72 83       	std	Z+2, r23	; 0x02
 16e:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 170:	19 96       	adiw	r26, 0x09	; 9
 172:	fc 93       	st	X, r31
 174:	ee 93       	st	-X, r30
 176:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
 178:	80 81       	ld	r24, Z
 17a:	8f 5f       	subi	r24, 0xFF	; 255
 17c:	80 83       	st	Z, r24
}
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 18a:	48 81       	ld	r20, Y
 18c:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 18e:	4f 3f       	cpi	r20, 0xFF	; 255
 190:	2f ef       	ldi	r18, 0xFF	; 255
 192:	52 07       	cpc	r21, r18
 194:	31 f4       	brne	.+12     	; 0x1a2 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 196:	dc 01       	movw	r26, r24
 198:	17 96       	adiw	r26, 0x07	; 7
 19a:	ed 91       	ld	r30, X+
 19c:	fc 91       	ld	r31, X
 19e:	18 97       	sbiw	r26, 0x08	; 8
 1a0:	17 c0       	rjmp	.+46     	; 0x1d0 <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 1a2:	fc 01       	movw	r30, r24
 1a4:	33 96       	adiw	r30, 0x03	; 3
 1a6:	dc 01       	movw	r26, r24
 1a8:	15 96       	adiw	r26, 0x05	; 5
 1aa:	2d 91       	ld	r18, X+
 1ac:	3c 91       	ld	r19, X
 1ae:	16 97       	sbiw	r26, 0x06	; 6
 1b0:	d9 01       	movw	r26, r18
 1b2:	2d 91       	ld	r18, X+
 1b4:	3c 91       	ld	r19, X
 1b6:	42 17       	cp	r20, r18
 1b8:	53 07       	cpc	r21, r19
 1ba:	50 f0       	brcs	.+20     	; 0x1d0 <vListInsert+0x4c>
 1bc:	02 80       	ldd	r0, Z+2	; 0x02
 1be:	f3 81       	ldd	r31, Z+3	; 0x03
 1c0:	e0 2d       	mov	r30, r0
 1c2:	a2 81       	ldd	r26, Z+2	; 0x02
 1c4:	b3 81       	ldd	r27, Z+3	; 0x03
 1c6:	2d 91       	ld	r18, X+
 1c8:	3c 91       	ld	r19, X
 1ca:	42 17       	cp	r20, r18
 1cc:	53 07       	cpc	r21, r19
 1ce:	b0 f7       	brcc	.-20     	; 0x1bc <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 1d0:	a2 81       	ldd	r26, Z+2	; 0x02
 1d2:	b3 81       	ldd	r27, Z+3	; 0x03
 1d4:	bb 83       	std	Y+3, r27	; 0x03
 1d6:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 1d8:	15 96       	adiw	r26, 0x05	; 5
 1da:	dc 93       	st	X, r29
 1dc:	ce 93       	st	-X, r28
 1de:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
 1e0:	fd 83       	std	Y+5, r31	; 0x05
 1e2:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 1e4:	d3 83       	std	Z+3, r29	; 0x03
 1e6:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 1e8:	99 87       	std	Y+9, r25	; 0x09
 1ea:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
 1ec:	fc 01       	movw	r30, r24
 1ee:	20 81       	ld	r18, Z
 1f0:	2f 5f       	subi	r18, 0xFF	; 255
 1f2:	20 83       	st	Z, r18
}
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
 1fa:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 1fc:	a2 81       	ldd	r26, Z+2	; 0x02
 1fe:	b3 81       	ldd	r27, Z+3	; 0x03
 200:	84 81       	ldd	r24, Z+4	; 0x04
 202:	95 81       	ldd	r25, Z+5	; 0x05
 204:	15 96       	adiw	r26, 0x05	; 5
 206:	9c 93       	st	X, r25
 208:	8e 93       	st	-X, r24
 20a:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 20c:	a4 81       	ldd	r26, Z+4	; 0x04
 20e:	b5 81       	ldd	r27, Z+5	; 0x05
 210:	82 81       	ldd	r24, Z+2	; 0x02
 212:	93 81       	ldd	r25, Z+3	; 0x03
 214:	13 96       	adiw	r26, 0x03	; 3
 216:	9c 93       	st	X, r25
 218:	8e 93       	st	-X, r24
 21a:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 21c:	a0 85       	ldd	r26, Z+8	; 0x08
 21e:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 220:	11 96       	adiw	r26, 0x01	; 1
 222:	8d 91       	ld	r24, X+
 224:	9c 91       	ld	r25, X
 226:	12 97       	sbiw	r26, 0x02	; 2
 228:	e8 17       	cp	r30, r24
 22a:	f9 07       	cpc	r31, r25
 22c:	31 f4       	brne	.+12     	; 0x23a <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 22e:	84 81       	ldd	r24, Z+4	; 0x04
 230:	95 81       	ldd	r25, Z+5	; 0x05
 232:	12 96       	adiw	r26, 0x02	; 2
 234:	9c 93       	st	X, r25
 236:	8e 93       	st	-X, r24
 238:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
 23a:	11 86       	std	Z+9, r1	; 0x09
 23c:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 23e:	8c 91       	ld	r24, X
 240:	81 50       	subi	r24, 0x01	; 1
 242:	8c 93       	st	X, r24
 244:	08 95       	ret

00000246 <initUSART>:

enum TRANSMISSIONState {transmit_wait, transmit_read} transmission_state;


void TRANSMISSION_Init(){
	transmission_state = transmit_wait;
 246:	81 30       	cpi	r24, 0x01	; 1
 248:	81 f0       	breq	.+32     	; 0x26a <initUSART+0x24>
 24a:	e1 ec       	ldi	r30, 0xC1	; 193
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	80 81       	ld	r24, Z
 250:	88 61       	ori	r24, 0x18	; 24
 252:	80 83       	st	Z, r24
 254:	e2 ec       	ldi	r30, 0xC2	; 194
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	80 81       	ld	r24, Z
 25a:	86 60       	ori	r24, 0x06	; 6
 25c:	80 83       	st	Z, r24
 25e:	83 e3       	ldi	r24, 0x33	; 51
 260:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 264:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 268:	08 95       	ret
 26a:	e9 ec       	ldi	r30, 0xC9	; 201
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	80 81       	ld	r24, Z
 270:	88 61       	ori	r24, 0x18	; 24
 272:	80 83       	st	Z, r24
 274:	ea ec       	ldi	r30, 0xCA	; 202
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z
 27a:	86 60       	ori	r24, 0x06	; 6
 27c:	80 83       	st	Z, r24
 27e:	83 e3       	ldi	r24, 0x33	; 51
 280:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 284:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 288:	08 95       	ret

0000028a <USART_Flush>:
 28a:	81 30       	cpi	r24, 0x01	; 1
 28c:	29 f4       	brne	.+10     	; 0x298 <USART_Flush+0xe>
 28e:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 292:	88 23       	and	r24, r24
 294:	74 f0       	brlt	.+28     	; 0x2b2 <USART_Flush+0x28>
 296:	08 95       	ret
 298:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 29c:	88 23       	and	r24, r24
 29e:	8c f4       	brge	.+34     	; 0x2c2 <USART_Flush+0x38>
 2a0:	a6 ec       	ldi	r26, 0xC6	; 198
 2a2:	b0 e0       	ldi	r27, 0x00	; 0
 2a4:	e0 ec       	ldi	r30, 0xC0	; 192
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	8c 91       	ld	r24, X
 2aa:	80 81       	ld	r24, Z
 2ac:	88 23       	and	r24, r24
 2ae:	e4 f3       	brlt	.-8      	; 0x2a8 <USART_Flush+0x1e>
 2b0:	08 95       	ret
 2b2:	ae ec       	ldi	r26, 0xCE	; 206
 2b4:	b0 e0       	ldi	r27, 0x00	; 0
 2b6:	e8 ec       	ldi	r30, 0xC8	; 200
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	8c 91       	ld	r24, X
 2bc:	80 81       	ld	r24, Z
 2be:	88 23       	and	r24, r24
 2c0:	e4 f3       	brlt	.-8      	; 0x2ba <USART_Flush+0x30>
 2c2:	08 95       	ret

000002c4 <USART_Receive>:
 2c4:	81 30       	cpi	r24, 0x01	; 1
 2c6:	41 f0       	breq	.+16     	; 0x2d8 <USART_Receive+0x14>
 2c8:	e0 ec       	ldi	r30, 0xC0	; 192
 2ca:	f0 e0       	ldi	r31, 0x00	; 0
 2cc:	80 81       	ld	r24, Z
 2ce:	88 23       	and	r24, r24
 2d0:	ec f7       	brge	.-6      	; 0x2cc <USART_Receive+0x8>
 2d2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 2d6:	08 95       	ret
 2d8:	e8 ec       	ldi	r30, 0xC8	; 200
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	80 81       	ld	r24, Z
 2de:	88 23       	and	r24, r24
 2e0:	ec f7       	brge	.-6      	; 0x2dc <USART_Receive+0x18>
 2e2:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 2e6:	08 95       	ret

000002e8 <TRANSMISSION_Tick>:
}

void TRANSMISSION_Tick(){
	//state actions
	switch(transmission_state){
 2e8:	80 91 55 07 	lds	r24, 0x0755	; 0x800755 <transmission_state>
 2ec:	81 30       	cpi	r24, 0x01	; 1
 2ee:	49 f4       	brne	.+18     	; 0x302 <TRANSMISSION_Tick+0x1a>
		case transmit_wait:
			break;
		
		case transmit_read:
			data_recieved = USART_Receive(0); //store received value
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	e8 df       	rcall	.-48     	; 0x2c4 <USART_Receive>
 2f4:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <data_recieved>
			USART_Flush(0); //delete received val from register
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	c7 df       	rcall	.-114    	; 0x28a <USART_Flush>
			PORTC = data_recieved;
 2fc:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <data_recieved>
 300:	88 b9       	out	0x08, r24	; 8
		default:
			break;
	}
	
	//state transitions
	switch(transmission_state){
 302:	80 91 55 07 	lds	r24, 0x0755	; 0x800755 <transmission_state>
 306:	88 23       	and	r24, r24
 308:	19 f0       	breq	.+6      	; 0x310 <TRANSMISSION_Tick+0x28>
				transmission_state = transmit_wait;
			}
			break;
		
		case transmit_read:
			transmission_state = transmit_wait;
 30a:	10 92 55 07 	sts	0x0755, r1	; 0x800755 <transmission_state>
 30e:	08 95       	ret
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
 310:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	}
	
	//state transitions
	switch(transmission_state){
		case transmit_wait:
			if(USART_HasReceived(0)){
 314:	88 23       	and	r24, r24
 316:	1c f4       	brge	.+6      	; 0x31e <TRANSMISSION_Tick+0x36>
				transmission_state = transmit_read;
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	80 93 55 07 	sts	0x0755, r24	; 0x800755 <transmission_state>
 31e:	08 95       	ret

00000320 <TRANSMISSIONSecTask>:

enum TRANSMISSIONState {transmit_wait, transmit_read} transmission_state;


void TRANSMISSION_Init(){
	transmission_state = transmit_wait;
 320:	10 92 55 07 	sts	0x0755, r1	; 0x800755 <transmission_state>
}

void TRANSMISSIONSecTask(){
	TRANSMISSION_Init();
	for(;;){
		TRANSMISSION_Tick();
 324:	e1 df       	rcall	.-62     	; 0x2e8 <TRANSMISSION_Tick>
		vTaskDelay(3);
 326:	83 e0       	ldi	r24, 0x03	; 3
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	1d d4       	rcall	.+2106   	; 0xb66 <vTaskDelay>
 32c:	fb cf       	rjmp	.-10     	; 0x324 <TRANSMISSIONSecTask+0x4>

0000032e <TRANSMISSIONSecPulse>:
	}
}

void TRANSMISSIONSecPulse(unsigned portBASE_TYPE Priority){
 32e:	af 92       	push	r10
 330:	bf 92       	push	r11
 332:	cf 92       	push	r12
 334:	df 92       	push	r13
 336:	ef 92       	push	r14
 338:	ff 92       	push	r15
 33a:	0f 93       	push	r16
	xTaskCreate(TRANSMISSIONSecTask, (signed portCHAR *)"TRANSMISSIONSecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
 33c:	a1 2c       	mov	r10, r1
 33e:	b1 2c       	mov	r11, r1
 340:	c1 2c       	mov	r12, r1
 342:	d1 2c       	mov	r13, r1
 344:	e1 2c       	mov	r14, r1
 346:	f1 2c       	mov	r15, r1
 348:	08 2f       	mov	r16, r24
 34a:	20 e0       	ldi	r18, 0x00	; 0
 34c:	30 e0       	ldi	r19, 0x00	; 0
 34e:	45 e5       	ldi	r20, 0x55	; 85
 350:	50 e0       	ldi	r21, 0x00	; 0
 352:	62 e0       	ldi	r22, 0x02	; 2
 354:	71 e0       	ldi	r23, 0x01	; 1
 356:	80 e9       	ldi	r24, 0x90	; 144
 358:	91 e0       	ldi	r25, 0x01	; 1
 35a:	a1 d1       	rcall	.+834    	; 0x69e <xTaskGenericCreate>
}
 35c:	0f 91       	pop	r16
 35e:	ff 90       	pop	r15
 360:	ef 90       	pop	r14
 362:	df 90       	pop	r13
 364:	cf 90       	pop	r12
 366:	bf 90       	pop	r11
 368:	af 90       	pop	r10
 36a:	08 95       	ret

0000036c <main>:

	
 
int main(void) 
{ 
   DDRC = 0xFF; PORTC = 0x00;
 36c:	8f ef       	ldi	r24, 0xFF	; 255
 36e:	87 b9       	out	0x07, r24	; 7
 370:	18 b8       	out	0x08, r1	; 8
   initUSART(0);
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	68 df       	rcall	.-304    	; 0x246 <initUSART>
   //Start Tasks
   TRANSMISSIONSecPulse(1);
 376:	81 e0       	ldi	r24, 0x01	; 1
    //RunSchedular 
   vTaskStartScheduler(); 
 378:	da df       	rcall	.-76     	; 0x32e <TRANSMISSIONSecPulse>
 37a:	84 d2       	rcall	.+1288   	; 0x884 <vTaskStartScheduler>
 
   return 0; 
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	08 95       	ret

00000382 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 382:	31 e1       	ldi	r19, 0x11	; 17
 384:	fc 01       	movw	r30, r24
 386:	30 83       	st	Z, r19
 388:	31 97       	sbiw	r30, 0x01	; 1
 38a:	22 e2       	ldi	r18, 0x22	; 34
 38c:	20 83       	st	Z, r18
 38e:	31 97       	sbiw	r30, 0x01	; 1
 390:	a3 e3       	ldi	r26, 0x33	; 51
 392:	a0 83       	st	Z, r26
 394:	31 97       	sbiw	r30, 0x01	; 1
 396:	60 83       	st	Z, r22
 398:	31 97       	sbiw	r30, 0x01	; 1
 39a:	70 83       	st	Z, r23
 39c:	31 97       	sbiw	r30, 0x01	; 1
 39e:	10 82       	st	Z, r1
 3a0:	31 97       	sbiw	r30, 0x01	; 1
 3a2:	60 e8       	ldi	r22, 0x80	; 128
 3a4:	60 83       	st	Z, r22
 3a6:	31 97       	sbiw	r30, 0x01	; 1
 3a8:	10 82       	st	Z, r1
 3aa:	31 97       	sbiw	r30, 0x01	; 1
 3ac:	62 e0       	ldi	r22, 0x02	; 2
 3ae:	60 83       	st	Z, r22
 3b0:	31 97       	sbiw	r30, 0x01	; 1
 3b2:	63 e0       	ldi	r22, 0x03	; 3
 3b4:	60 83       	st	Z, r22
 3b6:	31 97       	sbiw	r30, 0x01	; 1
 3b8:	64 e0       	ldi	r22, 0x04	; 4
 3ba:	60 83       	st	Z, r22
 3bc:	31 97       	sbiw	r30, 0x01	; 1
 3be:	65 e0       	ldi	r22, 0x05	; 5
 3c0:	60 83       	st	Z, r22
 3c2:	31 97       	sbiw	r30, 0x01	; 1
 3c4:	66 e0       	ldi	r22, 0x06	; 6
 3c6:	60 83       	st	Z, r22
 3c8:	31 97       	sbiw	r30, 0x01	; 1
 3ca:	67 e0       	ldi	r22, 0x07	; 7
 3cc:	60 83       	st	Z, r22
 3ce:	31 97       	sbiw	r30, 0x01	; 1
 3d0:	68 e0       	ldi	r22, 0x08	; 8
 3d2:	60 83       	st	Z, r22
 3d4:	31 97       	sbiw	r30, 0x01	; 1
 3d6:	69 e0       	ldi	r22, 0x09	; 9
 3d8:	60 83       	st	Z, r22
 3da:	31 97       	sbiw	r30, 0x01	; 1
 3dc:	60 e1       	ldi	r22, 0x10	; 16
 3de:	60 83       	st	Z, r22
 3e0:	31 97       	sbiw	r30, 0x01	; 1
 3e2:	30 83       	st	Z, r19
 3e4:	31 97       	sbiw	r30, 0x01	; 1
 3e6:	32 e1       	ldi	r19, 0x12	; 18
 3e8:	30 83       	st	Z, r19
 3ea:	31 97       	sbiw	r30, 0x01	; 1
 3ec:	33 e1       	ldi	r19, 0x13	; 19
 3ee:	30 83       	st	Z, r19
 3f0:	31 97       	sbiw	r30, 0x01	; 1
 3f2:	34 e1       	ldi	r19, 0x14	; 20
 3f4:	30 83       	st	Z, r19
 3f6:	31 97       	sbiw	r30, 0x01	; 1
 3f8:	35 e1       	ldi	r19, 0x15	; 21
 3fa:	30 83       	st	Z, r19
 3fc:	31 97       	sbiw	r30, 0x01	; 1
 3fe:	36 e1       	ldi	r19, 0x16	; 22
 400:	30 83       	st	Z, r19
 402:	31 97       	sbiw	r30, 0x01	; 1
 404:	37 e1       	ldi	r19, 0x17	; 23
 406:	30 83       	st	Z, r19
 408:	31 97       	sbiw	r30, 0x01	; 1
 40a:	38 e1       	ldi	r19, 0x18	; 24
 40c:	30 83       	st	Z, r19
 40e:	31 97       	sbiw	r30, 0x01	; 1
 410:	39 e1       	ldi	r19, 0x19	; 25
 412:	30 83       	st	Z, r19
 414:	31 97       	sbiw	r30, 0x01	; 1
 416:	30 e2       	ldi	r19, 0x20	; 32
 418:	30 83       	st	Z, r19
 41a:	31 97       	sbiw	r30, 0x01	; 1
 41c:	31 e2       	ldi	r19, 0x21	; 33
 41e:	30 83       	st	Z, r19
 420:	31 97       	sbiw	r30, 0x01	; 1
 422:	20 83       	st	Z, r18
 424:	31 97       	sbiw	r30, 0x01	; 1
 426:	23 e2       	ldi	r18, 0x23	; 35
 428:	20 83       	st	Z, r18
 42a:	31 97       	sbiw	r30, 0x01	; 1
 42c:	40 83       	st	Z, r20
 42e:	31 97       	sbiw	r30, 0x01	; 1
 430:	50 83       	st	Z, r21
 432:	31 97       	sbiw	r30, 0x01	; 1
 434:	26 e2       	ldi	r18, 0x26	; 38
 436:	20 83       	st	Z, r18
 438:	31 97       	sbiw	r30, 0x01	; 1
 43a:	27 e2       	ldi	r18, 0x27	; 39
 43c:	20 83       	st	Z, r18
 43e:	31 97       	sbiw	r30, 0x01	; 1
 440:	28 e2       	ldi	r18, 0x28	; 40
 442:	20 83       	st	Z, r18
 444:	31 97       	sbiw	r30, 0x01	; 1
 446:	29 e2       	ldi	r18, 0x29	; 41
 448:	20 83       	st	Z, r18
 44a:	31 97       	sbiw	r30, 0x01	; 1
 44c:	20 e3       	ldi	r18, 0x30	; 48
 44e:	20 83       	st	Z, r18
 450:	31 97       	sbiw	r30, 0x01	; 1
 452:	21 e3       	ldi	r18, 0x31	; 49
 454:	20 83       	st	Z, r18
 456:	86 97       	sbiw	r24, 0x26	; 38
 458:	08 95       	ret

0000045a <xPortStartScheduler>:
 45a:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 45e:	8c e7       	ldi	r24, 0x7C	; 124
 460:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 464:	8b e0       	ldi	r24, 0x0B	; 11
 466:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 46a:	ef e6       	ldi	r30, 0x6F	; 111
 46c:	f0 e0       	ldi	r31, 0x00	; 0
 46e:	80 81       	ld	r24, Z
 470:	82 60       	ori	r24, 0x02	; 2
 472:	80 83       	st	Z, r24
 474:	a0 91 53 07 	lds	r26, 0x0753	; 0x800753 <pxCurrentTCB>
 478:	b0 91 54 07 	lds	r27, 0x0754	; 0x800754 <pxCurrentTCB+0x1>
 47c:	cd 91       	ld	r28, X+
 47e:	cd bf       	out	0x3d, r28	; 61
 480:	dd 91       	ld	r29, X+
 482:	de bf       	out	0x3e, r29	; 62
 484:	ff 91       	pop	r31
 486:	ef 91       	pop	r30
 488:	df 91       	pop	r29
 48a:	cf 91       	pop	r28
 48c:	bf 91       	pop	r27
 48e:	af 91       	pop	r26
 490:	9f 91       	pop	r25
 492:	8f 91       	pop	r24
 494:	7f 91       	pop	r23
 496:	6f 91       	pop	r22
 498:	5f 91       	pop	r21
 49a:	4f 91       	pop	r20
 49c:	3f 91       	pop	r19
 49e:	2f 91       	pop	r18
 4a0:	1f 91       	pop	r17
 4a2:	0f 91       	pop	r16
 4a4:	ff 90       	pop	r15
 4a6:	ef 90       	pop	r14
 4a8:	df 90       	pop	r13
 4aa:	cf 90       	pop	r12
 4ac:	bf 90       	pop	r11
 4ae:	af 90       	pop	r10
 4b0:	9f 90       	pop	r9
 4b2:	8f 90       	pop	r8
 4b4:	7f 90       	pop	r7
 4b6:	6f 90       	pop	r6
 4b8:	5f 90       	pop	r5
 4ba:	4f 90       	pop	r4
 4bc:	3f 90       	pop	r3
 4be:	2f 90       	pop	r2
 4c0:	1f 90       	pop	r1
 4c2:	0f 90       	pop	r0
 4c4:	0f be       	out	0x3f, r0	; 63
 4c6:	0f 90       	pop	r0
 4c8:	08 95       	ret
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	08 95       	ret

000004ce <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 4ce:	0f 92       	push	r0
 4d0:	0f b6       	in	r0, 0x3f	; 63
 4d2:	f8 94       	cli
 4d4:	0f 92       	push	r0
 4d6:	1f 92       	push	r1
 4d8:	11 24       	eor	r1, r1
 4da:	2f 92       	push	r2
 4dc:	3f 92       	push	r3
 4de:	4f 92       	push	r4
 4e0:	5f 92       	push	r5
 4e2:	6f 92       	push	r6
 4e4:	7f 92       	push	r7
 4e6:	8f 92       	push	r8
 4e8:	9f 92       	push	r9
 4ea:	af 92       	push	r10
 4ec:	bf 92       	push	r11
 4ee:	cf 92       	push	r12
 4f0:	df 92       	push	r13
 4f2:	ef 92       	push	r14
 4f4:	ff 92       	push	r15
 4f6:	0f 93       	push	r16
 4f8:	1f 93       	push	r17
 4fa:	2f 93       	push	r18
 4fc:	3f 93       	push	r19
 4fe:	4f 93       	push	r20
 500:	5f 93       	push	r21
 502:	6f 93       	push	r22
 504:	7f 93       	push	r23
 506:	8f 93       	push	r24
 508:	9f 93       	push	r25
 50a:	af 93       	push	r26
 50c:	bf 93       	push	r27
 50e:	cf 93       	push	r28
 510:	df 93       	push	r29
 512:	ef 93       	push	r30
 514:	ff 93       	push	r31
 516:	a0 91 53 07 	lds	r26, 0x0753	; 0x800753 <pxCurrentTCB>
 51a:	b0 91 54 07 	lds	r27, 0x0754	; 0x800754 <pxCurrentTCB+0x1>
 51e:	0d b6       	in	r0, 0x3d	; 61
 520:	0d 92       	st	X+, r0
 522:	0e b6       	in	r0, 0x3e	; 62
 524:	0d 92       	st	X+, r0
	vTaskSwitchContext();
 526:	70 d3       	rcall	.+1760   	; 0xc08 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 528:	a0 91 53 07 	lds	r26, 0x0753	; 0x800753 <pxCurrentTCB>
 52c:	b0 91 54 07 	lds	r27, 0x0754	; 0x800754 <pxCurrentTCB+0x1>
 530:	cd 91       	ld	r28, X+
 532:	cd bf       	out	0x3d, r28	; 61
 534:	dd 91       	ld	r29, X+
 536:	de bf       	out	0x3e, r29	; 62
 538:	ff 91       	pop	r31
 53a:	ef 91       	pop	r30
 53c:	df 91       	pop	r29
 53e:	cf 91       	pop	r28
 540:	bf 91       	pop	r27
 542:	af 91       	pop	r26
 544:	9f 91       	pop	r25
 546:	8f 91       	pop	r24
 548:	7f 91       	pop	r23
 54a:	6f 91       	pop	r22
 54c:	5f 91       	pop	r21
 54e:	4f 91       	pop	r20
 550:	3f 91       	pop	r19
 552:	2f 91       	pop	r18
 554:	1f 91       	pop	r17
 556:	0f 91       	pop	r16
 558:	ff 90       	pop	r15
 55a:	ef 90       	pop	r14
 55c:	df 90       	pop	r13
 55e:	cf 90       	pop	r12
 560:	bf 90       	pop	r11
 562:	af 90       	pop	r10
 564:	9f 90       	pop	r9
 566:	8f 90       	pop	r8
 568:	7f 90       	pop	r7
 56a:	6f 90       	pop	r6
 56c:	5f 90       	pop	r5
 56e:	4f 90       	pop	r4
 570:	3f 90       	pop	r3
 572:	2f 90       	pop	r2
 574:	1f 90       	pop	r1
 576:	0f 90       	pop	r0
 578:	0f be       	out	0x3f, r0	; 63
 57a:	0f 90       	pop	r0

	asm volatile ( "ret" );
 57c:	08 95       	ret

0000057e <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 57e:	0f 92       	push	r0
 580:	0f b6       	in	r0, 0x3f	; 63
 582:	f8 94       	cli
 584:	0f 92       	push	r0
 586:	1f 92       	push	r1
 588:	11 24       	eor	r1, r1
 58a:	2f 92       	push	r2
 58c:	3f 92       	push	r3
 58e:	4f 92       	push	r4
 590:	5f 92       	push	r5
 592:	6f 92       	push	r6
 594:	7f 92       	push	r7
 596:	8f 92       	push	r8
 598:	9f 92       	push	r9
 59a:	af 92       	push	r10
 59c:	bf 92       	push	r11
 59e:	cf 92       	push	r12
 5a0:	df 92       	push	r13
 5a2:	ef 92       	push	r14
 5a4:	ff 92       	push	r15
 5a6:	0f 93       	push	r16
 5a8:	1f 93       	push	r17
 5aa:	2f 93       	push	r18
 5ac:	3f 93       	push	r19
 5ae:	4f 93       	push	r20
 5b0:	5f 93       	push	r21
 5b2:	6f 93       	push	r22
 5b4:	7f 93       	push	r23
 5b6:	8f 93       	push	r24
 5b8:	9f 93       	push	r25
 5ba:	af 93       	push	r26
 5bc:	bf 93       	push	r27
 5be:	cf 93       	push	r28
 5c0:	df 93       	push	r29
 5c2:	ef 93       	push	r30
 5c4:	ff 93       	push	r31
 5c6:	a0 91 53 07 	lds	r26, 0x0753	; 0x800753 <pxCurrentTCB>
 5ca:	b0 91 54 07 	lds	r27, 0x0754	; 0x800754 <pxCurrentTCB+0x1>
 5ce:	0d b6       	in	r0, 0x3d	; 61
 5d0:	0d 92       	st	X+, r0
 5d2:	0e b6       	in	r0, 0x3e	; 62
 5d4:	0d 92       	st	X+, r0
	vTaskIncrementTick();
 5d6:	85 d1       	rcall	.+778    	; 0x8e2 <vTaskIncrementTick>
	vTaskSwitchContext();
 5d8:	17 d3       	rcall	.+1582   	; 0xc08 <vTaskSwitchContext>
 5da:	a0 91 53 07 	lds	r26, 0x0753	; 0x800753 <pxCurrentTCB>
	portRESTORE_CONTEXT();
 5de:	b0 91 54 07 	lds	r27, 0x0754	; 0x800754 <pxCurrentTCB+0x1>
 5e2:	cd 91       	ld	r28, X+
 5e4:	cd bf       	out	0x3d, r28	; 61
 5e6:	dd 91       	ld	r29, X+
 5e8:	de bf       	out	0x3e, r29	; 62
 5ea:	ff 91       	pop	r31
 5ec:	ef 91       	pop	r30
 5ee:	df 91       	pop	r29
 5f0:	cf 91       	pop	r28
 5f2:	bf 91       	pop	r27
 5f4:	af 91       	pop	r26
 5f6:	9f 91       	pop	r25
 5f8:	8f 91       	pop	r24
 5fa:	7f 91       	pop	r23
 5fc:	6f 91       	pop	r22
 5fe:	5f 91       	pop	r21
 600:	4f 91       	pop	r20
 602:	3f 91       	pop	r19
 604:	2f 91       	pop	r18
 606:	1f 91       	pop	r17
 608:	0f 91       	pop	r16
 60a:	ff 90       	pop	r15
 60c:	ef 90       	pop	r14
 60e:	df 90       	pop	r13
 610:	cf 90       	pop	r12
 612:	bf 90       	pop	r11
 614:	af 90       	pop	r10
 616:	9f 90       	pop	r9
 618:	8f 90       	pop	r8
 61a:	7f 90       	pop	r7
 61c:	6f 90       	pop	r6
 61e:	5f 90       	pop	r5
 620:	4f 90       	pop	r4
 622:	3f 90       	pop	r3
 624:	2f 90       	pop	r2
 626:	1f 90       	pop	r1
 628:	0f 90       	pop	r0
 62a:	0f be       	out	0x3f, r0	; 63
 62c:	0f 90       	pop	r0
 62e:	08 95       	ret

00000630 <__vector_13>:

	asm volatile ( "ret" );
 630:	a6 df       	rcall	.-180    	; 0x57e <vPortYieldFromTick>
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
		asm volatile ( "reti" );
 632:	18 95       	reti

00000634 <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
 634:	cf 93       	push	r28
 636:	df 93       	push	r29
 638:	ec 01       	movw	r28, r24
 63a:	e0 91 53 07 	lds	r30, 0x0753	; 0x800753 <pxCurrentTCB>
 63e:	f0 91 54 07 	lds	r31, 0x0754	; 0x800754 <pxCurrentTCB+0x1>
 642:	93 83       	std	Z+3, r25	; 0x03
 644:	82 83       	std	Z+2, r24	; 0x02
 646:	80 91 03 07 	lds	r24, 0x0703	; 0x800703 <xTickCount>
 64a:	90 91 04 07 	lds	r25, 0x0704	; 0x800704 <xTickCount+0x1>
 64e:	c8 17       	cp	r28, r24
 650:	d9 07       	cpc	r29, r25
 652:	60 f4       	brcc	.+24     	; 0x66c <prvAddCurrentTaskToDelayedList+0x38>
 654:	60 91 53 07 	lds	r22, 0x0753	; 0x800753 <pxCurrentTCB>
 658:	70 91 54 07 	lds	r23, 0x0754	; 0x800754 <pxCurrentTCB+0x1>
 65c:	80 91 19 07 	lds	r24, 0x0719	; 0x800719 <pxOverflowDelayedTaskList>
 660:	90 91 1a 07 	lds	r25, 0x071A	; 0x80071a <pxOverflowDelayedTaskList+0x1>
 664:	6e 5f       	subi	r22, 0xFE	; 254
 666:	7f 4f       	sbci	r23, 0xFF	; 255
 668:	8d dd       	rcall	.-1254   	; 0x184 <vListInsert>
 66a:	16 c0       	rjmp	.+44     	; 0x698 <prvAddCurrentTaskToDelayedList+0x64>
 66c:	60 91 53 07 	lds	r22, 0x0753	; 0x800753 <pxCurrentTCB>
 670:	70 91 54 07 	lds	r23, 0x0754	; 0x800754 <pxCurrentTCB+0x1>
 674:	80 91 1b 07 	lds	r24, 0x071B	; 0x80071b <pxDelayedTaskList>
 678:	90 91 1c 07 	lds	r25, 0x071C	; 0x80071c <pxDelayedTaskList+0x1>
 67c:	6e 5f       	subi	r22, 0xFE	; 254
 67e:	7f 4f       	sbci	r23, 0xFF	; 255
 680:	81 dd       	rcall	.-1278   	; 0x184 <vListInsert>
 682:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 686:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 68a:	c8 17       	cp	r28, r24
 68c:	d9 07       	cpc	r29, r25
 68e:	20 f4       	brcc	.+8      	; 0x698 <prvAddCurrentTaskToDelayedList+0x64>
 690:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <__data_start+0x1>
 694:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
 698:	df 91       	pop	r29
 69a:	cf 91       	pop	r28
 69c:	08 95       	ret

0000069e <xTaskGenericCreate>:
 69e:	4f 92       	push	r4
 6a0:	5f 92       	push	r5
 6a2:	6f 92       	push	r6
 6a4:	7f 92       	push	r7
 6a6:	8f 92       	push	r8
 6a8:	9f 92       	push	r9
 6aa:	af 92       	push	r10
 6ac:	bf 92       	push	r11
 6ae:	cf 92       	push	r12
 6b0:	df 92       	push	r13
 6b2:	ef 92       	push	r14
 6b4:	ff 92       	push	r15
 6b6:	0f 93       	push	r16
 6b8:	1f 93       	push	r17
 6ba:	cf 93       	push	r28
 6bc:	df 93       	push	r29
 6be:	5c 01       	movw	r10, r24
 6c0:	4b 01       	movw	r8, r22
 6c2:	3a 01       	movw	r6, r20
 6c4:	29 01       	movw	r4, r18
 6c6:	81 e2       	ldi	r24, 0x21	; 33
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	fe dc       	rcall	.-1540   	; 0xc8 <pvPortMalloc>
 6cc:	ec 01       	movw	r28, r24
 6ce:	89 2b       	or	r24, r25
 6d0:	09 f4       	brne	.+2      	; 0x6d4 <xTaskGenericCreate+0x36>
 6d2:	c6 c0       	rjmp	.+396    	; 0x860 <xTaskGenericCreate+0x1c2>
 6d4:	c1 14       	cp	r12, r1
 6d6:	d1 04       	cpc	r13, r1
 6d8:	09 f0       	breq	.+2      	; 0x6dc <xTaskGenericCreate+0x3e>
 6da:	be c0       	rjmp	.+380    	; 0x858 <xTaskGenericCreate+0x1ba>
 6dc:	c3 01       	movw	r24, r6
 6de:	f4 dc       	rcall	.-1560   	; 0xc8 <pvPortMalloc>
 6e0:	98 8f       	std	Y+24, r25	; 0x18
 6e2:	8f 8b       	std	Y+23, r24	; 0x17
 6e4:	00 97       	sbiw	r24, 0x00	; 0
 6e6:	19 f4       	brne	.+6      	; 0x6ee <xTaskGenericCreate+0x50>
 6e8:	ce 01       	movw	r24, r28
 6ea:	12 dd       	rcall	.-1500   	; 0x110 <vPortFree>
 6ec:	b9 c0       	rjmp	.+370    	; 0x860 <xTaskGenericCreate+0x1c2>
 6ee:	a3 01       	movw	r20, r6
 6f0:	65 ea       	ldi	r22, 0xA5	; 165
 6f2:	70 e0       	ldi	r23, 0x00	; 0
 6f4:	f5 d2       	rcall	.+1514   	; 0xce0 <memset>
 6f6:	93 01       	movw	r18, r6
 6f8:	21 50       	subi	r18, 0x01	; 1
 6fa:	31 09       	sbc	r19, r1
 6fc:	8f 89       	ldd	r24, Y+23	; 0x17
 6fe:	98 8d       	ldd	r25, Y+24	; 0x18
 700:	3c 01       	movw	r6, r24
 702:	62 0e       	add	r6, r18
 704:	73 1e       	adc	r7, r19
 706:	48 e0       	ldi	r20, 0x08	; 8
 708:	50 e0       	ldi	r21, 0x00	; 0
 70a:	b4 01       	movw	r22, r8
 70c:	ce 01       	movw	r24, r28
 70e:	49 96       	adiw	r24, 0x19	; 25
 710:	ee d2       	rcall	.+1500   	; 0xcee <strncpy>
 712:	18 a2       	std	Y+32, r1	; 0x20
 714:	10 2f       	mov	r17, r16
 716:	04 30       	cpi	r16, 0x04	; 4
 718:	08 f0       	brcs	.+2      	; 0x71c <xTaskGenericCreate+0x7e>
 71a:	13 e0       	ldi	r17, 0x03	; 3
 71c:	1e 8b       	std	Y+22, r17	; 0x16
 71e:	6e 01       	movw	r12, r28
 720:	82 e0       	ldi	r24, 0x02	; 2
 722:	c8 0e       	add	r12, r24
 724:	d1 1c       	adc	r13, r1
 726:	c6 01       	movw	r24, r12
 728:	02 dd       	rcall	.-1532   	; 0x12e <vListInitialiseItem>
 72a:	ce 01       	movw	r24, r28
 72c:	0c 96       	adiw	r24, 0x0c	; 12
 72e:	ff dc       	rcall	.-1538   	; 0x12e <vListInitialiseItem>
 730:	d9 87       	std	Y+9, r29	; 0x09
 732:	c8 87       	std	Y+8, r28	; 0x08
 734:	84 e0       	ldi	r24, 0x04	; 4
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	81 1b       	sub	r24, r17
 73a:	91 09       	sbc	r25, r1
 73c:	9d 87       	std	Y+13, r25	; 0x0d
 73e:	8c 87       	std	Y+12, r24	; 0x0c
 740:	db 8b       	std	Y+19, r29	; 0x13
 742:	ca 8b       	std	Y+18, r28	; 0x12
 744:	a2 01       	movw	r20, r4
 746:	b5 01       	movw	r22, r10
 748:	c3 01       	movw	r24, r6
 74a:	1b de       	rcall	.-970    	; 0x382 <pxPortInitialiseStack>
 74c:	99 83       	std	Y+1, r25	; 0x01
 74e:	88 83       	st	Y, r24
 750:	e1 14       	cp	r14, r1
 752:	f1 04       	cpc	r15, r1
 754:	19 f0       	breq	.+6      	; 0x75c <xTaskGenericCreate+0xbe>
 756:	f7 01       	movw	r30, r14
 758:	d1 83       	std	Z+1, r29	; 0x01
 75a:	c0 83       	st	Z, r28
 75c:	0f b6       	in	r0, 0x3f	; 63
 75e:	f8 94       	cli
 760:	0f 92       	push	r0
 762:	80 91 05 07 	lds	r24, 0x0705	; 0x800705 <uxCurrentNumberOfTasks>
 766:	8f 5f       	subi	r24, 0xFF	; 255
 768:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <uxCurrentNumberOfTasks>
 76c:	80 91 53 07 	lds	r24, 0x0753	; 0x800753 <pxCurrentTCB>
 770:	90 91 54 07 	lds	r25, 0x0754	; 0x800754 <pxCurrentTCB+0x1>
 774:	89 2b       	or	r24, r25
 776:	69 f5       	brne	.+90     	; 0x7d2 <xTaskGenericCreate+0x134>
 778:	d0 93 54 07 	sts	0x0754, r29	; 0x800754 <pxCurrentTCB+0x1>
 77c:	c0 93 53 07 	sts	0x0753, r28	; 0x800753 <pxCurrentTCB>
 780:	80 91 05 07 	lds	r24, 0x0705	; 0x800705 <uxCurrentNumberOfTasks>
 784:	81 30       	cpi	r24, 0x01	; 1
 786:	a1 f5       	brne	.+104    	; 0x7f0 <xTaskGenericCreate+0x152>
 788:	8f e2       	ldi	r24, 0x2F	; 47
 78a:	97 e0       	ldi	r25, 0x07	; 7
 78c:	c2 dc       	rcall	.-1660   	; 0x112 <vListInitialise>
 78e:	88 e3       	ldi	r24, 0x38	; 56
 790:	97 e0       	ldi	r25, 0x07	; 7
 792:	bf dc       	rcall	.-1666   	; 0x112 <vListInitialise>
 794:	81 e4       	ldi	r24, 0x41	; 65
 796:	97 e0       	ldi	r25, 0x07	; 7
 798:	bc dc       	rcall	.-1672   	; 0x112 <vListInitialise>
 79a:	8a e4       	ldi	r24, 0x4A	; 74
 79c:	97 e0       	ldi	r25, 0x07	; 7
 79e:	b9 dc       	rcall	.-1678   	; 0x112 <vListInitialise>
 7a0:	86 e2       	ldi	r24, 0x26	; 38
 7a2:	97 e0       	ldi	r25, 0x07	; 7
 7a4:	b6 dc       	rcall	.-1684   	; 0x112 <vListInitialise>
 7a6:	8d e1       	ldi	r24, 0x1D	; 29
 7a8:	97 e0       	ldi	r25, 0x07	; 7
 7aa:	b3 dc       	rcall	.-1690   	; 0x112 <vListInitialise>
 7ac:	80 e1       	ldi	r24, 0x10	; 16
 7ae:	97 e0       	ldi	r25, 0x07	; 7
 7b0:	b0 dc       	rcall	.-1696   	; 0x112 <vListInitialise>
 7b2:	87 e0       	ldi	r24, 0x07	; 7
 7b4:	97 e0       	ldi	r25, 0x07	; 7
 7b6:	ad dc       	rcall	.-1702   	; 0x112 <vListInitialise>
 7b8:	86 e2       	ldi	r24, 0x26	; 38
 7ba:	97 e0       	ldi	r25, 0x07	; 7
 7bc:	90 93 1c 07 	sts	0x071C, r25	; 0x80071c <pxDelayedTaskList+0x1>
 7c0:	80 93 1b 07 	sts	0x071B, r24	; 0x80071b <pxDelayedTaskList>
 7c4:	8d e1       	ldi	r24, 0x1D	; 29
 7c6:	97 e0       	ldi	r25, 0x07	; 7
 7c8:	90 93 1a 07 	sts	0x071A, r25	; 0x80071a <pxOverflowDelayedTaskList+0x1>
 7cc:	80 93 19 07 	sts	0x0719, r24	; 0x800719 <pxOverflowDelayedTaskList>
 7d0:	0f c0       	rjmp	.+30     	; 0x7f0 <xTaskGenericCreate+0x152>
 7d2:	80 91 00 07 	lds	r24, 0x0700	; 0x800700 <xSchedulerRunning>
 7d6:	81 11       	cpse	r24, r1
 7d8:	0b c0       	rjmp	.+22     	; 0x7f0 <xTaskGenericCreate+0x152>
 7da:	e0 91 53 07 	lds	r30, 0x0753	; 0x800753 <pxCurrentTCB>
 7de:	f0 91 54 07 	lds	r31, 0x0754	; 0x800754 <pxCurrentTCB+0x1>
 7e2:	86 89       	ldd	r24, Z+22	; 0x16
 7e4:	08 17       	cp	r16, r24
 7e6:	20 f0       	brcs	.+8      	; 0x7f0 <xTaskGenericCreate+0x152>
 7e8:	d0 93 54 07 	sts	0x0754, r29	; 0x800754 <pxCurrentTCB+0x1>
 7ec:	c0 93 53 07 	sts	0x0753, r28	; 0x800753 <pxCurrentTCB>
 7f0:	8e 89       	ldd	r24, Y+22	; 0x16
 7f2:	90 91 02 07 	lds	r25, 0x0702	; 0x800702 <uxTopUsedPriority>
 7f6:	98 17       	cp	r25, r24
 7f8:	10 f4       	brcc	.+4      	; 0x7fe <xTaskGenericCreate+0x160>
 7fa:	80 93 02 07 	sts	0x0702, r24	; 0x800702 <uxTopUsedPriority>
 7fe:	90 91 fb 06 	lds	r25, 0x06FB	; 0x8006fb <uxTaskNumber>
 802:	9f 5f       	subi	r25, 0xFF	; 255
 804:	90 93 fb 06 	sts	0x06FB, r25	; 0x8006fb <uxTaskNumber>
 808:	90 91 01 07 	lds	r25, 0x0701	; 0x800701 <uxTopReadyPriority>
 80c:	98 17       	cp	r25, r24
 80e:	10 f4       	brcc	.+4      	; 0x814 <xTaskGenericCreate+0x176>
 810:	80 93 01 07 	sts	0x0701, r24	; 0x800701 <uxTopReadyPriority>
 814:	90 e0       	ldi	r25, 0x00	; 0
 816:	9c 01       	movw	r18, r24
 818:	22 0f       	add	r18, r18
 81a:	33 1f       	adc	r19, r19
 81c:	22 0f       	add	r18, r18
 81e:	33 1f       	adc	r19, r19
 820:	22 0f       	add	r18, r18
 822:	33 1f       	adc	r19, r19
 824:	82 0f       	add	r24, r18
 826:	93 1f       	adc	r25, r19
 828:	b6 01       	movw	r22, r12
 82a:	81 5d       	subi	r24, 0xD1	; 209
 82c:	98 4f       	sbci	r25, 0xF8	; 248
 82e:	83 dc       	rcall	.-1786   	; 0x136 <vListInsertEnd>
 830:	0f 90       	pop	r0
 832:	0f be       	out	0x3f, r0	; 63
 834:	80 91 00 07 	lds	r24, 0x0700	; 0x800700 <xSchedulerRunning>
 838:	88 23       	and	r24, r24
 83a:	51 f0       	breq	.+20     	; 0x850 <xTaskGenericCreate+0x1b2>
 83c:	e0 91 53 07 	lds	r30, 0x0753	; 0x800753 <pxCurrentTCB>
 840:	f0 91 54 07 	lds	r31, 0x0754	; 0x800754 <pxCurrentTCB+0x1>
 844:	86 89       	ldd	r24, Z+22	; 0x16
 846:	80 17       	cp	r24, r16
 848:	28 f4       	brcc	.+10     	; 0x854 <xTaskGenericCreate+0x1b6>
 84a:	41 de       	rcall	.-894    	; 0x4ce <vPortYield>
 84c:	81 e0       	ldi	r24, 0x01	; 1
 84e:	09 c0       	rjmp	.+18     	; 0x862 <xTaskGenericCreate+0x1c4>
 850:	81 e0       	ldi	r24, 0x01	; 1
 852:	07 c0       	rjmp	.+14     	; 0x862 <xTaskGenericCreate+0x1c4>
 854:	81 e0       	ldi	r24, 0x01	; 1
 856:	05 c0       	rjmp	.+10     	; 0x862 <xTaskGenericCreate+0x1c4>
 858:	d8 8e       	std	Y+24, r13	; 0x18
 85a:	cf 8a       	std	Y+23, r12	; 0x17
 85c:	c6 01       	movw	r24, r12
 85e:	47 cf       	rjmp	.-370    	; 0x6ee <xTaskGenericCreate+0x50>
 860:	8f ef       	ldi	r24, 0xFF	; 255
 862:	df 91       	pop	r29
 864:	cf 91       	pop	r28
 866:	1f 91       	pop	r17
 868:	0f 91       	pop	r16
 86a:	ff 90       	pop	r15
 86c:	ef 90       	pop	r14
 86e:	df 90       	pop	r13
 870:	cf 90       	pop	r12
 872:	bf 90       	pop	r11
 874:	af 90       	pop	r10
 876:	9f 90       	pop	r9
 878:	8f 90       	pop	r8
 87a:	7f 90       	pop	r7
 87c:	6f 90       	pop	r6
 87e:	5f 90       	pop	r5
 880:	4f 90       	pop	r4
 882:	08 95       	ret

00000884 <vTaskStartScheduler>:
 884:	af 92       	push	r10
 886:	bf 92       	push	r11
 888:	cf 92       	push	r12
 88a:	df 92       	push	r13
 88c:	ef 92       	push	r14
 88e:	ff 92       	push	r15
 890:	0f 93       	push	r16
 892:	a1 2c       	mov	r10, r1
 894:	b1 2c       	mov	r11, r1
 896:	c1 2c       	mov	r12, r1
 898:	d1 2c       	mov	r13, r1
 89a:	e1 2c       	mov	r14, r1
 89c:	f1 2c       	mov	r15, r1
 89e:	00 e0       	ldi	r16, 0x00	; 0
 8a0:	20 e0       	ldi	r18, 0x00	; 0
 8a2:	30 e0       	ldi	r19, 0x00	; 0
 8a4:	45 e5       	ldi	r20, 0x55	; 85
 8a6:	50 e0       	ldi	r21, 0x00	; 0
 8a8:	66 e1       	ldi	r22, 0x16	; 22
 8aa:	71 e0       	ldi	r23, 0x01	; 1
 8ac:	8e ec       	ldi	r24, 0xCE	; 206
 8ae:	95 e0       	ldi	r25, 0x05	; 5
 8b0:	f6 de       	rcall	.-532    	; 0x69e <xTaskGenericCreate>
 8b2:	81 30       	cpi	r24, 0x01	; 1
 8b4:	41 f4       	brne	.+16     	; 0x8c6 <vTaskStartScheduler+0x42>
 8b6:	f8 94       	cli
 8b8:	80 93 00 07 	sts	0x0700, r24	; 0x800700 <xSchedulerRunning>
 8bc:	10 92 04 07 	sts	0x0704, r1	; 0x800704 <xTickCount+0x1>
 8c0:	10 92 03 07 	sts	0x0703, r1	; 0x800703 <xTickCount>
 8c4:	ca dd       	rcall	.-1132   	; 0x45a <xPortStartScheduler>
 8c6:	0f 91       	pop	r16
 8c8:	ff 90       	pop	r15
 8ca:	ef 90       	pop	r14
 8cc:	df 90       	pop	r13
 8ce:	cf 90       	pop	r12
 8d0:	bf 90       	pop	r11
 8d2:	af 90       	pop	r10
 8d4:	08 95       	ret

000008d6 <vTaskSuspendAll>:
 8d6:	80 91 ff 06 	lds	r24, 0x06FF	; 0x8006ff <uxSchedulerSuspended>
 8da:	8f 5f       	subi	r24, 0xFF	; 255
 8dc:	80 93 ff 06 	sts	0x06FF, r24	; 0x8006ff <uxSchedulerSuspended>
 8e0:	08 95       	ret

000008e2 <vTaskIncrementTick>:
 8e2:	0f 93       	push	r16
 8e4:	1f 93       	push	r17
 8e6:	cf 93       	push	r28
 8e8:	df 93       	push	r29
 8ea:	80 91 ff 06 	lds	r24, 0x06FF	; 0x8006ff <uxSchedulerSuspended>
 8ee:	81 11       	cpse	r24, r1
 8f0:	af c0       	rjmp	.+350    	; 0xa50 <vTaskIncrementTick+0x16e>
 8f2:	80 91 03 07 	lds	r24, 0x0703	; 0x800703 <xTickCount>
 8f6:	90 91 04 07 	lds	r25, 0x0704	; 0x800704 <xTickCount+0x1>
 8fa:	01 96       	adiw	r24, 0x01	; 1
 8fc:	90 93 04 07 	sts	0x0704, r25	; 0x800704 <xTickCount+0x1>
 900:	80 93 03 07 	sts	0x0703, r24	; 0x800703 <xTickCount>
 904:	80 91 03 07 	lds	r24, 0x0703	; 0x800703 <xTickCount>
 908:	90 91 04 07 	lds	r25, 0x0704	; 0x800704 <xTickCount+0x1>
 90c:	89 2b       	or	r24, r25
 90e:	99 f5       	brne	.+102    	; 0x976 <vTaskIncrementTick+0x94>
 910:	80 91 1b 07 	lds	r24, 0x071B	; 0x80071b <pxDelayedTaskList>
 914:	90 91 1c 07 	lds	r25, 0x071C	; 0x80071c <pxDelayedTaskList+0x1>
 918:	20 91 19 07 	lds	r18, 0x0719	; 0x800719 <pxOverflowDelayedTaskList>
 91c:	30 91 1a 07 	lds	r19, 0x071A	; 0x80071a <pxOverflowDelayedTaskList+0x1>
 920:	30 93 1c 07 	sts	0x071C, r19	; 0x80071c <pxDelayedTaskList+0x1>
 924:	20 93 1b 07 	sts	0x071B, r18	; 0x80071b <pxDelayedTaskList>
 928:	90 93 1a 07 	sts	0x071A, r25	; 0x80071a <pxOverflowDelayedTaskList+0x1>
 92c:	80 93 19 07 	sts	0x0719, r24	; 0x800719 <pxOverflowDelayedTaskList>
 930:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <xNumOfOverflows>
 934:	8f 5f       	subi	r24, 0xFF	; 255
 936:	80 93 fc 06 	sts	0x06FC, r24	; 0x8006fc <xNumOfOverflows>
 93a:	e0 91 1b 07 	lds	r30, 0x071B	; 0x80071b <pxDelayedTaskList>
 93e:	f0 91 1c 07 	lds	r31, 0x071C	; 0x80071c <pxDelayedTaskList+0x1>
 942:	80 81       	ld	r24, Z
 944:	81 11       	cpse	r24, r1
 946:	07 c0       	rjmp	.+14     	; 0x956 <vTaskIncrementTick+0x74>
 948:	8f ef       	ldi	r24, 0xFF	; 255
 94a:	9f ef       	ldi	r25, 0xFF	; 255
 94c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 950:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 954:	10 c0       	rjmp	.+32     	; 0x976 <vTaskIncrementTick+0x94>
 956:	e0 91 1b 07 	lds	r30, 0x071B	; 0x80071b <pxDelayedTaskList>
 95a:	f0 91 1c 07 	lds	r31, 0x071C	; 0x80071c <pxDelayedTaskList+0x1>
 95e:	05 80       	ldd	r0, Z+5	; 0x05
 960:	f6 81       	ldd	r31, Z+6	; 0x06
 962:	e0 2d       	mov	r30, r0
 964:	06 80       	ldd	r0, Z+6	; 0x06
 966:	f7 81       	ldd	r31, Z+7	; 0x07
 968:	e0 2d       	mov	r30, r0
 96a:	82 81       	ldd	r24, Z+2	; 0x02
 96c:	93 81       	ldd	r25, Z+3	; 0x03
 96e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 972:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 976:	20 91 03 07 	lds	r18, 0x0703	; 0x800703 <xTickCount>
 97a:	30 91 04 07 	lds	r19, 0x0704	; 0x800704 <xTickCount+0x1>
 97e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 982:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 986:	28 17       	cp	r18, r24
 988:	39 07       	cpc	r19, r25
 98a:	08 f4       	brcc	.+2      	; 0x98e <vTaskIncrementTick+0xac>
 98c:	66 c0       	rjmp	.+204    	; 0xa5a <vTaskIncrementTick+0x178>
 98e:	e0 91 1b 07 	lds	r30, 0x071B	; 0x80071b <pxDelayedTaskList>
 992:	f0 91 1c 07 	lds	r31, 0x071C	; 0x80071c <pxDelayedTaskList+0x1>
 996:	80 81       	ld	r24, Z
 998:	88 23       	and	r24, r24
 99a:	99 f0       	breq	.+38     	; 0x9c2 <vTaskIncrementTick+0xe0>
 99c:	e0 91 1b 07 	lds	r30, 0x071B	; 0x80071b <pxDelayedTaskList>
 9a0:	f0 91 1c 07 	lds	r31, 0x071C	; 0x80071c <pxDelayedTaskList+0x1>
 9a4:	05 80       	ldd	r0, Z+5	; 0x05
 9a6:	f6 81       	ldd	r31, Z+6	; 0x06
 9a8:	e0 2d       	mov	r30, r0
 9aa:	c6 81       	ldd	r28, Z+6	; 0x06
 9ac:	d7 81       	ldd	r29, Z+7	; 0x07
 9ae:	8a 81       	ldd	r24, Y+2	; 0x02
 9b0:	9b 81       	ldd	r25, Y+3	; 0x03
 9b2:	20 91 03 07 	lds	r18, 0x0703	; 0x800703 <xTickCount>
 9b6:	30 91 04 07 	lds	r19, 0x0704	; 0x800704 <xTickCount+0x1>
 9ba:	28 17       	cp	r18, r24
 9bc:	39 07       	cpc	r19, r25
 9be:	f8 f4       	brcc	.+62     	; 0x9fe <vTaskIncrementTick+0x11c>
 9c0:	19 c0       	rjmp	.+50     	; 0x9f4 <vTaskIncrementTick+0x112>
 9c2:	8f ef       	ldi	r24, 0xFF	; 255
 9c4:	9f ef       	ldi	r25, 0xFF	; 255
 9c6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 9ca:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 9ce:	45 c0       	rjmp	.+138    	; 0xa5a <vTaskIncrementTick+0x178>
 9d0:	e0 91 1b 07 	lds	r30, 0x071B	; 0x80071b <pxDelayedTaskList>
 9d4:	f0 91 1c 07 	lds	r31, 0x071C	; 0x80071c <pxDelayedTaskList+0x1>
 9d8:	05 80       	ldd	r0, Z+5	; 0x05
 9da:	f6 81       	ldd	r31, Z+6	; 0x06
 9dc:	e0 2d       	mov	r30, r0
 9de:	c6 81       	ldd	r28, Z+6	; 0x06
 9e0:	d7 81       	ldd	r29, Z+7	; 0x07
 9e2:	8a 81       	ldd	r24, Y+2	; 0x02
 9e4:	9b 81       	ldd	r25, Y+3	; 0x03
 9e6:	20 91 03 07 	lds	r18, 0x0703	; 0x800703 <xTickCount>
 9ea:	30 91 04 07 	lds	r19, 0x0704	; 0x800704 <xTickCount+0x1>
 9ee:	28 17       	cp	r18, r24
 9f0:	39 07       	cpc	r19, r25
 9f2:	28 f4       	brcc	.+10     	; 0x9fe <vTaskIncrementTick+0x11c>
 9f4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 9f8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 9fc:	2e c0       	rjmp	.+92     	; 0xa5a <vTaskIncrementTick+0x178>
 9fe:	8e 01       	movw	r16, r28
 a00:	0e 5f       	subi	r16, 0xFE	; 254
 a02:	1f 4f       	sbci	r17, 0xFF	; 255
 a04:	c8 01       	movw	r24, r16
 a06:	f9 db       	rcall	.-2062   	; 0x1fa <vListRemove>
 a08:	8c 89       	ldd	r24, Y+20	; 0x14
 a0a:	9d 89       	ldd	r25, Y+21	; 0x15
 a0c:	89 2b       	or	r24, r25
 a0e:	19 f0       	breq	.+6      	; 0xa16 <vTaskIncrementTick+0x134>
 a10:	ce 01       	movw	r24, r28
 a12:	0c 96       	adiw	r24, 0x0c	; 12
 a14:	f2 db       	rcall	.-2076   	; 0x1fa <vListRemove>
 a16:	8e 89       	ldd	r24, Y+22	; 0x16
 a18:	90 91 01 07 	lds	r25, 0x0701	; 0x800701 <uxTopReadyPriority>
 a1c:	98 17       	cp	r25, r24
 a1e:	10 f4       	brcc	.+4      	; 0xa24 <vTaskIncrementTick+0x142>
 a20:	80 93 01 07 	sts	0x0701, r24	; 0x800701 <uxTopReadyPriority>
 a24:	90 e0       	ldi	r25, 0x00	; 0
 a26:	9c 01       	movw	r18, r24
 a28:	22 0f       	add	r18, r18
 a2a:	33 1f       	adc	r19, r19
 a2c:	22 0f       	add	r18, r18
 a2e:	33 1f       	adc	r19, r19
 a30:	22 0f       	add	r18, r18
 a32:	33 1f       	adc	r19, r19
 a34:	82 0f       	add	r24, r18
 a36:	93 1f       	adc	r25, r19
 a38:	b8 01       	movw	r22, r16
 a3a:	81 5d       	subi	r24, 0xD1	; 209
 a3c:	98 4f       	sbci	r25, 0xF8	; 248
 a3e:	7b db       	rcall	.-2314   	; 0x136 <vListInsertEnd>
 a40:	e0 91 1b 07 	lds	r30, 0x071B	; 0x80071b <pxDelayedTaskList>
 a44:	f0 91 1c 07 	lds	r31, 0x071C	; 0x80071c <pxDelayedTaskList+0x1>
 a48:	80 81       	ld	r24, Z
 a4a:	81 11       	cpse	r24, r1
 a4c:	c1 cf       	rjmp	.-126    	; 0x9d0 <vTaskIncrementTick+0xee>
 a4e:	b9 cf       	rjmp	.-142    	; 0x9c2 <vTaskIncrementTick+0xe0>
 a50:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <uxMissedTicks>
 a54:	8f 5f       	subi	r24, 0xFF	; 255
 a56:	80 93 fe 06 	sts	0x06FE, r24	; 0x8006fe <uxMissedTicks>
 a5a:	df 91       	pop	r29
 a5c:	cf 91       	pop	r28
 a5e:	1f 91       	pop	r17
 a60:	0f 91       	pop	r16
 a62:	08 95       	ret

00000a64 <xTaskResumeAll>:
 a64:	cf 92       	push	r12
 a66:	df 92       	push	r13
 a68:	ef 92       	push	r14
 a6a:	ff 92       	push	r15
 a6c:	0f 93       	push	r16
 a6e:	1f 93       	push	r17
 a70:	cf 93       	push	r28
 a72:	df 93       	push	r29
 a74:	0f b6       	in	r0, 0x3f	; 63
 a76:	f8 94       	cli
 a78:	0f 92       	push	r0
 a7a:	80 91 ff 06 	lds	r24, 0x06FF	; 0x8006ff <uxSchedulerSuspended>
 a7e:	81 50       	subi	r24, 0x01	; 1
 a80:	80 93 ff 06 	sts	0x06FF, r24	; 0x8006ff <uxSchedulerSuspended>
 a84:	80 91 ff 06 	lds	r24, 0x06FF	; 0x8006ff <uxSchedulerSuspended>
 a88:	81 11       	cpse	r24, r1
 a8a:	5f c0       	rjmp	.+190    	; 0xb4a <xTaskResumeAll+0xe6>
 a8c:	80 91 05 07 	lds	r24, 0x0705	; 0x800705 <uxCurrentNumberOfTasks>
 a90:	81 11       	cpse	r24, r1
 a92:	2f c0       	rjmp	.+94     	; 0xaf2 <xTaskResumeAll+0x8e>
 a94:	5d c0       	rjmp	.+186    	; 0xb50 <xTaskResumeAll+0xec>
 a96:	d7 01       	movw	r26, r14
 a98:	15 96       	adiw	r26, 0x05	; 5
 a9a:	ed 91       	ld	r30, X+
 a9c:	fc 91       	ld	r31, X
 a9e:	16 97       	sbiw	r26, 0x06	; 6
 aa0:	c6 81       	ldd	r28, Z+6	; 0x06
 aa2:	d7 81       	ldd	r29, Z+7	; 0x07
 aa4:	ce 01       	movw	r24, r28
 aa6:	0c 96       	adiw	r24, 0x0c	; 12
 aa8:	a8 db       	rcall	.-2224   	; 0x1fa <vListRemove>
 aaa:	8e 01       	movw	r16, r28
 aac:	0e 5f       	subi	r16, 0xFE	; 254
 aae:	1f 4f       	sbci	r17, 0xFF	; 255
 ab0:	c8 01       	movw	r24, r16
 ab2:	a3 db       	rcall	.-2234   	; 0x1fa <vListRemove>
 ab4:	8e 89       	ldd	r24, Y+22	; 0x16
 ab6:	90 91 01 07 	lds	r25, 0x0701	; 0x800701 <uxTopReadyPriority>
 aba:	98 17       	cp	r25, r24
 abc:	10 f4       	brcc	.+4      	; 0xac2 <xTaskResumeAll+0x5e>
 abe:	80 93 01 07 	sts	0x0701, r24	; 0x800701 <uxTopReadyPriority>
 ac2:	90 e0       	ldi	r25, 0x00	; 0
 ac4:	9c 01       	movw	r18, r24
 ac6:	22 0f       	add	r18, r18
 ac8:	33 1f       	adc	r19, r19
 aca:	22 0f       	add	r18, r18
 acc:	33 1f       	adc	r19, r19
 ace:	22 0f       	add	r18, r18
 ad0:	33 1f       	adc	r19, r19
 ad2:	82 0f       	add	r24, r18
 ad4:	93 1f       	adc	r25, r19
 ad6:	b8 01       	movw	r22, r16
 ad8:	81 5d       	subi	r24, 0xD1	; 209
 ada:	98 4f       	sbci	r25, 0xF8	; 248
 adc:	2c db       	rcall	.-2472   	; 0x136 <vListInsertEnd>
 ade:	e0 91 53 07 	lds	r30, 0x0753	; 0x800753 <pxCurrentTCB>
 ae2:	f0 91 54 07 	lds	r31, 0x0754	; 0x800754 <pxCurrentTCB+0x1>
 ae6:	9e 89       	ldd	r25, Y+22	; 0x16
 ae8:	86 89       	ldd	r24, Z+22	; 0x16
 aea:	98 17       	cp	r25, r24
 aec:	58 f0       	brcs	.+22     	; 0xb04 <xTaskResumeAll+0xa0>
 aee:	dc 2c       	mov	r13, r12
 af0:	09 c0       	rjmp	.+18     	; 0xb04 <xTaskResumeAll+0xa0>
 af2:	d1 2c       	mov	r13, r1
 af4:	0f 2e       	mov	r0, r31
 af6:	f0 e1       	ldi	r31, 0x10	; 16
 af8:	ef 2e       	mov	r14, r31
 afa:	f7 e0       	ldi	r31, 0x07	; 7
 afc:	ff 2e       	mov	r15, r31
 afe:	f0 2d       	mov	r31, r0
 b00:	cc 24       	eor	r12, r12
 b02:	c3 94       	inc	r12
 b04:	f7 01       	movw	r30, r14
 b06:	80 81       	ld	r24, Z
 b08:	81 11       	cpse	r24, r1
 b0a:	c5 cf       	rjmp	.-118    	; 0xa96 <xTaskResumeAll+0x32>
 b0c:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <uxMissedTicks>
 b10:	88 23       	and	r24, r24
 b12:	79 f0       	breq	.+30     	; 0xb32 <xTaskResumeAll+0xce>
 b14:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <uxMissedTicks>
 b18:	88 23       	and	r24, r24
 b1a:	91 f0       	breq	.+36     	; 0xb40 <xTaskResumeAll+0xdc>
 b1c:	e2 de       	rcall	.-572    	; 0x8e2 <vTaskIncrementTick>
 b1e:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <uxMissedTicks>
 b22:	81 50       	subi	r24, 0x01	; 1
 b24:	80 93 fe 06 	sts	0x06FE, r24	; 0x8006fe <uxMissedTicks>
 b28:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <uxMissedTicks>
 b2c:	81 11       	cpse	r24, r1
 b2e:	f6 cf       	rjmp	.-20     	; 0xb1c <xTaskResumeAll+0xb8>
 b30:	07 c0       	rjmp	.+14     	; 0xb40 <xTaskResumeAll+0xdc>
 b32:	f1 e0       	ldi	r31, 0x01	; 1
 b34:	df 16       	cp	r13, r31
 b36:	21 f0       	breq	.+8      	; 0xb40 <xTaskResumeAll+0xdc>
 b38:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <xMissedYield>
 b3c:	81 30       	cpi	r24, 0x01	; 1
 b3e:	39 f4       	brne	.+14     	; 0xb4e <xTaskResumeAll+0xea>
 b40:	10 92 fd 06 	sts	0x06FD, r1	; 0x8006fd <xMissedYield>
 b44:	c4 dc       	rcall	.-1656   	; 0x4ce <vPortYield>
 b46:	81 e0       	ldi	r24, 0x01	; 1
 b48:	03 c0       	rjmp	.+6      	; 0xb50 <xTaskResumeAll+0xec>
 b4a:	80 e0       	ldi	r24, 0x00	; 0
 b4c:	01 c0       	rjmp	.+2      	; 0xb50 <xTaskResumeAll+0xec>
 b4e:	80 e0       	ldi	r24, 0x00	; 0
 b50:	0f 90       	pop	r0
 b52:	0f be       	out	0x3f, r0	; 63
 b54:	df 91       	pop	r29
 b56:	cf 91       	pop	r28
 b58:	1f 91       	pop	r17
 b5a:	0f 91       	pop	r16
 b5c:	ff 90       	pop	r15
 b5e:	ef 90       	pop	r14
 b60:	df 90       	pop	r13
 b62:	cf 90       	pop	r12
 b64:	08 95       	ret

00000b66 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
 b66:	cf 93       	push	r28
 b68:	df 93       	push	r29
 b6a:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
 b6c:	89 2b       	or	r24, r25
 b6e:	91 f0       	breq	.+36     	; 0xb94 <vTaskDelay+0x2e>
		{
			vTaskSuspendAll();
 b70:	b2 de       	rcall	.-668    	; 0x8d6 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 b72:	80 91 03 07 	lds	r24, 0x0703	; 0x800703 <xTickCount>
 b76:	90 91 04 07 	lds	r25, 0x0704	; 0x800704 <xTickCount+0x1>
 b7a:	c8 0f       	add	r28, r24
 b7c:	d9 1f       	adc	r29, r25

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 b7e:	80 91 53 07 	lds	r24, 0x0753	; 0x800753 <pxCurrentTCB>
 b82:	90 91 54 07 	lds	r25, 0x0754	; 0x800754 <pxCurrentTCB+0x1>
 b86:	02 96       	adiw	r24, 0x02	; 2
 b88:	38 db       	rcall	.-2448   	; 0x1fa <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 b8a:	ce 01       	movw	r24, r28
 b8c:	53 dd       	rcall	.-1370   	; 0x634 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 b8e:	6a df       	rcall	.-300    	; 0xa64 <xTaskResumeAll>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 b90:	81 11       	cpse	r24, r1
 b92:	01 c0       	rjmp	.+2      	; 0xb96 <vTaskDelay+0x30>
		{
			portYIELD_WITHIN_API();
 b94:	9c dc       	rcall	.-1736   	; 0x4ce <vPortYield>
 b96:	df 91       	pop	r29
		}
	}
 b98:	cf 91       	pop	r28
 b9a:	08 95       	ret

00000b9c <prvIdleTask>:
 b9c:	0f 2e       	mov	r0, r31
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 b9e:	f7 e0       	ldi	r31, 0x07	; 7
 ba0:	ef 2e       	mov	r14, r31
 ba2:	f7 e0       	ldi	r31, 0x07	; 7
 ba4:	ff 2e       	mov	r15, r31
 ba6:	f0 2d       	mov	r31, r0

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 ba8:	cf e2       	ldi	r28, 0x2F	; 47
 baa:	d7 e0       	ldi	r29, 0x07	; 7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 bac:	80 91 06 07 	lds	r24, 0x0706	; 0x800706 <uxTasksDeleted>
 bb0:	88 23       	and	r24, r24
 bb2:	29 f1       	breq	.+74     	; 0xbfe <prvIdleTask+0x62>
		{
			vTaskSuspendAll();
 bb4:	90 de       	rcall	.-736    	; 0x8d6 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 bb6:	d7 01       	movw	r26, r14
			xTaskResumeAll();
 bb8:	1c 91       	ld	r17, X
 bba:	54 df       	rcall	.-344    	; 0xa64 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 bbc:	11 23       	and	r17, r17
 bbe:	f9 f0       	breq	.+62     	; 0xbfe <prvIdleTask+0x62>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 bc0:	0f b6       	in	r0, 0x3f	; 63
 bc2:	f8 94       	cli
 bc4:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 bc6:	d7 01       	movw	r26, r14
 bc8:	15 96       	adiw	r26, 0x05	; 5
 bca:	ed 91       	ld	r30, X+
 bcc:	fc 91       	ld	r31, X
 bce:	16 97       	sbiw	r26, 0x06	; 6
 bd0:	06 81       	ldd	r16, Z+6	; 0x06
 bd2:	17 81       	ldd	r17, Z+7	; 0x07
					vListRemove( &( pxTCB->xGenericListItem ) );
 bd4:	c8 01       	movw	r24, r16
 bd6:	02 96       	adiw	r24, 0x02	; 2
 bd8:	10 db       	rcall	.-2528   	; 0x1fa <vListRemove>
					--uxCurrentNumberOfTasks;
 bda:	80 91 05 07 	lds	r24, 0x0705	; 0x800705 <uxCurrentNumberOfTasks>
 bde:	81 50       	subi	r24, 0x01	; 1
 be0:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <uxCurrentNumberOfTasks>
					--uxTasksDeleted;
 be4:	80 91 06 07 	lds	r24, 0x0706	; 0x800706 <uxTasksDeleted>
 be8:	81 50       	subi	r24, 0x01	; 1
 bea:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <uxTasksDeleted>
				}
				taskEXIT_CRITICAL();
 bee:	0f 90       	pop	r0
 bf0:	0f be       	out	0x3f, r0	; 63
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 bf2:	f8 01       	movw	r30, r16
 bf4:	87 89       	ldd	r24, Z+23	; 0x17
 bf6:	90 8d       	ldd	r25, Z+24	; 0x18
		vPortFree( pxTCB );
 bf8:	8b da       	rcall	.-2794   	; 0x110 <vPortFree>
 bfa:	c8 01       	movw	r24, r16

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 bfc:	89 da       	rcall	.-2798   	; 0x110 <vPortFree>
 bfe:	88 81       	ld	r24, Y
 c00:	82 30       	cpi	r24, 0x02	; 2
			{
				taskYIELD();
 c02:	a0 f2       	brcs	.-88     	; 0xbac <prvIdleTask+0x10>
 c04:	64 dc       	rcall	.-1848   	; 0x4ce <vPortYield>
 c06:	d2 cf       	rjmp	.-92     	; 0xbac <prvIdleTask+0x10>

00000c08 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 c08:	80 91 ff 06 	lds	r24, 0x06FF	; 0x8006ff <uxSchedulerSuspended>
 c0c:	81 11       	cpse	r24, r1
 c0e:	13 c0       	rjmp	.+38     	; 0xc36 <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 c10:	80 91 01 07 	lds	r24, 0x0701	; 0x800701 <uxTopReadyPriority>
 c14:	90 e0       	ldi	r25, 0x00	; 0
 c16:	fc 01       	movw	r30, r24
 c18:	ee 0f       	add	r30, r30
 c1a:	ff 1f       	adc	r31, r31
 c1c:	ee 0f       	add	r30, r30
 c1e:	ff 1f       	adc	r31, r31
 c20:	ee 0f       	add	r30, r30
 c22:	ff 1f       	adc	r31, r31
 c24:	8e 0f       	add	r24, r30
 c26:	9f 1f       	adc	r25, r31
 c28:	fc 01       	movw	r30, r24
 c2a:	e1 5d       	subi	r30, 0xD1	; 209
 c2c:	f8 4f       	sbci	r31, 0xF8	; 248
 c2e:	80 81       	ld	r24, Z
 c30:	88 23       	and	r24, r24
 c32:	29 f0       	breq	.+10     	; 0xc3e <vTaskSwitchContext+0x36>
 c34:	1b c0       	rjmp	.+54     	; 0xc6c <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 c36:	81 e0       	ldi	r24, 0x01	; 1
 c38:	80 93 fd 06 	sts	0x06FD, r24	; 0x8006fd <xMissedYield>
 c3c:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
 c3e:	80 91 01 07 	lds	r24, 0x0701	; 0x800701 <uxTopReadyPriority>
 c42:	81 50       	subi	r24, 0x01	; 1
 c44:	80 93 01 07 	sts	0x0701, r24	; 0x800701 <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 c48:	80 91 01 07 	lds	r24, 0x0701	; 0x800701 <uxTopReadyPriority>
 c4c:	90 e0       	ldi	r25, 0x00	; 0
 c4e:	fc 01       	movw	r30, r24
 c50:	ee 0f       	add	r30, r30
 c52:	ff 1f       	adc	r31, r31
 c54:	ee 0f       	add	r30, r30
 c56:	ff 1f       	adc	r31, r31
 c58:	ee 0f       	add	r30, r30
 c5a:	ff 1f       	adc	r31, r31
 c5c:	8e 0f       	add	r24, r30
 c5e:	9f 1f       	adc	r25, r31
 c60:	fc 01       	movw	r30, r24
 c62:	e1 5d       	subi	r30, 0xD1	; 209
 c64:	f8 4f       	sbci	r31, 0xF8	; 248
 c66:	80 81       	ld	r24, Z
 c68:	88 23       	and	r24, r24
 c6a:	49 f3       	breq	.-46     	; 0xc3e <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 c6c:	80 91 01 07 	lds	r24, 0x0701	; 0x800701 <uxTopReadyPriority>
 c70:	90 e0       	ldi	r25, 0x00	; 0
 c72:	9c 01       	movw	r18, r24
 c74:	22 0f       	add	r18, r18
 c76:	33 1f       	adc	r19, r19
 c78:	22 0f       	add	r18, r18
 c7a:	33 1f       	adc	r19, r19
 c7c:	22 0f       	add	r18, r18
 c7e:	33 1f       	adc	r19, r19
 c80:	28 0f       	add	r18, r24
 c82:	39 1f       	adc	r19, r25
 c84:	d9 01       	movw	r26, r18
 c86:	a1 5d       	subi	r26, 0xD1	; 209
 c88:	b8 4f       	sbci	r27, 0xF8	; 248
 c8a:	11 96       	adiw	r26, 0x01	; 1
 c8c:	ed 91       	ld	r30, X+
 c8e:	fc 91       	ld	r31, X
 c90:	12 97       	sbiw	r26, 0x02	; 2
 c92:	02 80       	ldd	r0, Z+2	; 0x02
 c94:	f3 81       	ldd	r31, Z+3	; 0x03
 c96:	e0 2d       	mov	r30, r0
 c98:	12 96       	adiw	r26, 0x02	; 2
 c9a:	fc 93       	st	X, r31
 c9c:	ee 93       	st	-X, r30
 c9e:	11 97       	sbiw	r26, 0x01	; 1
 ca0:	2e 5c       	subi	r18, 0xCE	; 206
 ca2:	38 4f       	sbci	r19, 0xF8	; 248
 ca4:	e2 17       	cp	r30, r18
 ca6:	f3 07       	cpc	r31, r19
 ca8:	29 f4       	brne	.+10     	; 0xcb4 <vTaskSwitchContext+0xac>
 caa:	22 81       	ldd	r18, Z+2	; 0x02
 cac:	33 81       	ldd	r19, Z+3	; 0x03
 cae:	fd 01       	movw	r30, r26
 cb0:	32 83       	std	Z+2, r19	; 0x02
 cb2:	21 83       	std	Z+1, r18	; 0x01
 cb4:	fc 01       	movw	r30, r24
 cb6:	ee 0f       	add	r30, r30
 cb8:	ff 1f       	adc	r31, r31
 cba:	ee 0f       	add	r30, r30
 cbc:	ff 1f       	adc	r31, r31
 cbe:	ee 0f       	add	r30, r30
 cc0:	ff 1f       	adc	r31, r31
 cc2:	8e 0f       	add	r24, r30
 cc4:	9f 1f       	adc	r25, r31
 cc6:	fc 01       	movw	r30, r24
 cc8:	e1 5d       	subi	r30, 0xD1	; 209
 cca:	f8 4f       	sbci	r31, 0xF8	; 248
 ccc:	01 80       	ldd	r0, Z+1	; 0x01
 cce:	f2 81       	ldd	r31, Z+2	; 0x02
 cd0:	e0 2d       	mov	r30, r0
 cd2:	86 81       	ldd	r24, Z+6	; 0x06
 cd4:	97 81       	ldd	r25, Z+7	; 0x07
 cd6:	90 93 54 07 	sts	0x0754, r25	; 0x800754 <pxCurrentTCB+0x1>
 cda:	80 93 53 07 	sts	0x0753, r24	; 0x800753 <pxCurrentTCB>
 cde:	08 95       	ret

00000ce0 <memset>:
 ce0:	dc 01       	movw	r26, r24
 ce2:	01 c0       	rjmp	.+2      	; 0xce6 <memset+0x6>
 ce4:	6d 93       	st	X+, r22
 ce6:	41 50       	subi	r20, 0x01	; 1
 ce8:	50 40       	sbci	r21, 0x00	; 0
 cea:	e0 f7       	brcc	.-8      	; 0xce4 <memset+0x4>
 cec:	08 95       	ret

00000cee <strncpy>:
 cee:	fb 01       	movw	r30, r22
 cf0:	dc 01       	movw	r26, r24
 cf2:	41 50       	subi	r20, 0x01	; 1
 cf4:	50 40       	sbci	r21, 0x00	; 0
 cf6:	48 f0       	brcs	.+18     	; 0xd0a <strncpy+0x1c>
 cf8:	01 90       	ld	r0, Z+
 cfa:	0d 92       	st	X+, r0
 cfc:	00 20       	and	r0, r0
 cfe:	c9 f7       	brne	.-14     	; 0xcf2 <strncpy+0x4>
 d00:	01 c0       	rjmp	.+2      	; 0xd04 <strncpy+0x16>
 d02:	1d 92       	st	X+, r1
 d04:	41 50       	subi	r20, 0x01	; 1
 d06:	50 40       	sbci	r21, 0x00	; 0
 d08:	e0 f7       	brcc	.-8      	; 0xd02 <strncpy+0x14>
 d0a:	08 95       	ret

00000d0c <_exit>:
 d0c:	f8 94       	cli

00000d0e <__stop_program>:
 d0e:	ff cf       	rjmp	.-2      	; 0xd0e <__stop_program>
