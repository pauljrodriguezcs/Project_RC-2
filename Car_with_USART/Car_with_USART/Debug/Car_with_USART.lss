
Car_with_USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800100  000010f4  00001188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000648  00800148  00800148  000011d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001200  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000270  00000000  00000000  00001240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002974  00000000  00000000  000014b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000100f  00000000  00000000  00003e24  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a10  00000000  00000000  00004e33  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000658  00000000  00000000  00006844  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f9c  00000000  00000000  00006e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000164c  00000000  00000000  00007e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000268  00000000  00000000  00009484  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	ef c4       	rjmp	.+2526   	; 0xa14 <__vector_13>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e4 ef       	ldi	r30, 0xF4	; 244
      a0:	f0 e1       	ldi	r31, 0x10	; 16
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a8 34       	cpi	r26, 0x48	; 72
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	27 e0       	ldi	r18, 0x07	; 7
      b4:	a8 e4       	ldi	r26, 0x48	; 72
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a0 39       	cpi	r26, 0x90	; 144
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	3b d3       	rcall	.+1654   	; 0x73a <main>
      c4:	0c 94 78 08 	jmp	0x10f0	; 0x10f0 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
      d0:	f4 d5       	rcall	.+3048   	; 0xcba <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
      d2:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <__data_end>
      d6:	30 91 49 01 	lds	r19, 0x0149	; 0x800149 <__data_end+0x1>
      da:	c9 01       	movw	r24, r18
      dc:	8c 0f       	add	r24, r28
      de:	9d 1f       	adc	r25, r29
      e0:	8c 3d       	cpi	r24, 0xDC	; 220
      e2:	45 e0       	ldi	r20, 0x05	; 5
      e4:	94 07       	cpc	r25, r20
      e6:	58 f4       	brcc	.+22     	; 0xfe <pvPortMalloc+0x34>
      e8:	28 17       	cp	r18, r24
      ea:	39 07       	cpc	r19, r25
      ec:	58 f4       	brcc	.+22     	; 0x104 <pvPortMalloc+0x3a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
      ee:	e9 01       	movw	r28, r18
      f0:	c6 5b       	subi	r28, 0xB6	; 182
      f2:	de 4f       	sbci	r29, 0xFE	; 254
			xNextFreeByte += xWantedSize;			
      f4:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <__data_end+0x1>
      f8:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <__data_end>
      fc:	05 c0       	rjmp	.+10     	; 0x108 <pvPortMalloc+0x3e>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
      fe:	c0 e0       	ldi	r28, 0x00	; 0
     100:	d0 e0       	ldi	r29, 0x00	; 0
     102:	02 c0       	rjmp	.+4      	; 0x108 <pvPortMalloc+0x3e>
     104:	c0 e0       	ldi	r28, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
     106:	d0 e0       	ldi	r29, 0x00	; 0
     108:	9f d6       	rcall	.+3390   	; 0xe48 <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
     10a:	ce 01       	movw	r24, r28
     10c:	df 91       	pop	r29
     10e:	cf 91       	pop	r28
     110:	08 95       	ret

00000112 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     112:	08 95       	ret

00000114 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
     114:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
     116:	03 96       	adiw	r24, 0x03	; 3
     118:	92 83       	std	Z+2, r25	; 0x02
     11a:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     11c:	2f ef       	ldi	r18, 0xFF	; 255
     11e:	3f ef       	ldi	r19, 0xFF	; 255
     120:	34 83       	std	Z+4, r19	; 0x04
     122:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
     124:	96 83       	std	Z+6, r25	; 0x06
     126:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
     128:	90 87       	std	Z+8, r25	; 0x08
     12a:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
     12c:	10 82       	st	Z, r1
     12e:	08 95       	ret

00000130 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     130:	fc 01       	movw	r30, r24
     132:	11 86       	std	Z+9, r1	; 0x09
     134:	10 86       	std	Z+8, r1	; 0x08
     136:	08 95       	ret

00000138 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
     138:	cf 93       	push	r28
     13a:	df 93       	push	r29
     13c:	fc 01       	movw	r30, r24
     13e:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     140:	21 81       	ldd	r18, Z+1	; 0x01
     142:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
     144:	e9 01       	movw	r28, r18
     146:	8a 81       	ldd	r24, Y+2	; 0x02
     148:	9b 81       	ldd	r25, Y+3	; 0x03
     14a:	13 96       	adiw	r26, 0x03	; 3
     14c:	9c 93       	st	X, r25
     14e:	8e 93       	st	-X, r24
     150:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
     152:	81 81       	ldd	r24, Z+1	; 0x01
     154:	92 81       	ldd	r25, Z+2	; 0x02
     156:	15 96       	adiw	r26, 0x05	; 5
     158:	9c 93       	st	X, r25
     15a:	8e 93       	st	-X, r24
     15c:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     15e:	8a 81       	ldd	r24, Y+2	; 0x02
     160:	9b 81       	ldd	r25, Y+3	; 0x03
     162:	ec 01       	movw	r28, r24
     164:	7d 83       	std	Y+5, r23	; 0x05
     166:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     168:	e9 01       	movw	r28, r18
     16a:	7b 83       	std	Y+3, r23	; 0x03
     16c:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     16e:	72 83       	std	Z+2, r23	; 0x02
     170:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     172:	19 96       	adiw	r26, 0x09	; 9
     174:	fc 93       	st	X, r31
     176:	ee 93       	st	-X, r30
     178:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
     17a:	80 81       	ld	r24, Z
     17c:	8f 5f       	subi	r24, 0xFF	; 255
     17e:	80 83       	st	Z, r24
}
     180:	df 91       	pop	r29
     182:	cf 91       	pop	r28
     184:	08 95       	ret

00000186 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
     186:	cf 93       	push	r28
     188:	df 93       	push	r29
     18a:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
     18c:	48 81       	ld	r20, Y
     18e:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     190:	4f 3f       	cpi	r20, 0xFF	; 255
     192:	2f ef       	ldi	r18, 0xFF	; 255
     194:	52 07       	cpc	r21, r18
     196:	31 f4       	brne	.+12     	; 0x1a4 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     198:	dc 01       	movw	r26, r24
     19a:	17 96       	adiw	r26, 0x07	; 7
     19c:	ed 91       	ld	r30, X+
     19e:	fc 91       	ld	r31, X
     1a0:	18 97       	sbiw	r26, 0x08	; 8
     1a2:	17 c0       	rjmp	.+46     	; 0x1d2 <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     1a4:	fc 01       	movw	r30, r24
     1a6:	33 96       	adiw	r30, 0x03	; 3
     1a8:	dc 01       	movw	r26, r24
     1aa:	15 96       	adiw	r26, 0x05	; 5
     1ac:	2d 91       	ld	r18, X+
     1ae:	3c 91       	ld	r19, X
     1b0:	16 97       	sbiw	r26, 0x06	; 6
     1b2:	d9 01       	movw	r26, r18
     1b4:	2d 91       	ld	r18, X+
     1b6:	3c 91       	ld	r19, X
     1b8:	42 17       	cp	r20, r18
     1ba:	53 07       	cpc	r21, r19
     1bc:	50 f0       	brcs	.+20     	; 0x1d2 <vListInsert+0x4c>
     1be:	02 80       	ldd	r0, Z+2	; 0x02
     1c0:	f3 81       	ldd	r31, Z+3	; 0x03
     1c2:	e0 2d       	mov	r30, r0
     1c4:	a2 81       	ldd	r26, Z+2	; 0x02
     1c6:	b3 81       	ldd	r27, Z+3	; 0x03
     1c8:	2d 91       	ld	r18, X+
     1ca:	3c 91       	ld	r19, X
     1cc:	42 17       	cp	r20, r18
     1ce:	53 07       	cpc	r21, r19
     1d0:	b0 f7       	brcc	.-20     	; 0x1be <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     1d2:	a2 81       	ldd	r26, Z+2	; 0x02
     1d4:	b3 81       	ldd	r27, Z+3	; 0x03
     1d6:	bb 83       	std	Y+3, r27	; 0x03
     1d8:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     1da:	15 96       	adiw	r26, 0x05	; 5
     1dc:	dc 93       	st	X, r29
     1de:	ce 93       	st	-X, r28
     1e0:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
     1e2:	fd 83       	std	Y+5, r31	; 0x05
     1e4:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
     1e6:	d3 83       	std	Z+3, r29	; 0x03
     1e8:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     1ea:	99 87       	std	Y+9, r25	; 0x09
     1ec:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     1ee:	fc 01       	movw	r30, r24
     1f0:	20 81       	ld	r18, Z
     1f2:	2f 5f       	subi	r18, 0xFF	; 255
     1f4:	20 83       	st	Z, r18
}
     1f6:	df 91       	pop	r29
     1f8:	cf 91       	pop	r28
     1fa:	08 95       	ret

000001fc <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
     1fc:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     1fe:	a2 81       	ldd	r26, Z+2	; 0x02
     200:	b3 81       	ldd	r27, Z+3	; 0x03
     202:	84 81       	ldd	r24, Z+4	; 0x04
     204:	95 81       	ldd	r25, Z+5	; 0x05
     206:	15 96       	adiw	r26, 0x05	; 5
     208:	9c 93       	st	X, r25
     20a:	8e 93       	st	-X, r24
     20c:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     20e:	a4 81       	ldd	r26, Z+4	; 0x04
     210:	b5 81       	ldd	r27, Z+5	; 0x05
     212:	82 81       	ldd	r24, Z+2	; 0x02
     214:	93 81       	ldd	r25, Z+3	; 0x03
     216:	13 96       	adiw	r26, 0x03	; 3
     218:	9c 93       	st	X, r25
     21a:	8e 93       	st	-X, r24
     21c:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     21e:	a0 85       	ldd	r26, Z+8	; 0x08
     220:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     222:	11 96       	adiw	r26, 0x01	; 1
     224:	8d 91       	ld	r24, X+
     226:	9c 91       	ld	r25, X
     228:	12 97       	sbiw	r26, 0x02	; 2
     22a:	e8 17       	cp	r30, r24
     22c:	f9 07       	cpc	r31, r25
     22e:	31 f4       	brne	.+12     	; 0x23c <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     230:	84 81       	ldd	r24, Z+4	; 0x04
     232:	95 81       	ldd	r25, Z+5	; 0x05
     234:	12 96       	adiw	r26, 0x02	; 2
     236:	9c 93       	st	X, r25
     238:	8e 93       	st	-X, r24
     23a:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
     23c:	11 86       	std	Z+9, r1	; 0x09
     23e:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     240:	8c 91       	ld	r24, X
     242:	81 50       	subi	r24, 0x01	; 1
     244:	8c 93       	st	X, r24
     246:	08 95       	ret

00000248 <adc_init>:

//-------------------------------------------------- Start ServoMotor SM --------------------------------------------------//


void SERVO_Init(){
	servo_state = servo_init;
     248:	80 e4       	ldi	r24, 0x40	; 64
     24a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     24e:	87 e8       	ldi	r24, 0x87	; 135
     250:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     254:	08 95       	ret

00000256 <initUSART>:
     256:	81 30       	cpi	r24, 0x01	; 1
     258:	81 f0       	breq	.+32     	; 0x27a <initUSART+0x24>
     25a:	e1 ec       	ldi	r30, 0xC1	; 193
     25c:	f0 e0       	ldi	r31, 0x00	; 0
     25e:	80 81       	ld	r24, Z
     260:	88 61       	ori	r24, 0x18	; 24
     262:	80 83       	st	Z, r24
     264:	e2 ec       	ldi	r30, 0xC2	; 194
     266:	f0 e0       	ldi	r31, 0x00	; 0
     268:	80 81       	ld	r24, Z
     26a:	86 60       	ori	r24, 0x06	; 6
     26c:	80 83       	st	Z, r24
     26e:	83 e3       	ldi	r24, 0x33	; 51
     270:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     274:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     278:	08 95       	ret
     27a:	e9 ec       	ldi	r30, 0xC9	; 201
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	80 81       	ld	r24, Z
     280:	88 61       	ori	r24, 0x18	; 24
     282:	80 83       	st	Z, r24
     284:	ea ec       	ldi	r30, 0xCA	; 202
     286:	f0 e0       	ldi	r31, 0x00	; 0
     288:	80 81       	ld	r24, Z
     28a:	86 60       	ori	r24, 0x06	; 6
     28c:	80 83       	st	Z, r24
     28e:	83 e3       	ldi	r24, 0x33	; 51
     290:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
     294:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     298:	08 95       	ret

0000029a <USART_Flush>:
     29a:	81 30       	cpi	r24, 0x01	; 1
     29c:	29 f4       	brne	.+10     	; 0x2a8 <USART_Flush+0xe>
     29e:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     2a2:	88 23       	and	r24, r24
     2a4:	74 f0       	brlt	.+28     	; 0x2c2 <USART_Flush+0x28>
     2a6:	08 95       	ret
     2a8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     2ac:	88 23       	and	r24, r24
     2ae:	8c f4       	brge	.+34     	; 0x2d2 <USART_Flush+0x38>
     2b0:	a6 ec       	ldi	r26, 0xC6	; 198
     2b2:	b0 e0       	ldi	r27, 0x00	; 0
     2b4:	e0 ec       	ldi	r30, 0xC0	; 192
     2b6:	f0 e0       	ldi	r31, 0x00	; 0
     2b8:	8c 91       	ld	r24, X
     2ba:	80 81       	ld	r24, Z
     2bc:	88 23       	and	r24, r24
     2be:	e4 f3       	brlt	.-8      	; 0x2b8 <USART_Flush+0x1e>
     2c0:	08 95       	ret
     2c2:	ae ec       	ldi	r26, 0xCE	; 206
     2c4:	b0 e0       	ldi	r27, 0x00	; 0
     2c6:	e8 ec       	ldi	r30, 0xC8	; 200
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	8c 91       	ld	r24, X
     2cc:	80 81       	ld	r24, Z
     2ce:	88 23       	and	r24, r24
     2d0:	e4 f3       	brlt	.-8      	; 0x2ca <USART_Flush+0x30>
     2d2:	08 95       	ret

000002d4 <USART_Receive>:
     2d4:	81 30       	cpi	r24, 0x01	; 1
     2d6:	41 f0       	breq	.+16     	; 0x2e8 <USART_Receive+0x14>
     2d8:	e0 ec       	ldi	r30, 0xC0	; 192
     2da:	f0 e0       	ldi	r31, 0x00	; 0
     2dc:	80 81       	ld	r24, Z
     2de:	88 23       	and	r24, r24
     2e0:	ec f7       	brge	.-6      	; 0x2dc <USART_Receive+0x8>
     2e2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     2e6:	08 95       	ret
     2e8:	e8 ec       	ldi	r30, 0xC8	; 200
     2ea:	f0 e0       	ldi	r31, 0x00	; 0
     2ec:	80 81       	ld	r24, Z
     2ee:	88 23       	and	r24, r24
     2f0:	ec f7       	brge	.-6      	; 0x2ec <USART_Receive+0x18>
     2f2:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     2f6:	08 95       	ret

000002f8 <TRANSMISSION_Tick>:
     2f8:	af 92       	push	r10
     2fa:	bf 92       	push	r11
     2fc:	cf 92       	push	r12
     2fe:	df 92       	push	r13
     300:	ef 92       	push	r14
     302:	ff 92       	push	r15
     304:	0f 93       	push	r16
     306:	1f 93       	push	r17
     308:	cf 93       	push	r28
     30a:	df 93       	push	r29
     30c:	80 91 8c 07 	lds	r24, 0x078C	; 0x80078c <transmission_state>
     310:	81 30       	cpi	r24, 0x01	; 1
     312:	09 f0       	breq	.+2      	; 0x316 <TRANSMISSION_Tick+0x1e>
     314:	8e c0       	rjmp	.+284    	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	dd df       	rcall	.-70     	; 0x2d4 <USART_Receive>
     31a:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <data_recieved>
     31e:	80 e0       	ldi	r24, 0x00	; 0
     320:	bc df       	rcall	.-136    	; 0x29a <USART_Flush>
     322:	20 91 26 07 	lds	r18, 0x0726	; 0x800726 <data_recieved>
     326:	22 fb       	bst	r18, 2
     328:	00 27       	eor	r16, r16
     32a:	00 f9       	bld	r16, 0
     32c:	10 e0       	ldi	r17, 0x00	; 0
     32e:	01 2b       	or	r16, r17
     330:	19 f1       	breq	.+70     	; 0x378 <TRANSMISSION_Tick+0x80>
     332:	31 e0       	ldi	r19, 0x01	; 1
     334:	30 93 2e 07 	sts	0x072E, r19	; 0x80072e <going_reverse>
     338:	32 2f       	mov	r19, r18
     33a:	31 70       	andi	r19, 0x01	; 1
     33c:	21 fb       	bst	r18, 1
     33e:	aa 24       	eor	r10, r10
     340:	a0 f8       	bld	r10, 0
     342:	b1 2c       	mov	r11, r1
     344:	a1 14       	cp	r10, r1
     346:	b1 04       	cpc	r11, r1
     348:	31 f4       	brne	.+12     	; 0x356 <TRANSMISSION_Tick+0x5e>
     34a:	33 23       	and	r19, r19
     34c:	91 f0       	breq	.+36     	; 0x372 <TRANSMISSION_Tick+0x7a>
     34e:	81 e0       	ldi	r24, 0x01	; 1
     350:	80 93 30 07 	sts	0x0730, r24	; 0x800730 <reverse>
     354:	39 c0       	rjmp	.+114    	; 0x3c8 <TRANSMISSION_Tick+0xd0>
     356:	ab 28       	or	r10, r11
     358:	61 f0       	breq	.+24     	; 0x372 <TRANSMISSION_Tick+0x7a>
     35a:	31 11       	cpse	r19, r1
     35c:	04 c0       	rjmp	.+8      	; 0x366 <TRANSMISSION_Tick+0x6e>
     35e:	82 e0       	ldi	r24, 0x02	; 2
     360:	80 93 30 07 	sts	0x0730, r24	; 0x800730 <reverse>
     364:	31 c0       	rjmp	.+98     	; 0x3c8 <TRANSMISSION_Tick+0xd0>
     366:	33 23       	and	r19, r19
     368:	21 f0       	breq	.+8      	; 0x372 <TRANSMISSION_Tick+0x7a>
     36a:	83 e0       	ldi	r24, 0x03	; 3
     36c:	80 93 30 07 	sts	0x0730, r24	; 0x800730 <reverse>
     370:	2b c0       	rjmp	.+86     	; 0x3c8 <TRANSMISSION_Tick+0xd0>
     372:	10 92 30 07 	sts	0x0730, r1	; 0x800730 <reverse>
     376:	28 c0       	rjmp	.+80     	; 0x3c8 <TRANSMISSION_Tick+0xd0>
     378:	31 e0       	ldi	r19, 0x01	; 1
     37a:	30 93 2f 07 	sts	0x072F, r19	; 0x80072f <going_forward>
     37e:	32 2f       	mov	r19, r18
     380:	31 70       	andi	r19, 0x01	; 1
     382:	21 fb       	bst	r18, 1
     384:	cc 24       	eor	r12, r12
     386:	c0 f8       	bld	r12, 0
     388:	d1 2c       	mov	r13, r1
     38a:	c1 14       	cp	r12, r1
     38c:	d1 04       	cpc	r13, r1
     38e:	31 f4       	brne	.+12     	; 0x39c <TRANSMISSION_Tick+0xa4>
     390:	33 23       	and	r19, r19
     392:	91 f0       	breq	.+36     	; 0x3b8 <TRANSMISSION_Tick+0xc0>
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	80 93 31 07 	sts	0x0731, r24	; 0x800731 <throttle>
     39a:	16 c0       	rjmp	.+44     	; 0x3c8 <TRANSMISSION_Tick+0xd0>
     39c:	cd 28       	or	r12, r13
     39e:	61 f0       	breq	.+24     	; 0x3b8 <TRANSMISSION_Tick+0xc0>
     3a0:	31 11       	cpse	r19, r1
     3a2:	04 c0       	rjmp	.+8      	; 0x3ac <TRANSMISSION_Tick+0xb4>
     3a4:	82 e0       	ldi	r24, 0x02	; 2
     3a6:	80 93 31 07 	sts	0x0731, r24	; 0x800731 <throttle>
     3aa:	0e c0       	rjmp	.+28     	; 0x3c8 <TRANSMISSION_Tick+0xd0>
     3ac:	33 23       	and	r19, r19
     3ae:	21 f0       	breq	.+8      	; 0x3b8 <TRANSMISSION_Tick+0xc0>
     3b0:	83 e0       	ldi	r24, 0x03	; 3
     3b2:	80 93 31 07 	sts	0x0731, r24	; 0x800731 <throttle>
     3b6:	08 c0       	rjmp	.+16     	; 0x3c8 <TRANSMISSION_Tick+0xd0>
     3b8:	10 92 2f 07 	sts	0x072F, r1	; 0x80072f <going_forward>
     3bc:	10 92 2e 07 	sts	0x072E, r1	; 0x80072e <going_reverse>
     3c0:	10 92 31 07 	sts	0x0731, r1	; 0x800731 <throttle>
     3c4:	10 92 30 07 	sts	0x0730, r1	; 0x800730 <reverse>
     3c8:	80 91 26 07 	lds	r24, 0x0726	; 0x800726 <data_recieved>
     3cc:	21 e0       	ldi	r18, 0x01	; 1
     3ce:	83 fb       	bst	r24, 3
     3d0:	ee 24       	eor	r14, r14
     3d2:	e0 f8       	bld	r14, 0
     3d4:	f1 2c       	mov	r15, r1
     3d6:	83 ff       	sbrs	r24, 3
     3d8:	20 e0       	ldi	r18, 0x00	; 0
     3da:	20 93 28 07 	sts	0x0728, r18	; 0x800728 <bit_val_0>
     3de:	91 e0       	ldi	r25, 0x01	; 1
     3e0:	84 fb       	bst	r24, 4
     3e2:	22 27       	eor	r18, r18
     3e4:	20 f9       	bld	r18, 0
     3e6:	c2 2f       	mov	r28, r18
     3e8:	20 e0       	ldi	r18, 0x00	; 0
     3ea:	d2 2f       	mov	r29, r18
     3ec:	84 ff       	sbrs	r24, 4
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	90 93 27 07 	sts	0x0727, r25	; 0x800727 <bit_val_1>
     3f4:	20 97       	sbiw	r28, 0x00	; 0
     3f6:	59 f4       	brne	.+22     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     3f8:	ef 28       	or	r14, r15
     3fa:	a9 f0       	breq	.+42     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	80 93 2c 07 	sts	0x072C, r24	; 0x80072c <right>
     402:	10 92 2b 07 	sts	0x072B, r1	; 0x80072b <left>
     406:	82 e0       	ldi	r24, 0x02	; 2
     408:	80 93 2a 07 	sts	0x072A, r24	; 0x80072a <max_servo>
     40c:	12 c0       	rjmp	.+36     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     40e:	cd 2b       	or	r28, r29
     410:	51 f0       	breq	.+20     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     412:	ef 28       	or	r14, r15
     414:	41 f4       	brne	.+16     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     416:	10 92 2c 07 	sts	0x072C, r1	; 0x80072c <right>
     41a:	81 e0       	ldi	r24, 0x01	; 1
     41c:	80 93 2b 07 	sts	0x072B, r24	; 0x80072b <left>
     420:	80 93 2a 07 	sts	0x072A, r24	; 0x80072a <max_servo>
     424:	06 c0       	rjmp	.+12     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     426:	10 92 2c 07 	sts	0x072C, r1	; 0x80072c <right>
     42a:	10 92 2b 07 	sts	0x072B, r1	; 0x80072b <left>
     42e:	10 92 2a 07 	sts	0x072A, r1	; 0x80072a <max_servo>
     432:	80 91 8c 07 	lds	r24, 0x078C	; 0x80078c <transmission_state>
     436:	88 23       	and	r24, r24
     438:	19 f0       	breq	.+6      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     43a:	10 92 8c 07 	sts	0x078C, r1	; 0x80078c <transmission_state>
     43e:	07 c0       	rjmp	.+14     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     440:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     444:	88 23       	and	r24, r24
     446:	1c f4       	brge	.+6      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     448:	81 e0       	ldi	r24, 0x01	; 1
     44a:	80 93 8c 07 	sts	0x078C, r24	; 0x80078c <transmission_state>
     44e:	df 91       	pop	r29
     450:	cf 91       	pop	r28
     452:	1f 91       	pop	r17
     454:	0f 91       	pop	r16
     456:	ff 90       	pop	r15
     458:	ef 90       	pop	r14
     45a:	df 90       	pop	r13
     45c:	cf 90       	pop	r12
     45e:	bf 90       	pop	r11
     460:	af 90       	pop	r10
     462:	08 95       	ret

00000464 <TRANSMISSIONSecTask>:
     464:	10 92 8c 07 	sts	0x078C, r1	; 0x80078c <transmission_state>
     468:	47 df       	rcall	.-370    	; 0x2f8 <TRANSMISSION_Tick>
     46a:	83 e0       	ldi	r24, 0x03	; 3
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	6d d5       	rcall	.+2778   	; 0xf4a <vTaskDelay>
     470:	fb cf       	rjmp	.-10     	; 0x468 <TRANSMISSIONSecTask+0x4>

00000472 <TRANSMISSIONSecPulse>:
     472:	af 92       	push	r10
     474:	bf 92       	push	r11
     476:	cf 92       	push	r12
     478:	df 92       	push	r13
     47a:	ef 92       	push	r14
     47c:	ff 92       	push	r15
     47e:	0f 93       	push	r16
     480:	a1 2c       	mov	r10, r1
     482:	b1 2c       	mov	r11, r1
     484:	c1 2c       	mov	r12, r1
     486:	d1 2c       	mov	r13, r1
     488:	e1 2c       	mov	r14, r1
     48a:	f1 2c       	mov	r15, r1
     48c:	08 2f       	mov	r16, r24
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	30 e0       	ldi	r19, 0x00	; 0
     492:	45 e5       	ldi	r20, 0x55	; 85
     494:	50 e0       	ldi	r21, 0x00	; 0
     496:	63 e0       	ldi	r22, 0x03	; 3
     498:	71 e0       	ldi	r23, 0x01	; 1
     49a:	82 e3       	ldi	r24, 0x32	; 50
     49c:	92 e0       	ldi	r25, 0x02	; 2
     49e:	f1 d2       	rcall	.+1506   	; 0xa82 <xTaskGenericCreate>
     4a0:	0f 91       	pop	r16
     4a2:	ff 90       	pop	r15
     4a4:	ef 90       	pop	r14
     4a6:	df 90       	pop	r13
     4a8:	cf 90       	pop	r12
     4aa:	bf 90       	pop	r11
     4ac:	af 90       	pop	r10
     4ae:	08 95       	ret

000004b0 <FORWARD_Tick>:
     4b0:	80 91 8d 07 	lds	r24, 0x078D	; 0x80078d <forward_state>
     4b4:	81 30       	cpi	r24, 0x01	; 1
     4b6:	a9 f0       	breq	.+42     	; 0x4e2 <FORWARD_Tick+0x32>
     4b8:	18 f0       	brcs	.+6      	; 0x4c0 <FORWARD_Tick+0x10>
     4ba:	82 30       	cpi	r24, 0x02	; 2
     4bc:	59 f1       	breq	.+86     	; 0x514 <FORWARD_Tick+0x64>
     4be:	08 95       	ret
     4c0:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <going_forward>
     4c4:	88 23       	and	r24, r24
     4c6:	f1 f1       	breq	.+124    	; 0x544 <FORWARD_Tick+0x94>
     4c8:	91 e0       	ldi	r25, 0x01	; 1
     4ca:	90 93 8d 07 	sts	0x078D, r25	; 0x80078d <forward_state>
     4ce:	20 91 31 07 	lds	r18, 0x0731	; 0x800731 <throttle>
     4d2:	83 e0       	ldi	r24, 0x03	; 3
     4d4:	82 1b       	sub	r24, r18
     4d6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     4da:	10 92 2d 07 	sts	0x072D, r1	; 0x80072d <pwm_counter>
     4de:	98 b9       	out	0x08, r25	; 8
     4e0:	08 95       	ret
     4e2:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <going_forward>
     4e6:	88 23       	and	r24, r24
     4e8:	89 f0       	breq	.+34     	; 0x50c <FORWARD_Tick+0x5c>
     4ea:	80 91 2d 07 	lds	r24, 0x072D	; 0x80072d <pwm_counter>
     4ee:	90 91 31 07 	lds	r25, 0x0731	; 0x800731 <throttle>
     4f2:	89 17       	cp	r24, r25
     4f4:	20 f4       	brcc	.+8      	; 0x4fe <FORWARD_Tick+0x4e>
     4f6:	8f 5f       	subi	r24, 0xFF	; 255
     4f8:	80 93 2d 07 	sts	0x072D, r24	; 0x80072d <pwm_counter>
     4fc:	08 95       	ret
     4fe:	82 e0       	ldi	r24, 0x02	; 2
     500:	80 93 8d 07 	sts	0x078D, r24	; 0x80078d <forward_state>
     504:	10 92 2d 07 	sts	0x072D, r1	; 0x80072d <pwm_counter>
     508:	18 b8       	out	0x08, r1	; 8
     50a:	08 95       	ret
     50c:	10 92 8d 07 	sts	0x078D, r1	; 0x80078d <forward_state>
     510:	18 b8       	out	0x08, r1	; 8
     512:	08 95       	ret
     514:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <going_forward>
     518:	88 23       	and	r24, r24
     51a:	89 f0       	breq	.+34     	; 0x53e <FORWARD_Tick+0x8e>
     51c:	80 91 2d 07 	lds	r24, 0x072D	; 0x80072d <pwm_counter>
     520:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
     524:	89 17       	cp	r24, r25
     526:	20 f4       	brcc	.+8      	; 0x530 <FORWARD_Tick+0x80>
     528:	8f 5f       	subi	r24, 0xFF	; 255
     52a:	80 93 2d 07 	sts	0x072D, r24	; 0x80072d <pwm_counter>
     52e:	08 95       	ret
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	80 93 8d 07 	sts	0x078D, r24	; 0x80078d <forward_state>
     536:	10 92 2d 07 	sts	0x072D, r1	; 0x80072d <pwm_counter>
     53a:	88 b9       	out	0x08, r24	; 8
     53c:	08 95       	ret
     53e:	10 92 8d 07 	sts	0x078D, r1	; 0x80078d <forward_state>
     542:	18 b8       	out	0x08, r1	; 8
     544:	08 95       	ret

00000546 <ForwardSecTask>:
     546:	10 92 8d 07 	sts	0x078D, r1	; 0x80078d <forward_state>
     54a:	b2 df       	rcall	.-156    	; 0x4b0 <FORWARD_Tick>
     54c:	83 e0       	ldi	r24, 0x03	; 3
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	fc d4       	rcall	.+2552   	; 0xf4a <vTaskDelay>
     552:	fb cf       	rjmp	.-10     	; 0x54a <ForwardSecTask+0x4>

00000554 <ForwardSecPulse>:
     554:	af 92       	push	r10
     556:	bf 92       	push	r11
     558:	cf 92       	push	r12
     55a:	df 92       	push	r13
     55c:	ef 92       	push	r14
     55e:	ff 92       	push	r15
     560:	0f 93       	push	r16
     562:	a1 2c       	mov	r10, r1
     564:	b1 2c       	mov	r11, r1
     566:	c1 2c       	mov	r12, r1
     568:	d1 2c       	mov	r13, r1
     56a:	e1 2c       	mov	r14, r1
     56c:	f1 2c       	mov	r15, r1
     56e:	08 2f       	mov	r16, r24
     570:	20 e0       	ldi	r18, 0x00	; 0
     572:	30 e0       	ldi	r19, 0x00	; 0
     574:	45 e5       	ldi	r20, 0x55	; 85
     576:	50 e0       	ldi	r21, 0x00	; 0
     578:	67 e1       	ldi	r22, 0x17	; 23
     57a:	71 e0       	ldi	r23, 0x01	; 1
     57c:	83 ea       	ldi	r24, 0xA3	; 163
     57e:	92 e0       	ldi	r25, 0x02	; 2
     580:	80 d2       	rcall	.+1280   	; 0xa82 <xTaskGenericCreate>
     582:	0f 91       	pop	r16
     584:	ff 90       	pop	r15
     586:	ef 90       	pop	r14
     588:	df 90       	pop	r13
     58a:	cf 90       	pop	r12
     58c:	bf 90       	pop	r11
     58e:	af 90       	pop	r10
     590:	08 95       	ret

00000592 <REVERSE_Tick>:
     592:	80 91 8f 07 	lds	r24, 0x078F	; 0x80078f <reverse_state>
     596:	81 30       	cpi	r24, 0x01	; 1
     598:	b9 f0       	breq	.+46     	; 0x5c8 <REVERSE_Tick+0x36>
     59a:	18 f0       	brcs	.+6      	; 0x5a2 <REVERSE_Tick+0x10>
     59c:	82 30       	cpi	r24, 0x02	; 2
     59e:	69 f1       	breq	.+90     	; 0x5fa <REVERSE_Tick+0x68>
     5a0:	08 95       	ret
     5a2:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <going_reverse>
     5a6:	88 23       	and	r24, r24
     5a8:	09 f4       	brne	.+2      	; 0x5ac <REVERSE_Tick+0x1a>
     5aa:	40 c0       	rjmp	.+128    	; 0x62c <REVERSE_Tick+0x9a>
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	80 93 8f 07 	sts	0x078F, r24	; 0x80078f <reverse_state>
     5b2:	90 91 30 07 	lds	r25, 0x0730	; 0x800730 <reverse>
     5b6:	83 e0       	ldi	r24, 0x03	; 3
     5b8:	89 1b       	sub	r24, r25
     5ba:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     5be:	10 92 2d 07 	sts	0x072D, r1	; 0x80072d <pwm_counter>
     5c2:	82 e0       	ldi	r24, 0x02	; 2
     5c4:	88 b9       	out	0x08, r24	; 8
     5c6:	08 95       	ret
     5c8:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <going_reverse>
     5cc:	88 23       	and	r24, r24
     5ce:	89 f0       	breq	.+34     	; 0x5f2 <REVERSE_Tick+0x60>
     5d0:	80 91 2d 07 	lds	r24, 0x072D	; 0x80072d <pwm_counter>
     5d4:	90 91 30 07 	lds	r25, 0x0730	; 0x800730 <reverse>
     5d8:	89 17       	cp	r24, r25
     5da:	20 f4       	brcc	.+8      	; 0x5e4 <REVERSE_Tick+0x52>
     5dc:	8f 5f       	subi	r24, 0xFF	; 255
     5de:	80 93 2d 07 	sts	0x072D, r24	; 0x80072d <pwm_counter>
     5e2:	08 95       	ret
     5e4:	82 e0       	ldi	r24, 0x02	; 2
     5e6:	80 93 8f 07 	sts	0x078F, r24	; 0x80078f <reverse_state>
     5ea:	10 92 2d 07 	sts	0x072D, r1	; 0x80072d <pwm_counter>
     5ee:	18 b8       	out	0x08, r1	; 8
     5f0:	08 95       	ret
     5f2:	10 92 8f 07 	sts	0x078F, r1	; 0x80078f <reverse_state>
     5f6:	18 b8       	out	0x08, r1	; 8
     5f8:	08 95       	ret
     5fa:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <going_reverse>
     5fe:	88 23       	and	r24, r24
     600:	91 f0       	breq	.+36     	; 0x626 <REVERSE_Tick+0x94>
     602:	80 91 2d 07 	lds	r24, 0x072D	; 0x80072d <pwm_counter>
     606:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
     60a:	89 17       	cp	r24, r25
     60c:	20 f4       	brcc	.+8      	; 0x616 <REVERSE_Tick+0x84>
     60e:	8f 5f       	subi	r24, 0xFF	; 255
     610:	80 93 2d 07 	sts	0x072D, r24	; 0x80072d <pwm_counter>
     614:	08 95       	ret
     616:	81 e0       	ldi	r24, 0x01	; 1
     618:	80 93 8f 07 	sts	0x078F, r24	; 0x80078f <reverse_state>
     61c:	10 92 2d 07 	sts	0x072D, r1	; 0x80072d <pwm_counter>
     620:	82 e0       	ldi	r24, 0x02	; 2
     622:	88 b9       	out	0x08, r24	; 8
     624:	08 95       	ret
     626:	10 92 8f 07 	sts	0x078F, r1	; 0x80078f <reverse_state>
     62a:	18 b8       	out	0x08, r1	; 8
     62c:	08 95       	ret

0000062e <ReverseSecTask>:
     62e:	10 92 8f 07 	sts	0x078F, r1	; 0x80078f <reverse_state>
     632:	af df       	rcall	.-162    	; 0x592 <REVERSE_Tick>
     634:	83 e0       	ldi	r24, 0x03	; 3
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	88 d4       	rcall	.+2320   	; 0xf4a <vTaskDelay>
     63a:	fb cf       	rjmp	.-10     	; 0x632 <ReverseSecTask+0x4>

0000063c <ReverseSecPulse>:
     63c:	af 92       	push	r10
     63e:	bf 92       	push	r11
     640:	cf 92       	push	r12
     642:	df 92       	push	r13
     644:	ef 92       	push	r14
     646:	ff 92       	push	r15
     648:	0f 93       	push	r16
     64a:	a1 2c       	mov	r10, r1
     64c:	b1 2c       	mov	r11, r1
     64e:	c1 2c       	mov	r12, r1
     650:	d1 2c       	mov	r13, r1
     652:	e1 2c       	mov	r14, r1
     654:	f1 2c       	mov	r15, r1
     656:	08 2f       	mov	r16, r24
     658:	20 e0       	ldi	r18, 0x00	; 0
     65a:	30 e0       	ldi	r19, 0x00	; 0
     65c:	45 e5       	ldi	r20, 0x55	; 85
     65e:	50 e0       	ldi	r21, 0x00	; 0
     660:	66 e2       	ldi	r22, 0x26	; 38
     662:	71 e0       	ldi	r23, 0x01	; 1
     664:	87 e1       	ldi	r24, 0x17	; 23
     666:	93 e0       	ldi	r25, 0x03	; 3
     668:	0c d2       	rcall	.+1048   	; 0xa82 <xTaskGenericCreate>
     66a:	0f 91       	pop	r16
     66c:	ff 90       	pop	r15
     66e:	ef 90       	pop	r14
     670:	df 90       	pop	r13
     672:	cf 90       	pop	r12
     674:	bf 90       	pop	r11
     676:	af 90       	pop	r10
     678:	08 95       	ret

0000067a <SERVO_Tick>:
		default:
			break;
	}
	
	//Transitions
	switch(servo_state){
     67a:	80 91 8e 07 	lds	r24, 0x078E	; 0x80078e <servo_state>
     67e:	88 23       	and	r24, r24
     680:	19 f0       	breq	.+6      	; 0x688 <SERVO_Tick+0xe>
     682:	81 30       	cpi	r24, 0x01	; 1
     684:	a1 f0       	breq	.+40     	; 0x6ae <SERVO_Tick+0x34>
     686:	30 c0       	rjmp	.+96     	; 0x6e8 <SERVO_Tick+0x6e>
		case servo_init:
			if(left || right){
     688:	80 91 2b 07 	lds	r24, 0x072B	; 0x80072b <left>
     68c:	81 11       	cpse	r24, r1
     68e:	04 c0       	rjmp	.+8      	; 0x698 <SERVO_Tick+0x1e>
     690:	80 91 2c 07 	lds	r24, 0x072C	; 0x80072c <right>
     694:	88 23       	and	r24, r24
     696:	39 f0       	breq	.+14     	; 0x6a6 <SERVO_Tick+0x2c>
				servo_state = drive_high;
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	80 93 8e 07 	sts	0x078E, r24	; 0x80078e <servo_state>
				servo_counter = 0;
     69e:	10 92 29 07 	sts	0x0729, r1	; 0x800729 <servo_counter>
				PORTB = 0x01;
     6a2:	85 b9       	out	0x05, r24	; 5
     6a4:	08 95       	ret
			}
		
			else{
				PORTB = 0x00;
     6a6:	15 b8       	out	0x05, r1	; 5
				servo_state = servo_init;
     6a8:	10 92 8e 07 	sts	0x078E, r1	; 0x80078e <servo_state>
     6ac:	08 95       	ret
			}
			break;
		
		case drive_high:
			if((servo_counter < max_servo) && (left || right)){
     6ae:	80 91 29 07 	lds	r24, 0x0729	; 0x800729 <servo_counter>
     6b2:	90 91 2a 07 	lds	r25, 0x072A	; 0x80072a <max_servo>
     6b6:	89 17       	cp	r24, r25
     6b8:	78 f4       	brcc	.+30     	; 0x6d8 <SERVO_Tick+0x5e>
     6ba:	90 91 2b 07 	lds	r25, 0x072B	; 0x80072b <left>
     6be:	91 11       	cpse	r25, r1
     6c0:	04 c0       	rjmp	.+8      	; 0x6ca <SERVO_Tick+0x50>
     6c2:	90 91 2c 07 	lds	r25, 0x072C	; 0x80072c <right>
     6c6:	99 23       	and	r25, r25
     6c8:	39 f0       	breq	.+14     	; 0x6d8 <SERVO_Tick+0x5e>
				++servo_counter;
     6ca:	8f 5f       	subi	r24, 0xFF	; 255
     6cc:	80 93 29 07 	sts	0x0729, r24	; 0x800729 <servo_counter>
				servo_state = drive_high;
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	80 93 8e 07 	sts	0x078E, r24	; 0x80078e <servo_state>
     6d6:	08 95       	ret
			}
		
			else{
				left = 0;
     6d8:	10 92 2b 07 	sts	0x072B, r1	; 0x80072b <left>
				right = 0;
     6dc:	10 92 2c 07 	sts	0x072C, r1	; 0x80072c <right>
				PORTB = 0x00;
     6e0:	15 b8       	out	0x05, r1	; 5
				servo_state = servo_init;
     6e2:	10 92 8e 07 	sts	0x078E, r1	; 0x80078e <servo_state>
     6e6:	08 95       	ret
			}
			break;
		
		default:
			servo_state = servo_init;
     6e8:	10 92 8e 07 	sts	0x078E, r1	; 0x80078e <servo_state>
     6ec:	08 95       	ret

000006ee <SERVOSecTask>:

//-------------------------------------------------- Start ServoMotor SM --------------------------------------------------//


void SERVO_Init(){
	servo_state = servo_init;
     6ee:	10 92 8e 07 	sts	0x078E, r1	; 0x80078e <servo_state>
void SERVOSecTask()
{
	SERVO_Init();
	for(;;)
	{
		SERVO_Tick();
     6f2:	c3 df       	rcall	.-122    	; 0x67a <SERVO_Tick>
		vTaskDelay(1);
     6f4:	81 e0       	ldi	r24, 0x01	; 1
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	28 d4       	rcall	.+2128   	; 0xf4a <vTaskDelay>
     6fa:	fb cf       	rjmp	.-10     	; 0x6f2 <SERVOSecTask+0x4>

000006fc <SERVOSecPulse>:
	}
}

void SERVOSecPulse(unsigned portBASE_TYPE Priority)
{
     6fc:	af 92       	push	r10
     6fe:	bf 92       	push	r11
     700:	cf 92       	push	r12
     702:	df 92       	push	r13
     704:	ef 92       	push	r14
     706:	ff 92       	push	r15
     708:	0f 93       	push	r16
	xTaskCreate(SERVOSecTask, (signed portCHAR *)"SERVOSecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
     70a:	a1 2c       	mov	r10, r1
     70c:	b1 2c       	mov	r11, r1
     70e:	c1 2c       	mov	r12, r1
     710:	d1 2c       	mov	r13, r1
     712:	e1 2c       	mov	r14, r1
     714:	f1 2c       	mov	r15, r1
     716:	08 2f       	mov	r16, r24
     718:	20 e0       	ldi	r18, 0x00	; 0
     71a:	30 e0       	ldi	r19, 0x00	; 0
     71c:	45 e5       	ldi	r20, 0x55	; 85
     71e:	50 e0       	ldi	r21, 0x00	; 0
     720:	65 e3       	ldi	r22, 0x35	; 53
     722:	71 e0       	ldi	r23, 0x01	; 1
     724:	87 e7       	ldi	r24, 0x77	; 119
     726:	93 e0       	ldi	r25, 0x03	; 3
     728:	ac d1       	rcall	.+856    	; 0xa82 <xTaskGenericCreate>
}
     72a:	0f 91       	pop	r16
     72c:	ff 90       	pop	r15
     72e:	ef 90       	pop	r14
     730:	df 90       	pop	r13
     732:	cf 90       	pop	r12
     734:	bf 90       	pop	r11
     736:	af 90       	pop	r10
     738:	08 95       	ret

0000073a <main>:


//-------------------------------------------------- End ServoMotor SM --------------------------------------------------//
int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
     73a:	11 b8       	out	0x01, r1	; 1
     73c:	8f ef       	ldi	r24, 0xFF	; 255
     73e:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
     740:	84 b9       	out	0x04, r24	; 4
     742:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF; PORTC = 0x00;
     744:	87 b9       	out	0x07, r24	; 7
     746:	18 b8       	out	0x08, r1	; 8
	//DDRD = 0xFF; PORTD = 0x00;
	adc_init();
     748:	7f dd       	rcall	.-1282   	; 0x248 <adc_init>
	initUSART(0);
     74a:	80 e0       	ldi	r24, 0x00	; 0
     74c:	84 dd       	rcall	.-1272   	; 0x256 <initUSART>
	//Start Tasks
	TRANSMISSIONSecPulse(1);
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	90 de       	rcall	.-736    	; 0x472 <TRANSMISSIONSecPulse>
	ForwardSecPulse(1);
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	ff de       	rcall	.-514    	; 0x554 <ForwardSecPulse>
	ReverseSecPulse(1);
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	71 df       	rcall	.-286    	; 0x63c <ReverseSecPulse>
	SERVOSecPulse(1);
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	cf df       	rcall	.-98     	; 0x6fc <SERVOSecPulse>
     75e:	84 d2       	rcall	.+1288   	; 0xc68 <vTaskStartScheduler>
	//RunSchedular
	vTaskStartScheduler();
     760:	80 e0       	ldi	r24, 0x00	; 0
     762:	90 e0       	ldi	r25, 0x00	; 0
	
	return 0;
     764:	08 95       	ret

00000766 <pxPortInitialiseStack>:
     766:	31 e1       	ldi	r19, 0x11	; 17
     768:	fc 01       	movw	r30, r24
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     76a:	30 83       	st	Z, r19
     76c:	31 97       	sbiw	r30, 0x01	; 1
     76e:	22 e2       	ldi	r18, 0x22	; 34
     770:	20 83       	st	Z, r18
     772:	31 97       	sbiw	r30, 0x01	; 1
     774:	a3 e3       	ldi	r26, 0x33	; 51
     776:	a0 83       	st	Z, r26
     778:	31 97       	sbiw	r30, 0x01	; 1
     77a:	60 83       	st	Z, r22
     77c:	31 97       	sbiw	r30, 0x01	; 1
     77e:	70 83       	st	Z, r23
     780:	31 97       	sbiw	r30, 0x01	; 1
     782:	10 82       	st	Z, r1
     784:	31 97       	sbiw	r30, 0x01	; 1
     786:	60 e8       	ldi	r22, 0x80	; 128
     788:	60 83       	st	Z, r22
     78a:	31 97       	sbiw	r30, 0x01	; 1
     78c:	10 82       	st	Z, r1
     78e:	31 97       	sbiw	r30, 0x01	; 1
     790:	62 e0       	ldi	r22, 0x02	; 2
     792:	60 83       	st	Z, r22
     794:	31 97       	sbiw	r30, 0x01	; 1
     796:	63 e0       	ldi	r22, 0x03	; 3
     798:	60 83       	st	Z, r22
     79a:	31 97       	sbiw	r30, 0x01	; 1
     79c:	64 e0       	ldi	r22, 0x04	; 4
     79e:	60 83       	st	Z, r22
     7a0:	31 97       	sbiw	r30, 0x01	; 1
     7a2:	65 e0       	ldi	r22, 0x05	; 5
     7a4:	60 83       	st	Z, r22
     7a6:	31 97       	sbiw	r30, 0x01	; 1
     7a8:	66 e0       	ldi	r22, 0x06	; 6
     7aa:	60 83       	st	Z, r22
     7ac:	31 97       	sbiw	r30, 0x01	; 1
     7ae:	67 e0       	ldi	r22, 0x07	; 7
     7b0:	60 83       	st	Z, r22
     7b2:	31 97       	sbiw	r30, 0x01	; 1
     7b4:	68 e0       	ldi	r22, 0x08	; 8
     7b6:	60 83       	st	Z, r22
     7b8:	31 97       	sbiw	r30, 0x01	; 1
     7ba:	69 e0       	ldi	r22, 0x09	; 9
     7bc:	60 83       	st	Z, r22
     7be:	31 97       	sbiw	r30, 0x01	; 1
     7c0:	60 e1       	ldi	r22, 0x10	; 16
     7c2:	60 83       	st	Z, r22
     7c4:	31 97       	sbiw	r30, 0x01	; 1
     7c6:	30 83       	st	Z, r19
     7c8:	31 97       	sbiw	r30, 0x01	; 1
     7ca:	32 e1       	ldi	r19, 0x12	; 18
     7cc:	30 83       	st	Z, r19
     7ce:	31 97       	sbiw	r30, 0x01	; 1
     7d0:	33 e1       	ldi	r19, 0x13	; 19
     7d2:	30 83       	st	Z, r19
     7d4:	31 97       	sbiw	r30, 0x01	; 1
     7d6:	34 e1       	ldi	r19, 0x14	; 20
     7d8:	30 83       	st	Z, r19
     7da:	31 97       	sbiw	r30, 0x01	; 1
     7dc:	35 e1       	ldi	r19, 0x15	; 21
     7de:	30 83       	st	Z, r19
     7e0:	31 97       	sbiw	r30, 0x01	; 1
     7e2:	36 e1       	ldi	r19, 0x16	; 22
     7e4:	30 83       	st	Z, r19
     7e6:	31 97       	sbiw	r30, 0x01	; 1
     7e8:	37 e1       	ldi	r19, 0x17	; 23
     7ea:	30 83       	st	Z, r19
     7ec:	31 97       	sbiw	r30, 0x01	; 1
     7ee:	38 e1       	ldi	r19, 0x18	; 24
     7f0:	30 83       	st	Z, r19
     7f2:	31 97       	sbiw	r30, 0x01	; 1
     7f4:	39 e1       	ldi	r19, 0x19	; 25
     7f6:	30 83       	st	Z, r19
     7f8:	31 97       	sbiw	r30, 0x01	; 1
     7fa:	30 e2       	ldi	r19, 0x20	; 32
     7fc:	30 83       	st	Z, r19
     7fe:	31 97       	sbiw	r30, 0x01	; 1
     800:	31 e2       	ldi	r19, 0x21	; 33
     802:	30 83       	st	Z, r19
     804:	31 97       	sbiw	r30, 0x01	; 1
     806:	20 83       	st	Z, r18
     808:	31 97       	sbiw	r30, 0x01	; 1
     80a:	23 e2       	ldi	r18, 0x23	; 35
     80c:	20 83       	st	Z, r18
     80e:	31 97       	sbiw	r30, 0x01	; 1
     810:	40 83       	st	Z, r20
     812:	31 97       	sbiw	r30, 0x01	; 1
     814:	50 83       	st	Z, r21
     816:	31 97       	sbiw	r30, 0x01	; 1
     818:	26 e2       	ldi	r18, 0x26	; 38
     81a:	20 83       	st	Z, r18
     81c:	31 97       	sbiw	r30, 0x01	; 1
     81e:	27 e2       	ldi	r18, 0x27	; 39
     820:	20 83       	st	Z, r18
     822:	31 97       	sbiw	r30, 0x01	; 1
     824:	28 e2       	ldi	r18, 0x28	; 40
     826:	20 83       	st	Z, r18
     828:	31 97       	sbiw	r30, 0x01	; 1
     82a:	29 e2       	ldi	r18, 0x29	; 41
     82c:	20 83       	st	Z, r18
     82e:	31 97       	sbiw	r30, 0x01	; 1
     830:	20 e3       	ldi	r18, 0x30	; 48
     832:	20 83       	st	Z, r18
     834:	31 97       	sbiw	r30, 0x01	; 1
     836:	21 e3       	ldi	r18, 0x31	; 49
     838:	20 83       	st	Z, r18
     83a:	86 97       	sbiw	r24, 0x26	; 38
     83c:	08 95       	ret

0000083e <xPortStartScheduler>:
     83e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     842:	8c e7       	ldi	r24, 0x7C	; 124
     844:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     848:	8b e0       	ldi	r24, 0x0B	; 11
     84a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     84e:	ef e6       	ldi	r30, 0x6F	; 111
     850:	f0 e0       	ldi	r31, 0x00	; 0
     852:	80 81       	ld	r24, Z
     854:	82 60       	ori	r24, 0x02	; 2
     856:	80 83       	st	Z, r24
     858:	a0 91 8a 07 	lds	r26, 0x078A	; 0x80078a <pxCurrentTCB>
     85c:	b0 91 8b 07 	lds	r27, 0x078B	; 0x80078b <pxCurrentTCB+0x1>
     860:	cd 91       	ld	r28, X+
     862:	cd bf       	out	0x3d, r28	; 61
     864:	dd 91       	ld	r29, X+
     866:	de bf       	out	0x3e, r29	; 62
     868:	ff 91       	pop	r31
     86a:	ef 91       	pop	r30
     86c:	df 91       	pop	r29
     86e:	cf 91       	pop	r28
     870:	bf 91       	pop	r27
     872:	af 91       	pop	r26
     874:	9f 91       	pop	r25
     876:	8f 91       	pop	r24
     878:	7f 91       	pop	r23
     87a:	6f 91       	pop	r22
     87c:	5f 91       	pop	r21
     87e:	4f 91       	pop	r20
     880:	3f 91       	pop	r19
     882:	2f 91       	pop	r18
     884:	1f 91       	pop	r17
     886:	0f 91       	pop	r16
     888:	ff 90       	pop	r15
     88a:	ef 90       	pop	r14
     88c:	df 90       	pop	r13
     88e:	cf 90       	pop	r12
     890:	bf 90       	pop	r11
     892:	af 90       	pop	r10
     894:	9f 90       	pop	r9
     896:	8f 90       	pop	r8
     898:	7f 90       	pop	r7
     89a:	6f 90       	pop	r6
     89c:	5f 90       	pop	r5
     89e:	4f 90       	pop	r4
     8a0:	3f 90       	pop	r3
     8a2:	2f 90       	pop	r2
     8a4:	1f 90       	pop	r1
     8a6:	0f 90       	pop	r0
     8a8:	0f be       	out	0x3f, r0	; 63
     8aa:	0f 90       	pop	r0
     8ac:	08 95       	ret
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	08 95       	ret

000008b2 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     8b2:	0f 92       	push	r0
     8b4:	0f b6       	in	r0, 0x3f	; 63
     8b6:	f8 94       	cli
     8b8:	0f 92       	push	r0
     8ba:	1f 92       	push	r1
     8bc:	11 24       	eor	r1, r1
     8be:	2f 92       	push	r2
     8c0:	3f 92       	push	r3
     8c2:	4f 92       	push	r4
     8c4:	5f 92       	push	r5
     8c6:	6f 92       	push	r6
     8c8:	7f 92       	push	r7
     8ca:	8f 92       	push	r8
     8cc:	9f 92       	push	r9
     8ce:	af 92       	push	r10
     8d0:	bf 92       	push	r11
     8d2:	cf 92       	push	r12
     8d4:	df 92       	push	r13
     8d6:	ef 92       	push	r14
     8d8:	ff 92       	push	r15
     8da:	0f 93       	push	r16
     8dc:	1f 93       	push	r17
     8de:	2f 93       	push	r18
     8e0:	3f 93       	push	r19
     8e2:	4f 93       	push	r20
     8e4:	5f 93       	push	r21
     8e6:	6f 93       	push	r22
     8e8:	7f 93       	push	r23
     8ea:	8f 93       	push	r24
     8ec:	9f 93       	push	r25
     8ee:	af 93       	push	r26
     8f0:	bf 93       	push	r27
     8f2:	cf 93       	push	r28
     8f4:	df 93       	push	r29
     8f6:	ef 93       	push	r30
     8f8:	ff 93       	push	r31
     8fa:	a0 91 8a 07 	lds	r26, 0x078A	; 0x80078a <pxCurrentTCB>
     8fe:	b0 91 8b 07 	lds	r27, 0x078B	; 0x80078b <pxCurrentTCB+0x1>
     902:	0d b6       	in	r0, 0x3d	; 61
     904:	0d 92       	st	X+, r0
     906:	0e b6       	in	r0, 0x3e	; 62
     908:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     90a:	70 d3       	rcall	.+1760   	; 0xfec <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     90c:	a0 91 8a 07 	lds	r26, 0x078A	; 0x80078a <pxCurrentTCB>
     910:	b0 91 8b 07 	lds	r27, 0x078B	; 0x80078b <pxCurrentTCB+0x1>
     914:	cd 91       	ld	r28, X+
     916:	cd bf       	out	0x3d, r28	; 61
     918:	dd 91       	ld	r29, X+
     91a:	de bf       	out	0x3e, r29	; 62
     91c:	ff 91       	pop	r31
     91e:	ef 91       	pop	r30
     920:	df 91       	pop	r29
     922:	cf 91       	pop	r28
     924:	bf 91       	pop	r27
     926:	af 91       	pop	r26
     928:	9f 91       	pop	r25
     92a:	8f 91       	pop	r24
     92c:	7f 91       	pop	r23
     92e:	6f 91       	pop	r22
     930:	5f 91       	pop	r21
     932:	4f 91       	pop	r20
     934:	3f 91       	pop	r19
     936:	2f 91       	pop	r18
     938:	1f 91       	pop	r17
     93a:	0f 91       	pop	r16
     93c:	ff 90       	pop	r15
     93e:	ef 90       	pop	r14
     940:	df 90       	pop	r13
     942:	cf 90       	pop	r12
     944:	bf 90       	pop	r11
     946:	af 90       	pop	r10
     948:	9f 90       	pop	r9
     94a:	8f 90       	pop	r8
     94c:	7f 90       	pop	r7
     94e:	6f 90       	pop	r6
     950:	5f 90       	pop	r5
     952:	4f 90       	pop	r4
     954:	3f 90       	pop	r3
     956:	2f 90       	pop	r2
     958:	1f 90       	pop	r1
     95a:	0f 90       	pop	r0
     95c:	0f be       	out	0x3f, r0	; 63
     95e:	0f 90       	pop	r0

	asm volatile ( "ret" );
     960:	08 95       	ret

00000962 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     962:	0f 92       	push	r0
     964:	0f b6       	in	r0, 0x3f	; 63
     966:	f8 94       	cli
     968:	0f 92       	push	r0
     96a:	1f 92       	push	r1
     96c:	11 24       	eor	r1, r1
     96e:	2f 92       	push	r2
     970:	3f 92       	push	r3
     972:	4f 92       	push	r4
     974:	5f 92       	push	r5
     976:	6f 92       	push	r6
     978:	7f 92       	push	r7
     97a:	8f 92       	push	r8
     97c:	9f 92       	push	r9
     97e:	af 92       	push	r10
     980:	bf 92       	push	r11
     982:	cf 92       	push	r12
     984:	df 92       	push	r13
     986:	ef 92       	push	r14
     988:	ff 92       	push	r15
     98a:	0f 93       	push	r16
     98c:	1f 93       	push	r17
     98e:	2f 93       	push	r18
     990:	3f 93       	push	r19
     992:	4f 93       	push	r20
     994:	5f 93       	push	r21
     996:	6f 93       	push	r22
     998:	7f 93       	push	r23
     99a:	8f 93       	push	r24
     99c:	9f 93       	push	r25
     99e:	af 93       	push	r26
     9a0:	bf 93       	push	r27
     9a2:	cf 93       	push	r28
     9a4:	df 93       	push	r29
     9a6:	ef 93       	push	r30
     9a8:	ff 93       	push	r31
     9aa:	a0 91 8a 07 	lds	r26, 0x078A	; 0x80078a <pxCurrentTCB>
     9ae:	b0 91 8b 07 	lds	r27, 0x078B	; 0x80078b <pxCurrentTCB+0x1>
     9b2:	0d b6       	in	r0, 0x3d	; 61
     9b4:	0d 92       	st	X+, r0
     9b6:	0e b6       	in	r0, 0x3e	; 62
     9b8:	0d 92       	st	X+, r0
	vTaskIncrementTick();
     9ba:	85 d1       	rcall	.+778    	; 0xcc6 <vTaskIncrementTick>
	vTaskSwitchContext();
     9bc:	17 d3       	rcall	.+1582   	; 0xfec <vTaskSwitchContext>
     9be:	a0 91 8a 07 	lds	r26, 0x078A	; 0x80078a <pxCurrentTCB>
	portRESTORE_CONTEXT();
     9c2:	b0 91 8b 07 	lds	r27, 0x078B	; 0x80078b <pxCurrentTCB+0x1>
     9c6:	cd 91       	ld	r28, X+
     9c8:	cd bf       	out	0x3d, r28	; 61
     9ca:	dd 91       	ld	r29, X+
     9cc:	de bf       	out	0x3e, r29	; 62
     9ce:	ff 91       	pop	r31
     9d0:	ef 91       	pop	r30
     9d2:	df 91       	pop	r29
     9d4:	cf 91       	pop	r28
     9d6:	bf 91       	pop	r27
     9d8:	af 91       	pop	r26
     9da:	9f 91       	pop	r25
     9dc:	8f 91       	pop	r24
     9de:	7f 91       	pop	r23
     9e0:	6f 91       	pop	r22
     9e2:	5f 91       	pop	r21
     9e4:	4f 91       	pop	r20
     9e6:	3f 91       	pop	r19
     9e8:	2f 91       	pop	r18
     9ea:	1f 91       	pop	r17
     9ec:	0f 91       	pop	r16
     9ee:	ff 90       	pop	r15
     9f0:	ef 90       	pop	r14
     9f2:	df 90       	pop	r13
     9f4:	cf 90       	pop	r12
     9f6:	bf 90       	pop	r11
     9f8:	af 90       	pop	r10
     9fa:	9f 90       	pop	r9
     9fc:	8f 90       	pop	r8
     9fe:	7f 90       	pop	r7
     a00:	6f 90       	pop	r6
     a02:	5f 90       	pop	r5
     a04:	4f 90       	pop	r4
     a06:	3f 90       	pop	r3
     a08:	2f 90       	pop	r2
     a0a:	1f 90       	pop	r1
     a0c:	0f 90       	pop	r0
     a0e:	0f be       	out	0x3f, r0	; 63
     a10:	0f 90       	pop	r0
     a12:	08 95       	ret

00000a14 <__vector_13>:

	asm volatile ( "ret" );
     a14:	a6 df       	rcall	.-180    	; 0x962 <vPortYieldFromTick>
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
		asm volatile ( "reti" );
     a16:	18 95       	reti

00000a18 <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
     a18:	cf 93       	push	r28
     a1a:	df 93       	push	r29
     a1c:	ec 01       	movw	r28, r24
     a1e:	e0 91 8a 07 	lds	r30, 0x078A	; 0x80078a <pxCurrentTCB>
     a22:	f0 91 8b 07 	lds	r31, 0x078B	; 0x80078b <pxCurrentTCB+0x1>
     a26:	93 83       	std	Z+3, r25	; 0x03
     a28:	82 83       	std	Z+2, r24	; 0x02
     a2a:	80 91 3a 07 	lds	r24, 0x073A	; 0x80073a <xTickCount>
     a2e:	90 91 3b 07 	lds	r25, 0x073B	; 0x80073b <xTickCount+0x1>
     a32:	c8 17       	cp	r28, r24
     a34:	d9 07       	cpc	r29, r25
     a36:	60 f4       	brcc	.+24     	; 0xa50 <prvAddCurrentTaskToDelayedList+0x38>
     a38:	60 91 8a 07 	lds	r22, 0x078A	; 0x80078a <pxCurrentTCB>
     a3c:	70 91 8b 07 	lds	r23, 0x078B	; 0x80078b <pxCurrentTCB+0x1>
     a40:	80 91 50 07 	lds	r24, 0x0750	; 0x800750 <pxOverflowDelayedTaskList>
     a44:	90 91 51 07 	lds	r25, 0x0751	; 0x800751 <pxOverflowDelayedTaskList+0x1>
     a48:	6e 5f       	subi	r22, 0xFE	; 254
     a4a:	7f 4f       	sbci	r23, 0xFF	; 255
     a4c:	9c db       	rcall	.-2248   	; 0x186 <vListInsert>
     a4e:	16 c0       	rjmp	.+44     	; 0xa7c <prvAddCurrentTaskToDelayedList+0x64>
     a50:	60 91 8a 07 	lds	r22, 0x078A	; 0x80078a <pxCurrentTCB>
     a54:	70 91 8b 07 	lds	r23, 0x078B	; 0x80078b <pxCurrentTCB+0x1>
     a58:	80 91 52 07 	lds	r24, 0x0752	; 0x800752 <pxDelayedTaskList>
     a5c:	90 91 53 07 	lds	r25, 0x0753	; 0x800753 <pxDelayedTaskList+0x1>
     a60:	6e 5f       	subi	r22, 0xFE	; 254
     a62:	7f 4f       	sbci	r23, 0xFF	; 255
     a64:	90 db       	rcall	.-2272   	; 0x186 <vListInsert>
     a66:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <xNextTaskUnblockTime>
     a6a:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <xNextTaskUnblockTime+0x1>
     a6e:	c8 17       	cp	r28, r24
     a70:	d9 07       	cpc	r29, r25
     a72:	20 f4       	brcc	.+8      	; 0xa7c <prvAddCurrentTaskToDelayedList+0x64>
     a74:	d0 93 02 01 	sts	0x0102, r29	; 0x800102 <xNextTaskUnblockTime+0x1>
     a78:	c0 93 01 01 	sts	0x0101, r28	; 0x800101 <xNextTaskUnblockTime>
     a7c:	df 91       	pop	r29
     a7e:	cf 91       	pop	r28
     a80:	08 95       	ret

00000a82 <xTaskGenericCreate>:
     a82:	4f 92       	push	r4
     a84:	5f 92       	push	r5
     a86:	6f 92       	push	r6
     a88:	7f 92       	push	r7
     a8a:	8f 92       	push	r8
     a8c:	9f 92       	push	r9
     a8e:	af 92       	push	r10
     a90:	bf 92       	push	r11
     a92:	cf 92       	push	r12
     a94:	df 92       	push	r13
     a96:	ef 92       	push	r14
     a98:	ff 92       	push	r15
     a9a:	0f 93       	push	r16
     a9c:	1f 93       	push	r17
     a9e:	cf 93       	push	r28
     aa0:	df 93       	push	r29
     aa2:	5c 01       	movw	r10, r24
     aa4:	4b 01       	movw	r8, r22
     aa6:	3a 01       	movw	r6, r20
     aa8:	29 01       	movw	r4, r18
     aaa:	81 e2       	ldi	r24, 0x21	; 33
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	0d db       	rcall	.-2534   	; 0xca <pvPortMalloc>
     ab0:	ec 01       	movw	r28, r24
     ab2:	89 2b       	or	r24, r25
     ab4:	09 f4       	brne	.+2      	; 0xab8 <xTaskGenericCreate+0x36>
     ab6:	c6 c0       	rjmp	.+396    	; 0xc44 <xTaskGenericCreate+0x1c2>
     ab8:	c1 14       	cp	r12, r1
     aba:	d1 04       	cpc	r13, r1
     abc:	09 f0       	breq	.+2      	; 0xac0 <xTaskGenericCreate+0x3e>
     abe:	be c0       	rjmp	.+380    	; 0xc3c <xTaskGenericCreate+0x1ba>
     ac0:	c3 01       	movw	r24, r6
     ac2:	03 db       	rcall	.-2554   	; 0xca <pvPortMalloc>
     ac4:	98 8f       	std	Y+24, r25	; 0x18
     ac6:	8f 8b       	std	Y+23, r24	; 0x17
     ac8:	00 97       	sbiw	r24, 0x00	; 0
     aca:	19 f4       	brne	.+6      	; 0xad2 <xTaskGenericCreate+0x50>
     acc:	ce 01       	movw	r24, r28
     ace:	21 db       	rcall	.-2494   	; 0x112 <vPortFree>
     ad0:	b9 c0       	rjmp	.+370    	; 0xc44 <xTaskGenericCreate+0x1c2>
     ad2:	a3 01       	movw	r20, r6
     ad4:	65 ea       	ldi	r22, 0xA5	; 165
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	f5 d2       	rcall	.+1514   	; 0x10c4 <memset>
     ada:	93 01       	movw	r18, r6
     adc:	21 50       	subi	r18, 0x01	; 1
     ade:	31 09       	sbc	r19, r1
     ae0:	8f 89       	ldd	r24, Y+23	; 0x17
     ae2:	98 8d       	ldd	r25, Y+24	; 0x18
     ae4:	3c 01       	movw	r6, r24
     ae6:	62 0e       	add	r6, r18
     ae8:	73 1e       	adc	r7, r19
     aea:	48 e0       	ldi	r20, 0x08	; 8
     aec:	50 e0       	ldi	r21, 0x00	; 0
     aee:	b4 01       	movw	r22, r8
     af0:	ce 01       	movw	r24, r28
     af2:	49 96       	adiw	r24, 0x19	; 25
     af4:	ee d2       	rcall	.+1500   	; 0x10d2 <strncpy>
     af6:	18 a2       	std	Y+32, r1	; 0x20
     af8:	10 2f       	mov	r17, r16
     afa:	04 30       	cpi	r16, 0x04	; 4
     afc:	08 f0       	brcs	.+2      	; 0xb00 <xTaskGenericCreate+0x7e>
     afe:	13 e0       	ldi	r17, 0x03	; 3
     b00:	1e 8b       	std	Y+22, r17	; 0x16
     b02:	6e 01       	movw	r12, r28
     b04:	82 e0       	ldi	r24, 0x02	; 2
     b06:	c8 0e       	add	r12, r24
     b08:	d1 1c       	adc	r13, r1
     b0a:	c6 01       	movw	r24, r12
     b0c:	11 db       	rcall	.-2526   	; 0x130 <vListInitialiseItem>
     b0e:	ce 01       	movw	r24, r28
     b10:	0c 96       	adiw	r24, 0x0c	; 12
     b12:	0e db       	rcall	.-2532   	; 0x130 <vListInitialiseItem>
     b14:	d9 87       	std	Y+9, r29	; 0x09
     b16:	c8 87       	std	Y+8, r28	; 0x08
     b18:	84 e0       	ldi	r24, 0x04	; 4
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	81 1b       	sub	r24, r17
     b1e:	91 09       	sbc	r25, r1
     b20:	9d 87       	std	Y+13, r25	; 0x0d
     b22:	8c 87       	std	Y+12, r24	; 0x0c
     b24:	db 8b       	std	Y+19, r29	; 0x13
     b26:	ca 8b       	std	Y+18, r28	; 0x12
     b28:	a2 01       	movw	r20, r4
     b2a:	b5 01       	movw	r22, r10
     b2c:	c3 01       	movw	r24, r6
     b2e:	1b de       	rcall	.-970    	; 0x766 <pxPortInitialiseStack>
     b30:	99 83       	std	Y+1, r25	; 0x01
     b32:	88 83       	st	Y, r24
     b34:	e1 14       	cp	r14, r1
     b36:	f1 04       	cpc	r15, r1
     b38:	19 f0       	breq	.+6      	; 0xb40 <xTaskGenericCreate+0xbe>
     b3a:	f7 01       	movw	r30, r14
     b3c:	d1 83       	std	Z+1, r29	; 0x01
     b3e:	c0 83       	st	Z, r28
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	0f 92       	push	r0
     b46:	80 91 3c 07 	lds	r24, 0x073C	; 0x80073c <uxCurrentNumberOfTasks>
     b4a:	8f 5f       	subi	r24, 0xFF	; 255
     b4c:	80 93 3c 07 	sts	0x073C, r24	; 0x80073c <uxCurrentNumberOfTasks>
     b50:	80 91 8a 07 	lds	r24, 0x078A	; 0x80078a <pxCurrentTCB>
     b54:	90 91 8b 07 	lds	r25, 0x078B	; 0x80078b <pxCurrentTCB+0x1>
     b58:	89 2b       	or	r24, r25
     b5a:	69 f5       	brne	.+90     	; 0xbb6 <xTaskGenericCreate+0x134>
     b5c:	d0 93 8b 07 	sts	0x078B, r29	; 0x80078b <pxCurrentTCB+0x1>
     b60:	c0 93 8a 07 	sts	0x078A, r28	; 0x80078a <pxCurrentTCB>
     b64:	80 91 3c 07 	lds	r24, 0x073C	; 0x80073c <uxCurrentNumberOfTasks>
     b68:	81 30       	cpi	r24, 0x01	; 1
     b6a:	a1 f5       	brne	.+104    	; 0xbd4 <xTaskGenericCreate+0x152>
     b6c:	86 e6       	ldi	r24, 0x66	; 102
     b6e:	97 e0       	ldi	r25, 0x07	; 7
     b70:	d1 da       	rcall	.-2654   	; 0x114 <vListInitialise>
     b72:	8f e6       	ldi	r24, 0x6F	; 111
     b74:	97 e0       	ldi	r25, 0x07	; 7
     b76:	ce da       	rcall	.-2660   	; 0x114 <vListInitialise>
     b78:	88 e7       	ldi	r24, 0x78	; 120
     b7a:	97 e0       	ldi	r25, 0x07	; 7
     b7c:	cb da       	rcall	.-2666   	; 0x114 <vListInitialise>
     b7e:	81 e8       	ldi	r24, 0x81	; 129
     b80:	97 e0       	ldi	r25, 0x07	; 7
     b82:	c8 da       	rcall	.-2672   	; 0x114 <vListInitialise>
     b84:	8d e5       	ldi	r24, 0x5D	; 93
     b86:	97 e0       	ldi	r25, 0x07	; 7
     b88:	c5 da       	rcall	.-2678   	; 0x114 <vListInitialise>
     b8a:	84 e5       	ldi	r24, 0x54	; 84
     b8c:	97 e0       	ldi	r25, 0x07	; 7
     b8e:	c2 da       	rcall	.-2684   	; 0x114 <vListInitialise>
     b90:	87 e4       	ldi	r24, 0x47	; 71
     b92:	97 e0       	ldi	r25, 0x07	; 7
     b94:	bf da       	rcall	.-2690   	; 0x114 <vListInitialise>
     b96:	8e e3       	ldi	r24, 0x3E	; 62
     b98:	97 e0       	ldi	r25, 0x07	; 7
     b9a:	bc da       	rcall	.-2696   	; 0x114 <vListInitialise>
     b9c:	8d e5       	ldi	r24, 0x5D	; 93
     b9e:	97 e0       	ldi	r25, 0x07	; 7
     ba0:	90 93 53 07 	sts	0x0753, r25	; 0x800753 <pxDelayedTaskList+0x1>
     ba4:	80 93 52 07 	sts	0x0752, r24	; 0x800752 <pxDelayedTaskList>
     ba8:	84 e5       	ldi	r24, 0x54	; 84
     baa:	97 e0       	ldi	r25, 0x07	; 7
     bac:	90 93 51 07 	sts	0x0751, r25	; 0x800751 <pxOverflowDelayedTaskList+0x1>
     bb0:	80 93 50 07 	sts	0x0750, r24	; 0x800750 <pxOverflowDelayedTaskList>
     bb4:	0f c0       	rjmp	.+30     	; 0xbd4 <xTaskGenericCreate+0x152>
     bb6:	80 91 37 07 	lds	r24, 0x0737	; 0x800737 <xSchedulerRunning>
     bba:	81 11       	cpse	r24, r1
     bbc:	0b c0       	rjmp	.+22     	; 0xbd4 <xTaskGenericCreate+0x152>
     bbe:	e0 91 8a 07 	lds	r30, 0x078A	; 0x80078a <pxCurrentTCB>
     bc2:	f0 91 8b 07 	lds	r31, 0x078B	; 0x80078b <pxCurrentTCB+0x1>
     bc6:	86 89       	ldd	r24, Z+22	; 0x16
     bc8:	08 17       	cp	r16, r24
     bca:	20 f0       	brcs	.+8      	; 0xbd4 <xTaskGenericCreate+0x152>
     bcc:	d0 93 8b 07 	sts	0x078B, r29	; 0x80078b <pxCurrentTCB+0x1>
     bd0:	c0 93 8a 07 	sts	0x078A, r28	; 0x80078a <pxCurrentTCB>
     bd4:	8e 89       	ldd	r24, Y+22	; 0x16
     bd6:	90 91 39 07 	lds	r25, 0x0739	; 0x800739 <uxTopUsedPriority>
     bda:	98 17       	cp	r25, r24
     bdc:	10 f4       	brcc	.+4      	; 0xbe2 <xTaskGenericCreate+0x160>
     bde:	80 93 39 07 	sts	0x0739, r24	; 0x800739 <uxTopUsedPriority>
     be2:	90 91 32 07 	lds	r25, 0x0732	; 0x800732 <uxTaskNumber>
     be6:	9f 5f       	subi	r25, 0xFF	; 255
     be8:	90 93 32 07 	sts	0x0732, r25	; 0x800732 <uxTaskNumber>
     bec:	90 91 38 07 	lds	r25, 0x0738	; 0x800738 <uxTopReadyPriority>
     bf0:	98 17       	cp	r25, r24
     bf2:	10 f4       	brcc	.+4      	; 0xbf8 <xTaskGenericCreate+0x176>
     bf4:	80 93 38 07 	sts	0x0738, r24	; 0x800738 <uxTopReadyPriority>
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	9c 01       	movw	r18, r24
     bfc:	22 0f       	add	r18, r18
     bfe:	33 1f       	adc	r19, r19
     c00:	22 0f       	add	r18, r18
     c02:	33 1f       	adc	r19, r19
     c04:	22 0f       	add	r18, r18
     c06:	33 1f       	adc	r19, r19
     c08:	82 0f       	add	r24, r18
     c0a:	93 1f       	adc	r25, r19
     c0c:	b6 01       	movw	r22, r12
     c0e:	8a 59       	subi	r24, 0x9A	; 154
     c10:	98 4f       	sbci	r25, 0xF8	; 248
     c12:	92 da       	rcall	.-2780   	; 0x138 <vListInsertEnd>
     c14:	0f 90       	pop	r0
     c16:	0f be       	out	0x3f, r0	; 63
     c18:	80 91 37 07 	lds	r24, 0x0737	; 0x800737 <xSchedulerRunning>
     c1c:	88 23       	and	r24, r24
     c1e:	51 f0       	breq	.+20     	; 0xc34 <xTaskGenericCreate+0x1b2>
     c20:	e0 91 8a 07 	lds	r30, 0x078A	; 0x80078a <pxCurrentTCB>
     c24:	f0 91 8b 07 	lds	r31, 0x078B	; 0x80078b <pxCurrentTCB+0x1>
     c28:	86 89       	ldd	r24, Z+22	; 0x16
     c2a:	80 17       	cp	r24, r16
     c2c:	28 f4       	brcc	.+10     	; 0xc38 <xTaskGenericCreate+0x1b6>
     c2e:	41 de       	rcall	.-894    	; 0x8b2 <vPortYield>
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	09 c0       	rjmp	.+18     	; 0xc46 <xTaskGenericCreate+0x1c4>
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	07 c0       	rjmp	.+14     	; 0xc46 <xTaskGenericCreate+0x1c4>
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	05 c0       	rjmp	.+10     	; 0xc46 <xTaskGenericCreate+0x1c4>
     c3c:	d8 8e       	std	Y+24, r13	; 0x18
     c3e:	cf 8a       	std	Y+23, r12	; 0x17
     c40:	c6 01       	movw	r24, r12
     c42:	47 cf       	rjmp	.-370    	; 0xad2 <xTaskGenericCreate+0x50>
     c44:	8f ef       	ldi	r24, 0xFF	; 255
     c46:	df 91       	pop	r29
     c48:	cf 91       	pop	r28
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	cf 90       	pop	r12
     c56:	bf 90       	pop	r11
     c58:	af 90       	pop	r10
     c5a:	9f 90       	pop	r9
     c5c:	8f 90       	pop	r8
     c5e:	7f 90       	pop	r7
     c60:	6f 90       	pop	r6
     c62:	5f 90       	pop	r5
     c64:	4f 90       	pop	r4
     c66:	08 95       	ret

00000c68 <vTaskStartScheduler>:
     c68:	af 92       	push	r10
     c6a:	bf 92       	push	r11
     c6c:	cf 92       	push	r12
     c6e:	df 92       	push	r13
     c70:	ef 92       	push	r14
     c72:	ff 92       	push	r15
     c74:	0f 93       	push	r16
     c76:	a1 2c       	mov	r10, r1
     c78:	b1 2c       	mov	r11, r1
     c7a:	c1 2c       	mov	r12, r1
     c7c:	d1 2c       	mov	r13, r1
     c7e:	e1 2c       	mov	r14, r1
     c80:	f1 2c       	mov	r15, r1
     c82:	00 e0       	ldi	r16, 0x00	; 0
     c84:	20 e0       	ldi	r18, 0x00	; 0
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	45 e5       	ldi	r20, 0x55	; 85
     c8a:	50 e0       	ldi	r21, 0x00	; 0
     c8c:	62 e4       	ldi	r22, 0x42	; 66
     c8e:	71 e0       	ldi	r23, 0x01	; 1
     c90:	80 ec       	ldi	r24, 0xC0	; 192
     c92:	97 e0       	ldi	r25, 0x07	; 7
     c94:	f6 de       	rcall	.-532    	; 0xa82 <xTaskGenericCreate>
     c96:	81 30       	cpi	r24, 0x01	; 1
     c98:	41 f4       	brne	.+16     	; 0xcaa <vTaskStartScheduler+0x42>
     c9a:	f8 94       	cli
     c9c:	80 93 37 07 	sts	0x0737, r24	; 0x800737 <xSchedulerRunning>
     ca0:	10 92 3b 07 	sts	0x073B, r1	; 0x80073b <xTickCount+0x1>
     ca4:	10 92 3a 07 	sts	0x073A, r1	; 0x80073a <xTickCount>
     ca8:	ca dd       	rcall	.-1132   	; 0x83e <xPortStartScheduler>
     caa:	0f 91       	pop	r16
     cac:	ff 90       	pop	r15
     cae:	ef 90       	pop	r14
     cb0:	df 90       	pop	r13
     cb2:	cf 90       	pop	r12
     cb4:	bf 90       	pop	r11
     cb6:	af 90       	pop	r10
     cb8:	08 95       	ret

00000cba <vTaskSuspendAll>:
     cba:	80 91 36 07 	lds	r24, 0x0736	; 0x800736 <uxSchedulerSuspended>
     cbe:	8f 5f       	subi	r24, 0xFF	; 255
     cc0:	80 93 36 07 	sts	0x0736, r24	; 0x800736 <uxSchedulerSuspended>
     cc4:	08 95       	ret

00000cc6 <vTaskIncrementTick>:
     cc6:	0f 93       	push	r16
     cc8:	1f 93       	push	r17
     cca:	cf 93       	push	r28
     ccc:	df 93       	push	r29
     cce:	80 91 36 07 	lds	r24, 0x0736	; 0x800736 <uxSchedulerSuspended>
     cd2:	81 11       	cpse	r24, r1
     cd4:	af c0       	rjmp	.+350    	; 0xe34 <vTaskIncrementTick+0x16e>
     cd6:	80 91 3a 07 	lds	r24, 0x073A	; 0x80073a <xTickCount>
     cda:	90 91 3b 07 	lds	r25, 0x073B	; 0x80073b <xTickCount+0x1>
     cde:	01 96       	adiw	r24, 0x01	; 1
     ce0:	90 93 3b 07 	sts	0x073B, r25	; 0x80073b <xTickCount+0x1>
     ce4:	80 93 3a 07 	sts	0x073A, r24	; 0x80073a <xTickCount>
     ce8:	80 91 3a 07 	lds	r24, 0x073A	; 0x80073a <xTickCount>
     cec:	90 91 3b 07 	lds	r25, 0x073B	; 0x80073b <xTickCount+0x1>
     cf0:	89 2b       	or	r24, r25
     cf2:	99 f5       	brne	.+102    	; 0xd5a <vTaskIncrementTick+0x94>
     cf4:	80 91 52 07 	lds	r24, 0x0752	; 0x800752 <pxDelayedTaskList>
     cf8:	90 91 53 07 	lds	r25, 0x0753	; 0x800753 <pxDelayedTaskList+0x1>
     cfc:	20 91 50 07 	lds	r18, 0x0750	; 0x800750 <pxOverflowDelayedTaskList>
     d00:	30 91 51 07 	lds	r19, 0x0751	; 0x800751 <pxOverflowDelayedTaskList+0x1>
     d04:	30 93 53 07 	sts	0x0753, r19	; 0x800753 <pxDelayedTaskList+0x1>
     d08:	20 93 52 07 	sts	0x0752, r18	; 0x800752 <pxDelayedTaskList>
     d0c:	90 93 51 07 	sts	0x0751, r25	; 0x800751 <pxOverflowDelayedTaskList+0x1>
     d10:	80 93 50 07 	sts	0x0750, r24	; 0x800750 <pxOverflowDelayedTaskList>
     d14:	80 91 33 07 	lds	r24, 0x0733	; 0x800733 <xNumOfOverflows>
     d18:	8f 5f       	subi	r24, 0xFF	; 255
     d1a:	80 93 33 07 	sts	0x0733, r24	; 0x800733 <xNumOfOverflows>
     d1e:	e0 91 52 07 	lds	r30, 0x0752	; 0x800752 <pxDelayedTaskList>
     d22:	f0 91 53 07 	lds	r31, 0x0753	; 0x800753 <pxDelayedTaskList+0x1>
     d26:	80 81       	ld	r24, Z
     d28:	81 11       	cpse	r24, r1
     d2a:	07 c0       	rjmp	.+14     	; 0xd3a <vTaskIncrementTick+0x74>
     d2c:	8f ef       	ldi	r24, 0xFF	; 255
     d2e:	9f ef       	ldi	r25, 0xFF	; 255
     d30:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <xNextTaskUnblockTime+0x1>
     d34:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <xNextTaskUnblockTime>
     d38:	10 c0       	rjmp	.+32     	; 0xd5a <vTaskIncrementTick+0x94>
     d3a:	e0 91 52 07 	lds	r30, 0x0752	; 0x800752 <pxDelayedTaskList>
     d3e:	f0 91 53 07 	lds	r31, 0x0753	; 0x800753 <pxDelayedTaskList+0x1>
     d42:	05 80       	ldd	r0, Z+5	; 0x05
     d44:	f6 81       	ldd	r31, Z+6	; 0x06
     d46:	e0 2d       	mov	r30, r0
     d48:	06 80       	ldd	r0, Z+6	; 0x06
     d4a:	f7 81       	ldd	r31, Z+7	; 0x07
     d4c:	e0 2d       	mov	r30, r0
     d4e:	82 81       	ldd	r24, Z+2	; 0x02
     d50:	93 81       	ldd	r25, Z+3	; 0x03
     d52:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <xNextTaskUnblockTime+0x1>
     d56:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <xNextTaskUnblockTime>
     d5a:	20 91 3a 07 	lds	r18, 0x073A	; 0x80073a <xTickCount>
     d5e:	30 91 3b 07 	lds	r19, 0x073B	; 0x80073b <xTickCount+0x1>
     d62:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <xNextTaskUnblockTime>
     d66:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <xNextTaskUnblockTime+0x1>
     d6a:	28 17       	cp	r18, r24
     d6c:	39 07       	cpc	r19, r25
     d6e:	08 f4       	brcc	.+2      	; 0xd72 <vTaskIncrementTick+0xac>
     d70:	66 c0       	rjmp	.+204    	; 0xe3e <vTaskIncrementTick+0x178>
     d72:	e0 91 52 07 	lds	r30, 0x0752	; 0x800752 <pxDelayedTaskList>
     d76:	f0 91 53 07 	lds	r31, 0x0753	; 0x800753 <pxDelayedTaskList+0x1>
     d7a:	80 81       	ld	r24, Z
     d7c:	88 23       	and	r24, r24
     d7e:	99 f0       	breq	.+38     	; 0xda6 <vTaskIncrementTick+0xe0>
     d80:	e0 91 52 07 	lds	r30, 0x0752	; 0x800752 <pxDelayedTaskList>
     d84:	f0 91 53 07 	lds	r31, 0x0753	; 0x800753 <pxDelayedTaskList+0x1>
     d88:	05 80       	ldd	r0, Z+5	; 0x05
     d8a:	f6 81       	ldd	r31, Z+6	; 0x06
     d8c:	e0 2d       	mov	r30, r0
     d8e:	c6 81       	ldd	r28, Z+6	; 0x06
     d90:	d7 81       	ldd	r29, Z+7	; 0x07
     d92:	8a 81       	ldd	r24, Y+2	; 0x02
     d94:	9b 81       	ldd	r25, Y+3	; 0x03
     d96:	20 91 3a 07 	lds	r18, 0x073A	; 0x80073a <xTickCount>
     d9a:	30 91 3b 07 	lds	r19, 0x073B	; 0x80073b <xTickCount+0x1>
     d9e:	28 17       	cp	r18, r24
     da0:	39 07       	cpc	r19, r25
     da2:	f8 f4       	brcc	.+62     	; 0xde2 <vTaskIncrementTick+0x11c>
     da4:	19 c0       	rjmp	.+50     	; 0xdd8 <vTaskIncrementTick+0x112>
     da6:	8f ef       	ldi	r24, 0xFF	; 255
     da8:	9f ef       	ldi	r25, 0xFF	; 255
     daa:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <xNextTaskUnblockTime+0x1>
     dae:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <xNextTaskUnblockTime>
     db2:	45 c0       	rjmp	.+138    	; 0xe3e <vTaskIncrementTick+0x178>
     db4:	e0 91 52 07 	lds	r30, 0x0752	; 0x800752 <pxDelayedTaskList>
     db8:	f0 91 53 07 	lds	r31, 0x0753	; 0x800753 <pxDelayedTaskList+0x1>
     dbc:	05 80       	ldd	r0, Z+5	; 0x05
     dbe:	f6 81       	ldd	r31, Z+6	; 0x06
     dc0:	e0 2d       	mov	r30, r0
     dc2:	c6 81       	ldd	r28, Z+6	; 0x06
     dc4:	d7 81       	ldd	r29, Z+7	; 0x07
     dc6:	8a 81       	ldd	r24, Y+2	; 0x02
     dc8:	9b 81       	ldd	r25, Y+3	; 0x03
     dca:	20 91 3a 07 	lds	r18, 0x073A	; 0x80073a <xTickCount>
     dce:	30 91 3b 07 	lds	r19, 0x073B	; 0x80073b <xTickCount+0x1>
     dd2:	28 17       	cp	r18, r24
     dd4:	39 07       	cpc	r19, r25
     dd6:	28 f4       	brcc	.+10     	; 0xde2 <vTaskIncrementTick+0x11c>
     dd8:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <xNextTaskUnblockTime+0x1>
     ddc:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <xNextTaskUnblockTime>
     de0:	2e c0       	rjmp	.+92     	; 0xe3e <vTaskIncrementTick+0x178>
     de2:	8e 01       	movw	r16, r28
     de4:	0e 5f       	subi	r16, 0xFE	; 254
     de6:	1f 4f       	sbci	r17, 0xFF	; 255
     de8:	c8 01       	movw	r24, r16
     dea:	08 da       	rcall	.-3056   	; 0x1fc <vListRemove>
     dec:	8c 89       	ldd	r24, Y+20	; 0x14
     dee:	9d 89       	ldd	r25, Y+21	; 0x15
     df0:	89 2b       	or	r24, r25
     df2:	19 f0       	breq	.+6      	; 0xdfa <vTaskIncrementTick+0x134>
     df4:	ce 01       	movw	r24, r28
     df6:	0c 96       	adiw	r24, 0x0c	; 12
     df8:	01 da       	rcall	.-3070   	; 0x1fc <vListRemove>
     dfa:	8e 89       	ldd	r24, Y+22	; 0x16
     dfc:	90 91 38 07 	lds	r25, 0x0738	; 0x800738 <uxTopReadyPriority>
     e00:	98 17       	cp	r25, r24
     e02:	10 f4       	brcc	.+4      	; 0xe08 <vTaskIncrementTick+0x142>
     e04:	80 93 38 07 	sts	0x0738, r24	; 0x800738 <uxTopReadyPriority>
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	9c 01       	movw	r18, r24
     e0c:	22 0f       	add	r18, r18
     e0e:	33 1f       	adc	r19, r19
     e10:	22 0f       	add	r18, r18
     e12:	33 1f       	adc	r19, r19
     e14:	22 0f       	add	r18, r18
     e16:	33 1f       	adc	r19, r19
     e18:	82 0f       	add	r24, r18
     e1a:	93 1f       	adc	r25, r19
     e1c:	b8 01       	movw	r22, r16
     e1e:	8a 59       	subi	r24, 0x9A	; 154
     e20:	98 4f       	sbci	r25, 0xF8	; 248
     e22:	8a d9       	rcall	.-3308   	; 0x138 <vListInsertEnd>
     e24:	e0 91 52 07 	lds	r30, 0x0752	; 0x800752 <pxDelayedTaskList>
     e28:	f0 91 53 07 	lds	r31, 0x0753	; 0x800753 <pxDelayedTaskList+0x1>
     e2c:	80 81       	ld	r24, Z
     e2e:	81 11       	cpse	r24, r1
     e30:	c1 cf       	rjmp	.-126    	; 0xdb4 <vTaskIncrementTick+0xee>
     e32:	b9 cf       	rjmp	.-142    	; 0xda6 <vTaskIncrementTick+0xe0>
     e34:	80 91 35 07 	lds	r24, 0x0735	; 0x800735 <uxMissedTicks>
     e38:	8f 5f       	subi	r24, 0xFF	; 255
     e3a:	80 93 35 07 	sts	0x0735, r24	; 0x800735 <uxMissedTicks>
     e3e:	df 91       	pop	r29
     e40:	cf 91       	pop	r28
     e42:	1f 91       	pop	r17
     e44:	0f 91       	pop	r16
     e46:	08 95       	ret

00000e48 <xTaskResumeAll>:
     e48:	cf 92       	push	r12
     e4a:	df 92       	push	r13
     e4c:	ef 92       	push	r14
     e4e:	ff 92       	push	r15
     e50:	0f 93       	push	r16
     e52:	1f 93       	push	r17
     e54:	cf 93       	push	r28
     e56:	df 93       	push	r29
     e58:	0f b6       	in	r0, 0x3f	; 63
     e5a:	f8 94       	cli
     e5c:	0f 92       	push	r0
     e5e:	80 91 36 07 	lds	r24, 0x0736	; 0x800736 <uxSchedulerSuspended>
     e62:	81 50       	subi	r24, 0x01	; 1
     e64:	80 93 36 07 	sts	0x0736, r24	; 0x800736 <uxSchedulerSuspended>
     e68:	80 91 36 07 	lds	r24, 0x0736	; 0x800736 <uxSchedulerSuspended>
     e6c:	81 11       	cpse	r24, r1
     e6e:	5f c0       	rjmp	.+190    	; 0xf2e <xTaskResumeAll+0xe6>
     e70:	80 91 3c 07 	lds	r24, 0x073C	; 0x80073c <uxCurrentNumberOfTasks>
     e74:	81 11       	cpse	r24, r1
     e76:	2f c0       	rjmp	.+94     	; 0xed6 <xTaskResumeAll+0x8e>
     e78:	5d c0       	rjmp	.+186    	; 0xf34 <xTaskResumeAll+0xec>
     e7a:	d7 01       	movw	r26, r14
     e7c:	15 96       	adiw	r26, 0x05	; 5
     e7e:	ed 91       	ld	r30, X+
     e80:	fc 91       	ld	r31, X
     e82:	16 97       	sbiw	r26, 0x06	; 6
     e84:	c6 81       	ldd	r28, Z+6	; 0x06
     e86:	d7 81       	ldd	r29, Z+7	; 0x07
     e88:	ce 01       	movw	r24, r28
     e8a:	0c 96       	adiw	r24, 0x0c	; 12
     e8c:	b7 d9       	rcall	.-3218   	; 0x1fc <vListRemove>
     e8e:	8e 01       	movw	r16, r28
     e90:	0e 5f       	subi	r16, 0xFE	; 254
     e92:	1f 4f       	sbci	r17, 0xFF	; 255
     e94:	c8 01       	movw	r24, r16
     e96:	b2 d9       	rcall	.-3228   	; 0x1fc <vListRemove>
     e98:	8e 89       	ldd	r24, Y+22	; 0x16
     e9a:	90 91 38 07 	lds	r25, 0x0738	; 0x800738 <uxTopReadyPriority>
     e9e:	98 17       	cp	r25, r24
     ea0:	10 f4       	brcc	.+4      	; 0xea6 <xTaskResumeAll+0x5e>
     ea2:	80 93 38 07 	sts	0x0738, r24	; 0x800738 <uxTopReadyPriority>
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	9c 01       	movw	r18, r24
     eaa:	22 0f       	add	r18, r18
     eac:	33 1f       	adc	r19, r19
     eae:	22 0f       	add	r18, r18
     eb0:	33 1f       	adc	r19, r19
     eb2:	22 0f       	add	r18, r18
     eb4:	33 1f       	adc	r19, r19
     eb6:	82 0f       	add	r24, r18
     eb8:	93 1f       	adc	r25, r19
     eba:	b8 01       	movw	r22, r16
     ebc:	8a 59       	subi	r24, 0x9A	; 154
     ebe:	98 4f       	sbci	r25, 0xF8	; 248
     ec0:	3b d9       	rcall	.-3466   	; 0x138 <vListInsertEnd>
     ec2:	e0 91 8a 07 	lds	r30, 0x078A	; 0x80078a <pxCurrentTCB>
     ec6:	f0 91 8b 07 	lds	r31, 0x078B	; 0x80078b <pxCurrentTCB+0x1>
     eca:	9e 89       	ldd	r25, Y+22	; 0x16
     ecc:	86 89       	ldd	r24, Z+22	; 0x16
     ece:	98 17       	cp	r25, r24
     ed0:	58 f0       	brcs	.+22     	; 0xee8 <xTaskResumeAll+0xa0>
     ed2:	dc 2c       	mov	r13, r12
     ed4:	09 c0       	rjmp	.+18     	; 0xee8 <xTaskResumeAll+0xa0>
     ed6:	d1 2c       	mov	r13, r1
     ed8:	0f 2e       	mov	r0, r31
     eda:	f7 e4       	ldi	r31, 0x47	; 71
     edc:	ef 2e       	mov	r14, r31
     ede:	f7 e0       	ldi	r31, 0x07	; 7
     ee0:	ff 2e       	mov	r15, r31
     ee2:	f0 2d       	mov	r31, r0
     ee4:	cc 24       	eor	r12, r12
     ee6:	c3 94       	inc	r12
     ee8:	f7 01       	movw	r30, r14
     eea:	80 81       	ld	r24, Z
     eec:	81 11       	cpse	r24, r1
     eee:	c5 cf       	rjmp	.-118    	; 0xe7a <xTaskResumeAll+0x32>
     ef0:	80 91 35 07 	lds	r24, 0x0735	; 0x800735 <uxMissedTicks>
     ef4:	88 23       	and	r24, r24
     ef6:	79 f0       	breq	.+30     	; 0xf16 <xTaskResumeAll+0xce>
     ef8:	80 91 35 07 	lds	r24, 0x0735	; 0x800735 <uxMissedTicks>
     efc:	88 23       	and	r24, r24
     efe:	91 f0       	breq	.+36     	; 0xf24 <xTaskResumeAll+0xdc>
     f00:	e2 de       	rcall	.-572    	; 0xcc6 <vTaskIncrementTick>
     f02:	80 91 35 07 	lds	r24, 0x0735	; 0x800735 <uxMissedTicks>
     f06:	81 50       	subi	r24, 0x01	; 1
     f08:	80 93 35 07 	sts	0x0735, r24	; 0x800735 <uxMissedTicks>
     f0c:	80 91 35 07 	lds	r24, 0x0735	; 0x800735 <uxMissedTicks>
     f10:	81 11       	cpse	r24, r1
     f12:	f6 cf       	rjmp	.-20     	; 0xf00 <xTaskResumeAll+0xb8>
     f14:	07 c0       	rjmp	.+14     	; 0xf24 <xTaskResumeAll+0xdc>
     f16:	f1 e0       	ldi	r31, 0x01	; 1
     f18:	df 16       	cp	r13, r31
     f1a:	21 f0       	breq	.+8      	; 0xf24 <xTaskResumeAll+0xdc>
     f1c:	80 91 34 07 	lds	r24, 0x0734	; 0x800734 <xMissedYield>
     f20:	81 30       	cpi	r24, 0x01	; 1
     f22:	39 f4       	brne	.+14     	; 0xf32 <xTaskResumeAll+0xea>
     f24:	10 92 34 07 	sts	0x0734, r1	; 0x800734 <xMissedYield>
     f28:	c4 dc       	rcall	.-1656   	; 0x8b2 <vPortYield>
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	03 c0       	rjmp	.+6      	; 0xf34 <xTaskResumeAll+0xec>
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	01 c0       	rjmp	.+2      	; 0xf34 <xTaskResumeAll+0xec>
     f32:	80 e0       	ldi	r24, 0x00	; 0
     f34:	0f 90       	pop	r0
     f36:	0f be       	out	0x3f, r0	; 63
     f38:	df 91       	pop	r29
     f3a:	cf 91       	pop	r28
     f3c:	1f 91       	pop	r17
     f3e:	0f 91       	pop	r16
     f40:	ff 90       	pop	r15
     f42:	ef 90       	pop	r14
     f44:	df 90       	pop	r13
     f46:	cf 90       	pop	r12
     f48:	08 95       	ret

00000f4a <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
     f4a:	cf 93       	push	r28
     f4c:	df 93       	push	r29
     f4e:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
     f50:	89 2b       	or	r24, r25
     f52:	91 f0       	breq	.+36     	; 0xf78 <vTaskDelay+0x2e>
		{
			vTaskSuspendAll();
     f54:	b2 de       	rcall	.-668    	; 0xcba <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
     f56:	80 91 3a 07 	lds	r24, 0x073A	; 0x80073a <xTickCount>
     f5a:	90 91 3b 07 	lds	r25, 0x073B	; 0x80073b <xTickCount+0x1>
     f5e:	c8 0f       	add	r28, r24
     f60:	d9 1f       	adc	r29, r25

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
     f62:	80 91 8a 07 	lds	r24, 0x078A	; 0x80078a <pxCurrentTCB>
     f66:	90 91 8b 07 	lds	r25, 0x078B	; 0x80078b <pxCurrentTCB+0x1>
     f6a:	02 96       	adiw	r24, 0x02	; 2
     f6c:	47 d9       	rcall	.-3442   	; 0x1fc <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
     f6e:	ce 01       	movw	r24, r28
     f70:	53 dd       	rcall	.-1370   	; 0xa18 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
     f72:	6a df       	rcall	.-300    	; 0xe48 <xTaskResumeAll>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
     f74:	81 11       	cpse	r24, r1
     f76:	01 c0       	rjmp	.+2      	; 0xf7a <vTaskDelay+0x30>
		{
			portYIELD_WITHIN_API();
     f78:	9c dc       	rcall	.-1736   	; 0x8b2 <vPortYield>
     f7a:	df 91       	pop	r29
		}
	}
     f7c:	cf 91       	pop	r28
     f7e:	08 95       	ret

00000f80 <prvIdleTask>:
     f80:	0f 2e       	mov	r0, r31
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
     f82:	fe e3       	ldi	r31, 0x3E	; 62
     f84:	ef 2e       	mov	r14, r31
     f86:	f7 e0       	ldi	r31, 0x07	; 7
     f88:	ff 2e       	mov	r15, r31
     f8a:	f0 2d       	mov	r31, r0

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
     f8c:	c6 e6       	ldi	r28, 0x66	; 102
     f8e:	d7 e0       	ldi	r29, 0x07	; 7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
     f90:	80 91 3d 07 	lds	r24, 0x073D	; 0x80073d <uxTasksDeleted>
     f94:	88 23       	and	r24, r24
     f96:	29 f1       	breq	.+74     	; 0xfe2 <prvIdleTask+0x62>
		{
			vTaskSuspendAll();
     f98:	90 de       	rcall	.-736    	; 0xcba <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
     f9a:	d7 01       	movw	r26, r14
			xTaskResumeAll();
     f9c:	1c 91       	ld	r17, X
     f9e:	54 df       	rcall	.-344    	; 0xe48 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
     fa0:	11 23       	and	r17, r17
     fa2:	f9 f0       	breq	.+62     	; 0xfe2 <prvIdleTask+0x62>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
     fa4:	0f b6       	in	r0, 0x3f	; 63
     fa6:	f8 94       	cli
     fa8:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
     faa:	d7 01       	movw	r26, r14
     fac:	15 96       	adiw	r26, 0x05	; 5
     fae:	ed 91       	ld	r30, X+
     fb0:	fc 91       	ld	r31, X
     fb2:	16 97       	sbiw	r26, 0x06	; 6
     fb4:	06 81       	ldd	r16, Z+6	; 0x06
     fb6:	17 81       	ldd	r17, Z+7	; 0x07
					vListRemove( &( pxTCB->xGenericListItem ) );
     fb8:	c8 01       	movw	r24, r16
     fba:	02 96       	adiw	r24, 0x02	; 2
     fbc:	1f d9       	rcall	.-3522   	; 0x1fc <vListRemove>
					--uxCurrentNumberOfTasks;
     fbe:	80 91 3c 07 	lds	r24, 0x073C	; 0x80073c <uxCurrentNumberOfTasks>
     fc2:	81 50       	subi	r24, 0x01	; 1
     fc4:	80 93 3c 07 	sts	0x073C, r24	; 0x80073c <uxCurrentNumberOfTasks>
					--uxTasksDeleted;
     fc8:	80 91 3d 07 	lds	r24, 0x073D	; 0x80073d <uxTasksDeleted>
     fcc:	81 50       	subi	r24, 0x01	; 1
     fce:	80 93 3d 07 	sts	0x073D, r24	; 0x80073d <uxTasksDeleted>
				}
				taskEXIT_CRITICAL();
     fd2:	0f 90       	pop	r0
     fd4:	0f be       	out	0x3f, r0	; 63
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
     fd6:	f8 01       	movw	r30, r16
     fd8:	87 89       	ldd	r24, Z+23	; 0x17
     fda:	90 8d       	ldd	r25, Z+24	; 0x18
		vPortFree( pxTCB );
     fdc:	9a d8       	rcall	.-3788   	; 0x112 <vPortFree>
     fde:	c8 01       	movw	r24, r16

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
     fe0:	98 d8       	rcall	.-3792   	; 0x112 <vPortFree>
     fe2:	88 81       	ld	r24, Y
     fe4:	82 30       	cpi	r24, 0x02	; 2
			{
				taskYIELD();
     fe6:	a0 f2       	brcs	.-88     	; 0xf90 <prvIdleTask+0x10>
     fe8:	64 dc       	rcall	.-1848   	; 0x8b2 <vPortYield>
     fea:	d2 cf       	rjmp	.-92     	; 0xf90 <prvIdleTask+0x10>

00000fec <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
     fec:	80 91 36 07 	lds	r24, 0x0736	; 0x800736 <uxSchedulerSuspended>
     ff0:	81 11       	cpse	r24, r1
     ff2:	13 c0       	rjmp	.+38     	; 0x101a <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
     ff4:	80 91 38 07 	lds	r24, 0x0738	; 0x800738 <uxTopReadyPriority>
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	fc 01       	movw	r30, r24
     ffc:	ee 0f       	add	r30, r30
     ffe:	ff 1f       	adc	r31, r31
    1000:	ee 0f       	add	r30, r30
    1002:	ff 1f       	adc	r31, r31
    1004:	ee 0f       	add	r30, r30
    1006:	ff 1f       	adc	r31, r31
    1008:	8e 0f       	add	r24, r30
    100a:	9f 1f       	adc	r25, r31
    100c:	fc 01       	movw	r30, r24
    100e:	ea 59       	subi	r30, 0x9A	; 154
    1010:	f8 4f       	sbci	r31, 0xF8	; 248
    1012:	80 81       	ld	r24, Z
    1014:	88 23       	and	r24, r24
    1016:	29 f0       	breq	.+10     	; 0x1022 <vTaskSwitchContext+0x36>
    1018:	1b c0       	rjmp	.+54     	; 0x1050 <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	80 93 34 07 	sts	0x0734, r24	; 0x800734 <xMissedYield>
    1020:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    1022:	80 91 38 07 	lds	r24, 0x0738	; 0x800738 <uxTopReadyPriority>
    1026:	81 50       	subi	r24, 0x01	; 1
    1028:	80 93 38 07 	sts	0x0738, r24	; 0x800738 <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    102c:	80 91 38 07 	lds	r24, 0x0738	; 0x800738 <uxTopReadyPriority>
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	fc 01       	movw	r30, r24
    1034:	ee 0f       	add	r30, r30
    1036:	ff 1f       	adc	r31, r31
    1038:	ee 0f       	add	r30, r30
    103a:	ff 1f       	adc	r31, r31
    103c:	ee 0f       	add	r30, r30
    103e:	ff 1f       	adc	r31, r31
    1040:	8e 0f       	add	r24, r30
    1042:	9f 1f       	adc	r25, r31
    1044:	fc 01       	movw	r30, r24
    1046:	ea 59       	subi	r30, 0x9A	; 154
    1048:	f8 4f       	sbci	r31, 0xF8	; 248
    104a:	80 81       	ld	r24, Z
    104c:	88 23       	and	r24, r24
    104e:	49 f3       	breq	.-46     	; 0x1022 <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    1050:	80 91 38 07 	lds	r24, 0x0738	; 0x800738 <uxTopReadyPriority>
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	9c 01       	movw	r18, r24
    1058:	22 0f       	add	r18, r18
    105a:	33 1f       	adc	r19, r19
    105c:	22 0f       	add	r18, r18
    105e:	33 1f       	adc	r19, r19
    1060:	22 0f       	add	r18, r18
    1062:	33 1f       	adc	r19, r19
    1064:	28 0f       	add	r18, r24
    1066:	39 1f       	adc	r19, r25
    1068:	d9 01       	movw	r26, r18
    106a:	aa 59       	subi	r26, 0x9A	; 154
    106c:	b8 4f       	sbci	r27, 0xF8	; 248
    106e:	11 96       	adiw	r26, 0x01	; 1
    1070:	ed 91       	ld	r30, X+
    1072:	fc 91       	ld	r31, X
    1074:	12 97       	sbiw	r26, 0x02	; 2
    1076:	02 80       	ldd	r0, Z+2	; 0x02
    1078:	f3 81       	ldd	r31, Z+3	; 0x03
    107a:	e0 2d       	mov	r30, r0
    107c:	12 96       	adiw	r26, 0x02	; 2
    107e:	fc 93       	st	X, r31
    1080:	ee 93       	st	-X, r30
    1082:	11 97       	sbiw	r26, 0x01	; 1
    1084:	27 59       	subi	r18, 0x97	; 151
    1086:	38 4f       	sbci	r19, 0xF8	; 248
    1088:	e2 17       	cp	r30, r18
    108a:	f3 07       	cpc	r31, r19
    108c:	29 f4       	brne	.+10     	; 0x1098 <vTaskSwitchContext+0xac>
    108e:	22 81       	ldd	r18, Z+2	; 0x02
    1090:	33 81       	ldd	r19, Z+3	; 0x03
    1092:	fd 01       	movw	r30, r26
    1094:	32 83       	std	Z+2, r19	; 0x02
    1096:	21 83       	std	Z+1, r18	; 0x01
    1098:	fc 01       	movw	r30, r24
    109a:	ee 0f       	add	r30, r30
    109c:	ff 1f       	adc	r31, r31
    109e:	ee 0f       	add	r30, r30
    10a0:	ff 1f       	adc	r31, r31
    10a2:	ee 0f       	add	r30, r30
    10a4:	ff 1f       	adc	r31, r31
    10a6:	8e 0f       	add	r24, r30
    10a8:	9f 1f       	adc	r25, r31
    10aa:	fc 01       	movw	r30, r24
    10ac:	ea 59       	subi	r30, 0x9A	; 154
    10ae:	f8 4f       	sbci	r31, 0xF8	; 248
    10b0:	01 80       	ldd	r0, Z+1	; 0x01
    10b2:	f2 81       	ldd	r31, Z+2	; 0x02
    10b4:	e0 2d       	mov	r30, r0
    10b6:	86 81       	ldd	r24, Z+6	; 0x06
    10b8:	97 81       	ldd	r25, Z+7	; 0x07
    10ba:	90 93 8b 07 	sts	0x078B, r25	; 0x80078b <pxCurrentTCB+0x1>
    10be:	80 93 8a 07 	sts	0x078A, r24	; 0x80078a <pxCurrentTCB>
    10c2:	08 95       	ret

000010c4 <memset>:
    10c4:	dc 01       	movw	r26, r24
    10c6:	01 c0       	rjmp	.+2      	; 0x10ca <memset+0x6>
    10c8:	6d 93       	st	X+, r22
    10ca:	41 50       	subi	r20, 0x01	; 1
    10cc:	50 40       	sbci	r21, 0x00	; 0
    10ce:	e0 f7       	brcc	.-8      	; 0x10c8 <memset+0x4>
    10d0:	08 95       	ret

000010d2 <strncpy>:
    10d2:	fb 01       	movw	r30, r22
    10d4:	dc 01       	movw	r26, r24
    10d6:	41 50       	subi	r20, 0x01	; 1
    10d8:	50 40       	sbci	r21, 0x00	; 0
    10da:	48 f0       	brcs	.+18     	; 0x10ee <strncpy+0x1c>
    10dc:	01 90       	ld	r0, Z+
    10de:	0d 92       	st	X+, r0
    10e0:	00 20       	and	r0, r0
    10e2:	c9 f7       	brne	.-14     	; 0x10d6 <strncpy+0x4>
    10e4:	01 c0       	rjmp	.+2      	; 0x10e8 <strncpy+0x16>
    10e6:	1d 92       	st	X+, r1
    10e8:	41 50       	subi	r20, 0x01	; 1
    10ea:	50 40       	sbci	r21, 0x00	; 0
    10ec:	e0 f7       	brcc	.-8      	; 0x10e6 <strncpy+0x14>
    10ee:	08 95       	ret

000010f0 <_exit>:
    10f0:	f8 94       	cli

000010f2 <__stop_program>:
    10f2:	ff cf       	rjmp	.-2      	; 0x10f2 <__stop_program>
