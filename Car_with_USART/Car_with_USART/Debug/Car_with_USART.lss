
Car_with_USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  0000117e  00001212  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000117e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000649  00800152  00800152  00001264  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001264  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001294  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000290  00000000  00000000  000012d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002ae0  00000000  00000000  00001564  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000100f  00000000  00000000  00004044  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ad0  00000000  00000000  00005053  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006bc  00000000  00000000  00006b24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000fda  00000000  00000000  000071e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000170f  00000000  00000000  000081ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000288  00000000  00000000  000098c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	34 c5       	rjmp	.+2664   	; 0xa9e <__vector_13>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ee e7       	ldi	r30, 0x7E	; 126
      a0:	f1 e1       	ldi	r31, 0x11	; 17
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a2 35       	cpi	r26, 0x52	; 82
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	27 e0       	ldi	r18, 0x07	; 7
      b4:	a2 e5       	ldi	r26, 0x52	; 82
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ab 39       	cpi	r26, 0x9B	; 155
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	7e d3       	rcall	.+1788   	; 0x7c0 <main>
      c4:	0c 94 bd 08 	jmp	0x117a	; 0x117a <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
      ce:	ec 01       	movw	r28, r24
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
      d0:	39 d6       	rcall	.+3186   	; 0xd44 <vTaskSuspendAll>
      d2:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <__data_end>
      d6:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <__data_end+0x1>
      da:	c9 01       	movw	r24, r18
      dc:	8c 0f       	add	r24, r28
      de:	9d 1f       	adc	r25, r29
      e0:	8c 3d       	cpi	r24, 0xDC	; 220
      e2:	45 e0       	ldi	r20, 0x05	; 5
      e4:	94 07       	cpc	r25, r20
      e6:	58 f4       	brcc	.+22     	; 0xfe <pvPortMalloc+0x34>
      e8:	28 17       	cp	r18, r24
      ea:	39 07       	cpc	r19, r25
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
      ec:	58 f4       	brcc	.+22     	; 0x104 <pvPortMalloc+0x3a>
      ee:	e9 01       	movw	r28, r18
      f0:	cc 5a       	subi	r28, 0xAC	; 172
			xNextFreeByte += xWantedSize;			
      f2:	de 4f       	sbci	r29, 0xFE	; 254
      f4:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <__data_end+0x1>
      f8:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__data_end>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
      fc:	05 c0       	rjmp	.+10     	; 0x108 <pvPortMalloc+0x3e>
      fe:	c0 e0       	ldi	r28, 0x00	; 0
     100:	d0 e0       	ldi	r29, 0x00	; 0
     102:	02 c0       	rjmp	.+4      	; 0x108 <pvPortMalloc+0x3e>
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
     104:	c0 e0       	ldi	r28, 0x00	; 0
     106:	d0 e0       	ldi	r29, 0x00	; 0
		}
	}
	#endif	

	return pvReturn;
}
     108:	e4 d6       	rcall	.+3528   	; 0xed2 <xTaskResumeAll>
     10a:	ce 01       	movw	r24, r28
     10c:	df 91       	pop	r29
     10e:	cf 91       	pop	r28
     110:	08 95       	ret

00000112 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     112:	08 95       	ret

00000114 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
     114:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
     116:	03 96       	adiw	r24, 0x03	; 3
     118:	92 83       	std	Z+2, r25	; 0x02
     11a:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     11c:	2f ef       	ldi	r18, 0xFF	; 255
     11e:	3f ef       	ldi	r19, 0xFF	; 255
     120:	34 83       	std	Z+4, r19	; 0x04
     122:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
     124:	96 83       	std	Z+6, r25	; 0x06
     126:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
     128:	90 87       	std	Z+8, r25	; 0x08
     12a:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
     12c:	10 82       	st	Z, r1
     12e:	08 95       	ret

00000130 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     130:	fc 01       	movw	r30, r24
     132:	11 86       	std	Z+9, r1	; 0x09
     134:	10 86       	std	Z+8, r1	; 0x08
     136:	08 95       	ret

00000138 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
     138:	cf 93       	push	r28
     13a:	df 93       	push	r29
     13c:	fc 01       	movw	r30, r24
     13e:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     140:	21 81       	ldd	r18, Z+1	; 0x01
     142:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
     144:	e9 01       	movw	r28, r18
     146:	8a 81       	ldd	r24, Y+2	; 0x02
     148:	9b 81       	ldd	r25, Y+3	; 0x03
     14a:	13 96       	adiw	r26, 0x03	; 3
     14c:	9c 93       	st	X, r25
     14e:	8e 93       	st	-X, r24
     150:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
     152:	81 81       	ldd	r24, Z+1	; 0x01
     154:	92 81       	ldd	r25, Z+2	; 0x02
     156:	15 96       	adiw	r26, 0x05	; 5
     158:	9c 93       	st	X, r25
     15a:	8e 93       	st	-X, r24
     15c:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     15e:	8a 81       	ldd	r24, Y+2	; 0x02
     160:	9b 81       	ldd	r25, Y+3	; 0x03
     162:	ec 01       	movw	r28, r24
     164:	7d 83       	std	Y+5, r23	; 0x05
     166:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     168:	e9 01       	movw	r28, r18
     16a:	7b 83       	std	Y+3, r23	; 0x03
     16c:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     16e:	72 83       	std	Z+2, r23	; 0x02
     170:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     172:	19 96       	adiw	r26, 0x09	; 9
     174:	fc 93       	st	X, r31
     176:	ee 93       	st	-X, r30
     178:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
     17a:	80 81       	ld	r24, Z
     17c:	8f 5f       	subi	r24, 0xFF	; 255
     17e:	80 83       	st	Z, r24
}
     180:	df 91       	pop	r29
     182:	cf 91       	pop	r28
     184:	08 95       	ret

00000186 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
     186:	cf 93       	push	r28
     188:	df 93       	push	r29
     18a:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
     18c:	48 81       	ld	r20, Y
     18e:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     190:	4f 3f       	cpi	r20, 0xFF	; 255
     192:	2f ef       	ldi	r18, 0xFF	; 255
     194:	52 07       	cpc	r21, r18
     196:	31 f4       	brne	.+12     	; 0x1a4 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     198:	dc 01       	movw	r26, r24
     19a:	17 96       	adiw	r26, 0x07	; 7
     19c:	ed 91       	ld	r30, X+
     19e:	fc 91       	ld	r31, X
     1a0:	18 97       	sbiw	r26, 0x08	; 8
     1a2:	17 c0       	rjmp	.+46     	; 0x1d2 <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     1a4:	fc 01       	movw	r30, r24
     1a6:	33 96       	adiw	r30, 0x03	; 3
     1a8:	dc 01       	movw	r26, r24
     1aa:	15 96       	adiw	r26, 0x05	; 5
     1ac:	2d 91       	ld	r18, X+
     1ae:	3c 91       	ld	r19, X
     1b0:	16 97       	sbiw	r26, 0x06	; 6
     1b2:	d9 01       	movw	r26, r18
     1b4:	2d 91       	ld	r18, X+
     1b6:	3c 91       	ld	r19, X
     1b8:	42 17       	cp	r20, r18
     1ba:	53 07       	cpc	r21, r19
     1bc:	50 f0       	brcs	.+20     	; 0x1d2 <vListInsert+0x4c>
     1be:	02 80       	ldd	r0, Z+2	; 0x02
     1c0:	f3 81       	ldd	r31, Z+3	; 0x03
     1c2:	e0 2d       	mov	r30, r0
     1c4:	a2 81       	ldd	r26, Z+2	; 0x02
     1c6:	b3 81       	ldd	r27, Z+3	; 0x03
     1c8:	2d 91       	ld	r18, X+
     1ca:	3c 91       	ld	r19, X
     1cc:	42 17       	cp	r20, r18
     1ce:	53 07       	cpc	r21, r19
     1d0:	b0 f7       	brcc	.-20     	; 0x1be <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     1d2:	a2 81       	ldd	r26, Z+2	; 0x02
     1d4:	b3 81       	ldd	r27, Z+3	; 0x03
     1d6:	bb 83       	std	Y+3, r27	; 0x03
     1d8:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     1da:	15 96       	adiw	r26, 0x05	; 5
     1dc:	dc 93       	st	X, r29
     1de:	ce 93       	st	-X, r28
     1e0:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
     1e2:	fd 83       	std	Y+5, r31	; 0x05
     1e4:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
     1e6:	d3 83       	std	Z+3, r29	; 0x03
     1e8:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     1ea:	99 87       	std	Y+9, r25	; 0x09
     1ec:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     1ee:	fc 01       	movw	r30, r24
     1f0:	20 81       	ld	r18, Z
     1f2:	2f 5f       	subi	r18, 0xFF	; 255
     1f4:	20 83       	st	Z, r18
}
     1f6:	df 91       	pop	r29
     1f8:	cf 91       	pop	r28
     1fa:	08 95       	ret

000001fc <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
     1fc:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     1fe:	a2 81       	ldd	r26, Z+2	; 0x02
     200:	b3 81       	ldd	r27, Z+3	; 0x03
     202:	84 81       	ldd	r24, Z+4	; 0x04
     204:	95 81       	ldd	r25, Z+5	; 0x05
     206:	15 96       	adiw	r26, 0x05	; 5
     208:	9c 93       	st	X, r25
     20a:	8e 93       	st	-X, r24
     20c:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     20e:	a4 81       	ldd	r26, Z+4	; 0x04
     210:	b5 81       	ldd	r27, Z+5	; 0x05
     212:	82 81       	ldd	r24, Z+2	; 0x02
     214:	93 81       	ldd	r25, Z+3	; 0x03
     216:	13 96       	adiw	r26, 0x03	; 3
     218:	9c 93       	st	X, r25
     21a:	8e 93       	st	-X, r24
     21c:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     21e:	a0 85       	ldd	r26, Z+8	; 0x08
     220:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     222:	11 96       	adiw	r26, 0x01	; 1
     224:	8d 91       	ld	r24, X+
     226:	9c 91       	ld	r25, X
     228:	12 97       	sbiw	r26, 0x02	; 2
     22a:	e8 17       	cp	r30, r24
     22c:	f9 07       	cpc	r31, r25
     22e:	31 f4       	brne	.+12     	; 0x23c <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     230:	84 81       	ldd	r24, Z+4	; 0x04
     232:	95 81       	ldd	r25, Z+5	; 0x05
     234:	12 96       	adiw	r26, 0x02	; 2
     236:	9c 93       	st	X, r25
     238:	8e 93       	st	-X, r24
     23a:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
     23c:	11 86       	std	Z+9, r1	; 0x09
     23e:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     240:	8c 91       	ld	r24, X
     242:	81 50       	subi	r24, 0x01	; 1
     244:	8c 93       	st	X, r24
     246:	08 95       	ret

00000248 <adc_init>:

//-------------------------------------------------- Start ServoMotor SM --------------------------------------------------//


void SERVO_Init(){
	servo_state = servo_init;
     248:	80 e4       	ldi	r24, 0x40	; 64
     24a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     24e:	87 e8       	ldi	r24, 0x87	; 135
     250:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     254:	08 95       	ret

00000256 <initUSART>:
     256:	81 30       	cpi	r24, 0x01	; 1
     258:	81 f0       	breq	.+32     	; 0x27a <initUSART+0x24>
     25a:	e1 ec       	ldi	r30, 0xC1	; 193
     25c:	f0 e0       	ldi	r31, 0x00	; 0
     25e:	80 81       	ld	r24, Z
     260:	88 61       	ori	r24, 0x18	; 24
     262:	80 83       	st	Z, r24
     264:	e2 ec       	ldi	r30, 0xC2	; 194
     266:	f0 e0       	ldi	r31, 0x00	; 0
     268:	80 81       	ld	r24, Z
     26a:	86 60       	ori	r24, 0x06	; 6
     26c:	80 83       	st	Z, r24
     26e:	83 e3       	ldi	r24, 0x33	; 51
     270:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     274:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     278:	08 95       	ret
     27a:	e9 ec       	ldi	r30, 0xC9	; 201
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	80 81       	ld	r24, Z
     280:	88 61       	ori	r24, 0x18	; 24
     282:	80 83       	st	Z, r24
     284:	ea ec       	ldi	r30, 0xCA	; 202
     286:	f0 e0       	ldi	r31, 0x00	; 0
     288:	80 81       	ld	r24, Z
     28a:	86 60       	ori	r24, 0x06	; 6
     28c:	80 83       	st	Z, r24
     28e:	83 e3       	ldi	r24, 0x33	; 51
     290:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
     294:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     298:	08 95       	ret

0000029a <USART_Flush>:
     29a:	81 30       	cpi	r24, 0x01	; 1
     29c:	29 f4       	brne	.+10     	; 0x2a8 <USART_Flush+0xe>
     29e:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     2a2:	88 23       	and	r24, r24
     2a4:	74 f0       	brlt	.+28     	; 0x2c2 <USART_Flush+0x28>
     2a6:	08 95       	ret
     2a8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     2ac:	88 23       	and	r24, r24
     2ae:	8c f4       	brge	.+34     	; 0x2d2 <USART_Flush+0x38>
     2b0:	a6 ec       	ldi	r26, 0xC6	; 198
     2b2:	b0 e0       	ldi	r27, 0x00	; 0
     2b4:	e0 ec       	ldi	r30, 0xC0	; 192
     2b6:	f0 e0       	ldi	r31, 0x00	; 0
     2b8:	8c 91       	ld	r24, X
     2ba:	80 81       	ld	r24, Z
     2bc:	88 23       	and	r24, r24
     2be:	e4 f3       	brlt	.-8      	; 0x2b8 <USART_Flush+0x1e>
     2c0:	08 95       	ret
     2c2:	ae ec       	ldi	r26, 0xCE	; 206
     2c4:	b0 e0       	ldi	r27, 0x00	; 0
     2c6:	e8 ec       	ldi	r30, 0xC8	; 200
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	8c 91       	ld	r24, X
     2cc:	80 81       	ld	r24, Z
     2ce:	88 23       	and	r24, r24
     2d0:	e4 f3       	brlt	.-8      	; 0x2ca <USART_Flush+0x30>
     2d2:	08 95       	ret

000002d4 <USART_Receive>:
     2d4:	81 30       	cpi	r24, 0x01	; 1
     2d6:	41 f0       	breq	.+16     	; 0x2e8 <USART_Receive+0x14>
     2d8:	e0 ec       	ldi	r30, 0xC0	; 192
     2da:	f0 e0       	ldi	r31, 0x00	; 0
     2dc:	80 81       	ld	r24, Z
     2de:	88 23       	and	r24, r24
     2e0:	ec f7       	brge	.-6      	; 0x2dc <USART_Receive+0x8>
     2e2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     2e6:	08 95       	ret
     2e8:	e8 ec       	ldi	r30, 0xC8	; 200
     2ea:	f0 e0       	ldi	r31, 0x00	; 0
     2ec:	80 81       	ld	r24, Z
     2ee:	88 23       	and	r24, r24
     2f0:	ec f7       	brge	.-6      	; 0x2ec <USART_Receive+0x18>
     2f2:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     2f6:	08 95       	ret

000002f8 <TRANSMISSION_Tick>:
     2f8:	af 92       	push	r10
     2fa:	bf 92       	push	r11
     2fc:	cf 92       	push	r12
     2fe:	df 92       	push	r13
     300:	ef 92       	push	r14
     302:	ff 92       	push	r15
     304:	0f 93       	push	r16
     306:	1f 93       	push	r17
     308:	cf 93       	push	r28
     30a:	df 93       	push	r29
     30c:	80 91 96 07 	lds	r24, 0x0796	; 0x800796 <transmission_state>
     310:	81 30       	cpi	r24, 0x01	; 1
     312:	09 f0       	breq	.+2      	; 0x316 <TRANSMISSION_Tick+0x1e>
     314:	a1 c0       	rjmp	.+322    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	dd df       	rcall	.-70     	; 0x2d4 <USART_Receive>
     31a:	80 93 30 07 	sts	0x0730, r24	; 0x800730 <data_recieved>
     31e:	80 e0       	ldi	r24, 0x00	; 0
     320:	bc df       	rcall	.-136    	; 0x29a <USART_Flush>
     322:	20 91 30 07 	lds	r18, 0x0730	; 0x800730 <data_recieved>
     326:	82 2f       	mov	r24, r18
     328:	31 e0       	ldi	r19, 0x01	; 1
     32a:	22 fb       	bst	r18, 2
     32c:	00 27       	eor	r16, r16
     32e:	00 f9       	bld	r16, 0
     330:	10 e0       	ldi	r17, 0x00	; 0
     332:	22 ff       	sbrs	r18, 2
     334:	30 e0       	ldi	r19, 0x00	; 0
     336:	30 93 32 07 	sts	0x0732, r19	; 0x800732 <bit_val_0>
     33a:	01 2b       	or	r16, r17
     33c:	19 f1       	breq	.+70     	; 0x384 <TRANSMISSION_Tick+0x8c>
     33e:	31 e0       	ldi	r19, 0x01	; 1
     340:	30 93 38 07 	sts	0x0738, r19	; 0x800738 <going_reverse>
     344:	32 2f       	mov	r19, r18
     346:	31 70       	andi	r19, 0x01	; 1
     348:	81 fb       	bst	r24, 1
     34a:	aa 24       	eor	r10, r10
     34c:	a0 f8       	bld	r10, 0
     34e:	b1 2c       	mov	r11, r1
     350:	a1 14       	cp	r10, r1
     352:	b1 04       	cpc	r11, r1
     354:	31 f4       	brne	.+12     	; 0x362 <TRANSMISSION_Tick+0x6a>
     356:	33 23       	and	r19, r19
     358:	91 f0       	breq	.+36     	; 0x37e <TRANSMISSION_Tick+0x86>
     35a:	81 e0       	ldi	r24, 0x01	; 1
     35c:	80 93 3a 07 	sts	0x073A, r24	; 0x80073a <reverse>
     360:	3e c0       	rjmp	.+124    	; 0x3de <TRANSMISSION_Tick+0xe6>
     362:	ab 28       	or	r10, r11
     364:	61 f0       	breq	.+24     	; 0x37e <TRANSMISSION_Tick+0x86>
     366:	31 11       	cpse	r19, r1
     368:	04 c0       	rjmp	.+8      	; 0x372 <TRANSMISSION_Tick+0x7a>
     36a:	82 e0       	ldi	r24, 0x02	; 2
     36c:	80 93 3a 07 	sts	0x073A, r24	; 0x80073a <reverse>
     370:	36 c0       	rjmp	.+108    	; 0x3de <TRANSMISSION_Tick+0xe6>
     372:	33 23       	and	r19, r19
     374:	21 f0       	breq	.+8      	; 0x37e <TRANSMISSION_Tick+0x86>
     376:	83 e0       	ldi	r24, 0x03	; 3
     378:	80 93 3a 07 	sts	0x073A, r24	; 0x80073a <reverse>
     37c:	30 c0       	rjmp	.+96     	; 0x3de <TRANSMISSION_Tick+0xe6>
     37e:	10 92 3a 07 	sts	0x073A, r1	; 0x80073a <reverse>
     382:	2d c0       	rjmp	.+90     	; 0x3de <TRANSMISSION_Tick+0xe6>
     384:	00 9b       	sbis	0x00, 0	; 0
     386:	04 c0       	rjmp	.+8      	; 0x390 <TRANSMISSION_Tick+0x98>
     388:	31 e0       	ldi	r19, 0x01	; 1
     38a:	30 93 39 07 	sts	0x0739, r19	; 0x800739 <going_forward>
     38e:	02 c0       	rjmp	.+4      	; 0x394 <TRANSMISSION_Tick+0x9c>
     390:	10 92 39 07 	sts	0x0739, r1	; 0x800739 <going_forward>
     394:	32 2f       	mov	r19, r18
     396:	31 70       	andi	r19, 0x01	; 1
     398:	81 fb       	bst	r24, 1
     39a:	cc 24       	eor	r12, r12
     39c:	c0 f8       	bld	r12, 0
     39e:	d1 2c       	mov	r13, r1
     3a0:	c1 14       	cp	r12, r1
     3a2:	d1 04       	cpc	r13, r1
     3a4:	31 f4       	brne	.+12     	; 0x3b2 <TRANSMISSION_Tick+0xba>
     3a6:	33 23       	and	r19, r19
     3a8:	91 f0       	breq	.+36     	; 0x3ce <TRANSMISSION_Tick+0xd6>
     3aa:	81 e0       	ldi	r24, 0x01	; 1
     3ac:	80 93 3b 07 	sts	0x073B, r24	; 0x80073b <throttle>
     3b0:	16 c0       	rjmp	.+44     	; 0x3de <TRANSMISSION_Tick+0xe6>
     3b2:	cd 28       	or	r12, r13
     3b4:	61 f0       	breq	.+24     	; 0x3ce <TRANSMISSION_Tick+0xd6>
     3b6:	31 11       	cpse	r19, r1
     3b8:	04 c0       	rjmp	.+8      	; 0x3c2 <TRANSMISSION_Tick+0xca>
     3ba:	82 e0       	ldi	r24, 0x02	; 2
     3bc:	80 93 3b 07 	sts	0x073B, r24	; 0x80073b <throttle>
     3c0:	0e c0       	rjmp	.+28     	; 0x3de <TRANSMISSION_Tick+0xe6>
     3c2:	33 23       	and	r19, r19
     3c4:	21 f0       	breq	.+8      	; 0x3ce <TRANSMISSION_Tick+0xd6>
     3c6:	83 e0       	ldi	r24, 0x03	; 3
     3c8:	80 93 3b 07 	sts	0x073B, r24	; 0x80073b <throttle>
     3cc:	08 c0       	rjmp	.+16     	; 0x3de <TRANSMISSION_Tick+0xe6>
     3ce:	10 92 39 07 	sts	0x0739, r1	; 0x800739 <going_forward>
     3d2:	10 92 38 07 	sts	0x0738, r1	; 0x800738 <going_reverse>
     3d6:	10 92 3b 07 	sts	0x073B, r1	; 0x80073b <throttle>
     3da:	10 92 3a 07 	sts	0x073A, r1	; 0x80073a <reverse>
     3de:	80 91 30 07 	lds	r24, 0x0730	; 0x800730 <data_recieved>
     3e2:	21 e0       	ldi	r18, 0x01	; 1
     3e4:	83 fb       	bst	r24, 3
     3e6:	ee 24       	eor	r14, r14
     3e8:	e0 f8       	bld	r14, 0
     3ea:	f1 2c       	mov	r15, r1
     3ec:	83 ff       	sbrs	r24, 3
     3ee:	20 e0       	ldi	r18, 0x00	; 0
     3f0:	20 93 32 07 	sts	0x0732, r18	; 0x800732 <bit_val_0>
     3f4:	91 e0       	ldi	r25, 0x01	; 1
     3f6:	84 fb       	bst	r24, 4
     3f8:	22 27       	eor	r18, r18
     3fa:	20 f9       	bld	r18, 0
     3fc:	c2 2f       	mov	r28, r18
     3fe:	20 e0       	ldi	r18, 0x00	; 0
     400:	d2 2f       	mov	r29, r18
     402:	84 ff       	sbrs	r24, 4
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	90 93 31 07 	sts	0x0731, r25	; 0x800731 <bit_val_1>
     40a:	20 97       	sbiw	r28, 0x00	; 0
     40c:	79 f4       	brne	.+30     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     40e:	ef 28       	or	r14, r15
     410:	e9 f0       	breq	.+58     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     412:	80 b1       	in	r24, 0x00	; 0
     414:	80 95       	com	r24
     416:	83 fd       	sbrc	r24, 3
     418:	19 c0       	rjmp	.+50     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     41a:	81 e0       	ldi	r24, 0x01	; 1
     41c:	80 93 36 07 	sts	0x0736, r24	; 0x800736 <right>
     420:	10 92 35 07 	sts	0x0735, r1	; 0x800735 <left>
     424:	82 e0       	ldi	r24, 0x02	; 2
     426:	80 93 34 07 	sts	0x0734, r24	; 0x800734 <max_servo>
     42a:	16 c0       	rjmp	.+44     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     42c:	cd 2b       	or	r28, r29
     42e:	71 f0       	breq	.+28     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     430:	ef 28       	or	r14, r15
     432:	61 f4       	brne	.+24     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     434:	80 b1       	in	r24, 0x00	; 0
     436:	80 95       	com	r24
     438:	82 fd       	sbrc	r24, 2
     43a:	08 c0       	rjmp	.+16     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     43c:	10 92 36 07 	sts	0x0736, r1	; 0x800736 <right>
     440:	81 e0       	ldi	r24, 0x01	; 1
     442:	80 93 35 07 	sts	0x0735, r24	; 0x800735 <left>
     446:	80 93 34 07 	sts	0x0734, r24	; 0x800734 <max_servo>
     44a:	06 c0       	rjmp	.+12     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     44c:	10 92 36 07 	sts	0x0736, r1	; 0x800736 <right>
     450:	10 92 35 07 	sts	0x0735, r1	; 0x800735 <left>
     454:	10 92 34 07 	sts	0x0734, r1	; 0x800734 <max_servo>
     458:	80 91 96 07 	lds	r24, 0x0796	; 0x800796 <transmission_state>
     45c:	88 23       	and	r24, r24
     45e:	19 f0       	breq	.+6      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
     460:	10 92 96 07 	sts	0x0796, r1	; 0x800796 <transmission_state>
     464:	07 c0       	rjmp	.+14     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     466:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     46a:	88 23       	and	r24, r24
     46c:	1c f4       	brge	.+6      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	80 93 96 07 	sts	0x0796, r24	; 0x800796 <transmission_state>
     474:	df 91       	pop	r29
     476:	cf 91       	pop	r28
     478:	1f 91       	pop	r17
     47a:	0f 91       	pop	r16
     47c:	ff 90       	pop	r15
     47e:	ef 90       	pop	r14
     480:	df 90       	pop	r13
     482:	cf 90       	pop	r12
     484:	bf 90       	pop	r11
     486:	af 90       	pop	r10
     488:	08 95       	ret

0000048a <TRANSMISSIONSecTask>:
     48a:	10 92 96 07 	sts	0x0796, r1	; 0x800796 <transmission_state>
     48e:	34 df       	rcall	.-408    	; 0x2f8 <TRANSMISSION_Tick>
     490:	83 e0       	ldi	r24, 0x03	; 3
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	9f d5       	rcall	.+2878   	; 0xfd4 <vTaskDelay>
     496:	fb cf       	rjmp	.-10     	; 0x48e <TRANSMISSIONSecTask+0x4>

00000498 <TRANSMISSIONSecPulse>:
     498:	af 92       	push	r10
     49a:	bf 92       	push	r11
     49c:	cf 92       	push	r12
     49e:	df 92       	push	r13
     4a0:	ef 92       	push	r14
     4a2:	ff 92       	push	r15
     4a4:	0f 93       	push	r16
     4a6:	a1 2c       	mov	r10, r1
     4a8:	b1 2c       	mov	r11, r1
     4aa:	c1 2c       	mov	r12, r1
     4ac:	d1 2c       	mov	r13, r1
     4ae:	e1 2c       	mov	r14, r1
     4b0:	f1 2c       	mov	r15, r1
     4b2:	08 2f       	mov	r16, r24
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	30 e0       	ldi	r19, 0x00	; 0
     4b8:	45 e5       	ldi	r20, 0x55	; 85
     4ba:	50 e0       	ldi	r21, 0x00	; 0
     4bc:	63 e0       	ldi	r22, 0x03	; 3
     4be:	71 e0       	ldi	r23, 0x01	; 1
     4c0:	85 e4       	ldi	r24, 0x45	; 69
     4c2:	92 e0       	ldi	r25, 0x02	; 2
     4c4:	23 d3       	rcall	.+1606   	; 0xb0c <xTaskGenericCreate>
     4c6:	0f 91       	pop	r16
     4c8:	ff 90       	pop	r15
     4ca:	ef 90       	pop	r14
     4cc:	df 90       	pop	r13
     4ce:	cf 90       	pop	r12
     4d0:	bf 90       	pop	r11
     4d2:	af 90       	pop	r10
     4d4:	08 95       	ret

000004d6 <IR_Tick>:
     4d6:	80 91 99 07 	lds	r24, 0x0799	; 0x800799 <ir_state>
     4da:	81 11       	cpse	r24, r1
     4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <IR_Tick+0xc>
     4de:	80 b1       	in	r24, 0x00	; 0
     4e0:	08 95       	ret
     4e2:	81 11       	cpse	r24, r1
     4e4:	10 92 99 07 	sts	0x0799, r1	; 0x800799 <ir_state>
     4e8:	08 95       	ret

000004ea <IRSecTask>:
     4ea:	10 92 99 07 	sts	0x0799, r1	; 0x800799 <ir_state>
     4ee:	f3 df       	rcall	.-26     	; 0x4d6 <IR_Tick>
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	6f d5       	rcall	.+2782   	; 0xfd4 <vTaskDelay>
     4f6:	fb cf       	rjmp	.-10     	; 0x4ee <IRSecTask+0x4>

000004f8 <IRSecPulse>:
     4f8:	af 92       	push	r10
     4fa:	bf 92       	push	r11
     4fc:	cf 92       	push	r12
     4fe:	df 92       	push	r13
     500:	ef 92       	push	r14
     502:	ff 92       	push	r15
     504:	0f 93       	push	r16
     506:	a1 2c       	mov	r10, r1
     508:	b1 2c       	mov	r11, r1
     50a:	c1 2c       	mov	r12, r1
     50c:	d1 2c       	mov	r13, r1
     50e:	e1 2c       	mov	r14, r1
     510:	f1 2c       	mov	r15, r1
     512:	08 2f       	mov	r16, r24
     514:	20 e0       	ldi	r18, 0x00	; 0
     516:	30 e0       	ldi	r19, 0x00	; 0
     518:	45 e5       	ldi	r20, 0x55	; 85
     51a:	50 e0       	ldi	r21, 0x00	; 0
     51c:	67 e1       	ldi	r22, 0x17	; 23
     51e:	71 e0       	ldi	r23, 0x01	; 1
     520:	85 e7       	ldi	r24, 0x75	; 117
     522:	92 e0       	ldi	r25, 0x02	; 2
     524:	f3 d2       	rcall	.+1510   	; 0xb0c <xTaskGenericCreate>
     526:	0f 91       	pop	r16
     528:	ff 90       	pop	r15
     52a:	ef 90       	pop	r14
     52c:	df 90       	pop	r13
     52e:	cf 90       	pop	r12
     530:	bf 90       	pop	r11
     532:	af 90       	pop	r10
     534:	08 95       	ret

00000536 <FORWARD_Tick>:
     536:	80 91 97 07 	lds	r24, 0x0797	; 0x800797 <forward_state>
     53a:	81 30       	cpi	r24, 0x01	; 1
     53c:	a9 f0       	breq	.+42     	; 0x568 <FORWARD_Tick+0x32>
     53e:	18 f0       	brcs	.+6      	; 0x546 <FORWARD_Tick+0x10>
     540:	82 30       	cpi	r24, 0x02	; 2
     542:	59 f1       	breq	.+86     	; 0x59a <FORWARD_Tick+0x64>
     544:	08 95       	ret
     546:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <going_forward>
     54a:	88 23       	and	r24, r24
     54c:	f1 f1       	breq	.+124    	; 0x5ca <FORWARD_Tick+0x94>
     54e:	91 e0       	ldi	r25, 0x01	; 1
     550:	90 93 97 07 	sts	0x0797, r25	; 0x800797 <forward_state>
     554:	20 91 3b 07 	lds	r18, 0x073B	; 0x80073b <throttle>
     558:	83 e0       	ldi	r24, 0x03	; 3
     55a:	82 1b       	sub	r24, r18
     55c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     560:	10 92 37 07 	sts	0x0737, r1	; 0x800737 <pwm_counter>
     564:	98 b9       	out	0x08, r25	; 8
     566:	08 95       	ret
     568:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <going_forward>
     56c:	88 23       	and	r24, r24
     56e:	89 f0       	breq	.+34     	; 0x592 <FORWARD_Tick+0x5c>
     570:	80 91 37 07 	lds	r24, 0x0737	; 0x800737 <pwm_counter>
     574:	90 91 3b 07 	lds	r25, 0x073B	; 0x80073b <throttle>
     578:	89 17       	cp	r24, r25
     57a:	20 f4       	brcc	.+8      	; 0x584 <FORWARD_Tick+0x4e>
     57c:	8f 5f       	subi	r24, 0xFF	; 255
     57e:	80 93 37 07 	sts	0x0737, r24	; 0x800737 <pwm_counter>
     582:	08 95       	ret
     584:	82 e0       	ldi	r24, 0x02	; 2
     586:	80 93 97 07 	sts	0x0797, r24	; 0x800797 <forward_state>
     58a:	10 92 37 07 	sts	0x0737, r1	; 0x800737 <pwm_counter>
     58e:	18 b8       	out	0x08, r1	; 8
     590:	08 95       	ret
     592:	10 92 97 07 	sts	0x0797, r1	; 0x800797 <forward_state>
     596:	18 b8       	out	0x08, r1	; 8
     598:	08 95       	ret
     59a:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <going_forward>
     59e:	88 23       	and	r24, r24
     5a0:	89 f0       	breq	.+34     	; 0x5c4 <FORWARD_Tick+0x8e>
     5a2:	80 91 37 07 	lds	r24, 0x0737	; 0x800737 <pwm_counter>
     5a6:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
     5aa:	89 17       	cp	r24, r25
     5ac:	20 f4       	brcc	.+8      	; 0x5b6 <FORWARD_Tick+0x80>
     5ae:	8f 5f       	subi	r24, 0xFF	; 255
     5b0:	80 93 37 07 	sts	0x0737, r24	; 0x800737 <pwm_counter>
     5b4:	08 95       	ret
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	80 93 97 07 	sts	0x0797, r24	; 0x800797 <forward_state>
     5bc:	10 92 37 07 	sts	0x0737, r1	; 0x800737 <pwm_counter>
     5c0:	88 b9       	out	0x08, r24	; 8
     5c2:	08 95       	ret
     5c4:	10 92 97 07 	sts	0x0797, r1	; 0x800797 <forward_state>
     5c8:	18 b8       	out	0x08, r1	; 8
     5ca:	08 95       	ret

000005cc <ForwardSecTask>:
     5cc:	10 92 97 07 	sts	0x0797, r1	; 0x800797 <forward_state>
     5d0:	b2 df       	rcall	.-156    	; 0x536 <FORWARD_Tick>
     5d2:	83 e0       	ldi	r24, 0x03	; 3
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	fe d4       	rcall	.+2556   	; 0xfd4 <vTaskDelay>
     5d8:	fb cf       	rjmp	.-10     	; 0x5d0 <ForwardSecTask+0x4>

000005da <ForwardSecPulse>:
     5da:	af 92       	push	r10
     5dc:	bf 92       	push	r11
     5de:	cf 92       	push	r12
     5e0:	df 92       	push	r13
     5e2:	ef 92       	push	r14
     5e4:	ff 92       	push	r15
     5e6:	0f 93       	push	r16
     5e8:	a1 2c       	mov	r10, r1
     5ea:	b1 2c       	mov	r11, r1
     5ec:	c1 2c       	mov	r12, r1
     5ee:	d1 2c       	mov	r13, r1
     5f0:	e1 2c       	mov	r14, r1
     5f2:	f1 2c       	mov	r15, r1
     5f4:	08 2f       	mov	r16, r24
     5f6:	20 e0       	ldi	r18, 0x00	; 0
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	45 e5       	ldi	r20, 0x55	; 85
     5fc:	50 e0       	ldi	r21, 0x00	; 0
     5fe:	61 e2       	ldi	r22, 0x21	; 33
     600:	71 e0       	ldi	r23, 0x01	; 1
     602:	86 ee       	ldi	r24, 0xE6	; 230
     604:	92 e0       	ldi	r25, 0x02	; 2
     606:	82 d2       	rcall	.+1284   	; 0xb0c <xTaskGenericCreate>
     608:	0f 91       	pop	r16
     60a:	ff 90       	pop	r15
     60c:	ef 90       	pop	r14
     60e:	df 90       	pop	r13
     610:	cf 90       	pop	r12
     612:	bf 90       	pop	r11
     614:	af 90       	pop	r10
     616:	08 95       	ret

00000618 <REVERSE_Tick>:
     618:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <reverse_state>
     61c:	81 30       	cpi	r24, 0x01	; 1
     61e:	b9 f0       	breq	.+46     	; 0x64e <REVERSE_Tick+0x36>
     620:	18 f0       	brcs	.+6      	; 0x628 <REVERSE_Tick+0x10>
     622:	82 30       	cpi	r24, 0x02	; 2
     624:	69 f1       	breq	.+90     	; 0x680 <REVERSE_Tick+0x68>
     626:	08 95       	ret
     628:	80 91 38 07 	lds	r24, 0x0738	; 0x800738 <going_reverse>
     62c:	88 23       	and	r24, r24
     62e:	09 f4       	brne	.+2      	; 0x632 <REVERSE_Tick+0x1a>
     630:	40 c0       	rjmp	.+128    	; 0x6b2 <REVERSE_Tick+0x9a>
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	80 93 9a 07 	sts	0x079A, r24	; 0x80079a <reverse_state>
     638:	90 91 3a 07 	lds	r25, 0x073A	; 0x80073a <reverse>
     63c:	83 e0       	ldi	r24, 0x03	; 3
     63e:	89 1b       	sub	r24, r25
     640:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     644:	10 92 37 07 	sts	0x0737, r1	; 0x800737 <pwm_counter>
     648:	82 e0       	ldi	r24, 0x02	; 2
     64a:	88 b9       	out	0x08, r24	; 8
     64c:	08 95       	ret
     64e:	80 91 38 07 	lds	r24, 0x0738	; 0x800738 <going_reverse>
     652:	88 23       	and	r24, r24
     654:	89 f0       	breq	.+34     	; 0x678 <REVERSE_Tick+0x60>
     656:	80 91 37 07 	lds	r24, 0x0737	; 0x800737 <pwm_counter>
     65a:	90 91 3a 07 	lds	r25, 0x073A	; 0x80073a <reverse>
     65e:	89 17       	cp	r24, r25
     660:	20 f4       	brcc	.+8      	; 0x66a <REVERSE_Tick+0x52>
     662:	8f 5f       	subi	r24, 0xFF	; 255
     664:	80 93 37 07 	sts	0x0737, r24	; 0x800737 <pwm_counter>
     668:	08 95       	ret
     66a:	82 e0       	ldi	r24, 0x02	; 2
     66c:	80 93 9a 07 	sts	0x079A, r24	; 0x80079a <reverse_state>
     670:	10 92 37 07 	sts	0x0737, r1	; 0x800737 <pwm_counter>
     674:	18 b8       	out	0x08, r1	; 8
     676:	08 95       	ret
     678:	10 92 9a 07 	sts	0x079A, r1	; 0x80079a <reverse_state>
     67c:	18 b8       	out	0x08, r1	; 8
     67e:	08 95       	ret
     680:	80 91 38 07 	lds	r24, 0x0738	; 0x800738 <going_reverse>
     684:	88 23       	and	r24, r24
     686:	91 f0       	breq	.+36     	; 0x6ac <REVERSE_Tick+0x94>
     688:	80 91 37 07 	lds	r24, 0x0737	; 0x800737 <pwm_counter>
     68c:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
     690:	89 17       	cp	r24, r25
     692:	20 f4       	brcc	.+8      	; 0x69c <REVERSE_Tick+0x84>
     694:	8f 5f       	subi	r24, 0xFF	; 255
     696:	80 93 37 07 	sts	0x0737, r24	; 0x800737 <pwm_counter>
     69a:	08 95       	ret
     69c:	81 e0       	ldi	r24, 0x01	; 1
     69e:	80 93 9a 07 	sts	0x079A, r24	; 0x80079a <reverse_state>
     6a2:	10 92 37 07 	sts	0x0737, r1	; 0x800737 <pwm_counter>
     6a6:	82 e0       	ldi	r24, 0x02	; 2
     6a8:	88 b9       	out	0x08, r24	; 8
     6aa:	08 95       	ret
     6ac:	10 92 9a 07 	sts	0x079A, r1	; 0x80079a <reverse_state>
     6b0:	18 b8       	out	0x08, r1	; 8
     6b2:	08 95       	ret

000006b4 <ReverseSecTask>:
     6b4:	10 92 9a 07 	sts	0x079A, r1	; 0x80079a <reverse_state>
     6b8:	af df       	rcall	.-162    	; 0x618 <REVERSE_Tick>
     6ba:	83 e0       	ldi	r24, 0x03	; 3
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	8a d4       	rcall	.+2324   	; 0xfd4 <vTaskDelay>
     6c0:	fb cf       	rjmp	.-10     	; 0x6b8 <ReverseSecTask+0x4>

000006c2 <ReverseSecPulse>:
     6c2:	af 92       	push	r10
     6c4:	bf 92       	push	r11
     6c6:	cf 92       	push	r12
     6c8:	df 92       	push	r13
     6ca:	ef 92       	push	r14
     6cc:	ff 92       	push	r15
     6ce:	0f 93       	push	r16
     6d0:	a1 2c       	mov	r10, r1
     6d2:	b1 2c       	mov	r11, r1
     6d4:	c1 2c       	mov	r12, r1
     6d6:	d1 2c       	mov	r13, r1
     6d8:	e1 2c       	mov	r14, r1
     6da:	f1 2c       	mov	r15, r1
     6dc:	08 2f       	mov	r16, r24
     6de:	20 e0       	ldi	r18, 0x00	; 0
     6e0:	30 e0       	ldi	r19, 0x00	; 0
     6e2:	45 e5       	ldi	r20, 0x55	; 85
     6e4:	50 e0       	ldi	r21, 0x00	; 0
     6e6:	60 e3       	ldi	r22, 0x30	; 48
     6e8:	71 e0       	ldi	r23, 0x01	; 1
     6ea:	8a e5       	ldi	r24, 0x5A	; 90
     6ec:	93 e0       	ldi	r25, 0x03	; 3
     6ee:	0e d2       	rcall	.+1052   	; 0xb0c <xTaskGenericCreate>
     6f0:	0f 91       	pop	r16
     6f2:	ff 90       	pop	r15
     6f4:	ef 90       	pop	r14
     6f6:	df 90       	pop	r13
     6f8:	cf 90       	pop	r12
     6fa:	bf 90       	pop	r11
     6fc:	af 90       	pop	r10
     6fe:	08 95       	ret

00000700 <SERVO_Tick>:
		default:
			break;
	}
	
	//Transitions
	switch(servo_state){
     700:	80 91 98 07 	lds	r24, 0x0798	; 0x800798 <servo_state>
     704:	88 23       	and	r24, r24
     706:	19 f0       	breq	.+6      	; 0x70e <SERVO_Tick+0xe>
     708:	81 30       	cpi	r24, 0x01	; 1
     70a:	a1 f0       	breq	.+40     	; 0x734 <SERVO_Tick+0x34>
     70c:	30 c0       	rjmp	.+96     	; 0x76e <SERVO_Tick+0x6e>
		case servo_init:
			if(left || right){
     70e:	80 91 35 07 	lds	r24, 0x0735	; 0x800735 <left>
     712:	81 11       	cpse	r24, r1
     714:	04 c0       	rjmp	.+8      	; 0x71e <SERVO_Tick+0x1e>
     716:	80 91 36 07 	lds	r24, 0x0736	; 0x800736 <right>
     71a:	88 23       	and	r24, r24
     71c:	39 f0       	breq	.+14     	; 0x72c <SERVO_Tick+0x2c>
				servo_state = drive_high;
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	80 93 98 07 	sts	0x0798, r24	; 0x800798 <servo_state>
				servo_counter = 0;
     724:	10 92 33 07 	sts	0x0733, r1	; 0x800733 <servo_counter>
				PORTB = 0x01;
     728:	85 b9       	out	0x05, r24	; 5
     72a:	08 95       	ret
			}
		
			else{
				PORTB = 0x00;
     72c:	15 b8       	out	0x05, r1	; 5
				servo_state = servo_init;
     72e:	10 92 98 07 	sts	0x0798, r1	; 0x800798 <servo_state>
     732:	08 95       	ret
			}
			break;
		
		case drive_high:
			if((servo_counter < max_servo) && (left || right)){
     734:	80 91 33 07 	lds	r24, 0x0733	; 0x800733 <servo_counter>
     738:	90 91 34 07 	lds	r25, 0x0734	; 0x800734 <max_servo>
     73c:	89 17       	cp	r24, r25
     73e:	78 f4       	brcc	.+30     	; 0x75e <SERVO_Tick+0x5e>
     740:	90 91 35 07 	lds	r25, 0x0735	; 0x800735 <left>
     744:	91 11       	cpse	r25, r1
     746:	04 c0       	rjmp	.+8      	; 0x750 <SERVO_Tick+0x50>
     748:	90 91 36 07 	lds	r25, 0x0736	; 0x800736 <right>
     74c:	99 23       	and	r25, r25
     74e:	39 f0       	breq	.+14     	; 0x75e <SERVO_Tick+0x5e>
				++servo_counter;
     750:	8f 5f       	subi	r24, 0xFF	; 255
     752:	80 93 33 07 	sts	0x0733, r24	; 0x800733 <servo_counter>
				servo_state = drive_high;
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	80 93 98 07 	sts	0x0798, r24	; 0x800798 <servo_state>
     75c:	08 95       	ret
			}
		
			else{
				left = 0;
     75e:	10 92 35 07 	sts	0x0735, r1	; 0x800735 <left>
				right = 0;
     762:	10 92 36 07 	sts	0x0736, r1	; 0x800736 <right>
				PORTB = 0x00;
     766:	15 b8       	out	0x05, r1	; 5
				servo_state = servo_init;
     768:	10 92 98 07 	sts	0x0798, r1	; 0x800798 <servo_state>
     76c:	08 95       	ret
			}
			break;
		
		default:
			servo_state = servo_init;
     76e:	10 92 98 07 	sts	0x0798, r1	; 0x800798 <servo_state>
     772:	08 95       	ret

00000774 <SERVOSecTask>:

//-------------------------------------------------- Start ServoMotor SM --------------------------------------------------//


void SERVO_Init(){
	servo_state = servo_init;
     774:	10 92 98 07 	sts	0x0798, r1	; 0x800798 <servo_state>
{
	SERVO_Init();
	for(;;)
	{
		SERVO_Tick();
		vTaskDelay(1);
     778:	c3 df       	rcall	.-122    	; 0x700 <SERVO_Tick>
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	2a d4       	rcall	.+2132   	; 0xfd4 <vTaskDelay>
     780:	fb cf       	rjmp	.-10     	; 0x778 <SERVOSecTask+0x4>

00000782 <SERVOSecPulse>:
	}
}

void SERVOSecPulse(unsigned portBASE_TYPE Priority)
{
     782:	af 92       	push	r10
     784:	bf 92       	push	r11
     786:	cf 92       	push	r12
     788:	df 92       	push	r13
     78a:	ef 92       	push	r14
     78c:	ff 92       	push	r15
     78e:	0f 93       	push	r16
	xTaskCreate(SERVOSecTask, (signed portCHAR *)"SERVOSecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
     790:	a1 2c       	mov	r10, r1
     792:	b1 2c       	mov	r11, r1
     794:	c1 2c       	mov	r12, r1
     796:	d1 2c       	mov	r13, r1
     798:	e1 2c       	mov	r14, r1
     79a:	f1 2c       	mov	r15, r1
     79c:	08 2f       	mov	r16, r24
     79e:	20 e0       	ldi	r18, 0x00	; 0
     7a0:	30 e0       	ldi	r19, 0x00	; 0
     7a2:	45 e5       	ldi	r20, 0x55	; 85
     7a4:	50 e0       	ldi	r21, 0x00	; 0
     7a6:	6f e3       	ldi	r22, 0x3F	; 63
     7a8:	71 e0       	ldi	r23, 0x01	; 1
     7aa:	8a eb       	ldi	r24, 0xBA	; 186
     7ac:	93 e0       	ldi	r25, 0x03	; 3
     7ae:	ae d1       	rcall	.+860    	; 0xb0c <xTaskGenericCreate>
}
     7b0:	0f 91       	pop	r16
     7b2:	ff 90       	pop	r15
     7b4:	ef 90       	pop	r14
     7b6:	df 90       	pop	r13
     7b8:	cf 90       	pop	r12
     7ba:	bf 90       	pop	r11
     7bc:	af 90       	pop	r10
     7be:	08 95       	ret

000007c0 <main>:


//-------------------------------------------------- End ServoMotor SM --------------------------------------------------//
int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
     7c0:	11 b8       	out	0x01, r1	; 1
     7c2:	8f ef       	ldi	r24, 0xFF	; 255
     7c4:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
     7c6:	84 b9       	out	0x04, r24	; 4
     7c8:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF; PORTC = 0x00;
     7ca:	87 b9       	out	0x07, r24	; 7
	//DDRD = 0xFF; PORTD = 0x00;
	adc_init();
	initUSART(0);
     7cc:	18 b8       	out	0x08, r1	; 8
	//Start Tasks
	TRANSMISSIONSecPulse(1);
     7ce:	3c dd       	rcall	.-1416   	; 0x248 <adc_init>
	IRSecPulse(10);
     7d0:	80 e0       	ldi	r24, 0x00	; 0
	ForwardSecPulse(1);
     7d2:	41 dd       	rcall	.-1406   	; 0x256 <initUSART>
	ReverseSecPulse(1);
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	60 de       	rcall	.-832    	; 0x498 <TRANSMISSIONSecPulse>
     7d8:	8a e0       	ldi	r24, 0x0A	; 10
	SERVOSecPulse(1);
     7da:	8e de       	rcall	.-740    	; 0x4f8 <IRSecPulse>
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	fd de       	rcall	.-518    	; 0x5da <ForwardSecPulse>
	//RunSchedular
	vTaskStartScheduler();
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	6f df       	rcall	.-290    	; 0x6c2 <ReverseSecPulse>
	
	return 0;
     7e4:	81 e0       	ldi	r24, 0x01	; 1
     7e6:	cd df       	rcall	.-102    	; 0x782 <SERVOSecPulse>
     7e8:	84 d2       	rcall	.+1288   	; 0xcf2 <vTaskStartScheduler>
     7ea:	80 e0       	ldi	r24, 0x00	; 0
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	08 95       	ret

000007f0 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     7f0:	31 e1       	ldi	r19, 0x11	; 17
     7f2:	fc 01       	movw	r30, r24
     7f4:	30 83       	st	Z, r19
     7f6:	31 97       	sbiw	r30, 0x01	; 1
     7f8:	22 e2       	ldi	r18, 0x22	; 34
     7fa:	20 83       	st	Z, r18
     7fc:	31 97       	sbiw	r30, 0x01	; 1
     7fe:	a3 e3       	ldi	r26, 0x33	; 51
     800:	a0 83       	st	Z, r26
     802:	31 97       	sbiw	r30, 0x01	; 1
     804:	60 83       	st	Z, r22
     806:	31 97       	sbiw	r30, 0x01	; 1
     808:	70 83       	st	Z, r23
     80a:	31 97       	sbiw	r30, 0x01	; 1
     80c:	10 82       	st	Z, r1
     80e:	31 97       	sbiw	r30, 0x01	; 1
     810:	60 e8       	ldi	r22, 0x80	; 128
     812:	60 83       	st	Z, r22
     814:	31 97       	sbiw	r30, 0x01	; 1
     816:	10 82       	st	Z, r1
     818:	31 97       	sbiw	r30, 0x01	; 1
     81a:	62 e0       	ldi	r22, 0x02	; 2
     81c:	60 83       	st	Z, r22
     81e:	31 97       	sbiw	r30, 0x01	; 1
     820:	63 e0       	ldi	r22, 0x03	; 3
     822:	60 83       	st	Z, r22
     824:	31 97       	sbiw	r30, 0x01	; 1
     826:	64 e0       	ldi	r22, 0x04	; 4
     828:	60 83       	st	Z, r22
     82a:	31 97       	sbiw	r30, 0x01	; 1
     82c:	65 e0       	ldi	r22, 0x05	; 5
     82e:	60 83       	st	Z, r22
     830:	31 97       	sbiw	r30, 0x01	; 1
     832:	66 e0       	ldi	r22, 0x06	; 6
     834:	60 83       	st	Z, r22
     836:	31 97       	sbiw	r30, 0x01	; 1
     838:	67 e0       	ldi	r22, 0x07	; 7
     83a:	60 83       	st	Z, r22
     83c:	31 97       	sbiw	r30, 0x01	; 1
     83e:	68 e0       	ldi	r22, 0x08	; 8
     840:	60 83       	st	Z, r22
     842:	31 97       	sbiw	r30, 0x01	; 1
     844:	69 e0       	ldi	r22, 0x09	; 9
     846:	60 83       	st	Z, r22
     848:	31 97       	sbiw	r30, 0x01	; 1
     84a:	60 e1       	ldi	r22, 0x10	; 16
     84c:	60 83       	st	Z, r22
     84e:	31 97       	sbiw	r30, 0x01	; 1
     850:	30 83       	st	Z, r19
     852:	31 97       	sbiw	r30, 0x01	; 1
     854:	32 e1       	ldi	r19, 0x12	; 18
     856:	30 83       	st	Z, r19
     858:	31 97       	sbiw	r30, 0x01	; 1
     85a:	33 e1       	ldi	r19, 0x13	; 19
     85c:	30 83       	st	Z, r19
     85e:	31 97       	sbiw	r30, 0x01	; 1
     860:	34 e1       	ldi	r19, 0x14	; 20
     862:	30 83       	st	Z, r19
     864:	31 97       	sbiw	r30, 0x01	; 1
     866:	35 e1       	ldi	r19, 0x15	; 21
     868:	30 83       	st	Z, r19
     86a:	31 97       	sbiw	r30, 0x01	; 1
     86c:	36 e1       	ldi	r19, 0x16	; 22
     86e:	30 83       	st	Z, r19
     870:	31 97       	sbiw	r30, 0x01	; 1
     872:	37 e1       	ldi	r19, 0x17	; 23
     874:	30 83       	st	Z, r19
     876:	31 97       	sbiw	r30, 0x01	; 1
     878:	38 e1       	ldi	r19, 0x18	; 24
     87a:	30 83       	st	Z, r19
     87c:	31 97       	sbiw	r30, 0x01	; 1
     87e:	39 e1       	ldi	r19, 0x19	; 25
     880:	30 83       	st	Z, r19
     882:	31 97       	sbiw	r30, 0x01	; 1
     884:	30 e2       	ldi	r19, 0x20	; 32
     886:	30 83       	st	Z, r19
     888:	31 97       	sbiw	r30, 0x01	; 1
     88a:	31 e2       	ldi	r19, 0x21	; 33
     88c:	30 83       	st	Z, r19
     88e:	31 97       	sbiw	r30, 0x01	; 1
     890:	20 83       	st	Z, r18
     892:	31 97       	sbiw	r30, 0x01	; 1
     894:	23 e2       	ldi	r18, 0x23	; 35
     896:	20 83       	st	Z, r18
     898:	31 97       	sbiw	r30, 0x01	; 1
     89a:	40 83       	st	Z, r20
     89c:	31 97       	sbiw	r30, 0x01	; 1
     89e:	50 83       	st	Z, r21
     8a0:	31 97       	sbiw	r30, 0x01	; 1
     8a2:	26 e2       	ldi	r18, 0x26	; 38
     8a4:	20 83       	st	Z, r18
     8a6:	31 97       	sbiw	r30, 0x01	; 1
     8a8:	27 e2       	ldi	r18, 0x27	; 39
     8aa:	20 83       	st	Z, r18
     8ac:	31 97       	sbiw	r30, 0x01	; 1
     8ae:	28 e2       	ldi	r18, 0x28	; 40
     8b0:	20 83       	st	Z, r18
     8b2:	31 97       	sbiw	r30, 0x01	; 1
     8b4:	29 e2       	ldi	r18, 0x29	; 41
     8b6:	20 83       	st	Z, r18
     8b8:	31 97       	sbiw	r30, 0x01	; 1
     8ba:	20 e3       	ldi	r18, 0x30	; 48
     8bc:	20 83       	st	Z, r18
     8be:	31 97       	sbiw	r30, 0x01	; 1
     8c0:	21 e3       	ldi	r18, 0x31	; 49
     8c2:	20 83       	st	Z, r18
     8c4:	86 97       	sbiw	r24, 0x26	; 38
     8c6:	08 95       	ret

000008c8 <xPortStartScheduler>:
     8c8:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     8cc:	8c e7       	ldi	r24, 0x7C	; 124
     8ce:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     8d2:	8b e0       	ldi	r24, 0x0B	; 11
     8d4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     8d8:	ef e6       	ldi	r30, 0x6F	; 111
     8da:	f0 e0       	ldi	r31, 0x00	; 0
     8dc:	80 81       	ld	r24, Z
     8de:	82 60       	ori	r24, 0x02	; 2
     8e0:	80 83       	st	Z, r24
     8e2:	a0 91 94 07 	lds	r26, 0x0794	; 0x800794 <pxCurrentTCB>
     8e6:	b0 91 95 07 	lds	r27, 0x0795	; 0x800795 <pxCurrentTCB+0x1>
     8ea:	cd 91       	ld	r28, X+
     8ec:	cd bf       	out	0x3d, r28	; 61
     8ee:	dd 91       	ld	r29, X+
     8f0:	de bf       	out	0x3e, r29	; 62
     8f2:	ff 91       	pop	r31
     8f4:	ef 91       	pop	r30
     8f6:	df 91       	pop	r29
     8f8:	cf 91       	pop	r28
     8fa:	bf 91       	pop	r27
     8fc:	af 91       	pop	r26
     8fe:	9f 91       	pop	r25
     900:	8f 91       	pop	r24
     902:	7f 91       	pop	r23
     904:	6f 91       	pop	r22
     906:	5f 91       	pop	r21
     908:	4f 91       	pop	r20
     90a:	3f 91       	pop	r19
     90c:	2f 91       	pop	r18
     90e:	1f 91       	pop	r17
     910:	0f 91       	pop	r16
     912:	ff 90       	pop	r15
     914:	ef 90       	pop	r14
     916:	df 90       	pop	r13
     918:	cf 90       	pop	r12
     91a:	bf 90       	pop	r11
     91c:	af 90       	pop	r10
     91e:	9f 90       	pop	r9
     920:	8f 90       	pop	r8
     922:	7f 90       	pop	r7
     924:	6f 90       	pop	r6
     926:	5f 90       	pop	r5
     928:	4f 90       	pop	r4
     92a:	3f 90       	pop	r3
     92c:	2f 90       	pop	r2
     92e:	1f 90       	pop	r1
     930:	0f 90       	pop	r0
     932:	0f be       	out	0x3f, r0	; 63
     934:	0f 90       	pop	r0
     936:	08 95       	ret
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	08 95       	ret

0000093c <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     93c:	0f 92       	push	r0
     93e:	0f b6       	in	r0, 0x3f	; 63
     940:	f8 94       	cli
     942:	0f 92       	push	r0
     944:	1f 92       	push	r1
     946:	11 24       	eor	r1, r1
     948:	2f 92       	push	r2
     94a:	3f 92       	push	r3
     94c:	4f 92       	push	r4
     94e:	5f 92       	push	r5
     950:	6f 92       	push	r6
     952:	7f 92       	push	r7
     954:	8f 92       	push	r8
     956:	9f 92       	push	r9
     958:	af 92       	push	r10
     95a:	bf 92       	push	r11
     95c:	cf 92       	push	r12
     95e:	df 92       	push	r13
     960:	ef 92       	push	r14
     962:	ff 92       	push	r15
     964:	0f 93       	push	r16
     966:	1f 93       	push	r17
     968:	2f 93       	push	r18
     96a:	3f 93       	push	r19
     96c:	4f 93       	push	r20
     96e:	5f 93       	push	r21
     970:	6f 93       	push	r22
     972:	7f 93       	push	r23
     974:	8f 93       	push	r24
     976:	9f 93       	push	r25
     978:	af 93       	push	r26
     97a:	bf 93       	push	r27
     97c:	cf 93       	push	r28
     97e:	df 93       	push	r29
     980:	ef 93       	push	r30
     982:	ff 93       	push	r31
     984:	a0 91 94 07 	lds	r26, 0x0794	; 0x800794 <pxCurrentTCB>
     988:	b0 91 95 07 	lds	r27, 0x0795	; 0x800795 <pxCurrentTCB+0x1>
     98c:	0d b6       	in	r0, 0x3d	; 61
     98e:	0d 92       	st	X+, r0
     990:	0e b6       	in	r0, 0x3e	; 62
	vTaskSwitchContext();
     992:	0d 92       	st	X+, r0
	portRESTORE_CONTEXT();
     994:	70 d3       	rcall	.+1760   	; 0x1076 <vTaskSwitchContext>
     996:	a0 91 94 07 	lds	r26, 0x0794	; 0x800794 <pxCurrentTCB>
     99a:	b0 91 95 07 	lds	r27, 0x0795	; 0x800795 <pxCurrentTCB+0x1>
     99e:	cd 91       	ld	r28, X+
     9a0:	cd bf       	out	0x3d, r28	; 61
     9a2:	dd 91       	ld	r29, X+
     9a4:	de bf       	out	0x3e, r29	; 62
     9a6:	ff 91       	pop	r31
     9a8:	ef 91       	pop	r30
     9aa:	df 91       	pop	r29
     9ac:	cf 91       	pop	r28
     9ae:	bf 91       	pop	r27
     9b0:	af 91       	pop	r26
     9b2:	9f 91       	pop	r25
     9b4:	8f 91       	pop	r24
     9b6:	7f 91       	pop	r23
     9b8:	6f 91       	pop	r22
     9ba:	5f 91       	pop	r21
     9bc:	4f 91       	pop	r20
     9be:	3f 91       	pop	r19
     9c0:	2f 91       	pop	r18
     9c2:	1f 91       	pop	r17
     9c4:	0f 91       	pop	r16
     9c6:	ff 90       	pop	r15
     9c8:	ef 90       	pop	r14
     9ca:	df 90       	pop	r13
     9cc:	cf 90       	pop	r12
     9ce:	bf 90       	pop	r11
     9d0:	af 90       	pop	r10
     9d2:	9f 90       	pop	r9
     9d4:	8f 90       	pop	r8
     9d6:	7f 90       	pop	r7
     9d8:	6f 90       	pop	r6
     9da:	5f 90       	pop	r5
     9dc:	4f 90       	pop	r4
     9de:	3f 90       	pop	r3
     9e0:	2f 90       	pop	r2
     9e2:	1f 90       	pop	r1
     9e4:	0f 90       	pop	r0
     9e6:	0f be       	out	0x3f, r0	; 63

	asm volatile ( "ret" );
     9e8:	0f 90       	pop	r0
     9ea:	08 95       	ret

000009ec <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     9ec:	0f 92       	push	r0
     9ee:	0f b6       	in	r0, 0x3f	; 63
     9f0:	f8 94       	cli
     9f2:	0f 92       	push	r0
     9f4:	1f 92       	push	r1
     9f6:	11 24       	eor	r1, r1
     9f8:	2f 92       	push	r2
     9fa:	3f 92       	push	r3
     9fc:	4f 92       	push	r4
     9fe:	5f 92       	push	r5
     a00:	6f 92       	push	r6
     a02:	7f 92       	push	r7
     a04:	8f 92       	push	r8
     a06:	9f 92       	push	r9
     a08:	af 92       	push	r10
     a0a:	bf 92       	push	r11
     a0c:	cf 92       	push	r12
     a0e:	df 92       	push	r13
     a10:	ef 92       	push	r14
     a12:	ff 92       	push	r15
     a14:	0f 93       	push	r16
     a16:	1f 93       	push	r17
     a18:	2f 93       	push	r18
     a1a:	3f 93       	push	r19
     a1c:	4f 93       	push	r20
     a1e:	5f 93       	push	r21
     a20:	6f 93       	push	r22
     a22:	7f 93       	push	r23
     a24:	8f 93       	push	r24
     a26:	9f 93       	push	r25
     a28:	af 93       	push	r26
     a2a:	bf 93       	push	r27
     a2c:	cf 93       	push	r28
     a2e:	df 93       	push	r29
     a30:	ef 93       	push	r30
     a32:	ff 93       	push	r31
     a34:	a0 91 94 07 	lds	r26, 0x0794	; 0x800794 <pxCurrentTCB>
     a38:	b0 91 95 07 	lds	r27, 0x0795	; 0x800795 <pxCurrentTCB+0x1>
     a3c:	0d b6       	in	r0, 0x3d	; 61
     a3e:	0d 92       	st	X+, r0
     a40:	0e b6       	in	r0, 0x3e	; 62
	vTaskIncrementTick();
	vTaskSwitchContext();
     a42:	0d 92       	st	X+, r0
     a44:	85 d1       	rcall	.+778    	; 0xd50 <vTaskIncrementTick>
	portRESTORE_CONTEXT();
     a46:	17 d3       	rcall	.+1582   	; 0x1076 <vTaskSwitchContext>
     a48:	a0 91 94 07 	lds	r26, 0x0794	; 0x800794 <pxCurrentTCB>
     a4c:	b0 91 95 07 	lds	r27, 0x0795	; 0x800795 <pxCurrentTCB+0x1>
     a50:	cd 91       	ld	r28, X+
     a52:	cd bf       	out	0x3d, r28	; 61
     a54:	dd 91       	ld	r29, X+
     a56:	de bf       	out	0x3e, r29	; 62
     a58:	ff 91       	pop	r31
     a5a:	ef 91       	pop	r30
     a5c:	df 91       	pop	r29
     a5e:	cf 91       	pop	r28
     a60:	bf 91       	pop	r27
     a62:	af 91       	pop	r26
     a64:	9f 91       	pop	r25
     a66:	8f 91       	pop	r24
     a68:	7f 91       	pop	r23
     a6a:	6f 91       	pop	r22
     a6c:	5f 91       	pop	r21
     a6e:	4f 91       	pop	r20
     a70:	3f 91       	pop	r19
     a72:	2f 91       	pop	r18
     a74:	1f 91       	pop	r17
     a76:	0f 91       	pop	r16
     a78:	ff 90       	pop	r15
     a7a:	ef 90       	pop	r14
     a7c:	df 90       	pop	r13
     a7e:	cf 90       	pop	r12
     a80:	bf 90       	pop	r11
     a82:	af 90       	pop	r10
     a84:	9f 90       	pop	r9
     a86:	8f 90       	pop	r8
     a88:	7f 90       	pop	r7
     a8a:	6f 90       	pop	r6
     a8c:	5f 90       	pop	r5
     a8e:	4f 90       	pop	r4
     a90:	3f 90       	pop	r3
     a92:	2f 90       	pop	r2
     a94:	1f 90       	pop	r1
     a96:	0f 90       	pop	r0
     a98:	0f be       	out	0x3f, r0	; 63

	asm volatile ( "ret" );
     a9a:	0f 90       	pop	r0
     a9c:	08 95       	ret

00000a9e <__vector_13>:
}
     a9e:	a6 df       	rcall	.-180    	; 0x9ec <vPortYieldFromTick>
     aa0:	18 95       	reti

00000aa2 <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
     aa2:	cf 93       	push	r28
     aa4:	df 93       	push	r29
     aa6:	ec 01       	movw	r28, r24
     aa8:	e0 91 94 07 	lds	r30, 0x0794	; 0x800794 <pxCurrentTCB>
     aac:	f0 91 95 07 	lds	r31, 0x0795	; 0x800795 <pxCurrentTCB+0x1>
     ab0:	93 83       	std	Z+3, r25	; 0x03
     ab2:	82 83       	std	Z+2, r24	; 0x02
     ab4:	80 91 44 07 	lds	r24, 0x0744	; 0x800744 <xTickCount>
     ab8:	90 91 45 07 	lds	r25, 0x0745	; 0x800745 <xTickCount+0x1>
     abc:	c8 17       	cp	r28, r24
     abe:	d9 07       	cpc	r29, r25
     ac0:	60 f4       	brcc	.+24     	; 0xada <prvAddCurrentTaskToDelayedList+0x38>
     ac2:	60 91 94 07 	lds	r22, 0x0794	; 0x800794 <pxCurrentTCB>
     ac6:	70 91 95 07 	lds	r23, 0x0795	; 0x800795 <pxCurrentTCB+0x1>
     aca:	80 91 5a 07 	lds	r24, 0x075A	; 0x80075a <pxOverflowDelayedTaskList>
     ace:	90 91 5b 07 	lds	r25, 0x075B	; 0x80075b <pxOverflowDelayedTaskList+0x1>
     ad2:	6e 5f       	subi	r22, 0xFE	; 254
     ad4:	7f 4f       	sbci	r23, 0xFF	; 255
     ad6:	57 db       	rcall	.-2386   	; 0x186 <vListInsert>
     ad8:	16 c0       	rjmp	.+44     	; 0xb06 <prvAddCurrentTaskToDelayedList+0x64>
     ada:	60 91 94 07 	lds	r22, 0x0794	; 0x800794 <pxCurrentTCB>
     ade:	70 91 95 07 	lds	r23, 0x0795	; 0x800795 <pxCurrentTCB+0x1>
     ae2:	80 91 5c 07 	lds	r24, 0x075C	; 0x80075c <pxDelayedTaskList>
     ae6:	90 91 5d 07 	lds	r25, 0x075D	; 0x80075d <pxDelayedTaskList+0x1>
     aea:	6e 5f       	subi	r22, 0xFE	; 254
     aec:	7f 4f       	sbci	r23, 0xFF	; 255
     aee:	4b db       	rcall	.-2410   	; 0x186 <vListInsert>
     af0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <xNextTaskUnblockTime>
     af4:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <xNextTaskUnblockTime+0x1>
     af8:	c8 17       	cp	r28, r24
     afa:	d9 07       	cpc	r29, r25
     afc:	20 f4       	brcc	.+8      	; 0xb06 <prvAddCurrentTaskToDelayedList+0x64>
     afe:	d0 93 02 01 	sts	0x0102, r29	; 0x800102 <xNextTaskUnblockTime+0x1>
     b02:	c0 93 01 01 	sts	0x0101, r28	; 0x800101 <xNextTaskUnblockTime>
     b06:	df 91       	pop	r29
     b08:	cf 91       	pop	r28
     b0a:	08 95       	ret

00000b0c <xTaskGenericCreate>:
     b0c:	4f 92       	push	r4
     b0e:	5f 92       	push	r5
     b10:	6f 92       	push	r6
     b12:	7f 92       	push	r7
     b14:	8f 92       	push	r8
     b16:	9f 92       	push	r9
     b18:	af 92       	push	r10
     b1a:	bf 92       	push	r11
     b1c:	cf 92       	push	r12
     b1e:	df 92       	push	r13
     b20:	ef 92       	push	r14
     b22:	ff 92       	push	r15
     b24:	0f 93       	push	r16
     b26:	1f 93       	push	r17
     b28:	cf 93       	push	r28
     b2a:	df 93       	push	r29
     b2c:	5c 01       	movw	r10, r24
     b2e:	4b 01       	movw	r8, r22
     b30:	3a 01       	movw	r6, r20
     b32:	29 01       	movw	r4, r18
     b34:	81 e2       	ldi	r24, 0x21	; 33
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	c8 da       	rcall	.-2672   	; 0xca <pvPortMalloc>
     b3a:	ec 01       	movw	r28, r24
     b3c:	89 2b       	or	r24, r25
     b3e:	09 f4       	brne	.+2      	; 0xb42 <xTaskGenericCreate+0x36>
     b40:	c6 c0       	rjmp	.+396    	; 0xcce <xTaskGenericCreate+0x1c2>
     b42:	c1 14       	cp	r12, r1
     b44:	d1 04       	cpc	r13, r1
     b46:	09 f0       	breq	.+2      	; 0xb4a <xTaskGenericCreate+0x3e>
     b48:	be c0       	rjmp	.+380    	; 0xcc6 <xTaskGenericCreate+0x1ba>
     b4a:	c3 01       	movw	r24, r6
     b4c:	be da       	rcall	.-2692   	; 0xca <pvPortMalloc>
     b4e:	98 8f       	std	Y+24, r25	; 0x18
     b50:	8f 8b       	std	Y+23, r24	; 0x17
     b52:	00 97       	sbiw	r24, 0x00	; 0
     b54:	19 f4       	brne	.+6      	; 0xb5c <xTaskGenericCreate+0x50>
     b56:	ce 01       	movw	r24, r28
     b58:	dc da       	rcall	.-2632   	; 0x112 <vPortFree>
     b5a:	b9 c0       	rjmp	.+370    	; 0xcce <xTaskGenericCreate+0x1c2>
     b5c:	a3 01       	movw	r20, r6
     b5e:	65 ea       	ldi	r22, 0xA5	; 165
     b60:	70 e0       	ldi	r23, 0x00	; 0
     b62:	f5 d2       	rcall	.+1514   	; 0x114e <memset>
     b64:	93 01       	movw	r18, r6
     b66:	21 50       	subi	r18, 0x01	; 1
     b68:	31 09       	sbc	r19, r1
     b6a:	8f 89       	ldd	r24, Y+23	; 0x17
     b6c:	98 8d       	ldd	r25, Y+24	; 0x18
     b6e:	3c 01       	movw	r6, r24
     b70:	62 0e       	add	r6, r18
     b72:	73 1e       	adc	r7, r19
     b74:	48 e0       	ldi	r20, 0x08	; 8
     b76:	50 e0       	ldi	r21, 0x00	; 0
     b78:	b4 01       	movw	r22, r8
     b7a:	ce 01       	movw	r24, r28
     b7c:	49 96       	adiw	r24, 0x19	; 25
     b7e:	ee d2       	rcall	.+1500   	; 0x115c <strncpy>
     b80:	18 a2       	std	Y+32, r1	; 0x20
     b82:	10 2f       	mov	r17, r16
     b84:	04 30       	cpi	r16, 0x04	; 4
     b86:	08 f0       	brcs	.+2      	; 0xb8a <xTaskGenericCreate+0x7e>
     b88:	13 e0       	ldi	r17, 0x03	; 3
     b8a:	1e 8b       	std	Y+22, r17	; 0x16
     b8c:	6e 01       	movw	r12, r28
     b8e:	82 e0       	ldi	r24, 0x02	; 2
     b90:	c8 0e       	add	r12, r24
     b92:	d1 1c       	adc	r13, r1
     b94:	c6 01       	movw	r24, r12
     b96:	cc da       	rcall	.-2664   	; 0x130 <vListInitialiseItem>
     b98:	ce 01       	movw	r24, r28
     b9a:	0c 96       	adiw	r24, 0x0c	; 12
     b9c:	c9 da       	rcall	.-2670   	; 0x130 <vListInitialiseItem>
     b9e:	d9 87       	std	Y+9, r29	; 0x09
     ba0:	c8 87       	std	Y+8, r28	; 0x08
     ba2:	84 e0       	ldi	r24, 0x04	; 4
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	81 1b       	sub	r24, r17
     ba8:	91 09       	sbc	r25, r1
     baa:	9d 87       	std	Y+13, r25	; 0x0d
     bac:	8c 87       	std	Y+12, r24	; 0x0c
     bae:	db 8b       	std	Y+19, r29	; 0x13
     bb0:	ca 8b       	std	Y+18, r28	; 0x12
     bb2:	a2 01       	movw	r20, r4
     bb4:	b5 01       	movw	r22, r10
     bb6:	c3 01       	movw	r24, r6
     bb8:	1b de       	rcall	.-970    	; 0x7f0 <pxPortInitialiseStack>
     bba:	99 83       	std	Y+1, r25	; 0x01
     bbc:	88 83       	st	Y, r24
     bbe:	e1 14       	cp	r14, r1
     bc0:	f1 04       	cpc	r15, r1
     bc2:	19 f0       	breq	.+6      	; 0xbca <xTaskGenericCreate+0xbe>
     bc4:	f7 01       	movw	r30, r14
     bc6:	d1 83       	std	Z+1, r29	; 0x01
     bc8:	c0 83       	st	Z, r28
     bca:	0f b6       	in	r0, 0x3f	; 63
     bcc:	f8 94       	cli
     bce:	0f 92       	push	r0
     bd0:	80 91 46 07 	lds	r24, 0x0746	; 0x800746 <uxCurrentNumberOfTasks>
     bd4:	8f 5f       	subi	r24, 0xFF	; 255
     bd6:	80 93 46 07 	sts	0x0746, r24	; 0x800746 <uxCurrentNumberOfTasks>
     bda:	80 91 94 07 	lds	r24, 0x0794	; 0x800794 <pxCurrentTCB>
     bde:	90 91 95 07 	lds	r25, 0x0795	; 0x800795 <pxCurrentTCB+0x1>
     be2:	89 2b       	or	r24, r25
     be4:	69 f5       	brne	.+90     	; 0xc40 <xTaskGenericCreate+0x134>
     be6:	d0 93 95 07 	sts	0x0795, r29	; 0x800795 <pxCurrentTCB+0x1>
     bea:	c0 93 94 07 	sts	0x0794, r28	; 0x800794 <pxCurrentTCB>
     bee:	80 91 46 07 	lds	r24, 0x0746	; 0x800746 <uxCurrentNumberOfTasks>
     bf2:	81 30       	cpi	r24, 0x01	; 1
     bf4:	a1 f5       	brne	.+104    	; 0xc5e <xTaskGenericCreate+0x152>
     bf6:	80 e7       	ldi	r24, 0x70	; 112
     bf8:	97 e0       	ldi	r25, 0x07	; 7
     bfa:	8c da       	rcall	.-2792   	; 0x114 <vListInitialise>
     bfc:	89 e7       	ldi	r24, 0x79	; 121
     bfe:	97 e0       	ldi	r25, 0x07	; 7
     c00:	89 da       	rcall	.-2798   	; 0x114 <vListInitialise>
     c02:	82 e8       	ldi	r24, 0x82	; 130
     c04:	97 e0       	ldi	r25, 0x07	; 7
     c06:	86 da       	rcall	.-2804   	; 0x114 <vListInitialise>
     c08:	8b e8       	ldi	r24, 0x8B	; 139
     c0a:	97 e0       	ldi	r25, 0x07	; 7
     c0c:	83 da       	rcall	.-2810   	; 0x114 <vListInitialise>
     c0e:	87 e6       	ldi	r24, 0x67	; 103
     c10:	97 e0       	ldi	r25, 0x07	; 7
     c12:	80 da       	rcall	.-2816   	; 0x114 <vListInitialise>
     c14:	8e e5       	ldi	r24, 0x5E	; 94
     c16:	97 e0       	ldi	r25, 0x07	; 7
     c18:	7d da       	rcall	.-2822   	; 0x114 <vListInitialise>
     c1a:	81 e5       	ldi	r24, 0x51	; 81
     c1c:	97 e0       	ldi	r25, 0x07	; 7
     c1e:	7a da       	rcall	.-2828   	; 0x114 <vListInitialise>
     c20:	88 e4       	ldi	r24, 0x48	; 72
     c22:	97 e0       	ldi	r25, 0x07	; 7
     c24:	77 da       	rcall	.-2834   	; 0x114 <vListInitialise>
     c26:	87 e6       	ldi	r24, 0x67	; 103
     c28:	97 e0       	ldi	r25, 0x07	; 7
     c2a:	90 93 5d 07 	sts	0x075D, r25	; 0x80075d <pxDelayedTaskList+0x1>
     c2e:	80 93 5c 07 	sts	0x075C, r24	; 0x80075c <pxDelayedTaskList>
     c32:	8e e5       	ldi	r24, 0x5E	; 94
     c34:	97 e0       	ldi	r25, 0x07	; 7
     c36:	90 93 5b 07 	sts	0x075B, r25	; 0x80075b <pxOverflowDelayedTaskList+0x1>
     c3a:	80 93 5a 07 	sts	0x075A, r24	; 0x80075a <pxOverflowDelayedTaskList>
     c3e:	0f c0       	rjmp	.+30     	; 0xc5e <xTaskGenericCreate+0x152>
     c40:	80 91 41 07 	lds	r24, 0x0741	; 0x800741 <xSchedulerRunning>
     c44:	81 11       	cpse	r24, r1
     c46:	0b c0       	rjmp	.+22     	; 0xc5e <xTaskGenericCreate+0x152>
     c48:	e0 91 94 07 	lds	r30, 0x0794	; 0x800794 <pxCurrentTCB>
     c4c:	f0 91 95 07 	lds	r31, 0x0795	; 0x800795 <pxCurrentTCB+0x1>
     c50:	86 89       	ldd	r24, Z+22	; 0x16
     c52:	08 17       	cp	r16, r24
     c54:	20 f0       	brcs	.+8      	; 0xc5e <xTaskGenericCreate+0x152>
     c56:	d0 93 95 07 	sts	0x0795, r29	; 0x800795 <pxCurrentTCB+0x1>
     c5a:	c0 93 94 07 	sts	0x0794, r28	; 0x800794 <pxCurrentTCB>
     c5e:	8e 89       	ldd	r24, Y+22	; 0x16
     c60:	90 91 43 07 	lds	r25, 0x0743	; 0x800743 <uxTopUsedPriority>
     c64:	98 17       	cp	r25, r24
     c66:	10 f4       	brcc	.+4      	; 0xc6c <xTaskGenericCreate+0x160>
     c68:	80 93 43 07 	sts	0x0743, r24	; 0x800743 <uxTopUsedPriority>
     c6c:	90 91 3c 07 	lds	r25, 0x073C	; 0x80073c <uxTaskNumber>
     c70:	9f 5f       	subi	r25, 0xFF	; 255
     c72:	90 93 3c 07 	sts	0x073C, r25	; 0x80073c <uxTaskNumber>
     c76:	90 91 42 07 	lds	r25, 0x0742	; 0x800742 <uxTopReadyPriority>
     c7a:	98 17       	cp	r25, r24
     c7c:	10 f4       	brcc	.+4      	; 0xc82 <xTaskGenericCreate+0x176>
     c7e:	80 93 42 07 	sts	0x0742, r24	; 0x800742 <uxTopReadyPriority>
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	9c 01       	movw	r18, r24
     c86:	22 0f       	add	r18, r18
     c88:	33 1f       	adc	r19, r19
     c8a:	22 0f       	add	r18, r18
     c8c:	33 1f       	adc	r19, r19
     c8e:	22 0f       	add	r18, r18
     c90:	33 1f       	adc	r19, r19
     c92:	82 0f       	add	r24, r18
     c94:	93 1f       	adc	r25, r19
     c96:	b6 01       	movw	r22, r12
     c98:	80 59       	subi	r24, 0x90	; 144
     c9a:	98 4f       	sbci	r25, 0xF8	; 248
     c9c:	4d da       	rcall	.-2918   	; 0x138 <vListInsertEnd>
     c9e:	0f 90       	pop	r0
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	80 91 41 07 	lds	r24, 0x0741	; 0x800741 <xSchedulerRunning>
     ca6:	88 23       	and	r24, r24
     ca8:	51 f0       	breq	.+20     	; 0xcbe <xTaskGenericCreate+0x1b2>
     caa:	e0 91 94 07 	lds	r30, 0x0794	; 0x800794 <pxCurrentTCB>
     cae:	f0 91 95 07 	lds	r31, 0x0795	; 0x800795 <pxCurrentTCB+0x1>
     cb2:	86 89       	ldd	r24, Z+22	; 0x16
     cb4:	80 17       	cp	r24, r16
     cb6:	28 f4       	brcc	.+10     	; 0xcc2 <xTaskGenericCreate+0x1b6>
     cb8:	41 de       	rcall	.-894    	; 0x93c <vPortYield>
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	09 c0       	rjmp	.+18     	; 0xcd0 <xTaskGenericCreate+0x1c4>
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	07 c0       	rjmp	.+14     	; 0xcd0 <xTaskGenericCreate+0x1c4>
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <xTaskGenericCreate+0x1c4>
     cc6:	d8 8e       	std	Y+24, r13	; 0x18
     cc8:	cf 8a       	std	Y+23, r12	; 0x17
     cca:	c6 01       	movw	r24, r12
     ccc:	47 cf       	rjmp	.-370    	; 0xb5c <xTaskGenericCreate+0x50>
     cce:	8f ef       	ldi	r24, 0xFF	; 255
     cd0:	df 91       	pop	r29
     cd2:	cf 91       	pop	r28
     cd4:	1f 91       	pop	r17
     cd6:	0f 91       	pop	r16
     cd8:	ff 90       	pop	r15
     cda:	ef 90       	pop	r14
     cdc:	df 90       	pop	r13
     cde:	cf 90       	pop	r12
     ce0:	bf 90       	pop	r11
     ce2:	af 90       	pop	r10
     ce4:	9f 90       	pop	r9
     ce6:	8f 90       	pop	r8
     ce8:	7f 90       	pop	r7
     cea:	6f 90       	pop	r6
     cec:	5f 90       	pop	r5
     cee:	4f 90       	pop	r4
     cf0:	08 95       	ret

00000cf2 <vTaskStartScheduler>:
     cf2:	af 92       	push	r10
     cf4:	bf 92       	push	r11
     cf6:	cf 92       	push	r12
     cf8:	df 92       	push	r13
     cfa:	ef 92       	push	r14
     cfc:	ff 92       	push	r15
     cfe:	0f 93       	push	r16
     d00:	a1 2c       	mov	r10, r1
     d02:	b1 2c       	mov	r11, r1
     d04:	c1 2c       	mov	r12, r1
     d06:	d1 2c       	mov	r13, r1
     d08:	e1 2c       	mov	r14, r1
     d0a:	f1 2c       	mov	r15, r1
     d0c:	00 e0       	ldi	r16, 0x00	; 0
     d0e:	20 e0       	ldi	r18, 0x00	; 0
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	45 e5       	ldi	r20, 0x55	; 85
     d14:	50 e0       	ldi	r21, 0x00	; 0
     d16:	6c e4       	ldi	r22, 0x4C	; 76
     d18:	71 e0       	ldi	r23, 0x01	; 1
     d1a:	85 e0       	ldi	r24, 0x05	; 5
     d1c:	98 e0       	ldi	r25, 0x08	; 8
     d1e:	f6 de       	rcall	.-532    	; 0xb0c <xTaskGenericCreate>
     d20:	81 30       	cpi	r24, 0x01	; 1
     d22:	41 f4       	brne	.+16     	; 0xd34 <vTaskStartScheduler+0x42>
     d24:	f8 94       	cli
     d26:	80 93 41 07 	sts	0x0741, r24	; 0x800741 <xSchedulerRunning>
     d2a:	10 92 45 07 	sts	0x0745, r1	; 0x800745 <xTickCount+0x1>
     d2e:	10 92 44 07 	sts	0x0744, r1	; 0x800744 <xTickCount>
     d32:	ca dd       	rcall	.-1132   	; 0x8c8 <xPortStartScheduler>
     d34:	0f 91       	pop	r16
     d36:	ff 90       	pop	r15
     d38:	ef 90       	pop	r14
     d3a:	df 90       	pop	r13
     d3c:	cf 90       	pop	r12
     d3e:	bf 90       	pop	r11
     d40:	af 90       	pop	r10
     d42:	08 95       	ret

00000d44 <vTaskSuspendAll>:
     d44:	80 91 40 07 	lds	r24, 0x0740	; 0x800740 <uxSchedulerSuspended>
     d48:	8f 5f       	subi	r24, 0xFF	; 255
     d4a:	80 93 40 07 	sts	0x0740, r24	; 0x800740 <uxSchedulerSuspended>
     d4e:	08 95       	ret

00000d50 <vTaskIncrementTick>:
     d50:	0f 93       	push	r16
     d52:	1f 93       	push	r17
     d54:	cf 93       	push	r28
     d56:	df 93       	push	r29
     d58:	80 91 40 07 	lds	r24, 0x0740	; 0x800740 <uxSchedulerSuspended>
     d5c:	81 11       	cpse	r24, r1
     d5e:	af c0       	rjmp	.+350    	; 0xebe <vTaskIncrementTick+0x16e>
     d60:	80 91 44 07 	lds	r24, 0x0744	; 0x800744 <xTickCount>
     d64:	90 91 45 07 	lds	r25, 0x0745	; 0x800745 <xTickCount+0x1>
     d68:	01 96       	adiw	r24, 0x01	; 1
     d6a:	90 93 45 07 	sts	0x0745, r25	; 0x800745 <xTickCount+0x1>
     d6e:	80 93 44 07 	sts	0x0744, r24	; 0x800744 <xTickCount>
     d72:	80 91 44 07 	lds	r24, 0x0744	; 0x800744 <xTickCount>
     d76:	90 91 45 07 	lds	r25, 0x0745	; 0x800745 <xTickCount+0x1>
     d7a:	89 2b       	or	r24, r25
     d7c:	99 f5       	brne	.+102    	; 0xde4 <vTaskIncrementTick+0x94>
     d7e:	80 91 5c 07 	lds	r24, 0x075C	; 0x80075c <pxDelayedTaskList>
     d82:	90 91 5d 07 	lds	r25, 0x075D	; 0x80075d <pxDelayedTaskList+0x1>
     d86:	20 91 5a 07 	lds	r18, 0x075A	; 0x80075a <pxOverflowDelayedTaskList>
     d8a:	30 91 5b 07 	lds	r19, 0x075B	; 0x80075b <pxOverflowDelayedTaskList+0x1>
     d8e:	30 93 5d 07 	sts	0x075D, r19	; 0x80075d <pxDelayedTaskList+0x1>
     d92:	20 93 5c 07 	sts	0x075C, r18	; 0x80075c <pxDelayedTaskList>
     d96:	90 93 5b 07 	sts	0x075B, r25	; 0x80075b <pxOverflowDelayedTaskList+0x1>
     d9a:	80 93 5a 07 	sts	0x075A, r24	; 0x80075a <pxOverflowDelayedTaskList>
     d9e:	80 91 3d 07 	lds	r24, 0x073D	; 0x80073d <xNumOfOverflows>
     da2:	8f 5f       	subi	r24, 0xFF	; 255
     da4:	80 93 3d 07 	sts	0x073D, r24	; 0x80073d <xNumOfOverflows>
     da8:	e0 91 5c 07 	lds	r30, 0x075C	; 0x80075c <pxDelayedTaskList>
     dac:	f0 91 5d 07 	lds	r31, 0x075D	; 0x80075d <pxDelayedTaskList+0x1>
     db0:	80 81       	ld	r24, Z
     db2:	81 11       	cpse	r24, r1
     db4:	07 c0       	rjmp	.+14     	; 0xdc4 <vTaskIncrementTick+0x74>
     db6:	8f ef       	ldi	r24, 0xFF	; 255
     db8:	9f ef       	ldi	r25, 0xFF	; 255
     dba:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <xNextTaskUnblockTime+0x1>
     dbe:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <xNextTaskUnblockTime>
     dc2:	10 c0       	rjmp	.+32     	; 0xde4 <vTaskIncrementTick+0x94>
     dc4:	e0 91 5c 07 	lds	r30, 0x075C	; 0x80075c <pxDelayedTaskList>
     dc8:	f0 91 5d 07 	lds	r31, 0x075D	; 0x80075d <pxDelayedTaskList+0x1>
     dcc:	05 80       	ldd	r0, Z+5	; 0x05
     dce:	f6 81       	ldd	r31, Z+6	; 0x06
     dd0:	e0 2d       	mov	r30, r0
     dd2:	06 80       	ldd	r0, Z+6	; 0x06
     dd4:	f7 81       	ldd	r31, Z+7	; 0x07
     dd6:	e0 2d       	mov	r30, r0
     dd8:	82 81       	ldd	r24, Z+2	; 0x02
     dda:	93 81       	ldd	r25, Z+3	; 0x03
     ddc:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <xNextTaskUnblockTime+0x1>
     de0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <xNextTaskUnblockTime>
     de4:	20 91 44 07 	lds	r18, 0x0744	; 0x800744 <xTickCount>
     de8:	30 91 45 07 	lds	r19, 0x0745	; 0x800745 <xTickCount+0x1>
     dec:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <xNextTaskUnblockTime>
     df0:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <xNextTaskUnblockTime+0x1>
     df4:	28 17       	cp	r18, r24
     df6:	39 07       	cpc	r19, r25
     df8:	08 f4       	brcc	.+2      	; 0xdfc <vTaskIncrementTick+0xac>
     dfa:	66 c0       	rjmp	.+204    	; 0xec8 <vTaskIncrementTick+0x178>
     dfc:	e0 91 5c 07 	lds	r30, 0x075C	; 0x80075c <pxDelayedTaskList>
     e00:	f0 91 5d 07 	lds	r31, 0x075D	; 0x80075d <pxDelayedTaskList+0x1>
     e04:	80 81       	ld	r24, Z
     e06:	88 23       	and	r24, r24
     e08:	99 f0       	breq	.+38     	; 0xe30 <vTaskIncrementTick+0xe0>
     e0a:	e0 91 5c 07 	lds	r30, 0x075C	; 0x80075c <pxDelayedTaskList>
     e0e:	f0 91 5d 07 	lds	r31, 0x075D	; 0x80075d <pxDelayedTaskList+0x1>
     e12:	05 80       	ldd	r0, Z+5	; 0x05
     e14:	f6 81       	ldd	r31, Z+6	; 0x06
     e16:	e0 2d       	mov	r30, r0
     e18:	c6 81       	ldd	r28, Z+6	; 0x06
     e1a:	d7 81       	ldd	r29, Z+7	; 0x07
     e1c:	8a 81       	ldd	r24, Y+2	; 0x02
     e1e:	9b 81       	ldd	r25, Y+3	; 0x03
     e20:	20 91 44 07 	lds	r18, 0x0744	; 0x800744 <xTickCount>
     e24:	30 91 45 07 	lds	r19, 0x0745	; 0x800745 <xTickCount+0x1>
     e28:	28 17       	cp	r18, r24
     e2a:	39 07       	cpc	r19, r25
     e2c:	f8 f4       	brcc	.+62     	; 0xe6c <vTaskIncrementTick+0x11c>
     e2e:	19 c0       	rjmp	.+50     	; 0xe62 <vTaskIncrementTick+0x112>
     e30:	8f ef       	ldi	r24, 0xFF	; 255
     e32:	9f ef       	ldi	r25, 0xFF	; 255
     e34:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <xNextTaskUnblockTime+0x1>
     e38:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <xNextTaskUnblockTime>
     e3c:	45 c0       	rjmp	.+138    	; 0xec8 <vTaskIncrementTick+0x178>
     e3e:	e0 91 5c 07 	lds	r30, 0x075C	; 0x80075c <pxDelayedTaskList>
     e42:	f0 91 5d 07 	lds	r31, 0x075D	; 0x80075d <pxDelayedTaskList+0x1>
     e46:	05 80       	ldd	r0, Z+5	; 0x05
     e48:	f6 81       	ldd	r31, Z+6	; 0x06
     e4a:	e0 2d       	mov	r30, r0
     e4c:	c6 81       	ldd	r28, Z+6	; 0x06
     e4e:	d7 81       	ldd	r29, Z+7	; 0x07
     e50:	8a 81       	ldd	r24, Y+2	; 0x02
     e52:	9b 81       	ldd	r25, Y+3	; 0x03
     e54:	20 91 44 07 	lds	r18, 0x0744	; 0x800744 <xTickCount>
     e58:	30 91 45 07 	lds	r19, 0x0745	; 0x800745 <xTickCount+0x1>
     e5c:	28 17       	cp	r18, r24
     e5e:	39 07       	cpc	r19, r25
     e60:	28 f4       	brcc	.+10     	; 0xe6c <vTaskIncrementTick+0x11c>
     e62:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <xNextTaskUnblockTime+0x1>
     e66:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <xNextTaskUnblockTime>
     e6a:	2e c0       	rjmp	.+92     	; 0xec8 <vTaskIncrementTick+0x178>
     e6c:	8e 01       	movw	r16, r28
     e6e:	0e 5f       	subi	r16, 0xFE	; 254
     e70:	1f 4f       	sbci	r17, 0xFF	; 255
     e72:	c8 01       	movw	r24, r16
     e74:	c3 d9       	rcall	.-3194   	; 0x1fc <vListRemove>
     e76:	8c 89       	ldd	r24, Y+20	; 0x14
     e78:	9d 89       	ldd	r25, Y+21	; 0x15
     e7a:	89 2b       	or	r24, r25
     e7c:	19 f0       	breq	.+6      	; 0xe84 <vTaskIncrementTick+0x134>
     e7e:	ce 01       	movw	r24, r28
     e80:	0c 96       	adiw	r24, 0x0c	; 12
     e82:	bc d9       	rcall	.-3208   	; 0x1fc <vListRemove>
     e84:	8e 89       	ldd	r24, Y+22	; 0x16
     e86:	90 91 42 07 	lds	r25, 0x0742	; 0x800742 <uxTopReadyPriority>
     e8a:	98 17       	cp	r25, r24
     e8c:	10 f4       	brcc	.+4      	; 0xe92 <vTaskIncrementTick+0x142>
     e8e:	80 93 42 07 	sts	0x0742, r24	; 0x800742 <uxTopReadyPriority>
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	9c 01       	movw	r18, r24
     e96:	22 0f       	add	r18, r18
     e98:	33 1f       	adc	r19, r19
     e9a:	22 0f       	add	r18, r18
     e9c:	33 1f       	adc	r19, r19
     e9e:	22 0f       	add	r18, r18
     ea0:	33 1f       	adc	r19, r19
     ea2:	82 0f       	add	r24, r18
     ea4:	93 1f       	adc	r25, r19
     ea6:	b8 01       	movw	r22, r16
     ea8:	80 59       	subi	r24, 0x90	; 144
     eaa:	98 4f       	sbci	r25, 0xF8	; 248
     eac:	45 d9       	rcall	.-3446   	; 0x138 <vListInsertEnd>
     eae:	e0 91 5c 07 	lds	r30, 0x075C	; 0x80075c <pxDelayedTaskList>
     eb2:	f0 91 5d 07 	lds	r31, 0x075D	; 0x80075d <pxDelayedTaskList+0x1>
     eb6:	80 81       	ld	r24, Z
     eb8:	81 11       	cpse	r24, r1
     eba:	c1 cf       	rjmp	.-126    	; 0xe3e <vTaskIncrementTick+0xee>
     ebc:	b9 cf       	rjmp	.-142    	; 0xe30 <vTaskIncrementTick+0xe0>
     ebe:	80 91 3f 07 	lds	r24, 0x073F	; 0x80073f <uxMissedTicks>
     ec2:	8f 5f       	subi	r24, 0xFF	; 255
     ec4:	80 93 3f 07 	sts	0x073F, r24	; 0x80073f <uxMissedTicks>
     ec8:	df 91       	pop	r29
     eca:	cf 91       	pop	r28
     ecc:	1f 91       	pop	r17
     ece:	0f 91       	pop	r16
     ed0:	08 95       	ret

00000ed2 <xTaskResumeAll>:
     ed2:	cf 92       	push	r12
     ed4:	df 92       	push	r13
     ed6:	ef 92       	push	r14
     ed8:	ff 92       	push	r15
     eda:	0f 93       	push	r16
     edc:	1f 93       	push	r17
     ede:	cf 93       	push	r28
     ee0:	df 93       	push	r29
     ee2:	0f b6       	in	r0, 0x3f	; 63
     ee4:	f8 94       	cli
     ee6:	0f 92       	push	r0
     ee8:	80 91 40 07 	lds	r24, 0x0740	; 0x800740 <uxSchedulerSuspended>
     eec:	81 50       	subi	r24, 0x01	; 1
     eee:	80 93 40 07 	sts	0x0740, r24	; 0x800740 <uxSchedulerSuspended>
     ef2:	80 91 40 07 	lds	r24, 0x0740	; 0x800740 <uxSchedulerSuspended>
     ef6:	81 11       	cpse	r24, r1
     ef8:	5f c0       	rjmp	.+190    	; 0xfb8 <xTaskResumeAll+0xe6>
     efa:	80 91 46 07 	lds	r24, 0x0746	; 0x800746 <uxCurrentNumberOfTasks>
     efe:	81 11       	cpse	r24, r1
     f00:	2f c0       	rjmp	.+94     	; 0xf60 <xTaskResumeAll+0x8e>
     f02:	5d c0       	rjmp	.+186    	; 0xfbe <xTaskResumeAll+0xec>
     f04:	d7 01       	movw	r26, r14
     f06:	15 96       	adiw	r26, 0x05	; 5
     f08:	ed 91       	ld	r30, X+
     f0a:	fc 91       	ld	r31, X
     f0c:	16 97       	sbiw	r26, 0x06	; 6
     f0e:	c6 81       	ldd	r28, Z+6	; 0x06
     f10:	d7 81       	ldd	r29, Z+7	; 0x07
     f12:	ce 01       	movw	r24, r28
     f14:	0c 96       	adiw	r24, 0x0c	; 12
     f16:	72 d9       	rcall	.-3356   	; 0x1fc <vListRemove>
     f18:	8e 01       	movw	r16, r28
     f1a:	0e 5f       	subi	r16, 0xFE	; 254
     f1c:	1f 4f       	sbci	r17, 0xFF	; 255
     f1e:	c8 01       	movw	r24, r16
     f20:	6d d9       	rcall	.-3366   	; 0x1fc <vListRemove>
     f22:	8e 89       	ldd	r24, Y+22	; 0x16
     f24:	90 91 42 07 	lds	r25, 0x0742	; 0x800742 <uxTopReadyPriority>
     f28:	98 17       	cp	r25, r24
     f2a:	10 f4       	brcc	.+4      	; 0xf30 <xTaskResumeAll+0x5e>
     f2c:	80 93 42 07 	sts	0x0742, r24	; 0x800742 <uxTopReadyPriority>
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	9c 01       	movw	r18, r24
     f34:	22 0f       	add	r18, r18
     f36:	33 1f       	adc	r19, r19
     f38:	22 0f       	add	r18, r18
     f3a:	33 1f       	adc	r19, r19
     f3c:	22 0f       	add	r18, r18
     f3e:	33 1f       	adc	r19, r19
     f40:	82 0f       	add	r24, r18
     f42:	93 1f       	adc	r25, r19
     f44:	b8 01       	movw	r22, r16
     f46:	80 59       	subi	r24, 0x90	; 144
     f48:	98 4f       	sbci	r25, 0xF8	; 248
     f4a:	f6 d8       	rcall	.-3604   	; 0x138 <vListInsertEnd>
     f4c:	e0 91 94 07 	lds	r30, 0x0794	; 0x800794 <pxCurrentTCB>
     f50:	f0 91 95 07 	lds	r31, 0x0795	; 0x800795 <pxCurrentTCB+0x1>
     f54:	9e 89       	ldd	r25, Y+22	; 0x16
     f56:	86 89       	ldd	r24, Z+22	; 0x16
     f58:	98 17       	cp	r25, r24
     f5a:	58 f0       	brcs	.+22     	; 0xf72 <xTaskResumeAll+0xa0>
     f5c:	dc 2c       	mov	r13, r12
     f5e:	09 c0       	rjmp	.+18     	; 0xf72 <xTaskResumeAll+0xa0>
     f60:	d1 2c       	mov	r13, r1
     f62:	0f 2e       	mov	r0, r31
     f64:	f1 e5       	ldi	r31, 0x51	; 81
     f66:	ef 2e       	mov	r14, r31
     f68:	f7 e0       	ldi	r31, 0x07	; 7
     f6a:	ff 2e       	mov	r15, r31
     f6c:	f0 2d       	mov	r31, r0
     f6e:	cc 24       	eor	r12, r12
     f70:	c3 94       	inc	r12
     f72:	f7 01       	movw	r30, r14
     f74:	80 81       	ld	r24, Z
     f76:	81 11       	cpse	r24, r1
     f78:	c5 cf       	rjmp	.-118    	; 0xf04 <xTaskResumeAll+0x32>
     f7a:	80 91 3f 07 	lds	r24, 0x073F	; 0x80073f <uxMissedTicks>
     f7e:	88 23       	and	r24, r24
     f80:	79 f0       	breq	.+30     	; 0xfa0 <xTaskResumeAll+0xce>
     f82:	80 91 3f 07 	lds	r24, 0x073F	; 0x80073f <uxMissedTicks>
     f86:	88 23       	and	r24, r24
     f88:	91 f0       	breq	.+36     	; 0xfae <xTaskResumeAll+0xdc>
     f8a:	e2 de       	rcall	.-572    	; 0xd50 <vTaskIncrementTick>
     f8c:	80 91 3f 07 	lds	r24, 0x073F	; 0x80073f <uxMissedTicks>
     f90:	81 50       	subi	r24, 0x01	; 1
     f92:	80 93 3f 07 	sts	0x073F, r24	; 0x80073f <uxMissedTicks>
     f96:	80 91 3f 07 	lds	r24, 0x073F	; 0x80073f <uxMissedTicks>
     f9a:	81 11       	cpse	r24, r1
     f9c:	f6 cf       	rjmp	.-20     	; 0xf8a <xTaskResumeAll+0xb8>
     f9e:	07 c0       	rjmp	.+14     	; 0xfae <xTaskResumeAll+0xdc>
     fa0:	f1 e0       	ldi	r31, 0x01	; 1
     fa2:	df 16       	cp	r13, r31
     fa4:	21 f0       	breq	.+8      	; 0xfae <xTaskResumeAll+0xdc>
     fa6:	80 91 3e 07 	lds	r24, 0x073E	; 0x80073e <xMissedYield>
     faa:	81 30       	cpi	r24, 0x01	; 1
     fac:	39 f4       	brne	.+14     	; 0xfbc <xTaskResumeAll+0xea>
     fae:	10 92 3e 07 	sts	0x073E, r1	; 0x80073e <xMissedYield>
     fb2:	c4 dc       	rcall	.-1656   	; 0x93c <vPortYield>
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	03 c0       	rjmp	.+6      	; 0xfbe <xTaskResumeAll+0xec>
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	01 c0       	rjmp	.+2      	; 0xfbe <xTaskResumeAll+0xec>
     fbc:	80 e0       	ldi	r24, 0x00	; 0
     fbe:	0f 90       	pop	r0
     fc0:	0f be       	out	0x3f, r0	; 63
     fc2:	df 91       	pop	r29
     fc4:	cf 91       	pop	r28
     fc6:	1f 91       	pop	r17
     fc8:	0f 91       	pop	r16
     fca:	ff 90       	pop	r15
     fcc:	ef 90       	pop	r14
     fce:	df 90       	pop	r13
     fd0:	cf 90       	pop	r12
     fd2:	08 95       	ret

00000fd4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
     fd4:	cf 93       	push	r28
     fd6:	df 93       	push	r29
     fd8:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
     fda:	89 2b       	or	r24, r25
		{
			vTaskSuspendAll();
     fdc:	91 f0       	breq	.+36     	; 0x1002 <vTaskDelay+0x2e>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
     fde:	b2 de       	rcall	.-668    	; 0xd44 <vTaskSuspendAll>
     fe0:	80 91 44 07 	lds	r24, 0x0744	; 0x800744 <xTickCount>
     fe4:	90 91 45 07 	lds	r25, 0x0745	; 0x800745 <xTickCount+0x1>
     fe8:	c8 0f       	add	r28, r24

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
     fea:	d9 1f       	adc	r29, r25
     fec:	80 91 94 07 	lds	r24, 0x0794	; 0x800794 <pxCurrentTCB>
     ff0:	90 91 95 07 	lds	r25, 0x0795	; 0x800795 <pxCurrentTCB+0x1>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
			}
			xAlreadyYielded = xTaskResumeAll();
     ff4:	02 96       	adiw	r24, 0x02	; 2
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
     ff6:	02 d9       	rcall	.-3580   	; 0x1fc <vListRemove>
     ff8:	ce 01       	movw	r24, r28
		{
			portYIELD_WITHIN_API();
     ffa:	53 dd       	rcall	.-1370   	; 0xaa2 <prvAddCurrentTaskToDelayedList>
     ffc:	6a df       	rcall	.-300    	; 0xed2 <xTaskResumeAll>
		}
	}
     ffe:	81 11       	cpse	r24, r1
    1000:	01 c0       	rjmp	.+2      	; 0x1004 <vTaskDelay+0x30>
    1002:	9c dc       	rcall	.-1736   	; 0x93c <vPortYield>
    1004:	df 91       	pop	r29
    1006:	cf 91       	pop	r28
    1008:	08 95       	ret

0000100a <prvIdleTask>:
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    100a:	0f 2e       	mov	r0, r31
    100c:	f8 e4       	ldi	r31, 0x48	; 72
    100e:	ef 2e       	mov	r14, r31
    1010:	f7 e0       	ldi	r31, 0x07	; 7
    1012:	ff 2e       	mov	r15, r31
    1014:	f0 2d       	mov	r31, r0

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    1016:	c0 e7       	ldi	r28, 0x70	; 112
    1018:	d7 e0       	ldi	r29, 0x07	; 7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    101a:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <uxTasksDeleted>
    101e:	88 23       	and	r24, r24
		{
			vTaskSuspendAll();
    1020:	29 f1       	breq	.+74     	; 0x106c <prvIdleTask+0x62>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    1022:	90 de       	rcall	.-736    	; 0xd44 <vTaskSuspendAll>
			xTaskResumeAll();
    1024:	d7 01       	movw	r26, r14
    1026:	1c 91       	ld	r17, X

			if( xListIsEmpty == pdFALSE )
    1028:	54 df       	rcall	.-344    	; 0xed2 <xTaskResumeAll>
    102a:	11 23       	and	r17, r17
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    102c:	f9 f0       	breq	.+62     	; 0x106c <prvIdleTask+0x62>
    102e:	0f b6       	in	r0, 0x3f	; 63
    1030:	f8 94       	cli
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    1032:	0f 92       	push	r0
    1034:	d7 01       	movw	r26, r14
    1036:	15 96       	adiw	r26, 0x05	; 5
    1038:	ed 91       	ld	r30, X+
    103a:	fc 91       	ld	r31, X
    103c:	16 97       	sbiw	r26, 0x06	; 6
					vListRemove( &( pxTCB->xGenericListItem ) );
    103e:	06 81       	ldd	r16, Z+6	; 0x06
    1040:	17 81       	ldd	r17, Z+7	; 0x07
    1042:	c8 01       	movw	r24, r16
					--uxCurrentNumberOfTasks;
    1044:	02 96       	adiw	r24, 0x02	; 2
    1046:	da d8       	rcall	.-3660   	; 0x1fc <vListRemove>
    1048:	80 91 46 07 	lds	r24, 0x0746	; 0x800746 <uxCurrentNumberOfTasks>
    104c:	81 50       	subi	r24, 0x01	; 1
					--uxTasksDeleted;
    104e:	80 93 46 07 	sts	0x0746, r24	; 0x800746 <uxCurrentNumberOfTasks>
    1052:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <uxTasksDeleted>
    1056:	81 50       	subi	r24, 0x01	; 1
				}
				taskEXIT_CRITICAL();
    1058:	80 93 47 07 	sts	0x0747, r24	; 0x800747 <uxTasksDeleted>
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    105c:	0f 90       	pop	r0
    105e:	0f be       	out	0x3f, r0	; 63
		vPortFree( pxTCB );
    1060:	f8 01       	movw	r30, r16
    1062:	87 89       	ldd	r24, Z+23	; 0x17

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    1064:	90 8d       	ldd	r25, Z+24	; 0x18
    1066:	55 d8       	rcall	.-3926   	; 0x112 <vPortFree>
    1068:	c8 01       	movw	r24, r16
			{
				taskYIELD();
    106a:	53 d8       	rcall	.-3930   	; 0x112 <vPortFree>
    106c:	88 81       	ld	r24, Y
    106e:	82 30       	cpi	r24, 0x02	; 2
    1070:	a0 f2       	brcs	.-88     	; 0x101a <prvIdleTask+0x10>
    1072:	64 dc       	rcall	.-1848   	; 0x93c <vPortYield>
    1074:	d2 cf       	rjmp	.-92     	; 0x101a <prvIdleTask+0x10>

00001076 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    1076:	80 91 40 07 	lds	r24, 0x0740	; 0x800740 <uxSchedulerSuspended>
    107a:	81 11       	cpse	r24, r1
    107c:	13 c0       	rjmp	.+38     	; 0x10a4 <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    107e:	80 91 42 07 	lds	r24, 0x0742	; 0x800742 <uxTopReadyPriority>
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	fc 01       	movw	r30, r24
    1086:	ee 0f       	add	r30, r30
    1088:	ff 1f       	adc	r31, r31
    108a:	ee 0f       	add	r30, r30
    108c:	ff 1f       	adc	r31, r31
    108e:	ee 0f       	add	r30, r30
    1090:	ff 1f       	adc	r31, r31
    1092:	8e 0f       	add	r24, r30
    1094:	9f 1f       	adc	r25, r31
    1096:	fc 01       	movw	r30, r24
    1098:	e0 59       	subi	r30, 0x90	; 144
    109a:	f8 4f       	sbci	r31, 0xF8	; 248
    109c:	80 81       	ld	r24, Z
    109e:	88 23       	and	r24, r24
    10a0:	29 f0       	breq	.+10     	; 0x10ac <vTaskSwitchContext+0x36>
    10a2:	1b c0       	rjmp	.+54     	; 0x10da <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	80 93 3e 07 	sts	0x073E, r24	; 0x80073e <xMissedYield>
    10aa:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    10ac:	80 91 42 07 	lds	r24, 0x0742	; 0x800742 <uxTopReadyPriority>
    10b0:	81 50       	subi	r24, 0x01	; 1
    10b2:	80 93 42 07 	sts	0x0742, r24	; 0x800742 <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    10b6:	80 91 42 07 	lds	r24, 0x0742	; 0x800742 <uxTopReadyPriority>
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	fc 01       	movw	r30, r24
    10be:	ee 0f       	add	r30, r30
    10c0:	ff 1f       	adc	r31, r31
    10c2:	ee 0f       	add	r30, r30
    10c4:	ff 1f       	adc	r31, r31
    10c6:	ee 0f       	add	r30, r30
    10c8:	ff 1f       	adc	r31, r31
    10ca:	8e 0f       	add	r24, r30
    10cc:	9f 1f       	adc	r25, r31
    10ce:	fc 01       	movw	r30, r24
    10d0:	e0 59       	subi	r30, 0x90	; 144
    10d2:	f8 4f       	sbci	r31, 0xF8	; 248
    10d4:	80 81       	ld	r24, Z
    10d6:	88 23       	and	r24, r24
    10d8:	49 f3       	breq	.-46     	; 0x10ac <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    10da:	80 91 42 07 	lds	r24, 0x0742	; 0x800742 <uxTopReadyPriority>
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	9c 01       	movw	r18, r24
    10e2:	22 0f       	add	r18, r18
    10e4:	33 1f       	adc	r19, r19
    10e6:	22 0f       	add	r18, r18
    10e8:	33 1f       	adc	r19, r19
    10ea:	22 0f       	add	r18, r18
    10ec:	33 1f       	adc	r19, r19
    10ee:	28 0f       	add	r18, r24
    10f0:	39 1f       	adc	r19, r25
    10f2:	d9 01       	movw	r26, r18
    10f4:	a0 59       	subi	r26, 0x90	; 144
    10f6:	b8 4f       	sbci	r27, 0xF8	; 248
    10f8:	11 96       	adiw	r26, 0x01	; 1
    10fa:	ed 91       	ld	r30, X+
    10fc:	fc 91       	ld	r31, X
    10fe:	12 97       	sbiw	r26, 0x02	; 2
    1100:	02 80       	ldd	r0, Z+2	; 0x02
    1102:	f3 81       	ldd	r31, Z+3	; 0x03
    1104:	e0 2d       	mov	r30, r0
    1106:	12 96       	adiw	r26, 0x02	; 2
    1108:	fc 93       	st	X, r31
    110a:	ee 93       	st	-X, r30
    110c:	11 97       	sbiw	r26, 0x01	; 1
    110e:	2d 58       	subi	r18, 0x8D	; 141
    1110:	38 4f       	sbci	r19, 0xF8	; 248
    1112:	e2 17       	cp	r30, r18
    1114:	f3 07       	cpc	r31, r19
    1116:	29 f4       	brne	.+10     	; 0x1122 <vTaskSwitchContext+0xac>
    1118:	22 81       	ldd	r18, Z+2	; 0x02
    111a:	33 81       	ldd	r19, Z+3	; 0x03
    111c:	fd 01       	movw	r30, r26
    111e:	32 83       	std	Z+2, r19	; 0x02
    1120:	21 83       	std	Z+1, r18	; 0x01
    1122:	fc 01       	movw	r30, r24
    1124:	ee 0f       	add	r30, r30
    1126:	ff 1f       	adc	r31, r31
    1128:	ee 0f       	add	r30, r30
    112a:	ff 1f       	adc	r31, r31
    112c:	ee 0f       	add	r30, r30
    112e:	ff 1f       	adc	r31, r31
    1130:	8e 0f       	add	r24, r30
    1132:	9f 1f       	adc	r25, r31
    1134:	fc 01       	movw	r30, r24
    1136:	e0 59       	subi	r30, 0x90	; 144
    1138:	f8 4f       	sbci	r31, 0xF8	; 248
    113a:	01 80       	ldd	r0, Z+1	; 0x01
    113c:	f2 81       	ldd	r31, Z+2	; 0x02
    113e:	e0 2d       	mov	r30, r0
    1140:	86 81       	ldd	r24, Z+6	; 0x06
    1142:	97 81       	ldd	r25, Z+7	; 0x07
    1144:	90 93 95 07 	sts	0x0795, r25	; 0x800795 <pxCurrentTCB+0x1>
    1148:	80 93 94 07 	sts	0x0794, r24	; 0x800794 <pxCurrentTCB>
    114c:	08 95       	ret

0000114e <memset>:
    114e:	dc 01       	movw	r26, r24
    1150:	01 c0       	rjmp	.+2      	; 0x1154 <memset+0x6>
    1152:	6d 93       	st	X+, r22
    1154:	41 50       	subi	r20, 0x01	; 1
    1156:	50 40       	sbci	r21, 0x00	; 0
    1158:	e0 f7       	brcc	.-8      	; 0x1152 <memset+0x4>
    115a:	08 95       	ret

0000115c <strncpy>:
    115c:	fb 01       	movw	r30, r22
    115e:	dc 01       	movw	r26, r24
    1160:	41 50       	subi	r20, 0x01	; 1
    1162:	50 40       	sbci	r21, 0x00	; 0
    1164:	48 f0       	brcs	.+18     	; 0x1178 <strncpy+0x1c>
    1166:	01 90       	ld	r0, Z+
    1168:	0d 92       	st	X+, r0
    116a:	00 20       	and	r0, r0
    116c:	c9 f7       	brne	.-14     	; 0x1160 <strncpy+0x4>
    116e:	01 c0       	rjmp	.+2      	; 0x1172 <strncpy+0x16>
    1170:	1d 92       	st	X+, r1
    1172:	41 50       	subi	r20, 0x01	; 1
    1174:	50 40       	sbci	r21, 0x00	; 0
    1176:	e0 f7       	brcc	.-8      	; 0x1170 <strncpy+0x14>
    1178:	08 95       	ret

0000117a <_exit>:
    117a:	f8 94       	cli

0000117c <__stop_program>:
    117c:	ff cf       	rjmp	.-2      	; 0x117c <__stop_program>
