
Car_with_USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800100  0000118e  00001222  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000118e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000064b  00800148  00800148  0000126a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000126a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000129c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000270  00000000  00000000  000012dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000029e2  00000000  00000000  0000154c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ff5  00000000  00000000  00003f2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a8e  00000000  00000000  00004f23  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000660  00000000  00000000  000069b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000fc5  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000168d  00000000  00000000  00007fd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000268  00000000  00000000  00009666  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	3c c5       	rjmp	.+2680   	; 0xaae <__vector_13>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ee e8       	ldi	r30, 0x8E	; 142
      a0:	f1 e1       	ldi	r31, 0x11	; 17
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a8 34       	cpi	r26, 0x48	; 72
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	27 e0       	ldi	r18, 0x07	; 7
      b4:	a8 e4       	ldi	r26, 0x48	; 72
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a3 39       	cpi	r26, 0x93	; 147
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	89 d3       	rcall	.+1810   	; 0x7d6 <main>
      c4:	0c 94 c5 08 	jmp	0x118a	; 0x118a <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
      ce:	ec 01       	movw	r28, r24
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
      d0:	41 d6       	rcall	.+3202   	; 0xd54 <vTaskSuspendAll>
      d2:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <__data_end>
      d6:	30 91 49 01 	lds	r19, 0x0149	; 0x800149 <__data_end+0x1>
      da:	c9 01       	movw	r24, r18
      dc:	8c 0f       	add	r24, r28
      de:	9d 1f       	adc	r25, r29
      e0:	8c 3d       	cpi	r24, 0xDC	; 220
      e2:	45 e0       	ldi	r20, 0x05	; 5
      e4:	94 07       	cpc	r25, r20
      e6:	58 f4       	brcc	.+22     	; 0xfe <pvPortMalloc+0x34>
      e8:	28 17       	cp	r18, r24
      ea:	39 07       	cpc	r19, r25
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
      ec:	58 f4       	brcc	.+22     	; 0x104 <pvPortMalloc+0x3a>
      ee:	e9 01       	movw	r28, r18
      f0:	c6 5b       	subi	r28, 0xB6	; 182
			xNextFreeByte += xWantedSize;			
      f2:	de 4f       	sbci	r29, 0xFE	; 254
      f4:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <__data_end+0x1>
      f8:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <__data_end>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
      fc:	05 c0       	rjmp	.+10     	; 0x108 <pvPortMalloc+0x3e>
      fe:	c0 e0       	ldi	r28, 0x00	; 0
     100:	d0 e0       	ldi	r29, 0x00	; 0
     102:	02 c0       	rjmp	.+4      	; 0x108 <pvPortMalloc+0x3e>
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
     104:	c0 e0       	ldi	r28, 0x00	; 0
     106:	d0 e0       	ldi	r29, 0x00	; 0
		}
	}
	#endif	

	return pvReturn;
}
     108:	ec d6       	rcall	.+3544   	; 0xee2 <xTaskResumeAll>
     10a:	ce 01       	movw	r24, r28
     10c:	df 91       	pop	r29
     10e:	cf 91       	pop	r28
     110:	08 95       	ret

00000112 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     112:	08 95       	ret

00000114 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
     114:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
     116:	03 96       	adiw	r24, 0x03	; 3
     118:	92 83       	std	Z+2, r25	; 0x02
     11a:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     11c:	2f ef       	ldi	r18, 0xFF	; 255
     11e:	3f ef       	ldi	r19, 0xFF	; 255
     120:	34 83       	std	Z+4, r19	; 0x04
     122:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
     124:	96 83       	std	Z+6, r25	; 0x06
     126:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
     128:	90 87       	std	Z+8, r25	; 0x08
     12a:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
     12c:	10 82       	st	Z, r1
     12e:	08 95       	ret

00000130 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     130:	fc 01       	movw	r30, r24
     132:	11 86       	std	Z+9, r1	; 0x09
     134:	10 86       	std	Z+8, r1	; 0x08
     136:	08 95       	ret

00000138 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
     138:	cf 93       	push	r28
     13a:	df 93       	push	r29
     13c:	fc 01       	movw	r30, r24
     13e:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     140:	21 81       	ldd	r18, Z+1	; 0x01
     142:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
     144:	e9 01       	movw	r28, r18
     146:	8a 81       	ldd	r24, Y+2	; 0x02
     148:	9b 81       	ldd	r25, Y+3	; 0x03
     14a:	13 96       	adiw	r26, 0x03	; 3
     14c:	9c 93       	st	X, r25
     14e:	8e 93       	st	-X, r24
     150:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
     152:	81 81       	ldd	r24, Z+1	; 0x01
     154:	92 81       	ldd	r25, Z+2	; 0x02
     156:	15 96       	adiw	r26, 0x05	; 5
     158:	9c 93       	st	X, r25
     15a:	8e 93       	st	-X, r24
     15c:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     15e:	8a 81       	ldd	r24, Y+2	; 0x02
     160:	9b 81       	ldd	r25, Y+3	; 0x03
     162:	ec 01       	movw	r28, r24
     164:	7d 83       	std	Y+5, r23	; 0x05
     166:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     168:	e9 01       	movw	r28, r18
     16a:	7b 83       	std	Y+3, r23	; 0x03
     16c:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     16e:	72 83       	std	Z+2, r23	; 0x02
     170:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     172:	19 96       	adiw	r26, 0x09	; 9
     174:	fc 93       	st	X, r31
     176:	ee 93       	st	-X, r30
     178:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
     17a:	80 81       	ld	r24, Z
     17c:	8f 5f       	subi	r24, 0xFF	; 255
     17e:	80 83       	st	Z, r24
}
     180:	df 91       	pop	r29
     182:	cf 91       	pop	r28
     184:	08 95       	ret

00000186 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
     186:	cf 93       	push	r28
     188:	df 93       	push	r29
     18a:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
     18c:	48 81       	ld	r20, Y
     18e:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     190:	4f 3f       	cpi	r20, 0xFF	; 255
     192:	2f ef       	ldi	r18, 0xFF	; 255
     194:	52 07       	cpc	r21, r18
     196:	31 f4       	brne	.+12     	; 0x1a4 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     198:	dc 01       	movw	r26, r24
     19a:	17 96       	adiw	r26, 0x07	; 7
     19c:	ed 91       	ld	r30, X+
     19e:	fc 91       	ld	r31, X
     1a0:	18 97       	sbiw	r26, 0x08	; 8
     1a2:	17 c0       	rjmp	.+46     	; 0x1d2 <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     1a4:	fc 01       	movw	r30, r24
     1a6:	33 96       	adiw	r30, 0x03	; 3
     1a8:	dc 01       	movw	r26, r24
     1aa:	15 96       	adiw	r26, 0x05	; 5
     1ac:	2d 91       	ld	r18, X+
     1ae:	3c 91       	ld	r19, X
     1b0:	16 97       	sbiw	r26, 0x06	; 6
     1b2:	d9 01       	movw	r26, r18
     1b4:	2d 91       	ld	r18, X+
     1b6:	3c 91       	ld	r19, X
     1b8:	42 17       	cp	r20, r18
     1ba:	53 07       	cpc	r21, r19
     1bc:	50 f0       	brcs	.+20     	; 0x1d2 <vListInsert+0x4c>
     1be:	02 80       	ldd	r0, Z+2	; 0x02
     1c0:	f3 81       	ldd	r31, Z+3	; 0x03
     1c2:	e0 2d       	mov	r30, r0
     1c4:	a2 81       	ldd	r26, Z+2	; 0x02
     1c6:	b3 81       	ldd	r27, Z+3	; 0x03
     1c8:	2d 91       	ld	r18, X+
     1ca:	3c 91       	ld	r19, X
     1cc:	42 17       	cp	r20, r18
     1ce:	53 07       	cpc	r21, r19
     1d0:	b0 f7       	brcc	.-20     	; 0x1be <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     1d2:	a2 81       	ldd	r26, Z+2	; 0x02
     1d4:	b3 81       	ldd	r27, Z+3	; 0x03
     1d6:	bb 83       	std	Y+3, r27	; 0x03
     1d8:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     1da:	15 96       	adiw	r26, 0x05	; 5
     1dc:	dc 93       	st	X, r29
     1de:	ce 93       	st	-X, r28
     1e0:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
     1e2:	fd 83       	std	Y+5, r31	; 0x05
     1e4:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
     1e6:	d3 83       	std	Z+3, r29	; 0x03
     1e8:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     1ea:	99 87       	std	Y+9, r25	; 0x09
     1ec:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     1ee:	fc 01       	movw	r30, r24
     1f0:	20 81       	ld	r18, Z
     1f2:	2f 5f       	subi	r18, 0xFF	; 255
     1f4:	20 83       	st	Z, r18
}
     1f6:	df 91       	pop	r29
     1f8:	cf 91       	pop	r28
     1fa:	08 95       	ret

000001fc <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
     1fc:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     1fe:	a2 81       	ldd	r26, Z+2	; 0x02
     200:	b3 81       	ldd	r27, Z+3	; 0x03
     202:	84 81       	ldd	r24, Z+4	; 0x04
     204:	95 81       	ldd	r25, Z+5	; 0x05
     206:	15 96       	adiw	r26, 0x05	; 5
     208:	9c 93       	st	X, r25
     20a:	8e 93       	st	-X, r24
     20c:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     20e:	a4 81       	ldd	r26, Z+4	; 0x04
     210:	b5 81       	ldd	r27, Z+5	; 0x05
     212:	82 81       	ldd	r24, Z+2	; 0x02
     214:	93 81       	ldd	r25, Z+3	; 0x03
     216:	13 96       	adiw	r26, 0x03	; 3
     218:	9c 93       	st	X, r25
     21a:	8e 93       	st	-X, r24
     21c:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     21e:	a0 85       	ldd	r26, Z+8	; 0x08
     220:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     222:	11 96       	adiw	r26, 0x01	; 1
     224:	8d 91       	ld	r24, X+
     226:	9c 91       	ld	r25, X
     228:	12 97       	sbiw	r26, 0x02	; 2
     22a:	e8 17       	cp	r30, r24
     22c:	f9 07       	cpc	r31, r25
     22e:	31 f4       	brne	.+12     	; 0x23c <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     230:	84 81       	ldd	r24, Z+4	; 0x04
     232:	95 81       	ldd	r25, Z+5	; 0x05
     234:	12 96       	adiw	r26, 0x02	; 2
     236:	9c 93       	st	X, r25
     238:	8e 93       	st	-X, r24
     23a:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
     23c:	11 86       	std	Z+9, r1	; 0x09
     23e:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     240:	8c 91       	ld	r24, X
     242:	81 50       	subi	r24, 0x01	; 1
     244:	8c 93       	st	X, r24
     246:	08 95       	ret

00000248 <initUSART>:

//-------------------------------------------------- Start ServoMotor SM --------------------------------------------------//


void SERVO_Init(){
	servo_state = servo_init;
     248:	81 30       	cpi	r24, 0x01	; 1
     24a:	81 f0       	breq	.+32     	; 0x26c <initUSART+0x24>
     24c:	e1 ec       	ldi	r30, 0xC1	; 193
     24e:	f0 e0       	ldi	r31, 0x00	; 0
     250:	80 81       	ld	r24, Z
     252:	88 61       	ori	r24, 0x18	; 24
     254:	80 83       	st	Z, r24
     256:	e2 ec       	ldi	r30, 0xC2	; 194
     258:	f0 e0       	ldi	r31, 0x00	; 0
     25a:	80 81       	ld	r24, Z
     25c:	86 60       	ori	r24, 0x06	; 6
     25e:	80 83       	st	Z, r24
     260:	83 e3       	ldi	r24, 0x33	; 51
     262:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     266:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     26a:	08 95       	ret
     26c:	e9 ec       	ldi	r30, 0xC9	; 201
     26e:	f0 e0       	ldi	r31, 0x00	; 0
     270:	80 81       	ld	r24, Z
     272:	88 61       	ori	r24, 0x18	; 24
     274:	80 83       	st	Z, r24
     276:	ea ec       	ldi	r30, 0xCA	; 202
     278:	f0 e0       	ldi	r31, 0x00	; 0
     27a:	80 81       	ld	r24, Z
     27c:	86 60       	ori	r24, 0x06	; 6
     27e:	80 83       	st	Z, r24
     280:	83 e3       	ldi	r24, 0x33	; 51
     282:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
     286:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     28a:	08 95       	ret

0000028c <USART_Flush>:
     28c:	81 30       	cpi	r24, 0x01	; 1
     28e:	29 f4       	brne	.+10     	; 0x29a <USART_Flush+0xe>
     290:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     294:	88 23       	and	r24, r24
     296:	74 f0       	brlt	.+28     	; 0x2b4 <USART_Flush+0x28>
     298:	08 95       	ret
     29a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     29e:	88 23       	and	r24, r24
     2a0:	8c f4       	brge	.+34     	; 0x2c4 <USART_Flush+0x38>
     2a2:	a6 ec       	ldi	r26, 0xC6	; 198
     2a4:	b0 e0       	ldi	r27, 0x00	; 0
     2a6:	e0 ec       	ldi	r30, 0xC0	; 192
     2a8:	f0 e0       	ldi	r31, 0x00	; 0
     2aa:	8c 91       	ld	r24, X
     2ac:	80 81       	ld	r24, Z
     2ae:	88 23       	and	r24, r24
     2b0:	e4 f3       	brlt	.-8      	; 0x2aa <USART_Flush+0x1e>
     2b2:	08 95       	ret
     2b4:	ae ec       	ldi	r26, 0xCE	; 206
     2b6:	b0 e0       	ldi	r27, 0x00	; 0
     2b8:	e8 ec       	ldi	r30, 0xC8	; 200
     2ba:	f0 e0       	ldi	r31, 0x00	; 0
     2bc:	8c 91       	ld	r24, X
     2be:	80 81       	ld	r24, Z
     2c0:	88 23       	and	r24, r24
     2c2:	e4 f3       	brlt	.-8      	; 0x2bc <USART_Flush+0x30>
     2c4:	08 95       	ret

000002c6 <USART_Receive>:
     2c6:	81 30       	cpi	r24, 0x01	; 1
     2c8:	41 f0       	breq	.+16     	; 0x2da <USART_Receive+0x14>
     2ca:	e0 ec       	ldi	r30, 0xC0	; 192
     2cc:	f0 e0       	ldi	r31, 0x00	; 0
     2ce:	80 81       	ld	r24, Z
     2d0:	88 23       	and	r24, r24
     2d2:	ec f7       	brge	.-6      	; 0x2ce <USART_Receive+0x8>
     2d4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     2d8:	08 95       	ret
     2da:	e8 ec       	ldi	r30, 0xC8	; 200
     2dc:	f0 e0       	ldi	r31, 0x00	; 0
     2de:	80 81       	ld	r24, Z
     2e0:	88 23       	and	r24, r24
     2e2:	ec f7       	brge	.-6      	; 0x2de <USART_Receive+0x18>
     2e4:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     2e8:	08 95       	ret

000002ea <TRANSMISSION_Tick>:
     2ea:	8f 92       	push	r8
     2ec:	9f 92       	push	r9
     2ee:	af 92       	push	r10
     2f0:	bf 92       	push	r11
     2f2:	cf 92       	push	r12
     2f4:	df 92       	push	r13
     2f6:	ef 92       	push	r14
     2f8:	ff 92       	push	r15
     2fa:	0f 93       	push	r16
     2fc:	1f 93       	push	r17
     2fe:	cf 93       	push	r28
     300:	df 93       	push	r29
     302:	80 91 8e 07 	lds	r24, 0x078E	; 0x80078e <transmission_state>
     306:	81 30       	cpi	r24, 0x01	; 1
     308:	09 f0       	breq	.+2      	; 0x30c <TRANSMISSION_Tick+0x22>
     30a:	cd c0       	rjmp	.+410    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	db df       	rcall	.-74     	; 0x2c6 <USART_Receive>
     310:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <data_recieved>
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	ba df       	rcall	.-140    	; 0x28c <USART_Flush>
     318:	20 91 26 07 	lds	r18, 0x0726	; 0x800726 <data_recieved>
     31c:	82 2f       	mov	r24, r18
     31e:	31 e0       	ldi	r19, 0x01	; 1
     320:	22 fb       	bst	r18, 2
     322:	ee 24       	eor	r14, r14
     324:	e0 f8       	bld	r14, 0
     326:	f1 2c       	mov	r15, r1
     328:	22 ff       	sbrs	r18, 2
     32a:	30 e0       	ldi	r19, 0x00	; 0
     32c:	30 93 28 07 	sts	0x0728, r19	; 0x800728 <bit_val_0>
     330:	ef 28       	or	r14, r15
     332:	51 f1       	breq	.+84     	; 0x388 <TRANSMISSION_Tick+0x9e>
     334:	30 b1       	in	r19, 0x00	; 0
     336:	30 95       	com	r19
     338:	31 fd       	sbrc	r19, 1
     33a:	04 c0       	rjmp	.+8      	; 0x344 <TRANSMISSION_Tick+0x5a>
     33c:	31 e0       	ldi	r19, 0x01	; 1
     33e:	30 93 30 07 	sts	0x0730, r19	; 0x800730 <going_reverse>
     342:	02 c0       	rjmp	.+4      	; 0x348 <TRANSMISSION_Tick+0x5e>
     344:	10 92 30 07 	sts	0x0730, r1	; 0x800730 <going_reverse>
     348:	32 2f       	mov	r19, r18
     34a:	31 70       	andi	r19, 0x01	; 1
     34c:	81 fb       	bst	r24, 1
     34e:	aa 24       	eor	r10, r10
     350:	a0 f8       	bld	r10, 0
     352:	b1 2c       	mov	r11, r1
     354:	a1 14       	cp	r10, r1
     356:	b1 04       	cpc	r11, r1
     358:	31 f4       	brne	.+12     	; 0x366 <TRANSMISSION_Tick+0x7c>
     35a:	33 23       	and	r19, r19
     35c:	91 f0       	breq	.+36     	; 0x382 <TRANSMISSION_Tick+0x98>
     35e:	81 e0       	ldi	r24, 0x01	; 1
     360:	80 93 32 07 	sts	0x0732, r24	; 0x800732 <reverse>
     364:	3e c0       	rjmp	.+124    	; 0x3e2 <TRANSMISSION_Tick+0xf8>
     366:	ab 28       	or	r10, r11
     368:	61 f0       	breq	.+24     	; 0x382 <TRANSMISSION_Tick+0x98>
     36a:	31 11       	cpse	r19, r1
     36c:	04 c0       	rjmp	.+8      	; 0x376 <TRANSMISSION_Tick+0x8c>
     36e:	82 e0       	ldi	r24, 0x02	; 2
     370:	80 93 32 07 	sts	0x0732, r24	; 0x800732 <reverse>
     374:	36 c0       	rjmp	.+108    	; 0x3e2 <TRANSMISSION_Tick+0xf8>
     376:	33 23       	and	r19, r19
     378:	21 f0       	breq	.+8      	; 0x382 <TRANSMISSION_Tick+0x98>
     37a:	83 e0       	ldi	r24, 0x03	; 3
     37c:	80 93 32 07 	sts	0x0732, r24	; 0x800732 <reverse>
     380:	30 c0       	rjmp	.+96     	; 0x3e2 <TRANSMISSION_Tick+0xf8>
     382:	10 92 32 07 	sts	0x0732, r1	; 0x800732 <reverse>
     386:	2d c0       	rjmp	.+90     	; 0x3e2 <TRANSMISSION_Tick+0xf8>
     388:	00 9b       	sbis	0x00, 0	; 0
     38a:	04 c0       	rjmp	.+8      	; 0x394 <TRANSMISSION_Tick+0xaa>
     38c:	31 e0       	ldi	r19, 0x01	; 1
     38e:	30 93 31 07 	sts	0x0731, r19	; 0x800731 <going_forward>
     392:	02 c0       	rjmp	.+4      	; 0x398 <TRANSMISSION_Tick+0xae>
     394:	10 92 31 07 	sts	0x0731, r1	; 0x800731 <going_forward>
     398:	32 2f       	mov	r19, r18
     39a:	31 70       	andi	r19, 0x01	; 1
     39c:	81 fb       	bst	r24, 1
     39e:	88 24       	eor	r8, r8
     3a0:	80 f8       	bld	r8, 0
     3a2:	91 2c       	mov	r9, r1
     3a4:	81 14       	cp	r8, r1
     3a6:	91 04       	cpc	r9, r1
     3a8:	31 f4       	brne	.+12     	; 0x3b6 <TRANSMISSION_Tick+0xcc>
     3aa:	33 23       	and	r19, r19
     3ac:	91 f0       	breq	.+36     	; 0x3d2 <TRANSMISSION_Tick+0xe8>
     3ae:	81 e0       	ldi	r24, 0x01	; 1
     3b0:	80 93 33 07 	sts	0x0733, r24	; 0x800733 <throttle>
     3b4:	16 c0       	rjmp	.+44     	; 0x3e2 <TRANSMISSION_Tick+0xf8>
     3b6:	89 28       	or	r8, r9
     3b8:	61 f0       	breq	.+24     	; 0x3d2 <TRANSMISSION_Tick+0xe8>
     3ba:	31 11       	cpse	r19, r1
     3bc:	04 c0       	rjmp	.+8      	; 0x3c6 <TRANSMISSION_Tick+0xdc>
     3be:	82 e0       	ldi	r24, 0x02	; 2
     3c0:	80 93 33 07 	sts	0x0733, r24	; 0x800733 <throttle>
     3c4:	0e c0       	rjmp	.+28     	; 0x3e2 <TRANSMISSION_Tick+0xf8>
     3c6:	33 23       	and	r19, r19
     3c8:	21 f0       	breq	.+8      	; 0x3d2 <TRANSMISSION_Tick+0xe8>
     3ca:	83 e0       	ldi	r24, 0x03	; 3
     3cc:	80 93 33 07 	sts	0x0733, r24	; 0x800733 <throttle>
     3d0:	08 c0       	rjmp	.+16     	; 0x3e2 <TRANSMISSION_Tick+0xf8>
     3d2:	10 92 31 07 	sts	0x0731, r1	; 0x800731 <going_forward>
     3d6:	10 92 30 07 	sts	0x0730, r1	; 0x800730 <going_reverse>
     3da:	10 92 33 07 	sts	0x0733, r1	; 0x800733 <throttle>
     3de:	10 92 32 07 	sts	0x0732, r1	; 0x800732 <reverse>
     3e2:	80 91 26 07 	lds	r24, 0x0726	; 0x800726 <data_recieved>
     3e6:	21 e0       	ldi	r18, 0x01	; 1
     3e8:	83 fb       	bst	r24, 3
     3ea:	cc 24       	eor	r12, r12
     3ec:	c0 f8       	bld	r12, 0
     3ee:	d1 2c       	mov	r13, r1
     3f0:	83 ff       	sbrs	r24, 3
     3f2:	20 e0       	ldi	r18, 0x00	; 0
     3f4:	20 93 28 07 	sts	0x0728, r18	; 0x800728 <bit_val_0>
     3f8:	21 e0       	ldi	r18, 0x01	; 1
     3fa:	84 fb       	bst	r24, 4
     3fc:	33 27       	eor	r19, r19
     3fe:	30 f9       	bld	r19, 0
     400:	c3 2f       	mov	r28, r19
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	d3 2f       	mov	r29, r19
     406:	84 ff       	sbrs	r24, 4
     408:	20 e0       	ldi	r18, 0x00	; 0
     40a:	20 93 27 07 	sts	0x0727, r18	; 0x800727 <bit_val_1>
     40e:	20 97       	sbiw	r28, 0x00	; 0
     410:	79 f4       	brne	.+30     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     412:	cd 28       	or	r12, r13
     414:	e9 f0       	breq	.+58     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     416:	20 b1       	in	r18, 0x00	; 0
     418:	20 95       	com	r18
     41a:	23 fd       	sbrc	r18, 3
     41c:	1f c0       	rjmp	.+62     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     41e:	21 e0       	ldi	r18, 0x01	; 1
     420:	20 93 2e 07 	sts	0x072E, r18	; 0x80072e <right>
     424:	10 92 2d 07 	sts	0x072D, r1	; 0x80072d <left>
     428:	22 e0       	ldi	r18, 0x02	; 2
     42a:	20 93 2c 07 	sts	0x072C, r18	; 0x80072c <max_servo>
     42e:	16 c0       	rjmp	.+44     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     430:	cd 2b       	or	r28, r29
     432:	71 f0       	breq	.+28     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     434:	cd 28       	or	r12, r13
     436:	61 f4       	brne	.+24     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     438:	20 b1       	in	r18, 0x00	; 0
     43a:	20 95       	com	r18
     43c:	22 fd       	sbrc	r18, 2
     43e:	0e c0       	rjmp	.+28     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     440:	10 92 2e 07 	sts	0x072E, r1	; 0x80072e <right>
     444:	21 e0       	ldi	r18, 0x01	; 1
     446:	20 93 2d 07 	sts	0x072D, r18	; 0x80072d <left>
     44a:	20 93 2c 07 	sts	0x072C, r18	; 0x80072c <max_servo>
     44e:	06 c0       	rjmp	.+12     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     450:	10 92 2e 07 	sts	0x072E, r1	; 0x80072e <right>
     454:	10 92 2d 07 	sts	0x072D, r1	; 0x80072d <left>
     458:	10 92 2c 07 	sts	0x072C, r1	; 0x80072c <max_servo>
     45c:	91 e0       	ldi	r25, 0x01	; 1
     45e:	85 fb       	bst	r24, 5
     460:	00 27       	eor	r16, r16
     462:	00 f9       	bld	r16, 0
     464:	10 e0       	ldi	r17, 0x00	; 0
     466:	85 ff       	sbrs	r24, 5
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	90 93 28 07 	sts	0x0728, r25	; 0x800728 <bit_val_0>
     46e:	01 2b       	or	r16, r17
     470:	71 f0       	breq	.+28     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
     472:	80 91 29 07 	lds	r24, 0x0729	; 0x800729 <lights>
     476:	81 11       	cpse	r24, r1
     478:	16 c0       	rjmp	.+44     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     47a:	81 e0       	ldi	r24, 0x01	; 1
     47c:	80 93 29 07 	sts	0x0729, r24	; 0x800729 <lights>
     480:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <b_output>
     484:	80 61       	ori	r24, 0x10	; 16
     486:	80 93 2a 07 	sts	0x072A, r24	; 0x80072a <b_output>
     48a:	85 b9       	out	0x05, r24	; 5
     48c:	0c c0       	rjmp	.+24     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     48e:	80 91 29 07 	lds	r24, 0x0729	; 0x800729 <lights>
     492:	88 23       	and	r24, r24
     494:	41 f0       	breq	.+16     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     496:	10 92 29 07 	sts	0x0729, r1	; 0x800729 <lights>
     49a:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <b_output>
     49e:	8f 7e       	andi	r24, 0xEF	; 239
     4a0:	80 93 2a 07 	sts	0x072A, r24	; 0x80072a <b_output>
     4a4:	85 b9       	out	0x05, r24	; 5
     4a6:	80 91 8e 07 	lds	r24, 0x078E	; 0x80078e <transmission_state>
     4aa:	88 23       	and	r24, r24
     4ac:	19 f0       	breq	.+6      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
     4ae:	10 92 8e 07 	sts	0x078E, r1	; 0x80078e <transmission_state>
     4b2:	07 c0       	rjmp	.+14     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
     4b4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     4b8:	88 23       	and	r24, r24
     4ba:	1c f4       	brge	.+6      	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	80 93 8e 07 	sts	0x078E, r24	; 0x80078e <transmission_state>
     4c2:	df 91       	pop	r29
     4c4:	cf 91       	pop	r28
     4c6:	1f 91       	pop	r17
     4c8:	0f 91       	pop	r16
     4ca:	ff 90       	pop	r15
     4cc:	ef 90       	pop	r14
     4ce:	df 90       	pop	r13
     4d0:	cf 90       	pop	r12
     4d2:	bf 90       	pop	r11
     4d4:	af 90       	pop	r10
     4d6:	9f 90       	pop	r9
     4d8:	8f 90       	pop	r8
     4da:	08 95       	ret

000004dc <TRANSMISSIONSecTask>:
     4dc:	10 92 8e 07 	sts	0x078E, r1	; 0x80078e <transmission_state>
     4e0:	04 df       	rcall	.-504    	; 0x2ea <TRANSMISSION_Tick>
     4e2:	83 e0       	ldi	r24, 0x03	; 3
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	7e d5       	rcall	.+2812   	; 0xfe4 <vTaskDelay>
     4e8:	fb cf       	rjmp	.-10     	; 0x4e0 <TRANSMISSIONSecTask+0x4>

000004ea <TRANSMISSIONSecPulse>:
     4ea:	af 92       	push	r10
     4ec:	bf 92       	push	r11
     4ee:	cf 92       	push	r12
     4f0:	df 92       	push	r13
     4f2:	ef 92       	push	r14
     4f4:	ff 92       	push	r15
     4f6:	0f 93       	push	r16
     4f8:	a1 2c       	mov	r10, r1
     4fa:	b1 2c       	mov	r11, r1
     4fc:	c1 2c       	mov	r12, r1
     4fe:	d1 2c       	mov	r13, r1
     500:	e1 2c       	mov	r14, r1
     502:	f1 2c       	mov	r15, r1
     504:	08 2f       	mov	r16, r24
     506:	20 e0       	ldi	r18, 0x00	; 0
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	45 e5       	ldi	r20, 0x55	; 85
     50c:	50 e0       	ldi	r21, 0x00	; 0
     50e:	63 e0       	ldi	r22, 0x03	; 3
     510:	71 e0       	ldi	r23, 0x01	; 1
     512:	8e e6       	ldi	r24, 0x6E	; 110
     514:	92 e0       	ldi	r25, 0x02	; 2
     516:	02 d3       	rcall	.+1540   	; 0xb1c <xTaskGenericCreate>
     518:	0f 91       	pop	r16
     51a:	ff 90       	pop	r15
     51c:	ef 90       	pop	r14
     51e:	df 90       	pop	r13
     520:	cf 90       	pop	r12
     522:	bf 90       	pop	r11
     524:	af 90       	pop	r10
     526:	08 95       	ret

00000528 <FORWARD_Tick>:
     528:	80 91 8f 07 	lds	r24, 0x078F	; 0x80078f <forward_state>
     52c:	81 30       	cpi	r24, 0x01	; 1
     52e:	b9 f0       	breq	.+46     	; 0x55e <FORWARD_Tick+0x36>
     530:	18 f0       	brcs	.+6      	; 0x538 <FORWARD_Tick+0x10>
     532:	82 30       	cpi	r24, 0x02	; 2
     534:	69 f1       	breq	.+90     	; 0x590 <FORWARD_Tick+0x68>
     536:	08 95       	ret
     538:	80 91 31 07 	lds	r24, 0x0731	; 0x800731 <going_forward>
     53c:	88 23       	and	r24, r24
     53e:	09 f4       	brne	.+2      	; 0x542 <FORWARD_Tick+0x1a>
     540:	40 c0       	rjmp	.+128    	; 0x5c2 <FORWARD_Tick+0x9a>
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	80 93 8f 07 	sts	0x078F, r24	; 0x80078f <forward_state>
     548:	90 91 33 07 	lds	r25, 0x0733	; 0x800733 <throttle>
     54c:	83 e0       	ldi	r24, 0x03	; 3
     54e:	89 1b       	sub	r24, r25
     550:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     554:	10 92 2f 07 	sts	0x072F, r1	; 0x80072f <pwm_counter>
     558:	81 e1       	ldi	r24, 0x11	; 17
     55a:	88 b9       	out	0x08, r24	; 8
     55c:	08 95       	ret
     55e:	80 91 31 07 	lds	r24, 0x0731	; 0x800731 <going_forward>
     562:	88 23       	and	r24, r24
     564:	89 f0       	breq	.+34     	; 0x588 <FORWARD_Tick+0x60>
     566:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <pwm_counter>
     56a:	90 91 33 07 	lds	r25, 0x0733	; 0x800733 <throttle>
     56e:	89 17       	cp	r24, r25
     570:	20 f4       	brcc	.+8      	; 0x57a <FORWARD_Tick+0x52>
     572:	8f 5f       	subi	r24, 0xFF	; 255
     574:	80 93 2f 07 	sts	0x072F, r24	; 0x80072f <pwm_counter>
     578:	08 95       	ret
     57a:	82 e0       	ldi	r24, 0x02	; 2
     57c:	80 93 8f 07 	sts	0x078F, r24	; 0x80078f <forward_state>
     580:	10 92 2f 07 	sts	0x072F, r1	; 0x80072f <pwm_counter>
     584:	18 b8       	out	0x08, r1	; 8
     586:	08 95       	ret
     588:	10 92 8f 07 	sts	0x078F, r1	; 0x80078f <forward_state>
     58c:	18 b8       	out	0x08, r1	; 8
     58e:	08 95       	ret
     590:	80 91 31 07 	lds	r24, 0x0731	; 0x800731 <going_forward>
     594:	88 23       	and	r24, r24
     596:	91 f0       	breq	.+36     	; 0x5bc <FORWARD_Tick+0x94>
     598:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <pwm_counter>
     59c:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
     5a0:	89 17       	cp	r24, r25
     5a2:	20 f4       	brcc	.+8      	; 0x5ac <FORWARD_Tick+0x84>
     5a4:	8f 5f       	subi	r24, 0xFF	; 255
     5a6:	80 93 2f 07 	sts	0x072F, r24	; 0x80072f <pwm_counter>
     5aa:	08 95       	ret
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	80 93 8f 07 	sts	0x078F, r24	; 0x80078f <forward_state>
     5b2:	10 92 2f 07 	sts	0x072F, r1	; 0x80072f <pwm_counter>
     5b6:	81 e1       	ldi	r24, 0x11	; 17
     5b8:	88 b9       	out	0x08, r24	; 8
     5ba:	08 95       	ret
     5bc:	10 92 8f 07 	sts	0x078F, r1	; 0x80078f <forward_state>
     5c0:	18 b8       	out	0x08, r1	; 8
     5c2:	08 95       	ret

000005c4 <ForwardSecTask>:
     5c4:	10 92 8f 07 	sts	0x078F, r1	; 0x80078f <forward_state>
     5c8:	af df       	rcall	.-162    	; 0x528 <FORWARD_Tick>
     5ca:	83 e0       	ldi	r24, 0x03	; 3
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	0a d5       	rcall	.+2580   	; 0xfe4 <vTaskDelay>
     5d0:	fb cf       	rjmp	.-10     	; 0x5c8 <ForwardSecTask+0x4>

000005d2 <ForwardSecPulse>:
     5d2:	af 92       	push	r10
     5d4:	bf 92       	push	r11
     5d6:	cf 92       	push	r12
     5d8:	df 92       	push	r13
     5da:	ef 92       	push	r14
     5dc:	ff 92       	push	r15
     5de:	0f 93       	push	r16
     5e0:	a1 2c       	mov	r10, r1
     5e2:	b1 2c       	mov	r11, r1
     5e4:	c1 2c       	mov	r12, r1
     5e6:	d1 2c       	mov	r13, r1
     5e8:	e1 2c       	mov	r14, r1
     5ea:	f1 2c       	mov	r15, r1
     5ec:	08 2f       	mov	r16, r24
     5ee:	20 e0       	ldi	r18, 0x00	; 0
     5f0:	30 e0       	ldi	r19, 0x00	; 0
     5f2:	45 e5       	ldi	r20, 0x55	; 85
     5f4:	50 e0       	ldi	r21, 0x00	; 0
     5f6:	67 e1       	ldi	r22, 0x17	; 23
     5f8:	71 e0       	ldi	r23, 0x01	; 1
     5fa:	82 ee       	ldi	r24, 0xE2	; 226
     5fc:	92 e0       	ldi	r25, 0x02	; 2
     5fe:	8e d2       	rcall	.+1308   	; 0xb1c <xTaskGenericCreate>
     600:	0f 91       	pop	r16
     602:	ff 90       	pop	r15
     604:	ef 90       	pop	r14
     606:	df 90       	pop	r13
     608:	cf 90       	pop	r12
     60a:	bf 90       	pop	r11
     60c:	af 90       	pop	r10
     60e:	08 95       	ret

00000610 <REVERSE_Tick>:
     610:	80 91 92 07 	lds	r24, 0x0792	; 0x800792 <reverse_state>
     614:	81 30       	cpi	r24, 0x01	; 1
     616:	b9 f0       	breq	.+46     	; 0x646 <REVERSE_Tick+0x36>
     618:	18 f0       	brcs	.+6      	; 0x620 <REVERSE_Tick+0x10>
     61a:	82 30       	cpi	r24, 0x02	; 2
     61c:	69 f1       	breq	.+90     	; 0x678 <REVERSE_Tick+0x68>
     61e:	08 95       	ret
     620:	80 91 30 07 	lds	r24, 0x0730	; 0x800730 <going_reverse>
     624:	88 23       	and	r24, r24
     626:	09 f4       	brne	.+2      	; 0x62a <REVERSE_Tick+0x1a>
     628:	40 c0       	rjmp	.+128    	; 0x6aa <REVERSE_Tick+0x9a>
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	80 93 92 07 	sts	0x0792, r24	; 0x800792 <reverse_state>
     630:	90 91 32 07 	lds	r25, 0x0732	; 0x800732 <reverse>
     634:	83 e0       	ldi	r24, 0x03	; 3
     636:	89 1b       	sub	r24, r25
     638:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     63c:	10 92 2f 07 	sts	0x072F, r1	; 0x80072f <pwm_counter>
     640:	82 e2       	ldi	r24, 0x22	; 34
     642:	88 b9       	out	0x08, r24	; 8
     644:	08 95       	ret
     646:	80 91 30 07 	lds	r24, 0x0730	; 0x800730 <going_reverse>
     64a:	88 23       	and	r24, r24
     64c:	89 f0       	breq	.+34     	; 0x670 <REVERSE_Tick+0x60>
     64e:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <pwm_counter>
     652:	90 91 32 07 	lds	r25, 0x0732	; 0x800732 <reverse>
     656:	89 17       	cp	r24, r25
     658:	20 f4       	brcc	.+8      	; 0x662 <REVERSE_Tick+0x52>
     65a:	8f 5f       	subi	r24, 0xFF	; 255
     65c:	80 93 2f 07 	sts	0x072F, r24	; 0x80072f <pwm_counter>
     660:	08 95       	ret
     662:	82 e0       	ldi	r24, 0x02	; 2
     664:	80 93 92 07 	sts	0x0792, r24	; 0x800792 <reverse_state>
     668:	10 92 2f 07 	sts	0x072F, r1	; 0x80072f <pwm_counter>
     66c:	18 b8       	out	0x08, r1	; 8
     66e:	08 95       	ret
     670:	10 92 92 07 	sts	0x0792, r1	; 0x800792 <reverse_state>
     674:	18 b8       	out	0x08, r1	; 8
     676:	08 95       	ret
     678:	80 91 30 07 	lds	r24, 0x0730	; 0x800730 <going_reverse>
     67c:	88 23       	and	r24, r24
     67e:	91 f0       	breq	.+36     	; 0x6a4 <REVERSE_Tick+0x94>
     680:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <pwm_counter>
     684:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
     688:	89 17       	cp	r24, r25
     68a:	20 f4       	brcc	.+8      	; 0x694 <REVERSE_Tick+0x84>
     68c:	8f 5f       	subi	r24, 0xFF	; 255
     68e:	80 93 2f 07 	sts	0x072F, r24	; 0x80072f <pwm_counter>
     692:	08 95       	ret
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	80 93 92 07 	sts	0x0792, r24	; 0x800792 <reverse_state>
     69a:	10 92 2f 07 	sts	0x072F, r1	; 0x80072f <pwm_counter>
     69e:	82 e2       	ldi	r24, 0x22	; 34
     6a0:	88 b9       	out	0x08, r24	; 8
     6a2:	08 95       	ret
     6a4:	10 92 92 07 	sts	0x0792, r1	; 0x800792 <reverse_state>
     6a8:	18 b8       	out	0x08, r1	; 8
     6aa:	08 95       	ret

000006ac <ReverseSecTask>:
     6ac:	10 92 92 07 	sts	0x0792, r1	; 0x800792 <reverse_state>
     6b0:	af df       	rcall	.-162    	; 0x610 <REVERSE_Tick>
     6b2:	83 e0       	ldi	r24, 0x03	; 3
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	96 d4       	rcall	.+2348   	; 0xfe4 <vTaskDelay>
     6b8:	fb cf       	rjmp	.-10     	; 0x6b0 <ReverseSecTask+0x4>

000006ba <ReverseSecPulse>:
     6ba:	af 92       	push	r10
     6bc:	bf 92       	push	r11
     6be:	cf 92       	push	r12
     6c0:	df 92       	push	r13
     6c2:	ef 92       	push	r14
     6c4:	ff 92       	push	r15
     6c6:	0f 93       	push	r16
     6c8:	a1 2c       	mov	r10, r1
     6ca:	b1 2c       	mov	r11, r1
     6cc:	c1 2c       	mov	r12, r1
     6ce:	d1 2c       	mov	r13, r1
     6d0:	e1 2c       	mov	r14, r1
     6d2:	f1 2c       	mov	r15, r1
     6d4:	08 2f       	mov	r16, r24
     6d6:	20 e0       	ldi	r18, 0x00	; 0
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	45 e5       	ldi	r20, 0x55	; 85
     6dc:	50 e0       	ldi	r21, 0x00	; 0
     6de:	66 e2       	ldi	r22, 0x26	; 38
     6e0:	71 e0       	ldi	r23, 0x01	; 1
     6e2:	86 e5       	ldi	r24, 0x56	; 86
     6e4:	93 e0       	ldi	r25, 0x03	; 3
     6e6:	1a d2       	rcall	.+1076   	; 0xb1c <xTaskGenericCreate>
     6e8:	0f 91       	pop	r16
     6ea:	ff 90       	pop	r15
     6ec:	ef 90       	pop	r14
     6ee:	df 90       	pop	r13
     6f0:	cf 90       	pop	r12
     6f2:	bf 90       	pop	r11
     6f4:	af 90       	pop	r10
     6f6:	08 95       	ret

000006f8 <SERVO_Tick>:
		default:
			break;
	}
	
	//Transitions
	switch(servo_state){
     6f8:	80 91 90 07 	lds	r24, 0x0790	; 0x800790 <servo_state>
     6fc:	88 23       	and	r24, r24
     6fe:	19 f0       	breq	.+6      	; 0x706 <SERVO_Tick+0xe>
     700:	81 30       	cpi	r24, 0x01	; 1
     702:	f1 f0       	breq	.+60     	; 0x740 <SERVO_Tick+0x48>
     704:	3f c0       	rjmp	.+126    	; 0x784 <SERVO_Tick+0x8c>
		case servo_init:
			if(left || right){
     706:	80 91 2d 07 	lds	r24, 0x072D	; 0x80072d <left>
     70a:	81 11       	cpse	r24, r1
     70c:	04 c0       	rjmp	.+8      	; 0x716 <SERVO_Tick+0x1e>
     70e:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <right>
     712:	88 23       	and	r24, r24
     714:	61 f0       	breq	.+24     	; 0x72e <SERVO_Tick+0x36>
				servo_state = drive_high;
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	80 93 90 07 	sts	0x0790, r24	; 0x800790 <servo_state>
				servo_counter = 0;
     71c:	10 92 2b 07 	sts	0x072B, r1	; 0x80072b <servo_counter>
				b_output = b_output & 0xFE;
				b_output = b_output | 0x01;
     720:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <b_output>
     724:	81 60       	ori	r24, 0x01	; 1
     726:	80 93 2a 07 	sts	0x072A, r24	; 0x80072a <b_output>
				PORTB = b_output;
     72a:	85 b9       	out	0x05, r24	; 5
     72c:	08 95       	ret
			}
		
			else{
				b_output = b_output & 0xFE;
     72e:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <b_output>
     732:	8e 7f       	andi	r24, 0xFE	; 254
     734:	80 93 2a 07 	sts	0x072A, r24	; 0x80072a <b_output>
				PORTB = b_output;
     738:	85 b9       	out	0x05, r24	; 5
				servo_state = servo_init;
     73a:	10 92 90 07 	sts	0x0790, r1	; 0x800790 <servo_state>
     73e:	08 95       	ret
			}
			break;
		
		case drive_high:
			if((servo_counter < max_servo) && (left || right)){
     740:	80 91 2b 07 	lds	r24, 0x072B	; 0x80072b <servo_counter>
     744:	90 91 2c 07 	lds	r25, 0x072C	; 0x80072c <max_servo>
     748:	89 17       	cp	r24, r25
     74a:	78 f4       	brcc	.+30     	; 0x76a <SERVO_Tick+0x72>
     74c:	90 91 2d 07 	lds	r25, 0x072D	; 0x80072d <left>
     750:	91 11       	cpse	r25, r1
     752:	04 c0       	rjmp	.+8      	; 0x75c <SERVO_Tick+0x64>
     754:	90 91 2e 07 	lds	r25, 0x072E	; 0x80072e <right>
     758:	99 23       	and	r25, r25
     75a:	39 f0       	breq	.+14     	; 0x76a <SERVO_Tick+0x72>
				++servo_counter;
     75c:	8f 5f       	subi	r24, 0xFF	; 255
     75e:	80 93 2b 07 	sts	0x072B, r24	; 0x80072b <servo_counter>
				servo_state = drive_high;
     762:	81 e0       	ldi	r24, 0x01	; 1
     764:	80 93 90 07 	sts	0x0790, r24	; 0x800790 <servo_state>
     768:	08 95       	ret
			}
		
			else{
				left = 0;
     76a:	10 92 2d 07 	sts	0x072D, r1	; 0x80072d <left>
				right = 0;
     76e:	10 92 2e 07 	sts	0x072E, r1	; 0x80072e <right>
				b_output = b_output & 0xFE;
     772:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <b_output>
     776:	8e 7f       	andi	r24, 0xFE	; 254
     778:	80 93 2a 07 	sts	0x072A, r24	; 0x80072a <b_output>
				PORTB = b_output;
     77c:	85 b9       	out	0x05, r24	; 5
				servo_state = servo_init;
     77e:	10 92 90 07 	sts	0x0790, r1	; 0x800790 <servo_state>
     782:	08 95       	ret
			}
			break;
		
		default:
			servo_state = servo_init;
     784:	10 92 90 07 	sts	0x0790, r1	; 0x800790 <servo_state>
     788:	08 95       	ret

0000078a <SERVOSecTask>:

//-------------------------------------------------- Start ServoMotor SM --------------------------------------------------//


void SERVO_Init(){
	servo_state = servo_init;
     78a:	10 92 90 07 	sts	0x0790, r1	; 0x800790 <servo_state>
{
	SERVO_Init();
	for(;;)
	{
		SERVO_Tick();
		vTaskDelay(1);
     78e:	b4 df       	rcall	.-152    	; 0x6f8 <SERVO_Tick>
     790:	81 e0       	ldi	r24, 0x01	; 1
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	27 d4       	rcall	.+2126   	; 0xfe4 <vTaskDelay>
     796:	fb cf       	rjmp	.-10     	; 0x78e <SERVOSecTask+0x4>

00000798 <SERVOSecPulse>:
	}
}

void SERVOSecPulse(unsigned portBASE_TYPE Priority)
{
     798:	af 92       	push	r10
     79a:	bf 92       	push	r11
     79c:	cf 92       	push	r12
     79e:	df 92       	push	r13
     7a0:	ef 92       	push	r14
     7a2:	ff 92       	push	r15
     7a4:	0f 93       	push	r16
	xTaskCreate(SERVOSecTask, (signed portCHAR *)"SERVOSecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
     7a6:	a1 2c       	mov	r10, r1
     7a8:	b1 2c       	mov	r11, r1
     7aa:	c1 2c       	mov	r12, r1
     7ac:	d1 2c       	mov	r13, r1
     7ae:	e1 2c       	mov	r14, r1
     7b0:	f1 2c       	mov	r15, r1
     7b2:	08 2f       	mov	r16, r24
     7b4:	20 e0       	ldi	r18, 0x00	; 0
     7b6:	30 e0       	ldi	r19, 0x00	; 0
     7b8:	45 e5       	ldi	r20, 0x55	; 85
     7ba:	50 e0       	ldi	r21, 0x00	; 0
     7bc:	65 e3       	ldi	r22, 0x35	; 53
     7be:	71 e0       	ldi	r23, 0x01	; 1
     7c0:	85 ec       	ldi	r24, 0xC5	; 197
     7c2:	93 e0       	ldi	r25, 0x03	; 3
     7c4:	ab d1       	rcall	.+854    	; 0xb1c <xTaskGenericCreate>
}
     7c6:	0f 91       	pop	r16
     7c8:	ff 90       	pop	r15
     7ca:	ef 90       	pop	r14
     7cc:	df 90       	pop	r13
     7ce:	cf 90       	pop	r12
     7d0:	bf 90       	pop	r11
     7d2:	af 90       	pop	r10
     7d4:	08 95       	ret

000007d6 <main>:

//-------------------------------------------------- End ServoMotor SM --------------------------------------------------//

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
     7d6:	11 b8       	out	0x01, r1	; 1
     7d8:	8f ef       	ldi	r24, 0xFF	; 255
     7da:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
     7dc:	84 b9       	out	0x04, r24	; 4
     7de:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF; PORTC = 0x00;
     7e0:	87 b9       	out	0x07, r24	; 7
     7e2:	18 b8       	out	0x08, r1	; 8
	//DDRD = 0xFF; PORTD = 0x00;
	initUSART(0);
     7e4:	80 e0       	ldi	r24, 0x00	; 0
	//Start Tasks
	TRANSMISSIONSecPulse(1);
     7e6:	30 dd       	rcall	.-1440   	; 0x248 <initUSART>
	ForwardSecPulse(1);
     7e8:	81 e0       	ldi	r24, 0x01	; 1
	ReverseSecPulse(1);
     7ea:	7f de       	rcall	.-770    	; 0x4ea <TRANSMISSIONSecPulse>
	SERVOSecPulse(1);
     7ec:	81 e0       	ldi	r24, 0x01	; 1
     7ee:	f1 de       	rcall	.-542    	; 0x5d2 <ForwardSecPulse>
     7f0:	81 e0       	ldi	r24, 0x01	; 1
	//RunSchedular
	vTaskStartScheduler();
     7f2:	63 df       	rcall	.-314    	; 0x6ba <ReverseSecPulse>
     7f4:	81 e0       	ldi	r24, 0x01	; 1
	
	return 0;
     7f6:	d0 df       	rcall	.-96     	; 0x798 <SERVOSecPulse>
     7f8:	84 d2       	rcall	.+1288   	; 0xd02 <vTaskStartScheduler>
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	08 95       	ret

00000800 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     800:	31 e1       	ldi	r19, 0x11	; 17
     802:	fc 01       	movw	r30, r24
     804:	30 83       	st	Z, r19
     806:	31 97       	sbiw	r30, 0x01	; 1
     808:	22 e2       	ldi	r18, 0x22	; 34
     80a:	20 83       	st	Z, r18
     80c:	31 97       	sbiw	r30, 0x01	; 1
     80e:	a3 e3       	ldi	r26, 0x33	; 51
     810:	a0 83       	st	Z, r26
     812:	31 97       	sbiw	r30, 0x01	; 1
     814:	60 83       	st	Z, r22
     816:	31 97       	sbiw	r30, 0x01	; 1
     818:	70 83       	st	Z, r23
     81a:	31 97       	sbiw	r30, 0x01	; 1
     81c:	10 82       	st	Z, r1
     81e:	31 97       	sbiw	r30, 0x01	; 1
     820:	60 e8       	ldi	r22, 0x80	; 128
     822:	60 83       	st	Z, r22
     824:	31 97       	sbiw	r30, 0x01	; 1
     826:	10 82       	st	Z, r1
     828:	31 97       	sbiw	r30, 0x01	; 1
     82a:	62 e0       	ldi	r22, 0x02	; 2
     82c:	60 83       	st	Z, r22
     82e:	31 97       	sbiw	r30, 0x01	; 1
     830:	63 e0       	ldi	r22, 0x03	; 3
     832:	60 83       	st	Z, r22
     834:	31 97       	sbiw	r30, 0x01	; 1
     836:	64 e0       	ldi	r22, 0x04	; 4
     838:	60 83       	st	Z, r22
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	65 e0       	ldi	r22, 0x05	; 5
     83e:	60 83       	st	Z, r22
     840:	31 97       	sbiw	r30, 0x01	; 1
     842:	66 e0       	ldi	r22, 0x06	; 6
     844:	60 83       	st	Z, r22
     846:	31 97       	sbiw	r30, 0x01	; 1
     848:	67 e0       	ldi	r22, 0x07	; 7
     84a:	60 83       	st	Z, r22
     84c:	31 97       	sbiw	r30, 0x01	; 1
     84e:	68 e0       	ldi	r22, 0x08	; 8
     850:	60 83       	st	Z, r22
     852:	31 97       	sbiw	r30, 0x01	; 1
     854:	69 e0       	ldi	r22, 0x09	; 9
     856:	60 83       	st	Z, r22
     858:	31 97       	sbiw	r30, 0x01	; 1
     85a:	60 e1       	ldi	r22, 0x10	; 16
     85c:	60 83       	st	Z, r22
     85e:	31 97       	sbiw	r30, 0x01	; 1
     860:	30 83       	st	Z, r19
     862:	31 97       	sbiw	r30, 0x01	; 1
     864:	32 e1       	ldi	r19, 0x12	; 18
     866:	30 83       	st	Z, r19
     868:	31 97       	sbiw	r30, 0x01	; 1
     86a:	33 e1       	ldi	r19, 0x13	; 19
     86c:	30 83       	st	Z, r19
     86e:	31 97       	sbiw	r30, 0x01	; 1
     870:	34 e1       	ldi	r19, 0x14	; 20
     872:	30 83       	st	Z, r19
     874:	31 97       	sbiw	r30, 0x01	; 1
     876:	35 e1       	ldi	r19, 0x15	; 21
     878:	30 83       	st	Z, r19
     87a:	31 97       	sbiw	r30, 0x01	; 1
     87c:	36 e1       	ldi	r19, 0x16	; 22
     87e:	30 83       	st	Z, r19
     880:	31 97       	sbiw	r30, 0x01	; 1
     882:	37 e1       	ldi	r19, 0x17	; 23
     884:	30 83       	st	Z, r19
     886:	31 97       	sbiw	r30, 0x01	; 1
     888:	38 e1       	ldi	r19, 0x18	; 24
     88a:	30 83       	st	Z, r19
     88c:	31 97       	sbiw	r30, 0x01	; 1
     88e:	39 e1       	ldi	r19, 0x19	; 25
     890:	30 83       	st	Z, r19
     892:	31 97       	sbiw	r30, 0x01	; 1
     894:	30 e2       	ldi	r19, 0x20	; 32
     896:	30 83       	st	Z, r19
     898:	31 97       	sbiw	r30, 0x01	; 1
     89a:	31 e2       	ldi	r19, 0x21	; 33
     89c:	30 83       	st	Z, r19
     89e:	31 97       	sbiw	r30, 0x01	; 1
     8a0:	20 83       	st	Z, r18
     8a2:	31 97       	sbiw	r30, 0x01	; 1
     8a4:	23 e2       	ldi	r18, 0x23	; 35
     8a6:	20 83       	st	Z, r18
     8a8:	31 97       	sbiw	r30, 0x01	; 1
     8aa:	40 83       	st	Z, r20
     8ac:	31 97       	sbiw	r30, 0x01	; 1
     8ae:	50 83       	st	Z, r21
     8b0:	31 97       	sbiw	r30, 0x01	; 1
     8b2:	26 e2       	ldi	r18, 0x26	; 38
     8b4:	20 83       	st	Z, r18
     8b6:	31 97       	sbiw	r30, 0x01	; 1
     8b8:	27 e2       	ldi	r18, 0x27	; 39
     8ba:	20 83       	st	Z, r18
     8bc:	31 97       	sbiw	r30, 0x01	; 1
     8be:	28 e2       	ldi	r18, 0x28	; 40
     8c0:	20 83       	st	Z, r18
     8c2:	31 97       	sbiw	r30, 0x01	; 1
     8c4:	29 e2       	ldi	r18, 0x29	; 41
     8c6:	20 83       	st	Z, r18
     8c8:	31 97       	sbiw	r30, 0x01	; 1
     8ca:	20 e3       	ldi	r18, 0x30	; 48
     8cc:	20 83       	st	Z, r18
     8ce:	31 97       	sbiw	r30, 0x01	; 1
     8d0:	21 e3       	ldi	r18, 0x31	; 49
     8d2:	20 83       	st	Z, r18
     8d4:	86 97       	sbiw	r24, 0x26	; 38
     8d6:	08 95       	ret

000008d8 <xPortStartScheduler>:
     8d8:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     8dc:	8c e7       	ldi	r24, 0x7C	; 124
     8de:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     8e2:	8b e0       	ldi	r24, 0x0B	; 11
     8e4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     8e8:	ef e6       	ldi	r30, 0x6F	; 111
     8ea:	f0 e0       	ldi	r31, 0x00	; 0
     8ec:	80 81       	ld	r24, Z
     8ee:	82 60       	ori	r24, 0x02	; 2
     8f0:	80 83       	st	Z, r24
     8f2:	a0 91 8c 07 	lds	r26, 0x078C	; 0x80078c <pxCurrentTCB>
     8f6:	b0 91 8d 07 	lds	r27, 0x078D	; 0x80078d <pxCurrentTCB+0x1>
     8fa:	cd 91       	ld	r28, X+
     8fc:	cd bf       	out	0x3d, r28	; 61
     8fe:	dd 91       	ld	r29, X+
     900:	de bf       	out	0x3e, r29	; 62
     902:	ff 91       	pop	r31
     904:	ef 91       	pop	r30
     906:	df 91       	pop	r29
     908:	cf 91       	pop	r28
     90a:	bf 91       	pop	r27
     90c:	af 91       	pop	r26
     90e:	9f 91       	pop	r25
     910:	8f 91       	pop	r24
     912:	7f 91       	pop	r23
     914:	6f 91       	pop	r22
     916:	5f 91       	pop	r21
     918:	4f 91       	pop	r20
     91a:	3f 91       	pop	r19
     91c:	2f 91       	pop	r18
     91e:	1f 91       	pop	r17
     920:	0f 91       	pop	r16
     922:	ff 90       	pop	r15
     924:	ef 90       	pop	r14
     926:	df 90       	pop	r13
     928:	cf 90       	pop	r12
     92a:	bf 90       	pop	r11
     92c:	af 90       	pop	r10
     92e:	9f 90       	pop	r9
     930:	8f 90       	pop	r8
     932:	7f 90       	pop	r7
     934:	6f 90       	pop	r6
     936:	5f 90       	pop	r5
     938:	4f 90       	pop	r4
     93a:	3f 90       	pop	r3
     93c:	2f 90       	pop	r2
     93e:	1f 90       	pop	r1
     940:	0f 90       	pop	r0
     942:	0f be       	out	0x3f, r0	; 63
     944:	0f 90       	pop	r0
     946:	08 95       	ret
     948:	81 e0       	ldi	r24, 0x01	; 1
     94a:	08 95       	ret

0000094c <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     94c:	0f 92       	push	r0
     94e:	0f b6       	in	r0, 0x3f	; 63
     950:	f8 94       	cli
     952:	0f 92       	push	r0
     954:	1f 92       	push	r1
     956:	11 24       	eor	r1, r1
     958:	2f 92       	push	r2
     95a:	3f 92       	push	r3
     95c:	4f 92       	push	r4
     95e:	5f 92       	push	r5
     960:	6f 92       	push	r6
     962:	7f 92       	push	r7
     964:	8f 92       	push	r8
     966:	9f 92       	push	r9
     968:	af 92       	push	r10
     96a:	bf 92       	push	r11
     96c:	cf 92       	push	r12
     96e:	df 92       	push	r13
     970:	ef 92       	push	r14
     972:	ff 92       	push	r15
     974:	0f 93       	push	r16
     976:	1f 93       	push	r17
     978:	2f 93       	push	r18
     97a:	3f 93       	push	r19
     97c:	4f 93       	push	r20
     97e:	5f 93       	push	r21
     980:	6f 93       	push	r22
     982:	7f 93       	push	r23
     984:	8f 93       	push	r24
     986:	9f 93       	push	r25
     988:	af 93       	push	r26
     98a:	bf 93       	push	r27
     98c:	cf 93       	push	r28
     98e:	df 93       	push	r29
     990:	ef 93       	push	r30
     992:	ff 93       	push	r31
     994:	a0 91 8c 07 	lds	r26, 0x078C	; 0x80078c <pxCurrentTCB>
     998:	b0 91 8d 07 	lds	r27, 0x078D	; 0x80078d <pxCurrentTCB+0x1>
     99c:	0d b6       	in	r0, 0x3d	; 61
     99e:	0d 92       	st	X+, r0
     9a0:	0e b6       	in	r0, 0x3e	; 62
	vTaskSwitchContext();
     9a2:	0d 92       	st	X+, r0
	portRESTORE_CONTEXT();
     9a4:	70 d3       	rcall	.+1760   	; 0x1086 <vTaskSwitchContext>
     9a6:	a0 91 8c 07 	lds	r26, 0x078C	; 0x80078c <pxCurrentTCB>
     9aa:	b0 91 8d 07 	lds	r27, 0x078D	; 0x80078d <pxCurrentTCB+0x1>
     9ae:	cd 91       	ld	r28, X+
     9b0:	cd bf       	out	0x3d, r28	; 61
     9b2:	dd 91       	ld	r29, X+
     9b4:	de bf       	out	0x3e, r29	; 62
     9b6:	ff 91       	pop	r31
     9b8:	ef 91       	pop	r30
     9ba:	df 91       	pop	r29
     9bc:	cf 91       	pop	r28
     9be:	bf 91       	pop	r27
     9c0:	af 91       	pop	r26
     9c2:	9f 91       	pop	r25
     9c4:	8f 91       	pop	r24
     9c6:	7f 91       	pop	r23
     9c8:	6f 91       	pop	r22
     9ca:	5f 91       	pop	r21
     9cc:	4f 91       	pop	r20
     9ce:	3f 91       	pop	r19
     9d0:	2f 91       	pop	r18
     9d2:	1f 91       	pop	r17
     9d4:	0f 91       	pop	r16
     9d6:	ff 90       	pop	r15
     9d8:	ef 90       	pop	r14
     9da:	df 90       	pop	r13
     9dc:	cf 90       	pop	r12
     9de:	bf 90       	pop	r11
     9e0:	af 90       	pop	r10
     9e2:	9f 90       	pop	r9
     9e4:	8f 90       	pop	r8
     9e6:	7f 90       	pop	r7
     9e8:	6f 90       	pop	r6
     9ea:	5f 90       	pop	r5
     9ec:	4f 90       	pop	r4
     9ee:	3f 90       	pop	r3
     9f0:	2f 90       	pop	r2
     9f2:	1f 90       	pop	r1
     9f4:	0f 90       	pop	r0
     9f6:	0f be       	out	0x3f, r0	; 63

	asm volatile ( "ret" );
     9f8:	0f 90       	pop	r0
     9fa:	08 95       	ret

000009fc <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     9fc:	0f 92       	push	r0
     9fe:	0f b6       	in	r0, 0x3f	; 63
     a00:	f8 94       	cli
     a02:	0f 92       	push	r0
     a04:	1f 92       	push	r1
     a06:	11 24       	eor	r1, r1
     a08:	2f 92       	push	r2
     a0a:	3f 92       	push	r3
     a0c:	4f 92       	push	r4
     a0e:	5f 92       	push	r5
     a10:	6f 92       	push	r6
     a12:	7f 92       	push	r7
     a14:	8f 92       	push	r8
     a16:	9f 92       	push	r9
     a18:	af 92       	push	r10
     a1a:	bf 92       	push	r11
     a1c:	cf 92       	push	r12
     a1e:	df 92       	push	r13
     a20:	ef 92       	push	r14
     a22:	ff 92       	push	r15
     a24:	0f 93       	push	r16
     a26:	1f 93       	push	r17
     a28:	2f 93       	push	r18
     a2a:	3f 93       	push	r19
     a2c:	4f 93       	push	r20
     a2e:	5f 93       	push	r21
     a30:	6f 93       	push	r22
     a32:	7f 93       	push	r23
     a34:	8f 93       	push	r24
     a36:	9f 93       	push	r25
     a38:	af 93       	push	r26
     a3a:	bf 93       	push	r27
     a3c:	cf 93       	push	r28
     a3e:	df 93       	push	r29
     a40:	ef 93       	push	r30
     a42:	ff 93       	push	r31
     a44:	a0 91 8c 07 	lds	r26, 0x078C	; 0x80078c <pxCurrentTCB>
     a48:	b0 91 8d 07 	lds	r27, 0x078D	; 0x80078d <pxCurrentTCB+0x1>
     a4c:	0d b6       	in	r0, 0x3d	; 61
     a4e:	0d 92       	st	X+, r0
     a50:	0e b6       	in	r0, 0x3e	; 62
	vTaskIncrementTick();
	vTaskSwitchContext();
     a52:	0d 92       	st	X+, r0
     a54:	85 d1       	rcall	.+778    	; 0xd60 <vTaskIncrementTick>
	portRESTORE_CONTEXT();
     a56:	17 d3       	rcall	.+1582   	; 0x1086 <vTaskSwitchContext>
     a58:	a0 91 8c 07 	lds	r26, 0x078C	; 0x80078c <pxCurrentTCB>
     a5c:	b0 91 8d 07 	lds	r27, 0x078D	; 0x80078d <pxCurrentTCB+0x1>
     a60:	cd 91       	ld	r28, X+
     a62:	cd bf       	out	0x3d, r28	; 61
     a64:	dd 91       	ld	r29, X+
     a66:	de bf       	out	0x3e, r29	; 62
     a68:	ff 91       	pop	r31
     a6a:	ef 91       	pop	r30
     a6c:	df 91       	pop	r29
     a6e:	cf 91       	pop	r28
     a70:	bf 91       	pop	r27
     a72:	af 91       	pop	r26
     a74:	9f 91       	pop	r25
     a76:	8f 91       	pop	r24
     a78:	7f 91       	pop	r23
     a7a:	6f 91       	pop	r22
     a7c:	5f 91       	pop	r21
     a7e:	4f 91       	pop	r20
     a80:	3f 91       	pop	r19
     a82:	2f 91       	pop	r18
     a84:	1f 91       	pop	r17
     a86:	0f 91       	pop	r16
     a88:	ff 90       	pop	r15
     a8a:	ef 90       	pop	r14
     a8c:	df 90       	pop	r13
     a8e:	cf 90       	pop	r12
     a90:	bf 90       	pop	r11
     a92:	af 90       	pop	r10
     a94:	9f 90       	pop	r9
     a96:	8f 90       	pop	r8
     a98:	7f 90       	pop	r7
     a9a:	6f 90       	pop	r6
     a9c:	5f 90       	pop	r5
     a9e:	4f 90       	pop	r4
     aa0:	3f 90       	pop	r3
     aa2:	2f 90       	pop	r2
     aa4:	1f 90       	pop	r1
     aa6:	0f 90       	pop	r0
     aa8:	0f be       	out	0x3f, r0	; 63

	asm volatile ( "ret" );
     aaa:	0f 90       	pop	r0
     aac:	08 95       	ret

00000aae <__vector_13>:
}
     aae:	a6 df       	rcall	.-180    	; 0x9fc <vPortYieldFromTick>
     ab0:	18 95       	reti

00000ab2 <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
     ab2:	cf 93       	push	r28
     ab4:	df 93       	push	r29
     ab6:	ec 01       	movw	r28, r24
     ab8:	e0 91 8c 07 	lds	r30, 0x078C	; 0x80078c <pxCurrentTCB>
     abc:	f0 91 8d 07 	lds	r31, 0x078D	; 0x80078d <pxCurrentTCB+0x1>
     ac0:	93 83       	std	Z+3, r25	; 0x03
     ac2:	82 83       	std	Z+2, r24	; 0x02
     ac4:	80 91 3c 07 	lds	r24, 0x073C	; 0x80073c <xTickCount>
     ac8:	90 91 3d 07 	lds	r25, 0x073D	; 0x80073d <xTickCount+0x1>
     acc:	c8 17       	cp	r28, r24
     ace:	d9 07       	cpc	r29, r25
     ad0:	60 f4       	brcc	.+24     	; 0xaea <prvAddCurrentTaskToDelayedList+0x38>
     ad2:	60 91 8c 07 	lds	r22, 0x078C	; 0x80078c <pxCurrentTCB>
     ad6:	70 91 8d 07 	lds	r23, 0x078D	; 0x80078d <pxCurrentTCB+0x1>
     ada:	80 91 52 07 	lds	r24, 0x0752	; 0x800752 <pxOverflowDelayedTaskList>
     ade:	90 91 53 07 	lds	r25, 0x0753	; 0x800753 <pxOverflowDelayedTaskList+0x1>
     ae2:	6e 5f       	subi	r22, 0xFE	; 254
     ae4:	7f 4f       	sbci	r23, 0xFF	; 255
     ae6:	4f db       	rcall	.-2402   	; 0x186 <vListInsert>
     ae8:	16 c0       	rjmp	.+44     	; 0xb16 <prvAddCurrentTaskToDelayedList+0x64>
     aea:	60 91 8c 07 	lds	r22, 0x078C	; 0x80078c <pxCurrentTCB>
     aee:	70 91 8d 07 	lds	r23, 0x078D	; 0x80078d <pxCurrentTCB+0x1>
     af2:	80 91 54 07 	lds	r24, 0x0754	; 0x800754 <pxDelayedTaskList>
     af6:	90 91 55 07 	lds	r25, 0x0755	; 0x800755 <pxDelayedTaskList+0x1>
     afa:	6e 5f       	subi	r22, 0xFE	; 254
     afc:	7f 4f       	sbci	r23, 0xFF	; 255
     afe:	43 db       	rcall	.-2426   	; 0x186 <vListInsert>
     b00:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <xNextTaskUnblockTime>
     b04:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <xNextTaskUnblockTime+0x1>
     b08:	c8 17       	cp	r28, r24
     b0a:	d9 07       	cpc	r29, r25
     b0c:	20 f4       	brcc	.+8      	; 0xb16 <prvAddCurrentTaskToDelayedList+0x64>
     b0e:	d0 93 02 01 	sts	0x0102, r29	; 0x800102 <xNextTaskUnblockTime+0x1>
     b12:	c0 93 01 01 	sts	0x0101, r28	; 0x800101 <xNextTaskUnblockTime>
     b16:	df 91       	pop	r29
     b18:	cf 91       	pop	r28
     b1a:	08 95       	ret

00000b1c <xTaskGenericCreate>:
     b1c:	4f 92       	push	r4
     b1e:	5f 92       	push	r5
     b20:	6f 92       	push	r6
     b22:	7f 92       	push	r7
     b24:	8f 92       	push	r8
     b26:	9f 92       	push	r9
     b28:	af 92       	push	r10
     b2a:	bf 92       	push	r11
     b2c:	cf 92       	push	r12
     b2e:	df 92       	push	r13
     b30:	ef 92       	push	r14
     b32:	ff 92       	push	r15
     b34:	0f 93       	push	r16
     b36:	1f 93       	push	r17
     b38:	cf 93       	push	r28
     b3a:	df 93       	push	r29
     b3c:	5c 01       	movw	r10, r24
     b3e:	4b 01       	movw	r8, r22
     b40:	3a 01       	movw	r6, r20
     b42:	29 01       	movw	r4, r18
     b44:	81 e2       	ldi	r24, 0x21	; 33
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	c0 da       	rcall	.-2688   	; 0xca <pvPortMalloc>
     b4a:	ec 01       	movw	r28, r24
     b4c:	89 2b       	or	r24, r25
     b4e:	09 f4       	brne	.+2      	; 0xb52 <xTaskGenericCreate+0x36>
     b50:	c6 c0       	rjmp	.+396    	; 0xcde <xTaskGenericCreate+0x1c2>
     b52:	c1 14       	cp	r12, r1
     b54:	d1 04       	cpc	r13, r1
     b56:	09 f0       	breq	.+2      	; 0xb5a <xTaskGenericCreate+0x3e>
     b58:	be c0       	rjmp	.+380    	; 0xcd6 <xTaskGenericCreate+0x1ba>
     b5a:	c3 01       	movw	r24, r6
     b5c:	b6 da       	rcall	.-2708   	; 0xca <pvPortMalloc>
     b5e:	98 8f       	std	Y+24, r25	; 0x18
     b60:	8f 8b       	std	Y+23, r24	; 0x17
     b62:	00 97       	sbiw	r24, 0x00	; 0
     b64:	19 f4       	brne	.+6      	; 0xb6c <xTaskGenericCreate+0x50>
     b66:	ce 01       	movw	r24, r28
     b68:	d4 da       	rcall	.-2648   	; 0x112 <vPortFree>
     b6a:	b9 c0       	rjmp	.+370    	; 0xcde <xTaskGenericCreate+0x1c2>
     b6c:	a3 01       	movw	r20, r6
     b6e:	65 ea       	ldi	r22, 0xA5	; 165
     b70:	70 e0       	ldi	r23, 0x00	; 0
     b72:	f5 d2       	rcall	.+1514   	; 0x115e <memset>
     b74:	93 01       	movw	r18, r6
     b76:	21 50       	subi	r18, 0x01	; 1
     b78:	31 09       	sbc	r19, r1
     b7a:	8f 89       	ldd	r24, Y+23	; 0x17
     b7c:	98 8d       	ldd	r25, Y+24	; 0x18
     b7e:	3c 01       	movw	r6, r24
     b80:	62 0e       	add	r6, r18
     b82:	73 1e       	adc	r7, r19
     b84:	48 e0       	ldi	r20, 0x08	; 8
     b86:	50 e0       	ldi	r21, 0x00	; 0
     b88:	b4 01       	movw	r22, r8
     b8a:	ce 01       	movw	r24, r28
     b8c:	49 96       	adiw	r24, 0x19	; 25
     b8e:	ee d2       	rcall	.+1500   	; 0x116c <strncpy>
     b90:	18 a2       	std	Y+32, r1	; 0x20
     b92:	10 2f       	mov	r17, r16
     b94:	04 30       	cpi	r16, 0x04	; 4
     b96:	08 f0       	brcs	.+2      	; 0xb9a <xTaskGenericCreate+0x7e>
     b98:	13 e0       	ldi	r17, 0x03	; 3
     b9a:	1e 8b       	std	Y+22, r17	; 0x16
     b9c:	6e 01       	movw	r12, r28
     b9e:	82 e0       	ldi	r24, 0x02	; 2
     ba0:	c8 0e       	add	r12, r24
     ba2:	d1 1c       	adc	r13, r1
     ba4:	c6 01       	movw	r24, r12
     ba6:	c4 da       	rcall	.-2680   	; 0x130 <vListInitialiseItem>
     ba8:	ce 01       	movw	r24, r28
     baa:	0c 96       	adiw	r24, 0x0c	; 12
     bac:	c1 da       	rcall	.-2686   	; 0x130 <vListInitialiseItem>
     bae:	d9 87       	std	Y+9, r29	; 0x09
     bb0:	c8 87       	std	Y+8, r28	; 0x08
     bb2:	84 e0       	ldi	r24, 0x04	; 4
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	81 1b       	sub	r24, r17
     bb8:	91 09       	sbc	r25, r1
     bba:	9d 87       	std	Y+13, r25	; 0x0d
     bbc:	8c 87       	std	Y+12, r24	; 0x0c
     bbe:	db 8b       	std	Y+19, r29	; 0x13
     bc0:	ca 8b       	std	Y+18, r28	; 0x12
     bc2:	a2 01       	movw	r20, r4
     bc4:	b5 01       	movw	r22, r10
     bc6:	c3 01       	movw	r24, r6
     bc8:	1b de       	rcall	.-970    	; 0x800 <pxPortInitialiseStack>
     bca:	99 83       	std	Y+1, r25	; 0x01
     bcc:	88 83       	st	Y, r24
     bce:	e1 14       	cp	r14, r1
     bd0:	f1 04       	cpc	r15, r1
     bd2:	19 f0       	breq	.+6      	; 0xbda <xTaskGenericCreate+0xbe>
     bd4:	f7 01       	movw	r30, r14
     bd6:	d1 83       	std	Z+1, r29	; 0x01
     bd8:	c0 83       	st	Z, r28
     bda:	0f b6       	in	r0, 0x3f	; 63
     bdc:	f8 94       	cli
     bde:	0f 92       	push	r0
     be0:	80 91 3e 07 	lds	r24, 0x073E	; 0x80073e <uxCurrentNumberOfTasks>
     be4:	8f 5f       	subi	r24, 0xFF	; 255
     be6:	80 93 3e 07 	sts	0x073E, r24	; 0x80073e <uxCurrentNumberOfTasks>
     bea:	80 91 8c 07 	lds	r24, 0x078C	; 0x80078c <pxCurrentTCB>
     bee:	90 91 8d 07 	lds	r25, 0x078D	; 0x80078d <pxCurrentTCB+0x1>
     bf2:	89 2b       	or	r24, r25
     bf4:	69 f5       	brne	.+90     	; 0xc50 <xTaskGenericCreate+0x134>
     bf6:	d0 93 8d 07 	sts	0x078D, r29	; 0x80078d <pxCurrentTCB+0x1>
     bfa:	c0 93 8c 07 	sts	0x078C, r28	; 0x80078c <pxCurrentTCB>
     bfe:	80 91 3e 07 	lds	r24, 0x073E	; 0x80073e <uxCurrentNumberOfTasks>
     c02:	81 30       	cpi	r24, 0x01	; 1
     c04:	a1 f5       	brne	.+104    	; 0xc6e <xTaskGenericCreate+0x152>
     c06:	88 e6       	ldi	r24, 0x68	; 104
     c08:	97 e0       	ldi	r25, 0x07	; 7
     c0a:	84 da       	rcall	.-2808   	; 0x114 <vListInitialise>
     c0c:	81 e7       	ldi	r24, 0x71	; 113
     c0e:	97 e0       	ldi	r25, 0x07	; 7
     c10:	81 da       	rcall	.-2814   	; 0x114 <vListInitialise>
     c12:	8a e7       	ldi	r24, 0x7A	; 122
     c14:	97 e0       	ldi	r25, 0x07	; 7
     c16:	7e da       	rcall	.-2820   	; 0x114 <vListInitialise>
     c18:	83 e8       	ldi	r24, 0x83	; 131
     c1a:	97 e0       	ldi	r25, 0x07	; 7
     c1c:	7b da       	rcall	.-2826   	; 0x114 <vListInitialise>
     c1e:	8f e5       	ldi	r24, 0x5F	; 95
     c20:	97 e0       	ldi	r25, 0x07	; 7
     c22:	78 da       	rcall	.-2832   	; 0x114 <vListInitialise>
     c24:	86 e5       	ldi	r24, 0x56	; 86
     c26:	97 e0       	ldi	r25, 0x07	; 7
     c28:	75 da       	rcall	.-2838   	; 0x114 <vListInitialise>
     c2a:	89 e4       	ldi	r24, 0x49	; 73
     c2c:	97 e0       	ldi	r25, 0x07	; 7
     c2e:	72 da       	rcall	.-2844   	; 0x114 <vListInitialise>
     c30:	80 e4       	ldi	r24, 0x40	; 64
     c32:	97 e0       	ldi	r25, 0x07	; 7
     c34:	6f da       	rcall	.-2850   	; 0x114 <vListInitialise>
     c36:	8f e5       	ldi	r24, 0x5F	; 95
     c38:	97 e0       	ldi	r25, 0x07	; 7
     c3a:	90 93 55 07 	sts	0x0755, r25	; 0x800755 <pxDelayedTaskList+0x1>
     c3e:	80 93 54 07 	sts	0x0754, r24	; 0x800754 <pxDelayedTaskList>
     c42:	86 e5       	ldi	r24, 0x56	; 86
     c44:	97 e0       	ldi	r25, 0x07	; 7
     c46:	90 93 53 07 	sts	0x0753, r25	; 0x800753 <pxOverflowDelayedTaskList+0x1>
     c4a:	80 93 52 07 	sts	0x0752, r24	; 0x800752 <pxOverflowDelayedTaskList>
     c4e:	0f c0       	rjmp	.+30     	; 0xc6e <xTaskGenericCreate+0x152>
     c50:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <xSchedulerRunning>
     c54:	81 11       	cpse	r24, r1
     c56:	0b c0       	rjmp	.+22     	; 0xc6e <xTaskGenericCreate+0x152>
     c58:	e0 91 8c 07 	lds	r30, 0x078C	; 0x80078c <pxCurrentTCB>
     c5c:	f0 91 8d 07 	lds	r31, 0x078D	; 0x80078d <pxCurrentTCB+0x1>
     c60:	86 89       	ldd	r24, Z+22	; 0x16
     c62:	08 17       	cp	r16, r24
     c64:	20 f0       	brcs	.+8      	; 0xc6e <xTaskGenericCreate+0x152>
     c66:	d0 93 8d 07 	sts	0x078D, r29	; 0x80078d <pxCurrentTCB+0x1>
     c6a:	c0 93 8c 07 	sts	0x078C, r28	; 0x80078c <pxCurrentTCB>
     c6e:	8e 89       	ldd	r24, Y+22	; 0x16
     c70:	90 91 3b 07 	lds	r25, 0x073B	; 0x80073b <uxTopUsedPriority>
     c74:	98 17       	cp	r25, r24
     c76:	10 f4       	brcc	.+4      	; 0xc7c <xTaskGenericCreate+0x160>
     c78:	80 93 3b 07 	sts	0x073B, r24	; 0x80073b <uxTopUsedPriority>
     c7c:	90 91 34 07 	lds	r25, 0x0734	; 0x800734 <uxTaskNumber>
     c80:	9f 5f       	subi	r25, 0xFF	; 255
     c82:	90 93 34 07 	sts	0x0734, r25	; 0x800734 <uxTaskNumber>
     c86:	90 91 3a 07 	lds	r25, 0x073A	; 0x80073a <uxTopReadyPriority>
     c8a:	98 17       	cp	r25, r24
     c8c:	10 f4       	brcc	.+4      	; 0xc92 <xTaskGenericCreate+0x176>
     c8e:	80 93 3a 07 	sts	0x073A, r24	; 0x80073a <uxTopReadyPriority>
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	9c 01       	movw	r18, r24
     c96:	22 0f       	add	r18, r18
     c98:	33 1f       	adc	r19, r19
     c9a:	22 0f       	add	r18, r18
     c9c:	33 1f       	adc	r19, r19
     c9e:	22 0f       	add	r18, r18
     ca0:	33 1f       	adc	r19, r19
     ca2:	82 0f       	add	r24, r18
     ca4:	93 1f       	adc	r25, r19
     ca6:	b6 01       	movw	r22, r12
     ca8:	88 59       	subi	r24, 0x98	; 152
     caa:	98 4f       	sbci	r25, 0xF8	; 248
     cac:	45 da       	rcall	.-2934   	; 0x138 <vListInsertEnd>
     cae:	0f 90       	pop	r0
     cb0:	0f be       	out	0x3f, r0	; 63
     cb2:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <xSchedulerRunning>
     cb6:	88 23       	and	r24, r24
     cb8:	51 f0       	breq	.+20     	; 0xcce <xTaskGenericCreate+0x1b2>
     cba:	e0 91 8c 07 	lds	r30, 0x078C	; 0x80078c <pxCurrentTCB>
     cbe:	f0 91 8d 07 	lds	r31, 0x078D	; 0x80078d <pxCurrentTCB+0x1>
     cc2:	86 89       	ldd	r24, Z+22	; 0x16
     cc4:	80 17       	cp	r24, r16
     cc6:	28 f4       	brcc	.+10     	; 0xcd2 <xTaskGenericCreate+0x1b6>
     cc8:	41 de       	rcall	.-894    	; 0x94c <vPortYield>
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	09 c0       	rjmp	.+18     	; 0xce0 <xTaskGenericCreate+0x1c4>
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	07 c0       	rjmp	.+14     	; 0xce0 <xTaskGenericCreate+0x1c4>
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	05 c0       	rjmp	.+10     	; 0xce0 <xTaskGenericCreate+0x1c4>
     cd6:	d8 8e       	std	Y+24, r13	; 0x18
     cd8:	cf 8a       	std	Y+23, r12	; 0x17
     cda:	c6 01       	movw	r24, r12
     cdc:	47 cf       	rjmp	.-370    	; 0xb6c <xTaskGenericCreate+0x50>
     cde:	8f ef       	ldi	r24, 0xFF	; 255
     ce0:	df 91       	pop	r29
     ce2:	cf 91       	pop	r28
     ce4:	1f 91       	pop	r17
     ce6:	0f 91       	pop	r16
     ce8:	ff 90       	pop	r15
     cea:	ef 90       	pop	r14
     cec:	df 90       	pop	r13
     cee:	cf 90       	pop	r12
     cf0:	bf 90       	pop	r11
     cf2:	af 90       	pop	r10
     cf4:	9f 90       	pop	r9
     cf6:	8f 90       	pop	r8
     cf8:	7f 90       	pop	r7
     cfa:	6f 90       	pop	r6
     cfc:	5f 90       	pop	r5
     cfe:	4f 90       	pop	r4
     d00:	08 95       	ret

00000d02 <vTaskStartScheduler>:
     d02:	af 92       	push	r10
     d04:	bf 92       	push	r11
     d06:	cf 92       	push	r12
     d08:	df 92       	push	r13
     d0a:	ef 92       	push	r14
     d0c:	ff 92       	push	r15
     d0e:	0f 93       	push	r16
     d10:	a1 2c       	mov	r10, r1
     d12:	b1 2c       	mov	r11, r1
     d14:	c1 2c       	mov	r12, r1
     d16:	d1 2c       	mov	r13, r1
     d18:	e1 2c       	mov	r14, r1
     d1a:	f1 2c       	mov	r15, r1
     d1c:	00 e0       	ldi	r16, 0x00	; 0
     d1e:	20 e0       	ldi	r18, 0x00	; 0
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	45 e5       	ldi	r20, 0x55	; 85
     d24:	50 e0       	ldi	r21, 0x00	; 0
     d26:	62 e4       	ldi	r22, 0x42	; 66
     d28:	71 e0       	ldi	r23, 0x01	; 1
     d2a:	8d e0       	ldi	r24, 0x0D	; 13
     d2c:	98 e0       	ldi	r25, 0x08	; 8
     d2e:	f6 de       	rcall	.-532    	; 0xb1c <xTaskGenericCreate>
     d30:	81 30       	cpi	r24, 0x01	; 1
     d32:	41 f4       	brne	.+16     	; 0xd44 <vTaskStartScheduler+0x42>
     d34:	f8 94       	cli
     d36:	80 93 39 07 	sts	0x0739, r24	; 0x800739 <xSchedulerRunning>
     d3a:	10 92 3d 07 	sts	0x073D, r1	; 0x80073d <xTickCount+0x1>
     d3e:	10 92 3c 07 	sts	0x073C, r1	; 0x80073c <xTickCount>
     d42:	ca dd       	rcall	.-1132   	; 0x8d8 <xPortStartScheduler>
     d44:	0f 91       	pop	r16
     d46:	ff 90       	pop	r15
     d48:	ef 90       	pop	r14
     d4a:	df 90       	pop	r13
     d4c:	cf 90       	pop	r12
     d4e:	bf 90       	pop	r11
     d50:	af 90       	pop	r10
     d52:	08 95       	ret

00000d54 <vTaskSuspendAll>:
     d54:	80 91 38 07 	lds	r24, 0x0738	; 0x800738 <uxSchedulerSuspended>
     d58:	8f 5f       	subi	r24, 0xFF	; 255
     d5a:	80 93 38 07 	sts	0x0738, r24	; 0x800738 <uxSchedulerSuspended>
     d5e:	08 95       	ret

00000d60 <vTaskIncrementTick>:
     d60:	0f 93       	push	r16
     d62:	1f 93       	push	r17
     d64:	cf 93       	push	r28
     d66:	df 93       	push	r29
     d68:	80 91 38 07 	lds	r24, 0x0738	; 0x800738 <uxSchedulerSuspended>
     d6c:	81 11       	cpse	r24, r1
     d6e:	af c0       	rjmp	.+350    	; 0xece <vTaskIncrementTick+0x16e>
     d70:	80 91 3c 07 	lds	r24, 0x073C	; 0x80073c <xTickCount>
     d74:	90 91 3d 07 	lds	r25, 0x073D	; 0x80073d <xTickCount+0x1>
     d78:	01 96       	adiw	r24, 0x01	; 1
     d7a:	90 93 3d 07 	sts	0x073D, r25	; 0x80073d <xTickCount+0x1>
     d7e:	80 93 3c 07 	sts	0x073C, r24	; 0x80073c <xTickCount>
     d82:	80 91 3c 07 	lds	r24, 0x073C	; 0x80073c <xTickCount>
     d86:	90 91 3d 07 	lds	r25, 0x073D	; 0x80073d <xTickCount+0x1>
     d8a:	89 2b       	or	r24, r25
     d8c:	99 f5       	brne	.+102    	; 0xdf4 <vTaskIncrementTick+0x94>
     d8e:	80 91 54 07 	lds	r24, 0x0754	; 0x800754 <pxDelayedTaskList>
     d92:	90 91 55 07 	lds	r25, 0x0755	; 0x800755 <pxDelayedTaskList+0x1>
     d96:	20 91 52 07 	lds	r18, 0x0752	; 0x800752 <pxOverflowDelayedTaskList>
     d9a:	30 91 53 07 	lds	r19, 0x0753	; 0x800753 <pxOverflowDelayedTaskList+0x1>
     d9e:	30 93 55 07 	sts	0x0755, r19	; 0x800755 <pxDelayedTaskList+0x1>
     da2:	20 93 54 07 	sts	0x0754, r18	; 0x800754 <pxDelayedTaskList>
     da6:	90 93 53 07 	sts	0x0753, r25	; 0x800753 <pxOverflowDelayedTaskList+0x1>
     daa:	80 93 52 07 	sts	0x0752, r24	; 0x800752 <pxOverflowDelayedTaskList>
     dae:	80 91 35 07 	lds	r24, 0x0735	; 0x800735 <xNumOfOverflows>
     db2:	8f 5f       	subi	r24, 0xFF	; 255
     db4:	80 93 35 07 	sts	0x0735, r24	; 0x800735 <xNumOfOverflows>
     db8:	e0 91 54 07 	lds	r30, 0x0754	; 0x800754 <pxDelayedTaskList>
     dbc:	f0 91 55 07 	lds	r31, 0x0755	; 0x800755 <pxDelayedTaskList+0x1>
     dc0:	80 81       	ld	r24, Z
     dc2:	81 11       	cpse	r24, r1
     dc4:	07 c0       	rjmp	.+14     	; 0xdd4 <vTaskIncrementTick+0x74>
     dc6:	8f ef       	ldi	r24, 0xFF	; 255
     dc8:	9f ef       	ldi	r25, 0xFF	; 255
     dca:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <xNextTaskUnblockTime+0x1>
     dce:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <xNextTaskUnblockTime>
     dd2:	10 c0       	rjmp	.+32     	; 0xdf4 <vTaskIncrementTick+0x94>
     dd4:	e0 91 54 07 	lds	r30, 0x0754	; 0x800754 <pxDelayedTaskList>
     dd8:	f0 91 55 07 	lds	r31, 0x0755	; 0x800755 <pxDelayedTaskList+0x1>
     ddc:	05 80       	ldd	r0, Z+5	; 0x05
     dde:	f6 81       	ldd	r31, Z+6	; 0x06
     de0:	e0 2d       	mov	r30, r0
     de2:	06 80       	ldd	r0, Z+6	; 0x06
     de4:	f7 81       	ldd	r31, Z+7	; 0x07
     de6:	e0 2d       	mov	r30, r0
     de8:	82 81       	ldd	r24, Z+2	; 0x02
     dea:	93 81       	ldd	r25, Z+3	; 0x03
     dec:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <xNextTaskUnblockTime+0x1>
     df0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <xNextTaskUnblockTime>
     df4:	20 91 3c 07 	lds	r18, 0x073C	; 0x80073c <xTickCount>
     df8:	30 91 3d 07 	lds	r19, 0x073D	; 0x80073d <xTickCount+0x1>
     dfc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <xNextTaskUnblockTime>
     e00:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <xNextTaskUnblockTime+0x1>
     e04:	28 17       	cp	r18, r24
     e06:	39 07       	cpc	r19, r25
     e08:	08 f4       	brcc	.+2      	; 0xe0c <vTaskIncrementTick+0xac>
     e0a:	66 c0       	rjmp	.+204    	; 0xed8 <vTaskIncrementTick+0x178>
     e0c:	e0 91 54 07 	lds	r30, 0x0754	; 0x800754 <pxDelayedTaskList>
     e10:	f0 91 55 07 	lds	r31, 0x0755	; 0x800755 <pxDelayedTaskList+0x1>
     e14:	80 81       	ld	r24, Z
     e16:	88 23       	and	r24, r24
     e18:	99 f0       	breq	.+38     	; 0xe40 <vTaskIncrementTick+0xe0>
     e1a:	e0 91 54 07 	lds	r30, 0x0754	; 0x800754 <pxDelayedTaskList>
     e1e:	f0 91 55 07 	lds	r31, 0x0755	; 0x800755 <pxDelayedTaskList+0x1>
     e22:	05 80       	ldd	r0, Z+5	; 0x05
     e24:	f6 81       	ldd	r31, Z+6	; 0x06
     e26:	e0 2d       	mov	r30, r0
     e28:	c6 81       	ldd	r28, Z+6	; 0x06
     e2a:	d7 81       	ldd	r29, Z+7	; 0x07
     e2c:	8a 81       	ldd	r24, Y+2	; 0x02
     e2e:	9b 81       	ldd	r25, Y+3	; 0x03
     e30:	20 91 3c 07 	lds	r18, 0x073C	; 0x80073c <xTickCount>
     e34:	30 91 3d 07 	lds	r19, 0x073D	; 0x80073d <xTickCount+0x1>
     e38:	28 17       	cp	r18, r24
     e3a:	39 07       	cpc	r19, r25
     e3c:	f8 f4       	brcc	.+62     	; 0xe7c <vTaskIncrementTick+0x11c>
     e3e:	19 c0       	rjmp	.+50     	; 0xe72 <vTaskIncrementTick+0x112>
     e40:	8f ef       	ldi	r24, 0xFF	; 255
     e42:	9f ef       	ldi	r25, 0xFF	; 255
     e44:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <xNextTaskUnblockTime+0x1>
     e48:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <xNextTaskUnblockTime>
     e4c:	45 c0       	rjmp	.+138    	; 0xed8 <vTaskIncrementTick+0x178>
     e4e:	e0 91 54 07 	lds	r30, 0x0754	; 0x800754 <pxDelayedTaskList>
     e52:	f0 91 55 07 	lds	r31, 0x0755	; 0x800755 <pxDelayedTaskList+0x1>
     e56:	05 80       	ldd	r0, Z+5	; 0x05
     e58:	f6 81       	ldd	r31, Z+6	; 0x06
     e5a:	e0 2d       	mov	r30, r0
     e5c:	c6 81       	ldd	r28, Z+6	; 0x06
     e5e:	d7 81       	ldd	r29, Z+7	; 0x07
     e60:	8a 81       	ldd	r24, Y+2	; 0x02
     e62:	9b 81       	ldd	r25, Y+3	; 0x03
     e64:	20 91 3c 07 	lds	r18, 0x073C	; 0x80073c <xTickCount>
     e68:	30 91 3d 07 	lds	r19, 0x073D	; 0x80073d <xTickCount+0x1>
     e6c:	28 17       	cp	r18, r24
     e6e:	39 07       	cpc	r19, r25
     e70:	28 f4       	brcc	.+10     	; 0xe7c <vTaskIncrementTick+0x11c>
     e72:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <xNextTaskUnblockTime+0x1>
     e76:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <xNextTaskUnblockTime>
     e7a:	2e c0       	rjmp	.+92     	; 0xed8 <vTaskIncrementTick+0x178>
     e7c:	8e 01       	movw	r16, r28
     e7e:	0e 5f       	subi	r16, 0xFE	; 254
     e80:	1f 4f       	sbci	r17, 0xFF	; 255
     e82:	c8 01       	movw	r24, r16
     e84:	bb d9       	rcall	.-3210   	; 0x1fc <vListRemove>
     e86:	8c 89       	ldd	r24, Y+20	; 0x14
     e88:	9d 89       	ldd	r25, Y+21	; 0x15
     e8a:	89 2b       	or	r24, r25
     e8c:	19 f0       	breq	.+6      	; 0xe94 <vTaskIncrementTick+0x134>
     e8e:	ce 01       	movw	r24, r28
     e90:	0c 96       	adiw	r24, 0x0c	; 12
     e92:	b4 d9       	rcall	.-3224   	; 0x1fc <vListRemove>
     e94:	8e 89       	ldd	r24, Y+22	; 0x16
     e96:	90 91 3a 07 	lds	r25, 0x073A	; 0x80073a <uxTopReadyPriority>
     e9a:	98 17       	cp	r25, r24
     e9c:	10 f4       	brcc	.+4      	; 0xea2 <vTaskIncrementTick+0x142>
     e9e:	80 93 3a 07 	sts	0x073A, r24	; 0x80073a <uxTopReadyPriority>
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	9c 01       	movw	r18, r24
     ea6:	22 0f       	add	r18, r18
     ea8:	33 1f       	adc	r19, r19
     eaa:	22 0f       	add	r18, r18
     eac:	33 1f       	adc	r19, r19
     eae:	22 0f       	add	r18, r18
     eb0:	33 1f       	adc	r19, r19
     eb2:	82 0f       	add	r24, r18
     eb4:	93 1f       	adc	r25, r19
     eb6:	b8 01       	movw	r22, r16
     eb8:	88 59       	subi	r24, 0x98	; 152
     eba:	98 4f       	sbci	r25, 0xF8	; 248
     ebc:	3d d9       	rcall	.-3462   	; 0x138 <vListInsertEnd>
     ebe:	e0 91 54 07 	lds	r30, 0x0754	; 0x800754 <pxDelayedTaskList>
     ec2:	f0 91 55 07 	lds	r31, 0x0755	; 0x800755 <pxDelayedTaskList+0x1>
     ec6:	80 81       	ld	r24, Z
     ec8:	81 11       	cpse	r24, r1
     eca:	c1 cf       	rjmp	.-126    	; 0xe4e <vTaskIncrementTick+0xee>
     ecc:	b9 cf       	rjmp	.-142    	; 0xe40 <vTaskIncrementTick+0xe0>
     ece:	80 91 37 07 	lds	r24, 0x0737	; 0x800737 <uxMissedTicks>
     ed2:	8f 5f       	subi	r24, 0xFF	; 255
     ed4:	80 93 37 07 	sts	0x0737, r24	; 0x800737 <uxMissedTicks>
     ed8:	df 91       	pop	r29
     eda:	cf 91       	pop	r28
     edc:	1f 91       	pop	r17
     ede:	0f 91       	pop	r16
     ee0:	08 95       	ret

00000ee2 <xTaskResumeAll>:
     ee2:	cf 92       	push	r12
     ee4:	df 92       	push	r13
     ee6:	ef 92       	push	r14
     ee8:	ff 92       	push	r15
     eea:	0f 93       	push	r16
     eec:	1f 93       	push	r17
     eee:	cf 93       	push	r28
     ef0:	df 93       	push	r29
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	f8 94       	cli
     ef6:	0f 92       	push	r0
     ef8:	80 91 38 07 	lds	r24, 0x0738	; 0x800738 <uxSchedulerSuspended>
     efc:	81 50       	subi	r24, 0x01	; 1
     efe:	80 93 38 07 	sts	0x0738, r24	; 0x800738 <uxSchedulerSuspended>
     f02:	80 91 38 07 	lds	r24, 0x0738	; 0x800738 <uxSchedulerSuspended>
     f06:	81 11       	cpse	r24, r1
     f08:	5f c0       	rjmp	.+190    	; 0xfc8 <xTaskResumeAll+0xe6>
     f0a:	80 91 3e 07 	lds	r24, 0x073E	; 0x80073e <uxCurrentNumberOfTasks>
     f0e:	81 11       	cpse	r24, r1
     f10:	2f c0       	rjmp	.+94     	; 0xf70 <xTaskResumeAll+0x8e>
     f12:	5d c0       	rjmp	.+186    	; 0xfce <xTaskResumeAll+0xec>
     f14:	d7 01       	movw	r26, r14
     f16:	15 96       	adiw	r26, 0x05	; 5
     f18:	ed 91       	ld	r30, X+
     f1a:	fc 91       	ld	r31, X
     f1c:	16 97       	sbiw	r26, 0x06	; 6
     f1e:	c6 81       	ldd	r28, Z+6	; 0x06
     f20:	d7 81       	ldd	r29, Z+7	; 0x07
     f22:	ce 01       	movw	r24, r28
     f24:	0c 96       	adiw	r24, 0x0c	; 12
     f26:	6a d9       	rcall	.-3372   	; 0x1fc <vListRemove>
     f28:	8e 01       	movw	r16, r28
     f2a:	0e 5f       	subi	r16, 0xFE	; 254
     f2c:	1f 4f       	sbci	r17, 0xFF	; 255
     f2e:	c8 01       	movw	r24, r16
     f30:	65 d9       	rcall	.-3382   	; 0x1fc <vListRemove>
     f32:	8e 89       	ldd	r24, Y+22	; 0x16
     f34:	90 91 3a 07 	lds	r25, 0x073A	; 0x80073a <uxTopReadyPriority>
     f38:	98 17       	cp	r25, r24
     f3a:	10 f4       	brcc	.+4      	; 0xf40 <xTaskResumeAll+0x5e>
     f3c:	80 93 3a 07 	sts	0x073A, r24	; 0x80073a <uxTopReadyPriority>
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	9c 01       	movw	r18, r24
     f44:	22 0f       	add	r18, r18
     f46:	33 1f       	adc	r19, r19
     f48:	22 0f       	add	r18, r18
     f4a:	33 1f       	adc	r19, r19
     f4c:	22 0f       	add	r18, r18
     f4e:	33 1f       	adc	r19, r19
     f50:	82 0f       	add	r24, r18
     f52:	93 1f       	adc	r25, r19
     f54:	b8 01       	movw	r22, r16
     f56:	88 59       	subi	r24, 0x98	; 152
     f58:	98 4f       	sbci	r25, 0xF8	; 248
     f5a:	ee d8       	rcall	.-3620   	; 0x138 <vListInsertEnd>
     f5c:	e0 91 8c 07 	lds	r30, 0x078C	; 0x80078c <pxCurrentTCB>
     f60:	f0 91 8d 07 	lds	r31, 0x078D	; 0x80078d <pxCurrentTCB+0x1>
     f64:	9e 89       	ldd	r25, Y+22	; 0x16
     f66:	86 89       	ldd	r24, Z+22	; 0x16
     f68:	98 17       	cp	r25, r24
     f6a:	58 f0       	brcs	.+22     	; 0xf82 <xTaskResumeAll+0xa0>
     f6c:	dc 2c       	mov	r13, r12
     f6e:	09 c0       	rjmp	.+18     	; 0xf82 <xTaskResumeAll+0xa0>
     f70:	d1 2c       	mov	r13, r1
     f72:	0f 2e       	mov	r0, r31
     f74:	f9 e4       	ldi	r31, 0x49	; 73
     f76:	ef 2e       	mov	r14, r31
     f78:	f7 e0       	ldi	r31, 0x07	; 7
     f7a:	ff 2e       	mov	r15, r31
     f7c:	f0 2d       	mov	r31, r0
     f7e:	cc 24       	eor	r12, r12
     f80:	c3 94       	inc	r12
     f82:	f7 01       	movw	r30, r14
     f84:	80 81       	ld	r24, Z
     f86:	81 11       	cpse	r24, r1
     f88:	c5 cf       	rjmp	.-118    	; 0xf14 <xTaskResumeAll+0x32>
     f8a:	80 91 37 07 	lds	r24, 0x0737	; 0x800737 <uxMissedTicks>
     f8e:	88 23       	and	r24, r24
     f90:	79 f0       	breq	.+30     	; 0xfb0 <xTaskResumeAll+0xce>
     f92:	80 91 37 07 	lds	r24, 0x0737	; 0x800737 <uxMissedTicks>
     f96:	88 23       	and	r24, r24
     f98:	91 f0       	breq	.+36     	; 0xfbe <xTaskResumeAll+0xdc>
     f9a:	e2 de       	rcall	.-572    	; 0xd60 <vTaskIncrementTick>
     f9c:	80 91 37 07 	lds	r24, 0x0737	; 0x800737 <uxMissedTicks>
     fa0:	81 50       	subi	r24, 0x01	; 1
     fa2:	80 93 37 07 	sts	0x0737, r24	; 0x800737 <uxMissedTicks>
     fa6:	80 91 37 07 	lds	r24, 0x0737	; 0x800737 <uxMissedTicks>
     faa:	81 11       	cpse	r24, r1
     fac:	f6 cf       	rjmp	.-20     	; 0xf9a <xTaskResumeAll+0xb8>
     fae:	07 c0       	rjmp	.+14     	; 0xfbe <xTaskResumeAll+0xdc>
     fb0:	f1 e0       	ldi	r31, 0x01	; 1
     fb2:	df 16       	cp	r13, r31
     fb4:	21 f0       	breq	.+8      	; 0xfbe <xTaskResumeAll+0xdc>
     fb6:	80 91 36 07 	lds	r24, 0x0736	; 0x800736 <xMissedYield>
     fba:	81 30       	cpi	r24, 0x01	; 1
     fbc:	39 f4       	brne	.+14     	; 0xfcc <xTaskResumeAll+0xea>
     fbe:	10 92 36 07 	sts	0x0736, r1	; 0x800736 <xMissedYield>
     fc2:	c4 dc       	rcall	.-1656   	; 0x94c <vPortYield>
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	03 c0       	rjmp	.+6      	; 0xfce <xTaskResumeAll+0xec>
     fc8:	80 e0       	ldi	r24, 0x00	; 0
     fca:	01 c0       	rjmp	.+2      	; 0xfce <xTaskResumeAll+0xec>
     fcc:	80 e0       	ldi	r24, 0x00	; 0
     fce:	0f 90       	pop	r0
     fd0:	0f be       	out	0x3f, r0	; 63
     fd2:	df 91       	pop	r29
     fd4:	cf 91       	pop	r28
     fd6:	1f 91       	pop	r17
     fd8:	0f 91       	pop	r16
     fda:	ff 90       	pop	r15
     fdc:	ef 90       	pop	r14
     fde:	df 90       	pop	r13
     fe0:	cf 90       	pop	r12
     fe2:	08 95       	ret

00000fe4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
     fe4:	cf 93       	push	r28
     fe6:	df 93       	push	r29
     fe8:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
     fea:	89 2b       	or	r24, r25
		{
			vTaskSuspendAll();
     fec:	91 f0       	breq	.+36     	; 0x1012 <vTaskDelay+0x2e>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
     fee:	b2 de       	rcall	.-668    	; 0xd54 <vTaskSuspendAll>
     ff0:	80 91 3c 07 	lds	r24, 0x073C	; 0x80073c <xTickCount>
     ff4:	90 91 3d 07 	lds	r25, 0x073D	; 0x80073d <xTickCount+0x1>
     ff8:	c8 0f       	add	r28, r24

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
     ffa:	d9 1f       	adc	r29, r25
     ffc:	80 91 8c 07 	lds	r24, 0x078C	; 0x80078c <pxCurrentTCB>
    1000:	90 91 8d 07 	lds	r25, 0x078D	; 0x80078d <pxCurrentTCB+0x1>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
			}
			xAlreadyYielded = xTaskResumeAll();
    1004:	02 96       	adiw	r24, 0x02	; 2
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    1006:	fa d8       	rcall	.-3596   	; 0x1fc <vListRemove>
    1008:	ce 01       	movw	r24, r28
		{
			portYIELD_WITHIN_API();
    100a:	53 dd       	rcall	.-1370   	; 0xab2 <prvAddCurrentTaskToDelayedList>
    100c:	6a df       	rcall	.-300    	; 0xee2 <xTaskResumeAll>
		}
	}
    100e:	81 11       	cpse	r24, r1
    1010:	01 c0       	rjmp	.+2      	; 0x1014 <vTaskDelay+0x30>
    1012:	9c dc       	rcall	.-1736   	; 0x94c <vPortYield>
    1014:	df 91       	pop	r29
    1016:	cf 91       	pop	r28
    1018:	08 95       	ret

0000101a <prvIdleTask>:
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    101a:	0f 2e       	mov	r0, r31
    101c:	f0 e4       	ldi	r31, 0x40	; 64
    101e:	ef 2e       	mov	r14, r31
    1020:	f7 e0       	ldi	r31, 0x07	; 7
    1022:	ff 2e       	mov	r15, r31
    1024:	f0 2d       	mov	r31, r0

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    1026:	c8 e6       	ldi	r28, 0x68	; 104
    1028:	d7 e0       	ldi	r29, 0x07	; 7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    102a:	80 91 3f 07 	lds	r24, 0x073F	; 0x80073f <uxTasksDeleted>
    102e:	88 23       	and	r24, r24
		{
			vTaskSuspendAll();
    1030:	29 f1       	breq	.+74     	; 0x107c <prvIdleTask+0x62>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    1032:	90 de       	rcall	.-736    	; 0xd54 <vTaskSuspendAll>
			xTaskResumeAll();
    1034:	d7 01       	movw	r26, r14
    1036:	1c 91       	ld	r17, X

			if( xListIsEmpty == pdFALSE )
    1038:	54 df       	rcall	.-344    	; 0xee2 <xTaskResumeAll>
    103a:	11 23       	and	r17, r17
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    103c:	f9 f0       	breq	.+62     	; 0x107c <prvIdleTask+0x62>
    103e:	0f b6       	in	r0, 0x3f	; 63
    1040:	f8 94       	cli
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    1042:	0f 92       	push	r0
    1044:	d7 01       	movw	r26, r14
    1046:	15 96       	adiw	r26, 0x05	; 5
    1048:	ed 91       	ld	r30, X+
    104a:	fc 91       	ld	r31, X
    104c:	16 97       	sbiw	r26, 0x06	; 6
					vListRemove( &( pxTCB->xGenericListItem ) );
    104e:	06 81       	ldd	r16, Z+6	; 0x06
    1050:	17 81       	ldd	r17, Z+7	; 0x07
    1052:	c8 01       	movw	r24, r16
					--uxCurrentNumberOfTasks;
    1054:	02 96       	adiw	r24, 0x02	; 2
    1056:	d2 d8       	rcall	.-3676   	; 0x1fc <vListRemove>
    1058:	80 91 3e 07 	lds	r24, 0x073E	; 0x80073e <uxCurrentNumberOfTasks>
    105c:	81 50       	subi	r24, 0x01	; 1
					--uxTasksDeleted;
    105e:	80 93 3e 07 	sts	0x073E, r24	; 0x80073e <uxCurrentNumberOfTasks>
    1062:	80 91 3f 07 	lds	r24, 0x073F	; 0x80073f <uxTasksDeleted>
    1066:	81 50       	subi	r24, 0x01	; 1
				}
				taskEXIT_CRITICAL();
    1068:	80 93 3f 07 	sts	0x073F, r24	; 0x80073f <uxTasksDeleted>
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    106c:	0f 90       	pop	r0
    106e:	0f be       	out	0x3f, r0	; 63
		vPortFree( pxTCB );
    1070:	f8 01       	movw	r30, r16
    1072:	87 89       	ldd	r24, Z+23	; 0x17

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    1074:	90 8d       	ldd	r25, Z+24	; 0x18
    1076:	4d d8       	rcall	.-3942   	; 0x112 <vPortFree>
    1078:	c8 01       	movw	r24, r16
			{
				taskYIELD();
    107a:	4b d8       	rcall	.-3946   	; 0x112 <vPortFree>
    107c:	88 81       	ld	r24, Y
    107e:	82 30       	cpi	r24, 0x02	; 2
    1080:	a0 f2       	brcs	.-88     	; 0x102a <prvIdleTask+0x10>
    1082:	64 dc       	rcall	.-1848   	; 0x94c <vPortYield>
    1084:	d2 cf       	rjmp	.-92     	; 0x102a <prvIdleTask+0x10>

00001086 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    1086:	80 91 38 07 	lds	r24, 0x0738	; 0x800738 <uxSchedulerSuspended>
    108a:	81 11       	cpse	r24, r1
    108c:	13 c0       	rjmp	.+38     	; 0x10b4 <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    108e:	80 91 3a 07 	lds	r24, 0x073A	; 0x80073a <uxTopReadyPriority>
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	fc 01       	movw	r30, r24
    1096:	ee 0f       	add	r30, r30
    1098:	ff 1f       	adc	r31, r31
    109a:	ee 0f       	add	r30, r30
    109c:	ff 1f       	adc	r31, r31
    109e:	ee 0f       	add	r30, r30
    10a0:	ff 1f       	adc	r31, r31
    10a2:	8e 0f       	add	r24, r30
    10a4:	9f 1f       	adc	r25, r31
    10a6:	fc 01       	movw	r30, r24
    10a8:	e8 59       	subi	r30, 0x98	; 152
    10aa:	f8 4f       	sbci	r31, 0xF8	; 248
    10ac:	80 81       	ld	r24, Z
    10ae:	88 23       	and	r24, r24
    10b0:	29 f0       	breq	.+10     	; 0x10bc <vTaskSwitchContext+0x36>
    10b2:	1b c0       	rjmp	.+54     	; 0x10ea <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	80 93 36 07 	sts	0x0736, r24	; 0x800736 <xMissedYield>
    10ba:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    10bc:	80 91 3a 07 	lds	r24, 0x073A	; 0x80073a <uxTopReadyPriority>
    10c0:	81 50       	subi	r24, 0x01	; 1
    10c2:	80 93 3a 07 	sts	0x073A, r24	; 0x80073a <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    10c6:	80 91 3a 07 	lds	r24, 0x073A	; 0x80073a <uxTopReadyPriority>
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	fc 01       	movw	r30, r24
    10ce:	ee 0f       	add	r30, r30
    10d0:	ff 1f       	adc	r31, r31
    10d2:	ee 0f       	add	r30, r30
    10d4:	ff 1f       	adc	r31, r31
    10d6:	ee 0f       	add	r30, r30
    10d8:	ff 1f       	adc	r31, r31
    10da:	8e 0f       	add	r24, r30
    10dc:	9f 1f       	adc	r25, r31
    10de:	fc 01       	movw	r30, r24
    10e0:	e8 59       	subi	r30, 0x98	; 152
    10e2:	f8 4f       	sbci	r31, 0xF8	; 248
    10e4:	80 81       	ld	r24, Z
    10e6:	88 23       	and	r24, r24
    10e8:	49 f3       	breq	.-46     	; 0x10bc <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    10ea:	80 91 3a 07 	lds	r24, 0x073A	; 0x80073a <uxTopReadyPriority>
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	9c 01       	movw	r18, r24
    10f2:	22 0f       	add	r18, r18
    10f4:	33 1f       	adc	r19, r19
    10f6:	22 0f       	add	r18, r18
    10f8:	33 1f       	adc	r19, r19
    10fa:	22 0f       	add	r18, r18
    10fc:	33 1f       	adc	r19, r19
    10fe:	28 0f       	add	r18, r24
    1100:	39 1f       	adc	r19, r25
    1102:	d9 01       	movw	r26, r18
    1104:	a8 59       	subi	r26, 0x98	; 152
    1106:	b8 4f       	sbci	r27, 0xF8	; 248
    1108:	11 96       	adiw	r26, 0x01	; 1
    110a:	ed 91       	ld	r30, X+
    110c:	fc 91       	ld	r31, X
    110e:	12 97       	sbiw	r26, 0x02	; 2
    1110:	02 80       	ldd	r0, Z+2	; 0x02
    1112:	f3 81       	ldd	r31, Z+3	; 0x03
    1114:	e0 2d       	mov	r30, r0
    1116:	12 96       	adiw	r26, 0x02	; 2
    1118:	fc 93       	st	X, r31
    111a:	ee 93       	st	-X, r30
    111c:	11 97       	sbiw	r26, 0x01	; 1
    111e:	25 59       	subi	r18, 0x95	; 149
    1120:	38 4f       	sbci	r19, 0xF8	; 248
    1122:	e2 17       	cp	r30, r18
    1124:	f3 07       	cpc	r31, r19
    1126:	29 f4       	brne	.+10     	; 0x1132 <vTaskSwitchContext+0xac>
    1128:	22 81       	ldd	r18, Z+2	; 0x02
    112a:	33 81       	ldd	r19, Z+3	; 0x03
    112c:	fd 01       	movw	r30, r26
    112e:	32 83       	std	Z+2, r19	; 0x02
    1130:	21 83       	std	Z+1, r18	; 0x01
    1132:	fc 01       	movw	r30, r24
    1134:	ee 0f       	add	r30, r30
    1136:	ff 1f       	adc	r31, r31
    1138:	ee 0f       	add	r30, r30
    113a:	ff 1f       	adc	r31, r31
    113c:	ee 0f       	add	r30, r30
    113e:	ff 1f       	adc	r31, r31
    1140:	8e 0f       	add	r24, r30
    1142:	9f 1f       	adc	r25, r31
    1144:	fc 01       	movw	r30, r24
    1146:	e8 59       	subi	r30, 0x98	; 152
    1148:	f8 4f       	sbci	r31, 0xF8	; 248
    114a:	01 80       	ldd	r0, Z+1	; 0x01
    114c:	f2 81       	ldd	r31, Z+2	; 0x02
    114e:	e0 2d       	mov	r30, r0
    1150:	86 81       	ldd	r24, Z+6	; 0x06
    1152:	97 81       	ldd	r25, Z+7	; 0x07
    1154:	90 93 8d 07 	sts	0x078D, r25	; 0x80078d <pxCurrentTCB+0x1>
    1158:	80 93 8c 07 	sts	0x078C, r24	; 0x80078c <pxCurrentTCB>
    115c:	08 95       	ret

0000115e <memset>:
    115e:	dc 01       	movw	r26, r24
    1160:	01 c0       	rjmp	.+2      	; 0x1164 <memset+0x6>
    1162:	6d 93       	st	X+, r22
    1164:	41 50       	subi	r20, 0x01	; 1
    1166:	50 40       	sbci	r21, 0x00	; 0
    1168:	e0 f7       	brcc	.-8      	; 0x1162 <memset+0x4>
    116a:	08 95       	ret

0000116c <strncpy>:
    116c:	fb 01       	movw	r30, r22
    116e:	dc 01       	movw	r26, r24
    1170:	41 50       	subi	r20, 0x01	; 1
    1172:	50 40       	sbci	r21, 0x00	; 0
    1174:	48 f0       	brcs	.+18     	; 0x1188 <strncpy+0x1c>
    1176:	01 90       	ld	r0, Z+
    1178:	0d 92       	st	X+, r0
    117a:	00 20       	and	r0, r0
    117c:	c9 f7       	brne	.-14     	; 0x1170 <strncpy+0x4>
    117e:	01 c0       	rjmp	.+2      	; 0x1182 <strncpy+0x16>
    1180:	1d 92       	st	X+, r1
    1182:	41 50       	subi	r20, 0x01	; 1
    1184:	50 40       	sbci	r21, 0x00	; 0
    1186:	e0 f7       	brcc	.-8      	; 0x1180 <strncpy+0x14>
    1188:	08 95       	ret

0000118a <_exit>:
    118a:	f8 94       	cli

0000118c <__stop_program>:
    118c:	ff cf       	rjmp	.-2      	; 0x118c <__stop_program>
