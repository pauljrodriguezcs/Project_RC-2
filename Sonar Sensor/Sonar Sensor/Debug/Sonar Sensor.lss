
Sonar Sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00000d24  00000db8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d24  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000063d  00800122  00800122  00000dda  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000dda  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00000e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023a0  00000000  00000000  00001034  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f0f  00000000  00000000  000033d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001445  00000000  00000000  000042e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004cc  00000000  00000000  00005728  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d2c  00000000  00000000  00005bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012a5  00000000  00000000  00006920  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e0  00000000  00000000  00007bc5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	07 c3       	rjmp	.+1550   	; 0x644 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e2       	ldi	r30, 0x24	; 36
  a0:	fd e0       	ldi	r31, 0x0D	; 13
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 32       	cpi	r26, 0x22	; 34
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	27 e0       	ldi	r18, 0x07	; 7
  b4:	a2 e2       	ldi	r26, 0x22	; 34
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	af 35       	cpi	r26, 0x5F	; 95
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	58 d1       	rcall	.+688    	; 0x374 <main>
  c4:	2d c6       	rjmp	.+3162   	; 0xd20 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
  ce:	0d d4       	rcall	.+2074   	; 0x8ea <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
  d0:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <__data_end>
  d4:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <__data_end+0x1>
  d8:	c9 01       	movw	r24, r18
  da:	8c 0f       	add	r24, r28
  dc:	9d 1f       	adc	r25, r29
  de:	8c 3d       	cpi	r24, 0xDC	; 220
  e0:	45 e0       	ldi	r20, 0x05	; 5
  e2:	94 07       	cpc	r25, r20
  e4:	58 f4       	brcc	.+22     	; 0xfc <pvPortMalloc+0x34>
  e6:	28 17       	cp	r18, r24
  e8:	39 07       	cpc	r19, r25
  ea:	58 f4       	brcc	.+22     	; 0x102 <pvPortMalloc+0x3a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
  ec:	e9 01       	movw	r28, r18
  ee:	cc 5d       	subi	r28, 0xDC	; 220
  f0:	de 4f       	sbci	r29, 0xFE	; 254
			xNextFreeByte += xWantedSize;			
  f2:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <__data_end+0x1>
  f6:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__data_end>
  fa:	05 c0       	rjmp	.+10     	; 0x106 <pvPortMalloc+0x3e>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
  fc:	c0 e0       	ldi	r28, 0x00	; 0
  fe:	d0 e0       	ldi	r29, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <pvPortMalloc+0x3e>
 102:	c0 e0       	ldi	r28, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
 104:	d0 e0       	ldi	r29, 0x00	; 0
 106:	b8 d4       	rcall	.+2416   	; 0xa78 <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
 108:	ce 01       	movw	r24, r28
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 110:	08 95       	ret

00000112 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
 112:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 114:	03 96       	adiw	r24, 0x03	; 3
 116:	92 83       	std	Z+2, r25	; 0x02
 118:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 11a:	2f ef       	ldi	r18, 0xFF	; 255
 11c:	3f ef       	ldi	r19, 0xFF	; 255
 11e:	34 83       	std	Z+4, r19	; 0x04
 120:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 122:	96 83       	std	Z+6, r25	; 0x06
 124:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 126:	90 87       	std	Z+8, r25	; 0x08
 128:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 12a:	10 82       	st	Z, r1
 12c:	08 95       	ret

0000012e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 12e:	fc 01       	movw	r30, r24
 130:	11 86       	std	Z+9, r1	; 0x09
 132:	10 86       	std	Z+8, r1	; 0x08
 134:	08 95       	ret

00000136 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	fc 01       	movw	r30, r24
 13c:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
 13e:	21 81       	ldd	r18, Z+1	; 0x01
 140:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
 142:	e9 01       	movw	r28, r18
 144:	8a 81       	ldd	r24, Y+2	; 0x02
 146:	9b 81       	ldd	r25, Y+3	; 0x03
 148:	13 96       	adiw	r26, 0x03	; 3
 14a:	9c 93       	st	X, r25
 14c:	8e 93       	st	-X, r24
 14e:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
 150:	81 81       	ldd	r24, Z+1	; 0x01
 152:	92 81       	ldd	r25, Z+2	; 0x02
 154:	15 96       	adiw	r26, 0x05	; 5
 156:	9c 93       	st	X, r25
 158:	8e 93       	st	-X, r24
 15a:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 15c:	8a 81       	ldd	r24, Y+2	; 0x02
 15e:	9b 81       	ldd	r25, Y+3	; 0x03
 160:	ec 01       	movw	r28, r24
 162:	7d 83       	std	Y+5, r23	; 0x05
 164:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 166:	e9 01       	movw	r28, r18
 168:	7b 83       	std	Y+3, r23	; 0x03
 16a:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 16c:	72 83       	std	Z+2, r23	; 0x02
 16e:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 170:	19 96       	adiw	r26, 0x09	; 9
 172:	fc 93       	st	X, r31
 174:	ee 93       	st	-X, r30
 176:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
 178:	80 81       	ld	r24, Z
 17a:	8f 5f       	subi	r24, 0xFF	; 255
 17c:	80 83       	st	Z, r24
}
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 18a:	48 81       	ld	r20, Y
 18c:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 18e:	4f 3f       	cpi	r20, 0xFF	; 255
 190:	2f ef       	ldi	r18, 0xFF	; 255
 192:	52 07       	cpc	r21, r18
 194:	31 f4       	brne	.+12     	; 0x1a2 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 196:	dc 01       	movw	r26, r24
 198:	17 96       	adiw	r26, 0x07	; 7
 19a:	ed 91       	ld	r30, X+
 19c:	fc 91       	ld	r31, X
 19e:	18 97       	sbiw	r26, 0x08	; 8
 1a0:	17 c0       	rjmp	.+46     	; 0x1d0 <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 1a2:	fc 01       	movw	r30, r24
 1a4:	33 96       	adiw	r30, 0x03	; 3
 1a6:	dc 01       	movw	r26, r24
 1a8:	15 96       	adiw	r26, 0x05	; 5
 1aa:	2d 91       	ld	r18, X+
 1ac:	3c 91       	ld	r19, X
 1ae:	16 97       	sbiw	r26, 0x06	; 6
 1b0:	d9 01       	movw	r26, r18
 1b2:	2d 91       	ld	r18, X+
 1b4:	3c 91       	ld	r19, X
 1b6:	42 17       	cp	r20, r18
 1b8:	53 07       	cpc	r21, r19
 1ba:	50 f0       	brcs	.+20     	; 0x1d0 <vListInsert+0x4c>
 1bc:	02 80       	ldd	r0, Z+2	; 0x02
 1be:	f3 81       	ldd	r31, Z+3	; 0x03
 1c0:	e0 2d       	mov	r30, r0
 1c2:	a2 81       	ldd	r26, Z+2	; 0x02
 1c4:	b3 81       	ldd	r27, Z+3	; 0x03
 1c6:	2d 91       	ld	r18, X+
 1c8:	3c 91       	ld	r19, X
 1ca:	42 17       	cp	r20, r18
 1cc:	53 07       	cpc	r21, r19
 1ce:	b0 f7       	brcc	.-20     	; 0x1bc <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 1d0:	a2 81       	ldd	r26, Z+2	; 0x02
 1d2:	b3 81       	ldd	r27, Z+3	; 0x03
 1d4:	bb 83       	std	Y+3, r27	; 0x03
 1d6:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 1d8:	15 96       	adiw	r26, 0x05	; 5
 1da:	dc 93       	st	X, r29
 1dc:	ce 93       	st	-X, r28
 1de:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
 1e0:	fd 83       	std	Y+5, r31	; 0x05
 1e2:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 1e4:	d3 83       	std	Z+3, r29	; 0x03
 1e6:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 1e8:	99 87       	std	Y+9, r25	; 0x09
 1ea:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
 1ec:	fc 01       	movw	r30, r24
 1ee:	20 81       	ld	r18, Z
 1f0:	2f 5f       	subi	r18, 0xFF	; 255
 1f2:	20 83       	st	Z, r18
}
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
 1fa:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 1fc:	a2 81       	ldd	r26, Z+2	; 0x02
 1fe:	b3 81       	ldd	r27, Z+3	; 0x03
 200:	84 81       	ldd	r24, Z+4	; 0x04
 202:	95 81       	ldd	r25, Z+5	; 0x05
 204:	15 96       	adiw	r26, 0x05	; 5
 206:	9c 93       	st	X, r25
 208:	8e 93       	st	-X, r24
 20a:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 20c:	a4 81       	ldd	r26, Z+4	; 0x04
 20e:	b5 81       	ldd	r27, Z+5	; 0x05
 210:	82 81       	ldd	r24, Z+2	; 0x02
 212:	93 81       	ldd	r25, Z+3	; 0x03
 214:	13 96       	adiw	r26, 0x03	; 3
 216:	9c 93       	st	X, r25
 218:	8e 93       	st	-X, r24
 21a:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 21c:	a0 85       	ldd	r26, Z+8	; 0x08
 21e:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 220:	11 96       	adiw	r26, 0x01	; 1
 222:	8d 91       	ld	r24, X+
 224:	9c 91       	ld	r25, X
 226:	12 97       	sbiw	r26, 0x02	; 2
 228:	e8 17       	cp	r30, r24
 22a:	f9 07       	cpc	r31, r25
 22c:	31 f4       	brne	.+12     	; 0x23a <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 22e:	84 81       	ldd	r24, Z+4	; 0x04
 230:	95 81       	ldd	r25, Z+5	; 0x05
 232:	12 96       	adiw	r26, 0x02	; 2
 234:	9c 93       	st	X, r25
 236:	8e 93       	st	-X, r24
 238:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
 23a:	11 86       	std	Z+9, r1	; 0x09
 23c:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 23e:	8c 91       	ld	r24, X
 240:	81 50       	subi	r24, 0x01	; 1
 242:	8c 93       	st	X, r24
 244:	08 95       	ret

00000246 <SONAR_Tick>:
	xTaskCreate(SONARSecTask, (signed portCHAR *)"SONARSecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
}	


void OUTPUT_Init(){
	output_state = init;
 246:	80 91 5e 07 	lds	r24, 0x075E	; 0x80075e <sonar_state>
 24a:	82 30       	cpi	r24, 0x02	; 2
 24c:	11 f4       	brne	.+4      	; 0x252 <SONAR_Tick+0xc>
 24e:	8f ef       	ldi	r24, 0xFF	; 255
 250:	88 b9       	out	0x08, r24	; 8
 252:	80 91 5e 07 	lds	r24, 0x075E	; 0x80075e <sonar_state>
 256:	81 30       	cpi	r24, 0x01	; 1
 258:	61 f0       	breq	.+24     	; 0x272 <SONAR_Tick+0x2c>
 25a:	18 f0       	brcs	.+6      	; 0x262 <SONAR_Tick+0x1c>
 25c:	82 30       	cpi	r24, 0x02	; 2
 25e:	b9 f0       	breq	.+46     	; 0x28e <SONAR_Tick+0x48>
 260:	27 c0       	rjmp	.+78     	; 0x2b0 <SONAR_Tick+0x6a>
 262:	80 b1       	in	r24, 0x00	; 0
 264:	80 95       	com	r24
 266:	81 ff       	sbrs	r24, 1
 268:	25 c0       	rjmp	.+74     	; 0x2b4 <SONAR_Tick+0x6e>
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	80 93 5e 07 	sts	0x075E, r24	; 0x80075e <sonar_state>
 270:	08 95       	ret
 272:	80 b1       	in	r24, 0x00	; 0
 274:	80 95       	com	r24
 276:	81 fd       	sbrc	r24, 1
 278:	1d c0       	rjmp	.+58     	; 0x2b4 <SONAR_Tick+0x6e>
 27a:	82 e0       	ldi	r24, 0x02	; 2
 27c:	80 93 5e 07 	sts	0x075E, r24	; 0x80075e <sonar_state>
 280:	10 92 02 07 	sts	0x0702, r1	; 0x800702 <counter+0x1>
 284:	10 92 01 07 	sts	0x0701, r1	; 0x800701 <counter>
 288:	8f ef       	ldi	r24, 0xFF	; 255
 28a:	85 b9       	out	0x05, r24	; 5
 28c:	08 95       	ret
 28e:	00 99       	sbic	0x00, 0	; 0
 290:	05 c0       	rjmp	.+10     	; 0x29c <SONAR_Tick+0x56>
 292:	10 92 5e 07 	sts	0x075E, r1	; 0x80075e <sonar_state>
 296:	15 b8       	out	0x05, r1	; 5
 298:	18 b8       	out	0x08, r1	; 8
 29a:	08 95       	ret
 29c:	80 91 01 07 	lds	r24, 0x0701	; 0x800701 <counter>
 2a0:	90 91 02 07 	lds	r25, 0x0702	; 0x800702 <counter+0x1>
 2a4:	01 96       	adiw	r24, 0x01	; 1
 2a6:	90 93 02 07 	sts	0x0702, r25	; 0x800702 <counter+0x1>
 2aa:	80 93 01 07 	sts	0x0701, r24	; 0x800701 <counter>
 2ae:	08 95       	ret
 2b0:	10 92 5e 07 	sts	0x075E, r1	; 0x80075e <sonar_state>
 2b4:	08 95       	ret

000002b6 <SONARSecTask>:
 2b6:	10 92 5e 07 	sts	0x075E, r1	; 0x80075e <sonar_state>
 2ba:	c5 df       	rcall	.-118    	; 0x246 <SONAR_Tick>
 2bc:	8a e0       	ldi	r24, 0x0A	; 10
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	5c d4       	rcall	.+2232   	; 0xb7a <vTaskDelay>
 2c2:	fb cf       	rjmp	.-10     	; 0x2ba <SONARSecTask+0x4>

000002c4 <SONARSecPulse>:
 2c4:	af 92       	push	r10
 2c6:	bf 92       	push	r11
 2c8:	cf 92       	push	r12
 2ca:	df 92       	push	r13
 2cc:	ef 92       	push	r14
 2ce:	ff 92       	push	r15
 2d0:	0f 93       	push	r16
 2d2:	a1 2c       	mov	r10, r1
 2d4:	b1 2c       	mov	r11, r1
 2d6:	c1 2c       	mov	r12, r1
 2d8:	d1 2c       	mov	r13, r1
 2da:	e1 2c       	mov	r14, r1
 2dc:	f1 2c       	mov	r15, r1
 2de:	08 2f       	mov	r16, r24
 2e0:	20 e0       	ldi	r18, 0x00	; 0
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	45 e5       	ldi	r20, 0x55	; 85
 2e6:	50 e0       	ldi	r21, 0x00	; 0
 2e8:	62 e0       	ldi	r22, 0x02	; 2
 2ea:	71 e0       	ldi	r23, 0x01	; 1
 2ec:	8b e5       	ldi	r24, 0x5B	; 91
 2ee:	91 e0       	ldi	r25, 0x01	; 1
 2f0:	e0 d1       	rcall	.+960    	; 0x6b2 <xTaskGenericCreate>
 2f2:	0f 91       	pop	r16
 2f4:	ff 90       	pop	r15
 2f6:	ef 90       	pop	r14
 2f8:	df 90       	pop	r13
 2fa:	cf 90       	pop	r12
 2fc:	bf 90       	pop	r11
 2fe:	af 90       	pop	r10
 300:	08 95       	ret

00000302 <OUTPUT_Tick>:
}

void OUTPUT_Tick(){
	//Actions
	switch(output_state){
 302:	80 91 5d 07 	lds	r24, 0x075D	; 0x80075d <output_state>
 306:	81 11       	cpse	r24, r1
 308:	09 c0       	rjmp	.+18     	; 0x31c <OUTPUT_Tick+0x1a>
		case init:
			temp = (counter*340)*5;
 30a:	80 91 01 07 	lds	r24, 0x0701	; 0x800701 <counter>
 30e:	94 ea       	ldi	r25, 0xA4	; 164
 310:	89 9f       	mul	r24, r25
 312:	80 2d       	mov	r24, r0
 314:	11 24       	eor	r1, r1
 316:	80 93 00 07 	sts	0x0700, r24	; 0x800700 <temp>
			PORTD = temp;
 31a:	8b b9       	out	0x0b, r24	; 11
		
		default:
			break;
	}
	//Transitions
	switch(output_state){
 31c:	80 91 5d 07 	lds	r24, 0x075D	; 0x80075d <output_state>
 320:	81 11       	cpse	r24, r1
		case init:
			output_state = init;
			break;
		
		default:
			output_state = init;
 322:	10 92 5d 07 	sts	0x075D, r1	; 0x80075d <output_state>
 326:	08 95       	ret

00000328 <OUTPUTSecTask>:
	xTaskCreate(SONARSecTask, (signed portCHAR *)"SONARSecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
}	


void OUTPUT_Init(){
	output_state = init;
 328:	10 92 5d 07 	sts	0x075D, r1	; 0x80075d <output_state>
void OUTPUTSecTask()
{
	OUTPUT_Init();
	for(;;)
	{
		OUTPUT_Tick();
 32c:	ea df       	rcall	.-44     	; 0x302 <OUTPUT_Tick>
		vTaskDelay(10);
 32e:	8a e0       	ldi	r24, 0x0A	; 10
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	23 d4       	rcall	.+2118   	; 0xb7a <vTaskDelay>
 334:	fb cf       	rjmp	.-10     	; 0x32c <OUTPUTSecTask+0x4>

00000336 <OUTPUTSecPulse>:
	}
}

void OUTPUTSecPulse(unsigned portBASE_TYPE Priority)
{
 336:	af 92       	push	r10
 338:	bf 92       	push	r11
 33a:	cf 92       	push	r12
 33c:	df 92       	push	r13
 33e:	ef 92       	push	r14
 340:	ff 92       	push	r15
 342:	0f 93       	push	r16
	xTaskCreate(OUTPUTSecTask, (signed portCHAR *)"OUTPUTSecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
 344:	a1 2c       	mov	r10, r1
 346:	b1 2c       	mov	r11, r1
 348:	c1 2c       	mov	r12, r1
 34a:	d1 2c       	mov	r13, r1
 34c:	e1 2c       	mov	r14, r1
 34e:	f1 2c       	mov	r15, r1
 350:	08 2f       	mov	r16, r24
 352:	20 e0       	ldi	r18, 0x00	; 0
 354:	30 e0       	ldi	r19, 0x00	; 0
 356:	45 e5       	ldi	r20, 0x55	; 85
 358:	50 e0       	ldi	r21, 0x00	; 0
 35a:	6f e0       	ldi	r22, 0x0F	; 15
 35c:	71 e0       	ldi	r23, 0x01	; 1
 35e:	84 e9       	ldi	r24, 0x94	; 148
 360:	91 e0       	ldi	r25, 0x01	; 1
 362:	a7 d1       	rcall	.+846    	; 0x6b2 <xTaskGenericCreate>
}
 364:	0f 91       	pop	r16
 366:	ff 90       	pop	r15
 368:	ef 90       	pop	r14
 36a:	df 90       	pop	r13
 36c:	cf 90       	pop	r12
 36e:	bf 90       	pop	r11
 370:	af 90       	pop	r10
 372:	08 95       	ret

00000374 <main>:
 
int main(void) 
{ 
   DDRA = 0x00; PORTA=0xFF;		// input button and echo
 374:	11 b8       	out	0x01, r1	; 1
 376:	8f ef       	ldi	r24, 0xFF	; 255
 378:	82 b9       	out	0x02, r24	; 2
   DDRB = 0xFF; PORTB = 0x00;	// output trigger
 37a:	84 b9       	out	0x04, r24	; 4
 37c:	15 b8       	out	0x05, r1	; 5
   DDRC = 0xFF; PORTC = 0x00;	// output state LED;
 37e:	87 b9       	out	0x07, r24	; 7
 380:	18 b8       	out	0x08, r1	; 8
   DDRD = 0xFF; PORTD = 0x00;	// output led banks
 382:	8a b9       	out	0x0a, r24	; 10
 384:	1b b8       	out	0x0b, r1	; 11
   //Start Tasks  
   SONARSecPulse(1);
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	9d df       	rcall	.-198    	; 0x2c4 <SONARSecPulse>
   OUTPUTSecPulse(1);
 38a:	81 e0       	ldi	r24, 0x01	; 1
    //RunSchedular 
   vTaskStartScheduler(); 
 38c:	d4 df       	rcall	.-88     	; 0x336 <OUTPUTSecPulse>
 38e:	84 d2       	rcall	.+1288   	; 0x898 <vTaskStartScheduler>
 
   return 0; 
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	08 95       	ret

00000396 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 396:	31 e1       	ldi	r19, 0x11	; 17
 398:	fc 01       	movw	r30, r24
 39a:	30 83       	st	Z, r19
 39c:	31 97       	sbiw	r30, 0x01	; 1
 39e:	22 e2       	ldi	r18, 0x22	; 34
 3a0:	20 83       	st	Z, r18
 3a2:	31 97       	sbiw	r30, 0x01	; 1
 3a4:	a3 e3       	ldi	r26, 0x33	; 51
 3a6:	a0 83       	st	Z, r26
 3a8:	31 97       	sbiw	r30, 0x01	; 1
 3aa:	60 83       	st	Z, r22
 3ac:	31 97       	sbiw	r30, 0x01	; 1
 3ae:	70 83       	st	Z, r23
 3b0:	31 97       	sbiw	r30, 0x01	; 1
 3b2:	10 82       	st	Z, r1
 3b4:	31 97       	sbiw	r30, 0x01	; 1
 3b6:	60 e8       	ldi	r22, 0x80	; 128
 3b8:	60 83       	st	Z, r22
 3ba:	31 97       	sbiw	r30, 0x01	; 1
 3bc:	10 82       	st	Z, r1
 3be:	31 97       	sbiw	r30, 0x01	; 1
 3c0:	62 e0       	ldi	r22, 0x02	; 2
 3c2:	60 83       	st	Z, r22
 3c4:	31 97       	sbiw	r30, 0x01	; 1
 3c6:	63 e0       	ldi	r22, 0x03	; 3
 3c8:	60 83       	st	Z, r22
 3ca:	31 97       	sbiw	r30, 0x01	; 1
 3cc:	64 e0       	ldi	r22, 0x04	; 4
 3ce:	60 83       	st	Z, r22
 3d0:	31 97       	sbiw	r30, 0x01	; 1
 3d2:	65 e0       	ldi	r22, 0x05	; 5
 3d4:	60 83       	st	Z, r22
 3d6:	31 97       	sbiw	r30, 0x01	; 1
 3d8:	66 e0       	ldi	r22, 0x06	; 6
 3da:	60 83       	st	Z, r22
 3dc:	31 97       	sbiw	r30, 0x01	; 1
 3de:	67 e0       	ldi	r22, 0x07	; 7
 3e0:	60 83       	st	Z, r22
 3e2:	31 97       	sbiw	r30, 0x01	; 1
 3e4:	68 e0       	ldi	r22, 0x08	; 8
 3e6:	60 83       	st	Z, r22
 3e8:	31 97       	sbiw	r30, 0x01	; 1
 3ea:	69 e0       	ldi	r22, 0x09	; 9
 3ec:	60 83       	st	Z, r22
 3ee:	31 97       	sbiw	r30, 0x01	; 1
 3f0:	60 e1       	ldi	r22, 0x10	; 16
 3f2:	60 83       	st	Z, r22
 3f4:	31 97       	sbiw	r30, 0x01	; 1
 3f6:	30 83       	st	Z, r19
 3f8:	31 97       	sbiw	r30, 0x01	; 1
 3fa:	32 e1       	ldi	r19, 0x12	; 18
 3fc:	30 83       	st	Z, r19
 3fe:	31 97       	sbiw	r30, 0x01	; 1
 400:	33 e1       	ldi	r19, 0x13	; 19
 402:	30 83       	st	Z, r19
 404:	31 97       	sbiw	r30, 0x01	; 1
 406:	34 e1       	ldi	r19, 0x14	; 20
 408:	30 83       	st	Z, r19
 40a:	31 97       	sbiw	r30, 0x01	; 1
 40c:	35 e1       	ldi	r19, 0x15	; 21
 40e:	30 83       	st	Z, r19
 410:	31 97       	sbiw	r30, 0x01	; 1
 412:	36 e1       	ldi	r19, 0x16	; 22
 414:	30 83       	st	Z, r19
 416:	31 97       	sbiw	r30, 0x01	; 1
 418:	37 e1       	ldi	r19, 0x17	; 23
 41a:	30 83       	st	Z, r19
 41c:	31 97       	sbiw	r30, 0x01	; 1
 41e:	38 e1       	ldi	r19, 0x18	; 24
 420:	30 83       	st	Z, r19
 422:	31 97       	sbiw	r30, 0x01	; 1
 424:	39 e1       	ldi	r19, 0x19	; 25
 426:	30 83       	st	Z, r19
 428:	31 97       	sbiw	r30, 0x01	; 1
 42a:	30 e2       	ldi	r19, 0x20	; 32
 42c:	30 83       	st	Z, r19
 42e:	31 97       	sbiw	r30, 0x01	; 1
 430:	31 e2       	ldi	r19, 0x21	; 33
 432:	30 83       	st	Z, r19
 434:	31 97       	sbiw	r30, 0x01	; 1
 436:	20 83       	st	Z, r18
 438:	31 97       	sbiw	r30, 0x01	; 1
 43a:	23 e2       	ldi	r18, 0x23	; 35
 43c:	20 83       	st	Z, r18
 43e:	31 97       	sbiw	r30, 0x01	; 1
 440:	40 83       	st	Z, r20
 442:	31 97       	sbiw	r30, 0x01	; 1
 444:	50 83       	st	Z, r21
 446:	31 97       	sbiw	r30, 0x01	; 1
 448:	26 e2       	ldi	r18, 0x26	; 38
 44a:	20 83       	st	Z, r18
 44c:	31 97       	sbiw	r30, 0x01	; 1
 44e:	27 e2       	ldi	r18, 0x27	; 39
 450:	20 83       	st	Z, r18
 452:	31 97       	sbiw	r30, 0x01	; 1
 454:	28 e2       	ldi	r18, 0x28	; 40
 456:	20 83       	st	Z, r18
 458:	31 97       	sbiw	r30, 0x01	; 1
 45a:	29 e2       	ldi	r18, 0x29	; 41
 45c:	20 83       	st	Z, r18
 45e:	31 97       	sbiw	r30, 0x01	; 1
 460:	20 e3       	ldi	r18, 0x30	; 48
 462:	20 83       	st	Z, r18
 464:	31 97       	sbiw	r30, 0x01	; 1
 466:	21 e3       	ldi	r18, 0x31	; 49
 468:	20 83       	st	Z, r18
 46a:	86 97       	sbiw	r24, 0x26	; 38
 46c:	08 95       	ret

0000046e <xPortStartScheduler>:
 46e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 472:	8c e7       	ldi	r24, 0x7C	; 124
 474:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 478:	8b e0       	ldi	r24, 0x0B	; 11
 47a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 47e:	ef e6       	ldi	r30, 0x6F	; 111
 480:	f0 e0       	ldi	r31, 0x00	; 0
 482:	80 81       	ld	r24, Z
 484:	82 60       	ori	r24, 0x02	; 2
 486:	80 83       	st	Z, r24
 488:	a0 91 5b 07 	lds	r26, 0x075B	; 0x80075b <pxCurrentTCB>
 48c:	b0 91 5c 07 	lds	r27, 0x075C	; 0x80075c <pxCurrentTCB+0x1>
 490:	cd 91       	ld	r28, X+
 492:	cd bf       	out	0x3d, r28	; 61
 494:	dd 91       	ld	r29, X+
 496:	de bf       	out	0x3e, r29	; 62
 498:	ff 91       	pop	r31
 49a:	ef 91       	pop	r30
 49c:	df 91       	pop	r29
 49e:	cf 91       	pop	r28
 4a0:	bf 91       	pop	r27
 4a2:	af 91       	pop	r26
 4a4:	9f 91       	pop	r25
 4a6:	8f 91       	pop	r24
 4a8:	7f 91       	pop	r23
 4aa:	6f 91       	pop	r22
 4ac:	5f 91       	pop	r21
 4ae:	4f 91       	pop	r20
 4b0:	3f 91       	pop	r19
 4b2:	2f 91       	pop	r18
 4b4:	1f 91       	pop	r17
 4b6:	0f 91       	pop	r16
 4b8:	ff 90       	pop	r15
 4ba:	ef 90       	pop	r14
 4bc:	df 90       	pop	r13
 4be:	cf 90       	pop	r12
 4c0:	bf 90       	pop	r11
 4c2:	af 90       	pop	r10
 4c4:	9f 90       	pop	r9
 4c6:	8f 90       	pop	r8
 4c8:	7f 90       	pop	r7
 4ca:	6f 90       	pop	r6
 4cc:	5f 90       	pop	r5
 4ce:	4f 90       	pop	r4
 4d0:	3f 90       	pop	r3
 4d2:	2f 90       	pop	r2
 4d4:	1f 90       	pop	r1
 4d6:	0f 90       	pop	r0
 4d8:	0f be       	out	0x3f, r0	; 63
 4da:	0f 90       	pop	r0
 4dc:	08 95       	ret
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	08 95       	ret

000004e2 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 4e2:	0f 92       	push	r0
 4e4:	0f b6       	in	r0, 0x3f	; 63
 4e6:	f8 94       	cli
 4e8:	0f 92       	push	r0
 4ea:	1f 92       	push	r1
 4ec:	11 24       	eor	r1, r1
 4ee:	2f 92       	push	r2
 4f0:	3f 92       	push	r3
 4f2:	4f 92       	push	r4
 4f4:	5f 92       	push	r5
 4f6:	6f 92       	push	r6
 4f8:	7f 92       	push	r7
 4fa:	8f 92       	push	r8
 4fc:	9f 92       	push	r9
 4fe:	af 92       	push	r10
 500:	bf 92       	push	r11
 502:	cf 92       	push	r12
 504:	df 92       	push	r13
 506:	ef 92       	push	r14
 508:	ff 92       	push	r15
 50a:	0f 93       	push	r16
 50c:	1f 93       	push	r17
 50e:	2f 93       	push	r18
 510:	3f 93       	push	r19
 512:	4f 93       	push	r20
 514:	5f 93       	push	r21
 516:	6f 93       	push	r22
 518:	7f 93       	push	r23
 51a:	8f 93       	push	r24
 51c:	9f 93       	push	r25
 51e:	af 93       	push	r26
 520:	bf 93       	push	r27
 522:	cf 93       	push	r28
 524:	df 93       	push	r29
 526:	ef 93       	push	r30
 528:	ff 93       	push	r31
 52a:	a0 91 5b 07 	lds	r26, 0x075B	; 0x80075b <pxCurrentTCB>
 52e:	b0 91 5c 07 	lds	r27, 0x075C	; 0x80075c <pxCurrentTCB+0x1>
 532:	0d b6       	in	r0, 0x3d	; 61
 534:	0d 92       	st	X+, r0
 536:	0e b6       	in	r0, 0x3e	; 62
 538:	0d 92       	st	X+, r0
	vTaskSwitchContext();
 53a:	70 d3       	rcall	.+1760   	; 0xc1c <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 53c:	a0 91 5b 07 	lds	r26, 0x075B	; 0x80075b <pxCurrentTCB>
 540:	b0 91 5c 07 	lds	r27, 0x075C	; 0x80075c <pxCurrentTCB+0x1>
 544:	cd 91       	ld	r28, X+
 546:	cd bf       	out	0x3d, r28	; 61
 548:	dd 91       	ld	r29, X+
 54a:	de bf       	out	0x3e, r29	; 62
 54c:	ff 91       	pop	r31
 54e:	ef 91       	pop	r30
 550:	df 91       	pop	r29
 552:	cf 91       	pop	r28
 554:	bf 91       	pop	r27
 556:	af 91       	pop	r26
 558:	9f 91       	pop	r25
 55a:	8f 91       	pop	r24
 55c:	7f 91       	pop	r23
 55e:	6f 91       	pop	r22
 560:	5f 91       	pop	r21
 562:	4f 91       	pop	r20
 564:	3f 91       	pop	r19
 566:	2f 91       	pop	r18
 568:	1f 91       	pop	r17
 56a:	0f 91       	pop	r16
 56c:	ff 90       	pop	r15
 56e:	ef 90       	pop	r14
 570:	df 90       	pop	r13
 572:	cf 90       	pop	r12
 574:	bf 90       	pop	r11
 576:	af 90       	pop	r10
 578:	9f 90       	pop	r9
 57a:	8f 90       	pop	r8
 57c:	7f 90       	pop	r7
 57e:	6f 90       	pop	r6
 580:	5f 90       	pop	r5
 582:	4f 90       	pop	r4
 584:	3f 90       	pop	r3
 586:	2f 90       	pop	r2
 588:	1f 90       	pop	r1
 58a:	0f 90       	pop	r0
 58c:	0f be       	out	0x3f, r0	; 63
 58e:	0f 90       	pop	r0

	asm volatile ( "ret" );
 590:	08 95       	ret

00000592 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 592:	0f 92       	push	r0
 594:	0f b6       	in	r0, 0x3f	; 63
 596:	f8 94       	cli
 598:	0f 92       	push	r0
 59a:	1f 92       	push	r1
 59c:	11 24       	eor	r1, r1
 59e:	2f 92       	push	r2
 5a0:	3f 92       	push	r3
 5a2:	4f 92       	push	r4
 5a4:	5f 92       	push	r5
 5a6:	6f 92       	push	r6
 5a8:	7f 92       	push	r7
 5aa:	8f 92       	push	r8
 5ac:	9f 92       	push	r9
 5ae:	af 92       	push	r10
 5b0:	bf 92       	push	r11
 5b2:	cf 92       	push	r12
 5b4:	df 92       	push	r13
 5b6:	ef 92       	push	r14
 5b8:	ff 92       	push	r15
 5ba:	0f 93       	push	r16
 5bc:	1f 93       	push	r17
 5be:	2f 93       	push	r18
 5c0:	3f 93       	push	r19
 5c2:	4f 93       	push	r20
 5c4:	5f 93       	push	r21
 5c6:	6f 93       	push	r22
 5c8:	7f 93       	push	r23
 5ca:	8f 93       	push	r24
 5cc:	9f 93       	push	r25
 5ce:	af 93       	push	r26
 5d0:	bf 93       	push	r27
 5d2:	cf 93       	push	r28
 5d4:	df 93       	push	r29
 5d6:	ef 93       	push	r30
 5d8:	ff 93       	push	r31
 5da:	a0 91 5b 07 	lds	r26, 0x075B	; 0x80075b <pxCurrentTCB>
 5de:	b0 91 5c 07 	lds	r27, 0x075C	; 0x80075c <pxCurrentTCB+0x1>
 5e2:	0d b6       	in	r0, 0x3d	; 61
 5e4:	0d 92       	st	X+, r0
 5e6:	0e b6       	in	r0, 0x3e	; 62
 5e8:	0d 92       	st	X+, r0
	vTaskIncrementTick();
 5ea:	85 d1       	rcall	.+778    	; 0x8f6 <vTaskIncrementTick>
	vTaskSwitchContext();
 5ec:	17 d3       	rcall	.+1582   	; 0xc1c <vTaskSwitchContext>
 5ee:	a0 91 5b 07 	lds	r26, 0x075B	; 0x80075b <pxCurrentTCB>
	portRESTORE_CONTEXT();
 5f2:	b0 91 5c 07 	lds	r27, 0x075C	; 0x80075c <pxCurrentTCB+0x1>
 5f6:	cd 91       	ld	r28, X+
 5f8:	cd bf       	out	0x3d, r28	; 61
 5fa:	dd 91       	ld	r29, X+
 5fc:	de bf       	out	0x3e, r29	; 62
 5fe:	ff 91       	pop	r31
 600:	ef 91       	pop	r30
 602:	df 91       	pop	r29
 604:	cf 91       	pop	r28
 606:	bf 91       	pop	r27
 608:	af 91       	pop	r26
 60a:	9f 91       	pop	r25
 60c:	8f 91       	pop	r24
 60e:	7f 91       	pop	r23
 610:	6f 91       	pop	r22
 612:	5f 91       	pop	r21
 614:	4f 91       	pop	r20
 616:	3f 91       	pop	r19
 618:	2f 91       	pop	r18
 61a:	1f 91       	pop	r17
 61c:	0f 91       	pop	r16
 61e:	ff 90       	pop	r15
 620:	ef 90       	pop	r14
 622:	df 90       	pop	r13
 624:	cf 90       	pop	r12
 626:	bf 90       	pop	r11
 628:	af 90       	pop	r10
 62a:	9f 90       	pop	r9
 62c:	8f 90       	pop	r8
 62e:	7f 90       	pop	r7
 630:	6f 90       	pop	r6
 632:	5f 90       	pop	r5
 634:	4f 90       	pop	r4
 636:	3f 90       	pop	r3
 638:	2f 90       	pop	r2
 63a:	1f 90       	pop	r1
 63c:	0f 90       	pop	r0
 63e:	0f be       	out	0x3f, r0	; 63
 640:	0f 90       	pop	r0
 642:	08 95       	ret

00000644 <__vector_13>:

	asm volatile ( "ret" );
 644:	a6 df       	rcall	.-180    	; 0x592 <vPortYieldFromTick>
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
		asm volatile ( "reti" );
 646:	18 95       	reti

00000648 <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
 648:	cf 93       	push	r28
 64a:	df 93       	push	r29
 64c:	ec 01       	movw	r28, r24
 64e:	e0 91 5b 07 	lds	r30, 0x075B	; 0x80075b <pxCurrentTCB>
 652:	f0 91 5c 07 	lds	r31, 0x075C	; 0x80075c <pxCurrentTCB+0x1>
 656:	93 83       	std	Z+3, r25	; 0x03
 658:	82 83       	std	Z+2, r24	; 0x02
 65a:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <xTickCount>
 65e:	90 91 0c 07 	lds	r25, 0x070C	; 0x80070c <xTickCount+0x1>
 662:	c8 17       	cp	r28, r24
 664:	d9 07       	cpc	r29, r25
 666:	60 f4       	brcc	.+24     	; 0x680 <prvAddCurrentTaskToDelayedList+0x38>
 668:	60 91 5b 07 	lds	r22, 0x075B	; 0x80075b <pxCurrentTCB>
 66c:	70 91 5c 07 	lds	r23, 0x075C	; 0x80075c <pxCurrentTCB+0x1>
 670:	80 91 21 07 	lds	r24, 0x0721	; 0x800721 <pxOverflowDelayedTaskList>
 674:	90 91 22 07 	lds	r25, 0x0722	; 0x800722 <pxOverflowDelayedTaskList+0x1>
 678:	6e 5f       	subi	r22, 0xFE	; 254
 67a:	7f 4f       	sbci	r23, 0xFF	; 255
 67c:	83 dd       	rcall	.-1274   	; 0x184 <vListInsert>
 67e:	16 c0       	rjmp	.+44     	; 0x6ac <prvAddCurrentTaskToDelayedList+0x64>
 680:	60 91 5b 07 	lds	r22, 0x075B	; 0x80075b <pxCurrentTCB>
 684:	70 91 5c 07 	lds	r23, 0x075C	; 0x80075c <pxCurrentTCB+0x1>
 688:	80 91 23 07 	lds	r24, 0x0723	; 0x800723 <pxDelayedTaskList>
 68c:	90 91 24 07 	lds	r25, 0x0724	; 0x800724 <pxDelayedTaskList+0x1>
 690:	6e 5f       	subi	r22, 0xFE	; 254
 692:	7f 4f       	sbci	r23, 0xFF	; 255
 694:	77 dd       	rcall	.-1298   	; 0x184 <vListInsert>
 696:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 69a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 69e:	c8 17       	cp	r28, r24
 6a0:	d9 07       	cpc	r29, r25
 6a2:	20 f4       	brcc	.+8      	; 0x6ac <prvAddCurrentTaskToDelayedList+0x64>
 6a4:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <__data_start+0x1>
 6a8:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
 6ac:	df 91       	pop	r29
 6ae:	cf 91       	pop	r28
 6b0:	08 95       	ret

000006b2 <xTaskGenericCreate>:
 6b2:	4f 92       	push	r4
 6b4:	5f 92       	push	r5
 6b6:	6f 92       	push	r6
 6b8:	7f 92       	push	r7
 6ba:	8f 92       	push	r8
 6bc:	9f 92       	push	r9
 6be:	af 92       	push	r10
 6c0:	bf 92       	push	r11
 6c2:	cf 92       	push	r12
 6c4:	df 92       	push	r13
 6c6:	ef 92       	push	r14
 6c8:	ff 92       	push	r15
 6ca:	0f 93       	push	r16
 6cc:	1f 93       	push	r17
 6ce:	cf 93       	push	r28
 6d0:	df 93       	push	r29
 6d2:	5c 01       	movw	r10, r24
 6d4:	4b 01       	movw	r8, r22
 6d6:	3a 01       	movw	r6, r20
 6d8:	29 01       	movw	r4, r18
 6da:	81 e2       	ldi	r24, 0x21	; 33
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	f4 dc       	rcall	.-1560   	; 0xc8 <pvPortMalloc>
 6e0:	ec 01       	movw	r28, r24
 6e2:	89 2b       	or	r24, r25
 6e4:	09 f4       	brne	.+2      	; 0x6e8 <xTaskGenericCreate+0x36>
 6e6:	c6 c0       	rjmp	.+396    	; 0x874 <xTaskGenericCreate+0x1c2>
 6e8:	c1 14       	cp	r12, r1
 6ea:	d1 04       	cpc	r13, r1
 6ec:	09 f0       	breq	.+2      	; 0x6f0 <xTaskGenericCreate+0x3e>
 6ee:	be c0       	rjmp	.+380    	; 0x86c <xTaskGenericCreate+0x1ba>
 6f0:	c3 01       	movw	r24, r6
 6f2:	ea dc       	rcall	.-1580   	; 0xc8 <pvPortMalloc>
 6f4:	98 8f       	std	Y+24, r25	; 0x18
 6f6:	8f 8b       	std	Y+23, r24	; 0x17
 6f8:	00 97       	sbiw	r24, 0x00	; 0
 6fa:	19 f4       	brne	.+6      	; 0x702 <xTaskGenericCreate+0x50>
 6fc:	ce 01       	movw	r24, r28
 6fe:	08 dd       	rcall	.-1520   	; 0x110 <vPortFree>
 700:	b9 c0       	rjmp	.+370    	; 0x874 <xTaskGenericCreate+0x1c2>
 702:	a3 01       	movw	r20, r6
 704:	65 ea       	ldi	r22, 0xA5	; 165
 706:	70 e0       	ldi	r23, 0x00	; 0
 708:	f5 d2       	rcall	.+1514   	; 0xcf4 <memset>
 70a:	93 01       	movw	r18, r6
 70c:	21 50       	subi	r18, 0x01	; 1
 70e:	31 09       	sbc	r19, r1
 710:	8f 89       	ldd	r24, Y+23	; 0x17
 712:	98 8d       	ldd	r25, Y+24	; 0x18
 714:	3c 01       	movw	r6, r24
 716:	62 0e       	add	r6, r18
 718:	73 1e       	adc	r7, r19
 71a:	48 e0       	ldi	r20, 0x08	; 8
 71c:	50 e0       	ldi	r21, 0x00	; 0
 71e:	b4 01       	movw	r22, r8
 720:	ce 01       	movw	r24, r28
 722:	49 96       	adiw	r24, 0x19	; 25
 724:	ee d2       	rcall	.+1500   	; 0xd02 <strncpy>
 726:	18 a2       	std	Y+32, r1	; 0x20
 728:	10 2f       	mov	r17, r16
 72a:	04 30       	cpi	r16, 0x04	; 4
 72c:	08 f0       	brcs	.+2      	; 0x730 <xTaskGenericCreate+0x7e>
 72e:	13 e0       	ldi	r17, 0x03	; 3
 730:	1e 8b       	std	Y+22, r17	; 0x16
 732:	6e 01       	movw	r12, r28
 734:	82 e0       	ldi	r24, 0x02	; 2
 736:	c8 0e       	add	r12, r24
 738:	d1 1c       	adc	r13, r1
 73a:	c6 01       	movw	r24, r12
 73c:	f8 dc       	rcall	.-1552   	; 0x12e <vListInitialiseItem>
 73e:	ce 01       	movw	r24, r28
 740:	0c 96       	adiw	r24, 0x0c	; 12
 742:	f5 dc       	rcall	.-1558   	; 0x12e <vListInitialiseItem>
 744:	d9 87       	std	Y+9, r29	; 0x09
 746:	c8 87       	std	Y+8, r28	; 0x08
 748:	84 e0       	ldi	r24, 0x04	; 4
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	81 1b       	sub	r24, r17
 74e:	91 09       	sbc	r25, r1
 750:	9d 87       	std	Y+13, r25	; 0x0d
 752:	8c 87       	std	Y+12, r24	; 0x0c
 754:	db 8b       	std	Y+19, r29	; 0x13
 756:	ca 8b       	std	Y+18, r28	; 0x12
 758:	a2 01       	movw	r20, r4
 75a:	b5 01       	movw	r22, r10
 75c:	c3 01       	movw	r24, r6
 75e:	1b de       	rcall	.-970    	; 0x396 <pxPortInitialiseStack>
 760:	99 83       	std	Y+1, r25	; 0x01
 762:	88 83       	st	Y, r24
 764:	e1 14       	cp	r14, r1
 766:	f1 04       	cpc	r15, r1
 768:	19 f0       	breq	.+6      	; 0x770 <xTaskGenericCreate+0xbe>
 76a:	f7 01       	movw	r30, r14
 76c:	d1 83       	std	Z+1, r29	; 0x01
 76e:	c0 83       	st	Z, r28
 770:	0f b6       	in	r0, 0x3f	; 63
 772:	f8 94       	cli
 774:	0f 92       	push	r0
 776:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <uxCurrentNumberOfTasks>
 77a:	8f 5f       	subi	r24, 0xFF	; 255
 77c:	80 93 0d 07 	sts	0x070D, r24	; 0x80070d <uxCurrentNumberOfTasks>
 780:	80 91 5b 07 	lds	r24, 0x075B	; 0x80075b <pxCurrentTCB>
 784:	90 91 5c 07 	lds	r25, 0x075C	; 0x80075c <pxCurrentTCB+0x1>
 788:	89 2b       	or	r24, r25
 78a:	69 f5       	brne	.+90     	; 0x7e6 <xTaskGenericCreate+0x134>
 78c:	d0 93 5c 07 	sts	0x075C, r29	; 0x80075c <pxCurrentTCB+0x1>
 790:	c0 93 5b 07 	sts	0x075B, r28	; 0x80075b <pxCurrentTCB>
 794:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <uxCurrentNumberOfTasks>
 798:	81 30       	cpi	r24, 0x01	; 1
 79a:	a1 f5       	brne	.+104    	; 0x804 <xTaskGenericCreate+0x152>
 79c:	87 e3       	ldi	r24, 0x37	; 55
 79e:	97 e0       	ldi	r25, 0x07	; 7
 7a0:	b8 dc       	rcall	.-1680   	; 0x112 <vListInitialise>
 7a2:	80 e4       	ldi	r24, 0x40	; 64
 7a4:	97 e0       	ldi	r25, 0x07	; 7
 7a6:	b5 dc       	rcall	.-1686   	; 0x112 <vListInitialise>
 7a8:	89 e4       	ldi	r24, 0x49	; 73
 7aa:	97 e0       	ldi	r25, 0x07	; 7
 7ac:	b2 dc       	rcall	.-1692   	; 0x112 <vListInitialise>
 7ae:	82 e5       	ldi	r24, 0x52	; 82
 7b0:	97 e0       	ldi	r25, 0x07	; 7
 7b2:	af dc       	rcall	.-1698   	; 0x112 <vListInitialise>
 7b4:	8e e2       	ldi	r24, 0x2E	; 46
 7b6:	97 e0       	ldi	r25, 0x07	; 7
 7b8:	ac dc       	rcall	.-1704   	; 0x112 <vListInitialise>
 7ba:	85 e2       	ldi	r24, 0x25	; 37
 7bc:	97 e0       	ldi	r25, 0x07	; 7
 7be:	a9 dc       	rcall	.-1710   	; 0x112 <vListInitialise>
 7c0:	88 e1       	ldi	r24, 0x18	; 24
 7c2:	97 e0       	ldi	r25, 0x07	; 7
 7c4:	a6 dc       	rcall	.-1716   	; 0x112 <vListInitialise>
 7c6:	8f e0       	ldi	r24, 0x0F	; 15
 7c8:	97 e0       	ldi	r25, 0x07	; 7
 7ca:	a3 dc       	rcall	.-1722   	; 0x112 <vListInitialise>
 7cc:	8e e2       	ldi	r24, 0x2E	; 46
 7ce:	97 e0       	ldi	r25, 0x07	; 7
 7d0:	90 93 24 07 	sts	0x0724, r25	; 0x800724 <pxDelayedTaskList+0x1>
 7d4:	80 93 23 07 	sts	0x0723, r24	; 0x800723 <pxDelayedTaskList>
 7d8:	85 e2       	ldi	r24, 0x25	; 37
 7da:	97 e0       	ldi	r25, 0x07	; 7
 7dc:	90 93 22 07 	sts	0x0722, r25	; 0x800722 <pxOverflowDelayedTaskList+0x1>
 7e0:	80 93 21 07 	sts	0x0721, r24	; 0x800721 <pxOverflowDelayedTaskList>
 7e4:	0f c0       	rjmp	.+30     	; 0x804 <xTaskGenericCreate+0x152>
 7e6:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <xSchedulerRunning>
 7ea:	81 11       	cpse	r24, r1
 7ec:	0b c0       	rjmp	.+22     	; 0x804 <xTaskGenericCreate+0x152>
 7ee:	e0 91 5b 07 	lds	r30, 0x075B	; 0x80075b <pxCurrentTCB>
 7f2:	f0 91 5c 07 	lds	r31, 0x075C	; 0x80075c <pxCurrentTCB+0x1>
 7f6:	86 89       	ldd	r24, Z+22	; 0x16
 7f8:	08 17       	cp	r16, r24
 7fa:	20 f0       	brcs	.+8      	; 0x804 <xTaskGenericCreate+0x152>
 7fc:	d0 93 5c 07 	sts	0x075C, r29	; 0x80075c <pxCurrentTCB+0x1>
 800:	c0 93 5b 07 	sts	0x075B, r28	; 0x80075b <pxCurrentTCB>
 804:	8e 89       	ldd	r24, Y+22	; 0x16
 806:	90 91 0a 07 	lds	r25, 0x070A	; 0x80070a <uxTopUsedPriority>
 80a:	98 17       	cp	r25, r24
 80c:	10 f4       	brcc	.+4      	; 0x812 <xTaskGenericCreate+0x160>
 80e:	80 93 0a 07 	sts	0x070A, r24	; 0x80070a <uxTopUsedPriority>
 812:	90 91 03 07 	lds	r25, 0x0703	; 0x800703 <uxTaskNumber>
 816:	9f 5f       	subi	r25, 0xFF	; 255
 818:	90 93 03 07 	sts	0x0703, r25	; 0x800703 <uxTaskNumber>
 81c:	90 91 09 07 	lds	r25, 0x0709	; 0x800709 <uxTopReadyPriority>
 820:	98 17       	cp	r25, r24
 822:	10 f4       	brcc	.+4      	; 0x828 <xTaskGenericCreate+0x176>
 824:	80 93 09 07 	sts	0x0709, r24	; 0x800709 <uxTopReadyPriority>
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	9c 01       	movw	r18, r24
 82c:	22 0f       	add	r18, r18
 82e:	33 1f       	adc	r19, r19
 830:	22 0f       	add	r18, r18
 832:	33 1f       	adc	r19, r19
 834:	22 0f       	add	r18, r18
 836:	33 1f       	adc	r19, r19
 838:	82 0f       	add	r24, r18
 83a:	93 1f       	adc	r25, r19
 83c:	b6 01       	movw	r22, r12
 83e:	89 5c       	subi	r24, 0xC9	; 201
 840:	98 4f       	sbci	r25, 0xF8	; 248
 842:	79 dc       	rcall	.-1806   	; 0x136 <vListInsertEnd>
 844:	0f 90       	pop	r0
 846:	0f be       	out	0x3f, r0	; 63
 848:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <xSchedulerRunning>
 84c:	88 23       	and	r24, r24
 84e:	51 f0       	breq	.+20     	; 0x864 <xTaskGenericCreate+0x1b2>
 850:	e0 91 5b 07 	lds	r30, 0x075B	; 0x80075b <pxCurrentTCB>
 854:	f0 91 5c 07 	lds	r31, 0x075C	; 0x80075c <pxCurrentTCB+0x1>
 858:	86 89       	ldd	r24, Z+22	; 0x16
 85a:	80 17       	cp	r24, r16
 85c:	28 f4       	brcc	.+10     	; 0x868 <xTaskGenericCreate+0x1b6>
 85e:	41 de       	rcall	.-894    	; 0x4e2 <vPortYield>
 860:	81 e0       	ldi	r24, 0x01	; 1
 862:	09 c0       	rjmp	.+18     	; 0x876 <xTaskGenericCreate+0x1c4>
 864:	81 e0       	ldi	r24, 0x01	; 1
 866:	07 c0       	rjmp	.+14     	; 0x876 <xTaskGenericCreate+0x1c4>
 868:	81 e0       	ldi	r24, 0x01	; 1
 86a:	05 c0       	rjmp	.+10     	; 0x876 <xTaskGenericCreate+0x1c4>
 86c:	d8 8e       	std	Y+24, r13	; 0x18
 86e:	cf 8a       	std	Y+23, r12	; 0x17
 870:	c6 01       	movw	r24, r12
 872:	47 cf       	rjmp	.-370    	; 0x702 <xTaskGenericCreate+0x50>
 874:	8f ef       	ldi	r24, 0xFF	; 255
 876:	df 91       	pop	r29
 878:	cf 91       	pop	r28
 87a:	1f 91       	pop	r17
 87c:	0f 91       	pop	r16
 87e:	ff 90       	pop	r15
 880:	ef 90       	pop	r14
 882:	df 90       	pop	r13
 884:	cf 90       	pop	r12
 886:	bf 90       	pop	r11
 888:	af 90       	pop	r10
 88a:	9f 90       	pop	r9
 88c:	8f 90       	pop	r8
 88e:	7f 90       	pop	r7
 890:	6f 90       	pop	r6
 892:	5f 90       	pop	r5
 894:	4f 90       	pop	r4
 896:	08 95       	ret

00000898 <vTaskStartScheduler>:
 898:	af 92       	push	r10
 89a:	bf 92       	push	r11
 89c:	cf 92       	push	r12
 89e:	df 92       	push	r13
 8a0:	ef 92       	push	r14
 8a2:	ff 92       	push	r15
 8a4:	0f 93       	push	r16
 8a6:	a1 2c       	mov	r10, r1
 8a8:	b1 2c       	mov	r11, r1
 8aa:	c1 2c       	mov	r12, r1
 8ac:	d1 2c       	mov	r13, r1
 8ae:	e1 2c       	mov	r14, r1
 8b0:	f1 2c       	mov	r15, r1
 8b2:	00 e0       	ldi	r16, 0x00	; 0
 8b4:	20 e0       	ldi	r18, 0x00	; 0
 8b6:	30 e0       	ldi	r19, 0x00	; 0
 8b8:	45 e5       	ldi	r20, 0x55	; 85
 8ba:	50 e0       	ldi	r21, 0x00	; 0
 8bc:	6d e1       	ldi	r22, 0x1D	; 29
 8be:	71 e0       	ldi	r23, 0x01	; 1
 8c0:	88 ed       	ldi	r24, 0xD8	; 216
 8c2:	95 e0       	ldi	r25, 0x05	; 5
 8c4:	f6 de       	rcall	.-532    	; 0x6b2 <xTaskGenericCreate>
 8c6:	81 30       	cpi	r24, 0x01	; 1
 8c8:	41 f4       	brne	.+16     	; 0x8da <vTaskStartScheduler+0x42>
 8ca:	f8 94       	cli
 8cc:	80 93 08 07 	sts	0x0708, r24	; 0x800708 <xSchedulerRunning>
 8d0:	10 92 0c 07 	sts	0x070C, r1	; 0x80070c <xTickCount+0x1>
 8d4:	10 92 0b 07 	sts	0x070B, r1	; 0x80070b <xTickCount>
 8d8:	ca dd       	rcall	.-1132   	; 0x46e <xPortStartScheduler>
 8da:	0f 91       	pop	r16
 8dc:	ff 90       	pop	r15
 8de:	ef 90       	pop	r14
 8e0:	df 90       	pop	r13
 8e2:	cf 90       	pop	r12
 8e4:	bf 90       	pop	r11
 8e6:	af 90       	pop	r10
 8e8:	08 95       	ret

000008ea <vTaskSuspendAll>:
 8ea:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <uxSchedulerSuspended>
 8ee:	8f 5f       	subi	r24, 0xFF	; 255
 8f0:	80 93 07 07 	sts	0x0707, r24	; 0x800707 <uxSchedulerSuspended>
 8f4:	08 95       	ret

000008f6 <vTaskIncrementTick>:
 8f6:	0f 93       	push	r16
 8f8:	1f 93       	push	r17
 8fa:	cf 93       	push	r28
 8fc:	df 93       	push	r29
 8fe:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <uxSchedulerSuspended>
 902:	81 11       	cpse	r24, r1
 904:	af c0       	rjmp	.+350    	; 0xa64 <vTaskIncrementTick+0x16e>
 906:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <xTickCount>
 90a:	90 91 0c 07 	lds	r25, 0x070C	; 0x80070c <xTickCount+0x1>
 90e:	01 96       	adiw	r24, 0x01	; 1
 910:	90 93 0c 07 	sts	0x070C, r25	; 0x80070c <xTickCount+0x1>
 914:	80 93 0b 07 	sts	0x070B, r24	; 0x80070b <xTickCount>
 918:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <xTickCount>
 91c:	90 91 0c 07 	lds	r25, 0x070C	; 0x80070c <xTickCount+0x1>
 920:	89 2b       	or	r24, r25
 922:	99 f5       	brne	.+102    	; 0x98a <vTaskIncrementTick+0x94>
 924:	80 91 23 07 	lds	r24, 0x0723	; 0x800723 <pxDelayedTaskList>
 928:	90 91 24 07 	lds	r25, 0x0724	; 0x800724 <pxDelayedTaskList+0x1>
 92c:	20 91 21 07 	lds	r18, 0x0721	; 0x800721 <pxOverflowDelayedTaskList>
 930:	30 91 22 07 	lds	r19, 0x0722	; 0x800722 <pxOverflowDelayedTaskList+0x1>
 934:	30 93 24 07 	sts	0x0724, r19	; 0x800724 <pxDelayedTaskList+0x1>
 938:	20 93 23 07 	sts	0x0723, r18	; 0x800723 <pxDelayedTaskList>
 93c:	90 93 22 07 	sts	0x0722, r25	; 0x800722 <pxOverflowDelayedTaskList+0x1>
 940:	80 93 21 07 	sts	0x0721, r24	; 0x800721 <pxOverflowDelayedTaskList>
 944:	80 91 04 07 	lds	r24, 0x0704	; 0x800704 <xNumOfOverflows>
 948:	8f 5f       	subi	r24, 0xFF	; 255
 94a:	80 93 04 07 	sts	0x0704, r24	; 0x800704 <xNumOfOverflows>
 94e:	e0 91 23 07 	lds	r30, 0x0723	; 0x800723 <pxDelayedTaskList>
 952:	f0 91 24 07 	lds	r31, 0x0724	; 0x800724 <pxDelayedTaskList+0x1>
 956:	80 81       	ld	r24, Z
 958:	81 11       	cpse	r24, r1
 95a:	07 c0       	rjmp	.+14     	; 0x96a <vTaskIncrementTick+0x74>
 95c:	8f ef       	ldi	r24, 0xFF	; 255
 95e:	9f ef       	ldi	r25, 0xFF	; 255
 960:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 964:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 968:	10 c0       	rjmp	.+32     	; 0x98a <vTaskIncrementTick+0x94>
 96a:	e0 91 23 07 	lds	r30, 0x0723	; 0x800723 <pxDelayedTaskList>
 96e:	f0 91 24 07 	lds	r31, 0x0724	; 0x800724 <pxDelayedTaskList+0x1>
 972:	05 80       	ldd	r0, Z+5	; 0x05
 974:	f6 81       	ldd	r31, Z+6	; 0x06
 976:	e0 2d       	mov	r30, r0
 978:	06 80       	ldd	r0, Z+6	; 0x06
 97a:	f7 81       	ldd	r31, Z+7	; 0x07
 97c:	e0 2d       	mov	r30, r0
 97e:	82 81       	ldd	r24, Z+2	; 0x02
 980:	93 81       	ldd	r25, Z+3	; 0x03
 982:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 986:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 98a:	20 91 0b 07 	lds	r18, 0x070B	; 0x80070b <xTickCount>
 98e:	30 91 0c 07 	lds	r19, 0x070C	; 0x80070c <xTickCount+0x1>
 992:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 996:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 99a:	28 17       	cp	r18, r24
 99c:	39 07       	cpc	r19, r25
 99e:	08 f4       	brcc	.+2      	; 0x9a2 <vTaskIncrementTick+0xac>
 9a0:	66 c0       	rjmp	.+204    	; 0xa6e <vTaskIncrementTick+0x178>
 9a2:	e0 91 23 07 	lds	r30, 0x0723	; 0x800723 <pxDelayedTaskList>
 9a6:	f0 91 24 07 	lds	r31, 0x0724	; 0x800724 <pxDelayedTaskList+0x1>
 9aa:	80 81       	ld	r24, Z
 9ac:	88 23       	and	r24, r24
 9ae:	99 f0       	breq	.+38     	; 0x9d6 <vTaskIncrementTick+0xe0>
 9b0:	e0 91 23 07 	lds	r30, 0x0723	; 0x800723 <pxDelayedTaskList>
 9b4:	f0 91 24 07 	lds	r31, 0x0724	; 0x800724 <pxDelayedTaskList+0x1>
 9b8:	05 80       	ldd	r0, Z+5	; 0x05
 9ba:	f6 81       	ldd	r31, Z+6	; 0x06
 9bc:	e0 2d       	mov	r30, r0
 9be:	c6 81       	ldd	r28, Z+6	; 0x06
 9c0:	d7 81       	ldd	r29, Z+7	; 0x07
 9c2:	8a 81       	ldd	r24, Y+2	; 0x02
 9c4:	9b 81       	ldd	r25, Y+3	; 0x03
 9c6:	20 91 0b 07 	lds	r18, 0x070B	; 0x80070b <xTickCount>
 9ca:	30 91 0c 07 	lds	r19, 0x070C	; 0x80070c <xTickCount+0x1>
 9ce:	28 17       	cp	r18, r24
 9d0:	39 07       	cpc	r19, r25
 9d2:	f8 f4       	brcc	.+62     	; 0xa12 <vTaskIncrementTick+0x11c>
 9d4:	19 c0       	rjmp	.+50     	; 0xa08 <vTaskIncrementTick+0x112>
 9d6:	8f ef       	ldi	r24, 0xFF	; 255
 9d8:	9f ef       	ldi	r25, 0xFF	; 255
 9da:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 9de:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 9e2:	45 c0       	rjmp	.+138    	; 0xa6e <vTaskIncrementTick+0x178>
 9e4:	e0 91 23 07 	lds	r30, 0x0723	; 0x800723 <pxDelayedTaskList>
 9e8:	f0 91 24 07 	lds	r31, 0x0724	; 0x800724 <pxDelayedTaskList+0x1>
 9ec:	05 80       	ldd	r0, Z+5	; 0x05
 9ee:	f6 81       	ldd	r31, Z+6	; 0x06
 9f0:	e0 2d       	mov	r30, r0
 9f2:	c6 81       	ldd	r28, Z+6	; 0x06
 9f4:	d7 81       	ldd	r29, Z+7	; 0x07
 9f6:	8a 81       	ldd	r24, Y+2	; 0x02
 9f8:	9b 81       	ldd	r25, Y+3	; 0x03
 9fa:	20 91 0b 07 	lds	r18, 0x070B	; 0x80070b <xTickCount>
 9fe:	30 91 0c 07 	lds	r19, 0x070C	; 0x80070c <xTickCount+0x1>
 a02:	28 17       	cp	r18, r24
 a04:	39 07       	cpc	r19, r25
 a06:	28 f4       	brcc	.+10     	; 0xa12 <vTaskIncrementTick+0x11c>
 a08:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 a0c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 a10:	2e c0       	rjmp	.+92     	; 0xa6e <vTaskIncrementTick+0x178>
 a12:	8e 01       	movw	r16, r28
 a14:	0e 5f       	subi	r16, 0xFE	; 254
 a16:	1f 4f       	sbci	r17, 0xFF	; 255
 a18:	c8 01       	movw	r24, r16
 a1a:	ef db       	rcall	.-2082   	; 0x1fa <vListRemove>
 a1c:	8c 89       	ldd	r24, Y+20	; 0x14
 a1e:	9d 89       	ldd	r25, Y+21	; 0x15
 a20:	89 2b       	or	r24, r25
 a22:	19 f0       	breq	.+6      	; 0xa2a <vTaskIncrementTick+0x134>
 a24:	ce 01       	movw	r24, r28
 a26:	0c 96       	adiw	r24, 0x0c	; 12
 a28:	e8 db       	rcall	.-2096   	; 0x1fa <vListRemove>
 a2a:	8e 89       	ldd	r24, Y+22	; 0x16
 a2c:	90 91 09 07 	lds	r25, 0x0709	; 0x800709 <uxTopReadyPriority>
 a30:	98 17       	cp	r25, r24
 a32:	10 f4       	brcc	.+4      	; 0xa38 <vTaskIncrementTick+0x142>
 a34:	80 93 09 07 	sts	0x0709, r24	; 0x800709 <uxTopReadyPriority>
 a38:	90 e0       	ldi	r25, 0x00	; 0
 a3a:	9c 01       	movw	r18, r24
 a3c:	22 0f       	add	r18, r18
 a3e:	33 1f       	adc	r19, r19
 a40:	22 0f       	add	r18, r18
 a42:	33 1f       	adc	r19, r19
 a44:	22 0f       	add	r18, r18
 a46:	33 1f       	adc	r19, r19
 a48:	82 0f       	add	r24, r18
 a4a:	93 1f       	adc	r25, r19
 a4c:	b8 01       	movw	r22, r16
 a4e:	89 5c       	subi	r24, 0xC9	; 201
 a50:	98 4f       	sbci	r25, 0xF8	; 248
 a52:	71 db       	rcall	.-2334   	; 0x136 <vListInsertEnd>
 a54:	e0 91 23 07 	lds	r30, 0x0723	; 0x800723 <pxDelayedTaskList>
 a58:	f0 91 24 07 	lds	r31, 0x0724	; 0x800724 <pxDelayedTaskList+0x1>
 a5c:	80 81       	ld	r24, Z
 a5e:	81 11       	cpse	r24, r1
 a60:	c1 cf       	rjmp	.-126    	; 0x9e4 <vTaskIncrementTick+0xee>
 a62:	b9 cf       	rjmp	.-142    	; 0x9d6 <vTaskIncrementTick+0xe0>
 a64:	80 91 06 07 	lds	r24, 0x0706	; 0x800706 <uxMissedTicks>
 a68:	8f 5f       	subi	r24, 0xFF	; 255
 a6a:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <uxMissedTicks>
 a6e:	df 91       	pop	r29
 a70:	cf 91       	pop	r28
 a72:	1f 91       	pop	r17
 a74:	0f 91       	pop	r16
 a76:	08 95       	ret

00000a78 <xTaskResumeAll>:
 a78:	cf 92       	push	r12
 a7a:	df 92       	push	r13
 a7c:	ef 92       	push	r14
 a7e:	ff 92       	push	r15
 a80:	0f 93       	push	r16
 a82:	1f 93       	push	r17
 a84:	cf 93       	push	r28
 a86:	df 93       	push	r29
 a88:	0f b6       	in	r0, 0x3f	; 63
 a8a:	f8 94       	cli
 a8c:	0f 92       	push	r0
 a8e:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <uxSchedulerSuspended>
 a92:	81 50       	subi	r24, 0x01	; 1
 a94:	80 93 07 07 	sts	0x0707, r24	; 0x800707 <uxSchedulerSuspended>
 a98:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <uxSchedulerSuspended>
 a9c:	81 11       	cpse	r24, r1
 a9e:	5f c0       	rjmp	.+190    	; 0xb5e <xTaskResumeAll+0xe6>
 aa0:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <uxCurrentNumberOfTasks>
 aa4:	81 11       	cpse	r24, r1
 aa6:	2f c0       	rjmp	.+94     	; 0xb06 <xTaskResumeAll+0x8e>
 aa8:	5d c0       	rjmp	.+186    	; 0xb64 <xTaskResumeAll+0xec>
 aaa:	d7 01       	movw	r26, r14
 aac:	15 96       	adiw	r26, 0x05	; 5
 aae:	ed 91       	ld	r30, X+
 ab0:	fc 91       	ld	r31, X
 ab2:	16 97       	sbiw	r26, 0x06	; 6
 ab4:	c6 81       	ldd	r28, Z+6	; 0x06
 ab6:	d7 81       	ldd	r29, Z+7	; 0x07
 ab8:	ce 01       	movw	r24, r28
 aba:	0c 96       	adiw	r24, 0x0c	; 12
 abc:	9e db       	rcall	.-2244   	; 0x1fa <vListRemove>
 abe:	8e 01       	movw	r16, r28
 ac0:	0e 5f       	subi	r16, 0xFE	; 254
 ac2:	1f 4f       	sbci	r17, 0xFF	; 255
 ac4:	c8 01       	movw	r24, r16
 ac6:	99 db       	rcall	.-2254   	; 0x1fa <vListRemove>
 ac8:	8e 89       	ldd	r24, Y+22	; 0x16
 aca:	90 91 09 07 	lds	r25, 0x0709	; 0x800709 <uxTopReadyPriority>
 ace:	98 17       	cp	r25, r24
 ad0:	10 f4       	brcc	.+4      	; 0xad6 <xTaskResumeAll+0x5e>
 ad2:	80 93 09 07 	sts	0x0709, r24	; 0x800709 <uxTopReadyPriority>
 ad6:	90 e0       	ldi	r25, 0x00	; 0
 ad8:	9c 01       	movw	r18, r24
 ada:	22 0f       	add	r18, r18
 adc:	33 1f       	adc	r19, r19
 ade:	22 0f       	add	r18, r18
 ae0:	33 1f       	adc	r19, r19
 ae2:	22 0f       	add	r18, r18
 ae4:	33 1f       	adc	r19, r19
 ae6:	82 0f       	add	r24, r18
 ae8:	93 1f       	adc	r25, r19
 aea:	b8 01       	movw	r22, r16
 aec:	89 5c       	subi	r24, 0xC9	; 201
 aee:	98 4f       	sbci	r25, 0xF8	; 248
 af0:	22 db       	rcall	.-2492   	; 0x136 <vListInsertEnd>
 af2:	e0 91 5b 07 	lds	r30, 0x075B	; 0x80075b <pxCurrentTCB>
 af6:	f0 91 5c 07 	lds	r31, 0x075C	; 0x80075c <pxCurrentTCB+0x1>
 afa:	9e 89       	ldd	r25, Y+22	; 0x16
 afc:	86 89       	ldd	r24, Z+22	; 0x16
 afe:	98 17       	cp	r25, r24
 b00:	58 f0       	brcs	.+22     	; 0xb18 <xTaskResumeAll+0xa0>
 b02:	dc 2c       	mov	r13, r12
 b04:	09 c0       	rjmp	.+18     	; 0xb18 <xTaskResumeAll+0xa0>
 b06:	d1 2c       	mov	r13, r1
 b08:	0f 2e       	mov	r0, r31
 b0a:	f8 e1       	ldi	r31, 0x18	; 24
 b0c:	ef 2e       	mov	r14, r31
 b0e:	f7 e0       	ldi	r31, 0x07	; 7
 b10:	ff 2e       	mov	r15, r31
 b12:	f0 2d       	mov	r31, r0
 b14:	cc 24       	eor	r12, r12
 b16:	c3 94       	inc	r12
 b18:	f7 01       	movw	r30, r14
 b1a:	80 81       	ld	r24, Z
 b1c:	81 11       	cpse	r24, r1
 b1e:	c5 cf       	rjmp	.-118    	; 0xaaa <xTaskResumeAll+0x32>
 b20:	80 91 06 07 	lds	r24, 0x0706	; 0x800706 <uxMissedTicks>
 b24:	88 23       	and	r24, r24
 b26:	79 f0       	breq	.+30     	; 0xb46 <xTaskResumeAll+0xce>
 b28:	80 91 06 07 	lds	r24, 0x0706	; 0x800706 <uxMissedTicks>
 b2c:	88 23       	and	r24, r24
 b2e:	91 f0       	breq	.+36     	; 0xb54 <xTaskResumeAll+0xdc>
 b30:	e2 de       	rcall	.-572    	; 0x8f6 <vTaskIncrementTick>
 b32:	80 91 06 07 	lds	r24, 0x0706	; 0x800706 <uxMissedTicks>
 b36:	81 50       	subi	r24, 0x01	; 1
 b38:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <uxMissedTicks>
 b3c:	80 91 06 07 	lds	r24, 0x0706	; 0x800706 <uxMissedTicks>
 b40:	81 11       	cpse	r24, r1
 b42:	f6 cf       	rjmp	.-20     	; 0xb30 <xTaskResumeAll+0xb8>
 b44:	07 c0       	rjmp	.+14     	; 0xb54 <xTaskResumeAll+0xdc>
 b46:	f1 e0       	ldi	r31, 0x01	; 1
 b48:	df 16       	cp	r13, r31
 b4a:	21 f0       	breq	.+8      	; 0xb54 <xTaskResumeAll+0xdc>
 b4c:	80 91 05 07 	lds	r24, 0x0705	; 0x800705 <xMissedYield>
 b50:	81 30       	cpi	r24, 0x01	; 1
 b52:	39 f4       	brne	.+14     	; 0xb62 <xTaskResumeAll+0xea>
 b54:	10 92 05 07 	sts	0x0705, r1	; 0x800705 <xMissedYield>
 b58:	c4 dc       	rcall	.-1656   	; 0x4e2 <vPortYield>
 b5a:	81 e0       	ldi	r24, 0x01	; 1
 b5c:	03 c0       	rjmp	.+6      	; 0xb64 <xTaskResumeAll+0xec>
 b5e:	80 e0       	ldi	r24, 0x00	; 0
 b60:	01 c0       	rjmp	.+2      	; 0xb64 <xTaskResumeAll+0xec>
 b62:	80 e0       	ldi	r24, 0x00	; 0
 b64:	0f 90       	pop	r0
 b66:	0f be       	out	0x3f, r0	; 63
 b68:	df 91       	pop	r29
 b6a:	cf 91       	pop	r28
 b6c:	1f 91       	pop	r17
 b6e:	0f 91       	pop	r16
 b70:	ff 90       	pop	r15
 b72:	ef 90       	pop	r14
 b74:	df 90       	pop	r13
 b76:	cf 90       	pop	r12
 b78:	08 95       	ret

00000b7a <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
 b7a:	cf 93       	push	r28
 b7c:	df 93       	push	r29
 b7e:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
 b80:	89 2b       	or	r24, r25
 b82:	91 f0       	breq	.+36     	; 0xba8 <vTaskDelay+0x2e>
		{
			vTaskSuspendAll();
 b84:	b2 de       	rcall	.-668    	; 0x8ea <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 b86:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <xTickCount>
 b8a:	90 91 0c 07 	lds	r25, 0x070C	; 0x80070c <xTickCount+0x1>
 b8e:	c8 0f       	add	r28, r24
 b90:	d9 1f       	adc	r29, r25

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 b92:	80 91 5b 07 	lds	r24, 0x075B	; 0x80075b <pxCurrentTCB>
 b96:	90 91 5c 07 	lds	r25, 0x075C	; 0x80075c <pxCurrentTCB+0x1>
 b9a:	02 96       	adiw	r24, 0x02	; 2
 b9c:	2e db       	rcall	.-2468   	; 0x1fa <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 b9e:	ce 01       	movw	r24, r28
 ba0:	53 dd       	rcall	.-1370   	; 0x648 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 ba2:	6a df       	rcall	.-300    	; 0xa78 <xTaskResumeAll>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 ba4:	81 11       	cpse	r24, r1
 ba6:	01 c0       	rjmp	.+2      	; 0xbaa <vTaskDelay+0x30>
		{
			portYIELD_WITHIN_API();
 ba8:	9c dc       	rcall	.-1736   	; 0x4e2 <vPortYield>
 baa:	df 91       	pop	r29
		}
	}
 bac:	cf 91       	pop	r28
 bae:	08 95       	ret

00000bb0 <prvIdleTask>:
 bb0:	0f 2e       	mov	r0, r31
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 bb2:	ff e0       	ldi	r31, 0x0F	; 15
 bb4:	ef 2e       	mov	r14, r31
 bb6:	f7 e0       	ldi	r31, 0x07	; 7
 bb8:	ff 2e       	mov	r15, r31
 bba:	f0 2d       	mov	r31, r0

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 bbc:	c7 e3       	ldi	r28, 0x37	; 55
 bbe:	d7 e0       	ldi	r29, 0x07	; 7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 bc0:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <uxTasksDeleted>
 bc4:	88 23       	and	r24, r24
 bc6:	29 f1       	breq	.+74     	; 0xc12 <prvIdleTask+0x62>
		{
			vTaskSuspendAll();
 bc8:	90 de       	rcall	.-736    	; 0x8ea <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 bca:	d7 01       	movw	r26, r14
			xTaskResumeAll();
 bcc:	1c 91       	ld	r17, X
 bce:	54 df       	rcall	.-344    	; 0xa78 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 bd0:	11 23       	and	r17, r17
 bd2:	f9 f0       	breq	.+62     	; 0xc12 <prvIdleTask+0x62>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 bd4:	0f b6       	in	r0, 0x3f	; 63
 bd6:	f8 94       	cli
 bd8:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 bda:	d7 01       	movw	r26, r14
 bdc:	15 96       	adiw	r26, 0x05	; 5
 bde:	ed 91       	ld	r30, X+
 be0:	fc 91       	ld	r31, X
 be2:	16 97       	sbiw	r26, 0x06	; 6
 be4:	06 81       	ldd	r16, Z+6	; 0x06
 be6:	17 81       	ldd	r17, Z+7	; 0x07
					vListRemove( &( pxTCB->xGenericListItem ) );
 be8:	c8 01       	movw	r24, r16
 bea:	02 96       	adiw	r24, 0x02	; 2
 bec:	06 db       	rcall	.-2548   	; 0x1fa <vListRemove>
					--uxCurrentNumberOfTasks;
 bee:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <uxCurrentNumberOfTasks>
 bf2:	81 50       	subi	r24, 0x01	; 1
 bf4:	80 93 0d 07 	sts	0x070D, r24	; 0x80070d <uxCurrentNumberOfTasks>
					--uxTasksDeleted;
 bf8:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <uxTasksDeleted>
 bfc:	81 50       	subi	r24, 0x01	; 1
 bfe:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <uxTasksDeleted>
				}
				taskEXIT_CRITICAL();
 c02:	0f 90       	pop	r0
 c04:	0f be       	out	0x3f, r0	; 63
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 c06:	f8 01       	movw	r30, r16
 c08:	87 89       	ldd	r24, Z+23	; 0x17
 c0a:	90 8d       	ldd	r25, Z+24	; 0x18
		vPortFree( pxTCB );
 c0c:	81 da       	rcall	.-2814   	; 0x110 <vPortFree>
 c0e:	c8 01       	movw	r24, r16

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 c10:	7f da       	rcall	.-2818   	; 0x110 <vPortFree>
 c12:	88 81       	ld	r24, Y
 c14:	82 30       	cpi	r24, 0x02	; 2
			{
				taskYIELD();
 c16:	a0 f2       	brcs	.-88     	; 0xbc0 <prvIdleTask+0x10>
 c18:	64 dc       	rcall	.-1848   	; 0x4e2 <vPortYield>
 c1a:	d2 cf       	rjmp	.-92     	; 0xbc0 <prvIdleTask+0x10>

00000c1c <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 c1c:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <uxSchedulerSuspended>
 c20:	81 11       	cpse	r24, r1
 c22:	13 c0       	rjmp	.+38     	; 0xc4a <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 c24:	80 91 09 07 	lds	r24, 0x0709	; 0x800709 <uxTopReadyPriority>
 c28:	90 e0       	ldi	r25, 0x00	; 0
 c2a:	fc 01       	movw	r30, r24
 c2c:	ee 0f       	add	r30, r30
 c2e:	ff 1f       	adc	r31, r31
 c30:	ee 0f       	add	r30, r30
 c32:	ff 1f       	adc	r31, r31
 c34:	ee 0f       	add	r30, r30
 c36:	ff 1f       	adc	r31, r31
 c38:	8e 0f       	add	r24, r30
 c3a:	9f 1f       	adc	r25, r31
 c3c:	fc 01       	movw	r30, r24
 c3e:	e9 5c       	subi	r30, 0xC9	; 201
 c40:	f8 4f       	sbci	r31, 0xF8	; 248
 c42:	80 81       	ld	r24, Z
 c44:	88 23       	and	r24, r24
 c46:	29 f0       	breq	.+10     	; 0xc52 <vTaskSwitchContext+0x36>
 c48:	1b c0       	rjmp	.+54     	; 0xc80 <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 c4a:	81 e0       	ldi	r24, 0x01	; 1
 c4c:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <xMissedYield>
 c50:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
 c52:	80 91 09 07 	lds	r24, 0x0709	; 0x800709 <uxTopReadyPriority>
 c56:	81 50       	subi	r24, 0x01	; 1
 c58:	80 93 09 07 	sts	0x0709, r24	; 0x800709 <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 c5c:	80 91 09 07 	lds	r24, 0x0709	; 0x800709 <uxTopReadyPriority>
 c60:	90 e0       	ldi	r25, 0x00	; 0
 c62:	fc 01       	movw	r30, r24
 c64:	ee 0f       	add	r30, r30
 c66:	ff 1f       	adc	r31, r31
 c68:	ee 0f       	add	r30, r30
 c6a:	ff 1f       	adc	r31, r31
 c6c:	ee 0f       	add	r30, r30
 c6e:	ff 1f       	adc	r31, r31
 c70:	8e 0f       	add	r24, r30
 c72:	9f 1f       	adc	r25, r31
 c74:	fc 01       	movw	r30, r24
 c76:	e9 5c       	subi	r30, 0xC9	; 201
 c78:	f8 4f       	sbci	r31, 0xF8	; 248
 c7a:	80 81       	ld	r24, Z
 c7c:	88 23       	and	r24, r24
 c7e:	49 f3       	breq	.-46     	; 0xc52 <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 c80:	80 91 09 07 	lds	r24, 0x0709	; 0x800709 <uxTopReadyPriority>
 c84:	90 e0       	ldi	r25, 0x00	; 0
 c86:	9c 01       	movw	r18, r24
 c88:	22 0f       	add	r18, r18
 c8a:	33 1f       	adc	r19, r19
 c8c:	22 0f       	add	r18, r18
 c8e:	33 1f       	adc	r19, r19
 c90:	22 0f       	add	r18, r18
 c92:	33 1f       	adc	r19, r19
 c94:	28 0f       	add	r18, r24
 c96:	39 1f       	adc	r19, r25
 c98:	d9 01       	movw	r26, r18
 c9a:	a9 5c       	subi	r26, 0xC9	; 201
 c9c:	b8 4f       	sbci	r27, 0xF8	; 248
 c9e:	11 96       	adiw	r26, 0x01	; 1
 ca0:	ed 91       	ld	r30, X+
 ca2:	fc 91       	ld	r31, X
 ca4:	12 97       	sbiw	r26, 0x02	; 2
 ca6:	02 80       	ldd	r0, Z+2	; 0x02
 ca8:	f3 81       	ldd	r31, Z+3	; 0x03
 caa:	e0 2d       	mov	r30, r0
 cac:	12 96       	adiw	r26, 0x02	; 2
 cae:	fc 93       	st	X, r31
 cb0:	ee 93       	st	-X, r30
 cb2:	11 97       	sbiw	r26, 0x01	; 1
 cb4:	26 5c       	subi	r18, 0xC6	; 198
 cb6:	38 4f       	sbci	r19, 0xF8	; 248
 cb8:	e2 17       	cp	r30, r18
 cba:	f3 07       	cpc	r31, r19
 cbc:	29 f4       	brne	.+10     	; 0xcc8 <vTaskSwitchContext+0xac>
 cbe:	22 81       	ldd	r18, Z+2	; 0x02
 cc0:	33 81       	ldd	r19, Z+3	; 0x03
 cc2:	fd 01       	movw	r30, r26
 cc4:	32 83       	std	Z+2, r19	; 0x02
 cc6:	21 83       	std	Z+1, r18	; 0x01
 cc8:	fc 01       	movw	r30, r24
 cca:	ee 0f       	add	r30, r30
 ccc:	ff 1f       	adc	r31, r31
 cce:	ee 0f       	add	r30, r30
 cd0:	ff 1f       	adc	r31, r31
 cd2:	ee 0f       	add	r30, r30
 cd4:	ff 1f       	adc	r31, r31
 cd6:	8e 0f       	add	r24, r30
 cd8:	9f 1f       	adc	r25, r31
 cda:	fc 01       	movw	r30, r24
 cdc:	e9 5c       	subi	r30, 0xC9	; 201
 cde:	f8 4f       	sbci	r31, 0xF8	; 248
 ce0:	01 80       	ldd	r0, Z+1	; 0x01
 ce2:	f2 81       	ldd	r31, Z+2	; 0x02
 ce4:	e0 2d       	mov	r30, r0
 ce6:	86 81       	ldd	r24, Z+6	; 0x06
 ce8:	97 81       	ldd	r25, Z+7	; 0x07
 cea:	90 93 5c 07 	sts	0x075C, r25	; 0x80075c <pxCurrentTCB+0x1>
 cee:	80 93 5b 07 	sts	0x075B, r24	; 0x80075b <pxCurrentTCB>
 cf2:	08 95       	ret

00000cf4 <memset>:
 cf4:	dc 01       	movw	r26, r24
 cf6:	01 c0       	rjmp	.+2      	; 0xcfa <memset+0x6>
 cf8:	6d 93       	st	X+, r22
 cfa:	41 50       	subi	r20, 0x01	; 1
 cfc:	50 40       	sbci	r21, 0x00	; 0
 cfe:	e0 f7       	brcc	.-8      	; 0xcf8 <memset+0x4>
 d00:	08 95       	ret

00000d02 <strncpy>:
 d02:	fb 01       	movw	r30, r22
 d04:	dc 01       	movw	r26, r24
 d06:	41 50       	subi	r20, 0x01	; 1
 d08:	50 40       	sbci	r21, 0x00	; 0
 d0a:	48 f0       	brcs	.+18     	; 0xd1e <strncpy+0x1c>
 d0c:	01 90       	ld	r0, Z+
 d0e:	0d 92       	st	X+, r0
 d10:	00 20       	and	r0, r0
 d12:	c9 f7       	brne	.-14     	; 0xd06 <strncpy+0x4>
 d14:	01 c0       	rjmp	.+2      	; 0xd18 <strncpy+0x16>
 d16:	1d 92       	st	X+, r1
 d18:	41 50       	subi	r20, 0x01	; 1
 d1a:	50 40       	sbci	r21, 0x00	; 0
 d1c:	e0 f7       	brcc	.-8      	; 0xd16 <strncpy+0x14>
 d1e:	08 95       	ret

00000d20 <_exit>:
 d20:	f8 94       	cli

00000d22 <__stop_program>:
 d22:	ff cf       	rjmp	.-2      	; 0xd22 <__stop_program>
