
DC Motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  00000db8  00000e4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000db8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000063d  00800134  00800134  00000e80  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e80  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000eb0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000208  00000000  00000000  00000ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000024e9  00000000  00000000  000010f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f0f  00000000  00000000  000035e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000153a  00000000  00000000  000044f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000530  00000000  00000000  00005a2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000dbc  00000000  00000000  00005f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001341  00000000  00000000  00006d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000200  00000000  00000000  00008059  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	51 c3       	rjmp	.+1698   	; 0x6d8 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 eb       	ldi	r30, 0xB8	; 184
  a0:	fd e0       	ldi	r31, 0x0D	; 13
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 33       	cpi	r26, 0x34	; 52
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	27 e0       	ldi	r18, 0x07	; 7
  b4:	a4 e3       	ldi	r26, 0x34	; 52
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 37       	cpi	r26, 0x71	; 113
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	a2 d1       	rcall	.+836    	; 0x408 <main>
  c4:	77 c6       	rjmp	.+3310   	; 0xdb4 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
  ce:	57 d4       	rcall	.+2222   	; 0x97e <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
  d0:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <__data_end>
  d4:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <__data_end+0x1>
  d8:	c9 01       	movw	r24, r18
  da:	8c 0f       	add	r24, r28
  dc:	9d 1f       	adc	r25, r29
  de:	8c 3d       	cpi	r24, 0xDC	; 220
  e0:	45 e0       	ldi	r20, 0x05	; 5
  e2:	94 07       	cpc	r25, r20
  e4:	58 f4       	brcc	.+22     	; 0xfc <pvPortMalloc+0x34>
  e6:	28 17       	cp	r18, r24
  e8:	39 07       	cpc	r19, r25
  ea:	58 f4       	brcc	.+22     	; 0x102 <pvPortMalloc+0x3a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
  ec:	e9 01       	movw	r28, r18
  ee:	ca 5c       	subi	r28, 0xCA	; 202
  f0:	de 4f       	sbci	r29, 0xFE	; 254
			xNextFreeByte += xWantedSize;			
  f2:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <__data_end+0x1>
  f6:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__data_end>
  fa:	05 c0       	rjmp	.+10     	; 0x106 <pvPortMalloc+0x3e>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
  fc:	c0 e0       	ldi	r28, 0x00	; 0
  fe:	d0 e0       	ldi	r29, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <pvPortMalloc+0x3e>
 102:	c0 e0       	ldi	r28, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
 104:	d0 e0       	ldi	r29, 0x00	; 0
 106:	02 d5       	rcall	.+2564   	; 0xb0c <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
 108:	ce 01       	movw	r24, r28
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 110:	08 95       	ret

00000112 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
 112:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 114:	03 96       	adiw	r24, 0x03	; 3
 116:	92 83       	std	Z+2, r25	; 0x02
 118:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 11a:	2f ef       	ldi	r18, 0xFF	; 255
 11c:	3f ef       	ldi	r19, 0xFF	; 255
 11e:	34 83       	std	Z+4, r19	; 0x04
 120:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 122:	96 83       	std	Z+6, r25	; 0x06
 124:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 126:	90 87       	std	Z+8, r25	; 0x08
 128:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 12a:	10 82       	st	Z, r1
 12c:	08 95       	ret

0000012e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 12e:	fc 01       	movw	r30, r24
 130:	11 86       	std	Z+9, r1	; 0x09
 132:	10 86       	std	Z+8, r1	; 0x08
 134:	08 95       	ret

00000136 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	fc 01       	movw	r30, r24
 13c:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
 13e:	21 81       	ldd	r18, Z+1	; 0x01
 140:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
 142:	e9 01       	movw	r28, r18
 144:	8a 81       	ldd	r24, Y+2	; 0x02
 146:	9b 81       	ldd	r25, Y+3	; 0x03
 148:	13 96       	adiw	r26, 0x03	; 3
 14a:	9c 93       	st	X, r25
 14c:	8e 93       	st	-X, r24
 14e:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
 150:	81 81       	ldd	r24, Z+1	; 0x01
 152:	92 81       	ldd	r25, Z+2	; 0x02
 154:	15 96       	adiw	r26, 0x05	; 5
 156:	9c 93       	st	X, r25
 158:	8e 93       	st	-X, r24
 15a:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 15c:	8a 81       	ldd	r24, Y+2	; 0x02
 15e:	9b 81       	ldd	r25, Y+3	; 0x03
 160:	ec 01       	movw	r28, r24
 162:	7d 83       	std	Y+5, r23	; 0x05
 164:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 166:	e9 01       	movw	r28, r18
 168:	7b 83       	std	Y+3, r23	; 0x03
 16a:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 16c:	72 83       	std	Z+2, r23	; 0x02
 16e:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 170:	19 96       	adiw	r26, 0x09	; 9
 172:	fc 93       	st	X, r31
 174:	ee 93       	st	-X, r30
 176:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
 178:	80 81       	ld	r24, Z
 17a:	8f 5f       	subi	r24, 0xFF	; 255
 17c:	80 83       	st	Z, r24
}
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 18a:	48 81       	ld	r20, Y
 18c:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 18e:	4f 3f       	cpi	r20, 0xFF	; 255
 190:	2f ef       	ldi	r18, 0xFF	; 255
 192:	52 07       	cpc	r21, r18
 194:	31 f4       	brne	.+12     	; 0x1a2 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 196:	dc 01       	movw	r26, r24
 198:	17 96       	adiw	r26, 0x07	; 7
 19a:	ed 91       	ld	r30, X+
 19c:	fc 91       	ld	r31, X
 19e:	18 97       	sbiw	r26, 0x08	; 8
 1a0:	17 c0       	rjmp	.+46     	; 0x1d0 <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 1a2:	fc 01       	movw	r30, r24
 1a4:	33 96       	adiw	r30, 0x03	; 3
 1a6:	dc 01       	movw	r26, r24
 1a8:	15 96       	adiw	r26, 0x05	; 5
 1aa:	2d 91       	ld	r18, X+
 1ac:	3c 91       	ld	r19, X
 1ae:	16 97       	sbiw	r26, 0x06	; 6
 1b0:	d9 01       	movw	r26, r18
 1b2:	2d 91       	ld	r18, X+
 1b4:	3c 91       	ld	r19, X
 1b6:	42 17       	cp	r20, r18
 1b8:	53 07       	cpc	r21, r19
 1ba:	50 f0       	brcs	.+20     	; 0x1d0 <vListInsert+0x4c>
 1bc:	02 80       	ldd	r0, Z+2	; 0x02
 1be:	f3 81       	ldd	r31, Z+3	; 0x03
 1c0:	e0 2d       	mov	r30, r0
 1c2:	a2 81       	ldd	r26, Z+2	; 0x02
 1c4:	b3 81       	ldd	r27, Z+3	; 0x03
 1c6:	2d 91       	ld	r18, X+
 1c8:	3c 91       	ld	r19, X
 1ca:	42 17       	cp	r20, r18
 1cc:	53 07       	cpc	r21, r19
 1ce:	b0 f7       	brcc	.-20     	; 0x1bc <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 1d0:	a2 81       	ldd	r26, Z+2	; 0x02
 1d2:	b3 81       	ldd	r27, Z+3	; 0x03
 1d4:	bb 83       	std	Y+3, r27	; 0x03
 1d6:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 1d8:	15 96       	adiw	r26, 0x05	; 5
 1da:	dc 93       	st	X, r29
 1dc:	ce 93       	st	-X, r28
 1de:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
 1e0:	fd 83       	std	Y+5, r31	; 0x05
 1e2:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 1e4:	d3 83       	std	Z+3, r29	; 0x03
 1e6:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 1e8:	99 87       	std	Y+9, r25	; 0x09
 1ea:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
 1ec:	fc 01       	movw	r30, r24
 1ee:	20 81       	ld	r18, Z
 1f0:	2f 5f       	subi	r18, 0xFF	; 255
 1f2:	20 83       	st	Z, r18
}
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
 1fa:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 1fc:	a2 81       	ldd	r26, Z+2	; 0x02
 1fe:	b3 81       	ldd	r27, Z+3	; 0x03
 200:	84 81       	ldd	r24, Z+4	; 0x04
 202:	95 81       	ldd	r25, Z+5	; 0x05
 204:	15 96       	adiw	r26, 0x05	; 5
 206:	9c 93       	st	X, r25
 208:	8e 93       	st	-X, r24
 20a:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 20c:	a4 81       	ldd	r26, Z+4	; 0x04
 20e:	b5 81       	ldd	r27, Z+5	; 0x05
 210:	82 81       	ldd	r24, Z+2	; 0x02
 212:	93 81       	ldd	r25, Z+3	; 0x03
 214:	13 96       	adiw	r26, 0x03	; 3
 216:	9c 93       	st	X, r25
 218:	8e 93       	st	-X, r24
 21a:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 21c:	a0 85       	ldd	r26, Z+8	; 0x08
 21e:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 220:	11 96       	adiw	r26, 0x01	; 1
 222:	8d 91       	ld	r24, X+
 224:	9c 91       	ld	r25, X
 226:	12 97       	sbiw	r26, 0x02	; 2
 228:	e8 17       	cp	r30, r24
 22a:	f9 07       	cpc	r31, r25
 22c:	31 f4       	brne	.+12     	; 0x23a <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 22e:	84 81       	ldd	r24, Z+4	; 0x04
 230:	95 81       	ldd	r25, Z+5	; 0x05
 232:	12 96       	adiw	r26, 0x02	; 2
 234:	9c 93       	st	X, r25
 236:	8e 93       	st	-X, r24
 238:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
 23a:	11 86       	std	Z+9, r1	; 0x09
 23c:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 23e:	8c 91       	ld	r24, X
 240:	81 50       	subi	r24, 0x01	; 1
 242:	8c 93       	st	X, r24
 244:	08 95       	ret

00000246 <BUTTONS_Tick>:
//-------------------------------------------------- End Motor SM (Forward) --------------------------------------------------//

//-------------------------------------------------- Start Motor SM (Reverse) --------------------------------------------------//

void REVERSE_Init(){
	reverse_state = reverse_off;
 246:	80 91 6f 07 	lds	r24, 0x076F	; 0x80076f <button_state>
 24a:	88 23       	and	r24, r24
 24c:	19 f0       	breq	.+6      	; 0x254 <BUTTONS_Tick+0xe>
 24e:	81 30       	cpi	r24, 0x01	; 1
 250:	21 f1       	breq	.+72     	; 0x29a <BUTTONS_Tick+0x54>
 252:	30 c0       	rjmp	.+96     	; 0x2b4 <BUTTONS_Tick+0x6e>
 254:	00 99       	sbic	0x00, 0	; 0
 256:	0c c0       	rjmp	.+24     	; 0x270 <BUTTONS_Tick+0x2a>
 258:	80 b1       	in	r24, 0x00	; 0
 25a:	80 95       	com	r24
 25c:	81 fd       	sbrc	r24, 1
 25e:	08 c0       	rjmp	.+16     	; 0x270 <BUTTONS_Tick+0x2a>
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	80 93 13 07 	sts	0x0713, r24	; 0x800713 <going_forward>
 266:	10 92 12 07 	sts	0x0712, r1	; 0x800712 <going_reverse>
 26a:	80 93 6f 07 	sts	0x076F, r24	; 0x80076f <button_state>
 26e:	08 95       	ret
 270:	00 9b       	sbis	0x00, 0	; 0
 272:	0c c0       	rjmp	.+24     	; 0x28c <BUTTONS_Tick+0x46>
 274:	80 b1       	in	r24, 0x00	; 0
 276:	80 95       	com	r24
 278:	81 ff       	sbrs	r24, 1
 27a:	08 c0       	rjmp	.+16     	; 0x28c <BUTTONS_Tick+0x46>
 27c:	10 92 13 07 	sts	0x0713, r1	; 0x800713 <going_forward>
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	80 93 12 07 	sts	0x0712, r24	; 0x800712 <going_reverse>
 286:	80 93 6f 07 	sts	0x076F, r24	; 0x80076f <button_state>
 28a:	08 95       	ret
 28c:	10 92 13 07 	sts	0x0713, r1	; 0x800713 <going_forward>
 290:	10 92 12 07 	sts	0x0712, r1	; 0x800712 <going_reverse>
 294:	10 92 6f 07 	sts	0x076F, r1	; 0x80076f <button_state>
 298:	08 95       	ret
 29a:	00 9b       	sbis	0x00, 0	; 0
 29c:	0d c0       	rjmp	.+26     	; 0x2b8 <BUTTONS_Tick+0x72>
 29e:	80 b1       	in	r24, 0x00	; 0
 2a0:	80 95       	com	r24
 2a2:	81 fd       	sbrc	r24, 1
 2a4:	09 c0       	rjmp	.+18     	; 0x2b8 <BUTTONS_Tick+0x72>
 2a6:	10 92 13 07 	sts	0x0713, r1	; 0x800713 <going_forward>
 2aa:	10 92 12 07 	sts	0x0712, r1	; 0x800712 <going_reverse>
 2ae:	10 92 6f 07 	sts	0x076F, r1	; 0x80076f <button_state>
 2b2:	08 95       	ret
 2b4:	10 92 6f 07 	sts	0x076F, r1	; 0x80076f <button_state>
 2b8:	08 95       	ret

000002ba <ButtonSecTask>:
 2ba:	10 92 6f 07 	sts	0x076F, r1	; 0x80076f <button_state>
 2be:	c3 df       	rcall	.-122    	; 0x246 <BUTTONS_Tick>
 2c0:	84 e6       	ldi	r24, 0x64	; 100
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	a4 d4       	rcall	.+2376   	; 0xc0e <vTaskDelay>
 2c6:	fb cf       	rjmp	.-10     	; 0x2be <ButtonSecTask+0x4>

000002c8 <ButtonSecPulse>:
 2c8:	af 92       	push	r10
 2ca:	bf 92       	push	r11
 2cc:	cf 92       	push	r12
 2ce:	df 92       	push	r13
 2d0:	ef 92       	push	r14
 2d2:	ff 92       	push	r15
 2d4:	0f 93       	push	r16
 2d6:	a1 2c       	mov	r10, r1
 2d8:	b1 2c       	mov	r11, r1
 2da:	c1 2c       	mov	r12, r1
 2dc:	d1 2c       	mov	r13, r1
 2de:	e1 2c       	mov	r14, r1
 2e0:	f1 2c       	mov	r15, r1
 2e2:	08 2f       	mov	r16, r24
 2e4:	20 e0       	ldi	r18, 0x00	; 0
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	45 e5       	ldi	r20, 0x55	; 85
 2ea:	50 e0       	ldi	r21, 0x00	; 0
 2ec:	62 e0       	ldi	r22, 0x02	; 2
 2ee:	71 e0       	ldi	r23, 0x01	; 1
 2f0:	8d e5       	ldi	r24, 0x5D	; 93
 2f2:	91 e0       	ldi	r25, 0x01	; 1
 2f4:	28 d2       	rcall	.+1104   	; 0x746 <xTaskGenericCreate>
 2f6:	0f 91       	pop	r16
 2f8:	ff 90       	pop	r15
 2fa:	ef 90       	pop	r14
 2fc:	df 90       	pop	r13
 2fe:	cf 90       	pop	r12
 300:	bf 90       	pop	r11
 302:	af 90       	pop	r10
 304:	08 95       	ret

00000306 <FORWARD_Tick>:
 306:	80 91 6e 07 	lds	r24, 0x076E	; 0x80076e <forward_state>
 30a:	88 23       	and	r24, r24
 30c:	19 f0       	breq	.+6      	; 0x314 <FORWARD_Tick+0xe>
 30e:	81 30       	cpi	r24, 0x01	; 1
 310:	59 f0       	breq	.+22     	; 0x328 <FORWARD_Tick+0x22>
 312:	08 95       	ret
 314:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <going_forward>
 318:	88 23       	and	r24, r24
 31a:	71 f0       	breq	.+28     	; 0x338 <FORWARD_Tick+0x32>
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	80 93 6e 07 	sts	0x076E, r24	; 0x80076e <forward_state>
 322:	88 b9       	out	0x08, r24	; 8
 324:	8b b9       	out	0x0b, r24	; 11
 326:	08 95       	ret
 328:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <going_forward>
 32c:	81 11       	cpse	r24, r1
 32e:	04 c0       	rjmp	.+8      	; 0x338 <FORWARD_Tick+0x32>
 330:	10 92 6e 07 	sts	0x076E, r1	; 0x80076e <forward_state>
 334:	18 b8       	out	0x08, r1	; 8
 336:	1b b8       	out	0x0b, r1	; 11
 338:	08 95       	ret

0000033a <ForwardSecTask>:
 33a:	10 92 6e 07 	sts	0x076E, r1	; 0x80076e <forward_state>
 33e:	e3 df       	rcall	.-58     	; 0x306 <FORWARD_Tick>
 340:	84 e6       	ldi	r24, 0x64	; 100
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	64 d4       	rcall	.+2248   	; 0xc0e <vTaskDelay>
 346:	fb cf       	rjmp	.-10     	; 0x33e <ForwardSecTask+0x4>

00000348 <ForwardSecPulse>:
 348:	af 92       	push	r10
 34a:	bf 92       	push	r11
 34c:	cf 92       	push	r12
 34e:	df 92       	push	r13
 350:	ef 92       	push	r14
 352:	ff 92       	push	r15
 354:	0f 93       	push	r16
 356:	a1 2c       	mov	r10, r1
 358:	b1 2c       	mov	r11, r1
 35a:	c1 2c       	mov	r12, r1
 35c:	d1 2c       	mov	r13, r1
 35e:	e1 2c       	mov	r14, r1
 360:	f1 2c       	mov	r15, r1
 362:	08 2f       	mov	r16, r24
 364:	20 e0       	ldi	r18, 0x00	; 0
 366:	30 e0       	ldi	r19, 0x00	; 0
 368:	45 e5       	ldi	r20, 0x55	; 85
 36a:	50 e0       	ldi	r21, 0x00	; 0
 36c:	60 e1       	ldi	r22, 0x10	; 16
 36e:	71 e0       	ldi	r23, 0x01	; 1
 370:	8d e9       	ldi	r24, 0x9D	; 157
 372:	91 e0       	ldi	r25, 0x01	; 1
 374:	e8 d1       	rcall	.+976    	; 0x746 <xTaskGenericCreate>
 376:	0f 91       	pop	r16
 378:	ff 90       	pop	r15
 37a:	ef 90       	pop	r14
 37c:	df 90       	pop	r13
 37e:	cf 90       	pop	r12
 380:	bf 90       	pop	r11
 382:	af 90       	pop	r10
 384:	08 95       	ret

00000386 <REVERSE_Tick>:
		default:
			break;
	}
	
	//State Transitions
	switch(reverse_state){
 386:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <reverse_state>
 38a:	88 23       	and	r24, r24
 38c:	19 f0       	breq	.+6      	; 0x394 <REVERSE_Tick+0xe>
 38e:	81 30       	cpi	r24, 0x01	; 1
 390:	61 f0       	breq	.+24     	; 0x3aa <REVERSE_Tick+0x24>
 392:	08 95       	ret
		case reverse_off:
			if(going_reverse){
 394:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <going_reverse>
 398:	88 23       	and	r24, r24
 39a:	79 f0       	breq	.+30     	; 0x3ba <REVERSE_Tick+0x34>
				reverse_state = reverse_on;
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	80 93 70 07 	sts	0x0770, r24	; 0x800770 <reverse_state>
				//PORTD = 0xFF;
				PORTC = 0x02;
 3a2:	82 e0       	ldi	r24, 0x02	; 2
 3a4:	88 b9       	out	0x08, r24	; 8
				PORTD = 0x02;
 3a6:	8b b9       	out	0x0b, r24	; 11
 3a8:	08 95       	ret
				reverse_state = reverse_off;
			}
			break;
			
		case reverse_on:
			if(going_reverse){
 3aa:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <going_reverse>
 3ae:	81 11       	cpse	r24, r1
 3b0:	04 c0       	rjmp	.+8      	; 0x3ba <REVERSE_Tick+0x34>
				reverse_state = reverse_on;
			}
		
			else{
				reverse_state = reverse_off;
 3b2:	10 92 70 07 	sts	0x0770, r1	; 0x800770 <reverse_state>
				PORTC = 0x00;
 3b6:	18 b8       	out	0x08, r1	; 8
				PORTD = 0x00;
 3b8:	1b b8       	out	0x0b, r1	; 11
 3ba:	08 95       	ret

000003bc <ReverseSecTask>:
//-------------------------------------------------- End Motor SM (Forward) --------------------------------------------------//

//-------------------------------------------------- Start Motor SM (Reverse) --------------------------------------------------//

void REVERSE_Init(){
	reverse_state = reverse_off;
 3bc:	10 92 70 07 	sts	0x0770, r1	; 0x800770 <reverse_state>
}

void ReverseSecTask(){
	REVERSE_Init();
	for(;;){
		REVERSE_Tick();
 3c0:	e2 df       	rcall	.-60     	; 0x386 <REVERSE_Tick>
		vTaskDelay(100);
 3c2:	84 e6       	ldi	r24, 0x64	; 100
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	23 d4       	rcall	.+2118   	; 0xc0e <vTaskDelay>
 3c8:	fb cf       	rjmp	.-10     	; 0x3c0 <ReverseSecTask+0x4>

000003ca <ReverseSecPulse>:
	}
}

void ReverseSecPulse(unsigned portBASE_TYPE Priority){
 3ca:	af 92       	push	r10
 3cc:	bf 92       	push	r11
 3ce:	cf 92       	push	r12
 3d0:	df 92       	push	r13
 3d2:	ef 92       	push	r14
 3d4:	ff 92       	push	r15
 3d6:	0f 93       	push	r16
	xTaskCreate(ReverseSecTask, (signed portCHAR *)"ReverseSecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
 3d8:	a1 2c       	mov	r10, r1
 3da:	b1 2c       	mov	r11, r1
 3dc:	c1 2c       	mov	r12, r1
 3de:	d1 2c       	mov	r13, r1
 3e0:	e1 2c       	mov	r14, r1
 3e2:	f1 2c       	mov	r15, r1
 3e4:	08 2f       	mov	r16, r24
 3e6:	20 e0       	ldi	r18, 0x00	; 0
 3e8:	30 e0       	ldi	r19, 0x00	; 0
 3ea:	45 e5       	ldi	r20, 0x55	; 85
 3ec:	50 e0       	ldi	r21, 0x00	; 0
 3ee:	6f e1       	ldi	r22, 0x1F	; 31
 3f0:	71 e0       	ldi	r23, 0x01	; 1
 3f2:	8e ed       	ldi	r24, 0xDE	; 222
 3f4:	91 e0       	ldi	r25, 0x01	; 1
 3f6:	a7 d1       	rcall	.+846    	; 0x746 <xTaskGenericCreate>
}
 3f8:	0f 91       	pop	r16
 3fa:	ff 90       	pop	r15
 3fc:	ef 90       	pop	r14
 3fe:	df 90       	pop	r13
 400:	cf 90       	pop	r12
 402:	bf 90       	pop	r11
 404:	af 90       	pop	r10
 406:	08 95       	ret

00000408 <main>:
//-------------------------------------------------- End Motor SM (Reverse) --------------------------------------------------//

 
int main(void) 
{ 
   DDRA = 0x00; PORTA=0xFF;
 408:	11 b8       	out	0x01, r1	; 1
 40a:	8f ef       	ldi	r24, 0xFF	; 255
 40c:	82 b9       	out	0x02, r24	; 2
   DDRC = 0xFF; PORTC = 0x00;
 40e:	87 b9       	out	0x07, r24	; 7
 410:	18 b8       	out	0x08, r1	; 8
   DDRD = 0xFF; PORTD = 0x00;
 412:	8a b9       	out	0x0a, r24	; 10
 414:	1b b8       	out	0x0b, r1	; 11

   //Start Tasks  
   ButtonSecPulse(1);
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	57 df       	rcall	.-338    	; 0x2c8 <ButtonSecPulse>
   ForwardSecPulse(1);
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	95 df       	rcall	.-214    	; 0x348 <ForwardSecPulse>
   ReverseSecPulse(1);
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	d4 df       	rcall	.-88     	; 0x3ca <ReverseSecPulse>
    //RunSchedular 
   vTaskStartScheduler(); 
 422:	84 d2       	rcall	.+1288   	; 0x92c <vTaskStartScheduler>
 424:	80 e0       	ldi	r24, 0x00	; 0
 
   return 0; 
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	08 95       	ret

0000042a <pxPortInitialiseStack>:
 42a:	31 e1       	ldi	r19, 0x11	; 17
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 42c:	fc 01       	movw	r30, r24
 42e:	30 83       	st	Z, r19
 430:	31 97       	sbiw	r30, 0x01	; 1
 432:	22 e2       	ldi	r18, 0x22	; 34
 434:	20 83       	st	Z, r18
 436:	31 97       	sbiw	r30, 0x01	; 1
 438:	a3 e3       	ldi	r26, 0x33	; 51
 43a:	a0 83       	st	Z, r26
 43c:	31 97       	sbiw	r30, 0x01	; 1
 43e:	60 83       	st	Z, r22
 440:	31 97       	sbiw	r30, 0x01	; 1
 442:	70 83       	st	Z, r23
 444:	31 97       	sbiw	r30, 0x01	; 1
 446:	10 82       	st	Z, r1
 448:	31 97       	sbiw	r30, 0x01	; 1
 44a:	60 e8       	ldi	r22, 0x80	; 128
 44c:	60 83       	st	Z, r22
 44e:	31 97       	sbiw	r30, 0x01	; 1
 450:	10 82       	st	Z, r1
 452:	31 97       	sbiw	r30, 0x01	; 1
 454:	62 e0       	ldi	r22, 0x02	; 2
 456:	60 83       	st	Z, r22
 458:	31 97       	sbiw	r30, 0x01	; 1
 45a:	63 e0       	ldi	r22, 0x03	; 3
 45c:	60 83       	st	Z, r22
 45e:	31 97       	sbiw	r30, 0x01	; 1
 460:	64 e0       	ldi	r22, 0x04	; 4
 462:	60 83       	st	Z, r22
 464:	31 97       	sbiw	r30, 0x01	; 1
 466:	65 e0       	ldi	r22, 0x05	; 5
 468:	60 83       	st	Z, r22
 46a:	31 97       	sbiw	r30, 0x01	; 1
 46c:	66 e0       	ldi	r22, 0x06	; 6
 46e:	60 83       	st	Z, r22
 470:	31 97       	sbiw	r30, 0x01	; 1
 472:	67 e0       	ldi	r22, 0x07	; 7
 474:	60 83       	st	Z, r22
 476:	31 97       	sbiw	r30, 0x01	; 1
 478:	68 e0       	ldi	r22, 0x08	; 8
 47a:	60 83       	st	Z, r22
 47c:	31 97       	sbiw	r30, 0x01	; 1
 47e:	69 e0       	ldi	r22, 0x09	; 9
 480:	60 83       	st	Z, r22
 482:	31 97       	sbiw	r30, 0x01	; 1
 484:	60 e1       	ldi	r22, 0x10	; 16
 486:	60 83       	st	Z, r22
 488:	31 97       	sbiw	r30, 0x01	; 1
 48a:	30 83       	st	Z, r19
 48c:	31 97       	sbiw	r30, 0x01	; 1
 48e:	32 e1       	ldi	r19, 0x12	; 18
 490:	30 83       	st	Z, r19
 492:	31 97       	sbiw	r30, 0x01	; 1
 494:	33 e1       	ldi	r19, 0x13	; 19
 496:	30 83       	st	Z, r19
 498:	31 97       	sbiw	r30, 0x01	; 1
 49a:	34 e1       	ldi	r19, 0x14	; 20
 49c:	30 83       	st	Z, r19
 49e:	31 97       	sbiw	r30, 0x01	; 1
 4a0:	35 e1       	ldi	r19, 0x15	; 21
 4a2:	30 83       	st	Z, r19
 4a4:	31 97       	sbiw	r30, 0x01	; 1
 4a6:	36 e1       	ldi	r19, 0x16	; 22
 4a8:	30 83       	st	Z, r19
 4aa:	31 97       	sbiw	r30, 0x01	; 1
 4ac:	37 e1       	ldi	r19, 0x17	; 23
 4ae:	30 83       	st	Z, r19
 4b0:	31 97       	sbiw	r30, 0x01	; 1
 4b2:	38 e1       	ldi	r19, 0x18	; 24
 4b4:	30 83       	st	Z, r19
 4b6:	31 97       	sbiw	r30, 0x01	; 1
 4b8:	39 e1       	ldi	r19, 0x19	; 25
 4ba:	30 83       	st	Z, r19
 4bc:	31 97       	sbiw	r30, 0x01	; 1
 4be:	30 e2       	ldi	r19, 0x20	; 32
 4c0:	30 83       	st	Z, r19
 4c2:	31 97       	sbiw	r30, 0x01	; 1
 4c4:	31 e2       	ldi	r19, 0x21	; 33
 4c6:	30 83       	st	Z, r19
 4c8:	31 97       	sbiw	r30, 0x01	; 1
 4ca:	20 83       	st	Z, r18
 4cc:	31 97       	sbiw	r30, 0x01	; 1
 4ce:	23 e2       	ldi	r18, 0x23	; 35
 4d0:	20 83       	st	Z, r18
 4d2:	31 97       	sbiw	r30, 0x01	; 1
 4d4:	40 83       	st	Z, r20
 4d6:	31 97       	sbiw	r30, 0x01	; 1
 4d8:	50 83       	st	Z, r21
 4da:	31 97       	sbiw	r30, 0x01	; 1
 4dc:	26 e2       	ldi	r18, 0x26	; 38
 4de:	20 83       	st	Z, r18
 4e0:	31 97       	sbiw	r30, 0x01	; 1
 4e2:	27 e2       	ldi	r18, 0x27	; 39
 4e4:	20 83       	st	Z, r18
 4e6:	31 97       	sbiw	r30, 0x01	; 1
 4e8:	28 e2       	ldi	r18, 0x28	; 40
 4ea:	20 83       	st	Z, r18
 4ec:	31 97       	sbiw	r30, 0x01	; 1
 4ee:	29 e2       	ldi	r18, 0x29	; 41
 4f0:	20 83       	st	Z, r18
 4f2:	31 97       	sbiw	r30, 0x01	; 1
 4f4:	20 e3       	ldi	r18, 0x30	; 48
 4f6:	20 83       	st	Z, r18
 4f8:	31 97       	sbiw	r30, 0x01	; 1
 4fa:	21 e3       	ldi	r18, 0x31	; 49
 4fc:	20 83       	st	Z, r18
 4fe:	86 97       	sbiw	r24, 0x26	; 38
 500:	08 95       	ret

00000502 <xPortStartScheduler>:
 502:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 506:	8c e7       	ldi	r24, 0x7C	; 124
 508:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 50c:	8b e0       	ldi	r24, 0x0B	; 11
 50e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 512:	ef e6       	ldi	r30, 0x6F	; 111
 514:	f0 e0       	ldi	r31, 0x00	; 0
 516:	80 81       	ld	r24, Z
 518:	82 60       	ori	r24, 0x02	; 2
 51a:	80 83       	st	Z, r24
 51c:	a0 91 6c 07 	lds	r26, 0x076C	; 0x80076c <pxCurrentTCB>
 520:	b0 91 6d 07 	lds	r27, 0x076D	; 0x80076d <pxCurrentTCB+0x1>
 524:	cd 91       	ld	r28, X+
 526:	cd bf       	out	0x3d, r28	; 61
 528:	dd 91       	ld	r29, X+
 52a:	de bf       	out	0x3e, r29	; 62
 52c:	ff 91       	pop	r31
 52e:	ef 91       	pop	r30
 530:	df 91       	pop	r29
 532:	cf 91       	pop	r28
 534:	bf 91       	pop	r27
 536:	af 91       	pop	r26
 538:	9f 91       	pop	r25
 53a:	8f 91       	pop	r24
 53c:	7f 91       	pop	r23
 53e:	6f 91       	pop	r22
 540:	5f 91       	pop	r21
 542:	4f 91       	pop	r20
 544:	3f 91       	pop	r19
 546:	2f 91       	pop	r18
 548:	1f 91       	pop	r17
 54a:	0f 91       	pop	r16
 54c:	ff 90       	pop	r15
 54e:	ef 90       	pop	r14
 550:	df 90       	pop	r13
 552:	cf 90       	pop	r12
 554:	bf 90       	pop	r11
 556:	af 90       	pop	r10
 558:	9f 90       	pop	r9
 55a:	8f 90       	pop	r8
 55c:	7f 90       	pop	r7
 55e:	6f 90       	pop	r6
 560:	5f 90       	pop	r5
 562:	4f 90       	pop	r4
 564:	3f 90       	pop	r3
 566:	2f 90       	pop	r2
 568:	1f 90       	pop	r1
 56a:	0f 90       	pop	r0
 56c:	0f be       	out	0x3f, r0	; 63
 56e:	0f 90       	pop	r0
 570:	08 95       	ret
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	08 95       	ret

00000576 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 576:	0f 92       	push	r0
 578:	0f b6       	in	r0, 0x3f	; 63
 57a:	f8 94       	cli
 57c:	0f 92       	push	r0
 57e:	1f 92       	push	r1
 580:	11 24       	eor	r1, r1
 582:	2f 92       	push	r2
 584:	3f 92       	push	r3
 586:	4f 92       	push	r4
 588:	5f 92       	push	r5
 58a:	6f 92       	push	r6
 58c:	7f 92       	push	r7
 58e:	8f 92       	push	r8
 590:	9f 92       	push	r9
 592:	af 92       	push	r10
 594:	bf 92       	push	r11
 596:	cf 92       	push	r12
 598:	df 92       	push	r13
 59a:	ef 92       	push	r14
 59c:	ff 92       	push	r15
 59e:	0f 93       	push	r16
 5a0:	1f 93       	push	r17
 5a2:	2f 93       	push	r18
 5a4:	3f 93       	push	r19
 5a6:	4f 93       	push	r20
 5a8:	5f 93       	push	r21
 5aa:	6f 93       	push	r22
 5ac:	7f 93       	push	r23
 5ae:	8f 93       	push	r24
 5b0:	9f 93       	push	r25
 5b2:	af 93       	push	r26
 5b4:	bf 93       	push	r27
 5b6:	cf 93       	push	r28
 5b8:	df 93       	push	r29
 5ba:	ef 93       	push	r30
 5bc:	ff 93       	push	r31
 5be:	a0 91 6c 07 	lds	r26, 0x076C	; 0x80076c <pxCurrentTCB>
 5c2:	b0 91 6d 07 	lds	r27, 0x076D	; 0x80076d <pxCurrentTCB+0x1>
 5c6:	0d b6       	in	r0, 0x3d	; 61
 5c8:	0d 92       	st	X+, r0
 5ca:	0e b6       	in	r0, 0x3e	; 62
 5cc:	0d 92       	st	X+, r0
	vTaskSwitchContext();
 5ce:	70 d3       	rcall	.+1760   	; 0xcb0 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 5d0:	a0 91 6c 07 	lds	r26, 0x076C	; 0x80076c <pxCurrentTCB>
 5d4:	b0 91 6d 07 	lds	r27, 0x076D	; 0x80076d <pxCurrentTCB+0x1>
 5d8:	cd 91       	ld	r28, X+
 5da:	cd bf       	out	0x3d, r28	; 61
 5dc:	dd 91       	ld	r29, X+
 5de:	de bf       	out	0x3e, r29	; 62
 5e0:	ff 91       	pop	r31
 5e2:	ef 91       	pop	r30
 5e4:	df 91       	pop	r29
 5e6:	cf 91       	pop	r28
 5e8:	bf 91       	pop	r27
 5ea:	af 91       	pop	r26
 5ec:	9f 91       	pop	r25
 5ee:	8f 91       	pop	r24
 5f0:	7f 91       	pop	r23
 5f2:	6f 91       	pop	r22
 5f4:	5f 91       	pop	r21
 5f6:	4f 91       	pop	r20
 5f8:	3f 91       	pop	r19
 5fa:	2f 91       	pop	r18
 5fc:	1f 91       	pop	r17
 5fe:	0f 91       	pop	r16
 600:	ff 90       	pop	r15
 602:	ef 90       	pop	r14
 604:	df 90       	pop	r13
 606:	cf 90       	pop	r12
 608:	bf 90       	pop	r11
 60a:	af 90       	pop	r10
 60c:	9f 90       	pop	r9
 60e:	8f 90       	pop	r8
 610:	7f 90       	pop	r7
 612:	6f 90       	pop	r6
 614:	5f 90       	pop	r5
 616:	4f 90       	pop	r4
 618:	3f 90       	pop	r3
 61a:	2f 90       	pop	r2
 61c:	1f 90       	pop	r1
 61e:	0f 90       	pop	r0
 620:	0f be       	out	0x3f, r0	; 63
 622:	0f 90       	pop	r0

	asm volatile ( "ret" );
 624:	08 95       	ret

00000626 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 626:	0f 92       	push	r0
 628:	0f b6       	in	r0, 0x3f	; 63
 62a:	f8 94       	cli
 62c:	0f 92       	push	r0
 62e:	1f 92       	push	r1
 630:	11 24       	eor	r1, r1
 632:	2f 92       	push	r2
 634:	3f 92       	push	r3
 636:	4f 92       	push	r4
 638:	5f 92       	push	r5
 63a:	6f 92       	push	r6
 63c:	7f 92       	push	r7
 63e:	8f 92       	push	r8
 640:	9f 92       	push	r9
 642:	af 92       	push	r10
 644:	bf 92       	push	r11
 646:	cf 92       	push	r12
 648:	df 92       	push	r13
 64a:	ef 92       	push	r14
 64c:	ff 92       	push	r15
 64e:	0f 93       	push	r16
 650:	1f 93       	push	r17
 652:	2f 93       	push	r18
 654:	3f 93       	push	r19
 656:	4f 93       	push	r20
 658:	5f 93       	push	r21
 65a:	6f 93       	push	r22
 65c:	7f 93       	push	r23
 65e:	8f 93       	push	r24
 660:	9f 93       	push	r25
 662:	af 93       	push	r26
 664:	bf 93       	push	r27
 666:	cf 93       	push	r28
 668:	df 93       	push	r29
 66a:	ef 93       	push	r30
 66c:	ff 93       	push	r31
 66e:	a0 91 6c 07 	lds	r26, 0x076C	; 0x80076c <pxCurrentTCB>
 672:	b0 91 6d 07 	lds	r27, 0x076D	; 0x80076d <pxCurrentTCB+0x1>
 676:	0d b6       	in	r0, 0x3d	; 61
 678:	0d 92       	st	X+, r0
 67a:	0e b6       	in	r0, 0x3e	; 62
 67c:	0d 92       	st	X+, r0
	vTaskIncrementTick();
 67e:	85 d1       	rcall	.+778    	; 0x98a <vTaskIncrementTick>
	vTaskSwitchContext();
 680:	17 d3       	rcall	.+1582   	; 0xcb0 <vTaskSwitchContext>
 682:	a0 91 6c 07 	lds	r26, 0x076C	; 0x80076c <pxCurrentTCB>
	portRESTORE_CONTEXT();
 686:	b0 91 6d 07 	lds	r27, 0x076D	; 0x80076d <pxCurrentTCB+0x1>
 68a:	cd 91       	ld	r28, X+
 68c:	cd bf       	out	0x3d, r28	; 61
 68e:	dd 91       	ld	r29, X+
 690:	de bf       	out	0x3e, r29	; 62
 692:	ff 91       	pop	r31
 694:	ef 91       	pop	r30
 696:	df 91       	pop	r29
 698:	cf 91       	pop	r28
 69a:	bf 91       	pop	r27
 69c:	af 91       	pop	r26
 69e:	9f 91       	pop	r25
 6a0:	8f 91       	pop	r24
 6a2:	7f 91       	pop	r23
 6a4:	6f 91       	pop	r22
 6a6:	5f 91       	pop	r21
 6a8:	4f 91       	pop	r20
 6aa:	3f 91       	pop	r19
 6ac:	2f 91       	pop	r18
 6ae:	1f 91       	pop	r17
 6b0:	0f 91       	pop	r16
 6b2:	ff 90       	pop	r15
 6b4:	ef 90       	pop	r14
 6b6:	df 90       	pop	r13
 6b8:	cf 90       	pop	r12
 6ba:	bf 90       	pop	r11
 6bc:	af 90       	pop	r10
 6be:	9f 90       	pop	r9
 6c0:	8f 90       	pop	r8
 6c2:	7f 90       	pop	r7
 6c4:	6f 90       	pop	r6
 6c6:	5f 90       	pop	r5
 6c8:	4f 90       	pop	r4
 6ca:	3f 90       	pop	r3
 6cc:	2f 90       	pop	r2
 6ce:	1f 90       	pop	r1
 6d0:	0f 90       	pop	r0
 6d2:	0f be       	out	0x3f, r0	; 63
 6d4:	0f 90       	pop	r0
 6d6:	08 95       	ret

000006d8 <__vector_13>:

	asm volatile ( "ret" );
 6d8:	a6 df       	rcall	.-180    	; 0x626 <vPortYieldFromTick>
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
		asm volatile ( "reti" );
 6da:	18 95       	reti

000006dc <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
 6dc:	cf 93       	push	r28
 6de:	df 93       	push	r29
 6e0:	ec 01       	movw	r28, r24
 6e2:	e0 91 6c 07 	lds	r30, 0x076C	; 0x80076c <pxCurrentTCB>
 6e6:	f0 91 6d 07 	lds	r31, 0x076D	; 0x80076d <pxCurrentTCB+0x1>
 6ea:	93 83       	std	Z+3, r25	; 0x03
 6ec:	82 83       	std	Z+2, r24	; 0x02
 6ee:	80 91 1c 07 	lds	r24, 0x071C	; 0x80071c <xTickCount>
 6f2:	90 91 1d 07 	lds	r25, 0x071D	; 0x80071d <xTickCount+0x1>
 6f6:	c8 17       	cp	r28, r24
 6f8:	d9 07       	cpc	r29, r25
 6fa:	60 f4       	brcc	.+24     	; 0x714 <prvAddCurrentTaskToDelayedList+0x38>
 6fc:	60 91 6c 07 	lds	r22, 0x076C	; 0x80076c <pxCurrentTCB>
 700:	70 91 6d 07 	lds	r23, 0x076D	; 0x80076d <pxCurrentTCB+0x1>
 704:	80 91 32 07 	lds	r24, 0x0732	; 0x800732 <pxOverflowDelayedTaskList>
 708:	90 91 33 07 	lds	r25, 0x0733	; 0x800733 <pxOverflowDelayedTaskList+0x1>
 70c:	6e 5f       	subi	r22, 0xFE	; 254
 70e:	7f 4f       	sbci	r23, 0xFF	; 255
 710:	39 dd       	rcall	.-1422   	; 0x184 <vListInsert>
 712:	16 c0       	rjmp	.+44     	; 0x740 <prvAddCurrentTaskToDelayedList+0x64>
 714:	60 91 6c 07 	lds	r22, 0x076C	; 0x80076c <pxCurrentTCB>
 718:	70 91 6d 07 	lds	r23, 0x076D	; 0x80076d <pxCurrentTCB+0x1>
 71c:	80 91 34 07 	lds	r24, 0x0734	; 0x800734 <pxDelayedTaskList>
 720:	90 91 35 07 	lds	r25, 0x0735	; 0x800735 <pxDelayedTaskList+0x1>
 724:	6e 5f       	subi	r22, 0xFE	; 254
 726:	7f 4f       	sbci	r23, 0xFF	; 255
 728:	2d dd       	rcall	.-1446   	; 0x184 <vListInsert>
 72a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 72e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 732:	c8 17       	cp	r28, r24
 734:	d9 07       	cpc	r29, r25
 736:	20 f4       	brcc	.+8      	; 0x740 <prvAddCurrentTaskToDelayedList+0x64>
 738:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <__data_start+0x1>
 73c:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
 740:	df 91       	pop	r29
 742:	cf 91       	pop	r28
 744:	08 95       	ret

00000746 <xTaskGenericCreate>:
 746:	4f 92       	push	r4
 748:	5f 92       	push	r5
 74a:	6f 92       	push	r6
 74c:	7f 92       	push	r7
 74e:	8f 92       	push	r8
 750:	9f 92       	push	r9
 752:	af 92       	push	r10
 754:	bf 92       	push	r11
 756:	cf 92       	push	r12
 758:	df 92       	push	r13
 75a:	ef 92       	push	r14
 75c:	ff 92       	push	r15
 75e:	0f 93       	push	r16
 760:	1f 93       	push	r17
 762:	cf 93       	push	r28
 764:	df 93       	push	r29
 766:	5c 01       	movw	r10, r24
 768:	4b 01       	movw	r8, r22
 76a:	3a 01       	movw	r6, r20
 76c:	29 01       	movw	r4, r18
 76e:	81 e2       	ldi	r24, 0x21	; 33
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	aa dc       	rcall	.-1708   	; 0xc8 <pvPortMalloc>
 774:	ec 01       	movw	r28, r24
 776:	89 2b       	or	r24, r25
 778:	09 f4       	brne	.+2      	; 0x77c <xTaskGenericCreate+0x36>
 77a:	c6 c0       	rjmp	.+396    	; 0x908 <xTaskGenericCreate+0x1c2>
 77c:	c1 14       	cp	r12, r1
 77e:	d1 04       	cpc	r13, r1
 780:	09 f0       	breq	.+2      	; 0x784 <xTaskGenericCreate+0x3e>
 782:	be c0       	rjmp	.+380    	; 0x900 <xTaskGenericCreate+0x1ba>
 784:	c3 01       	movw	r24, r6
 786:	a0 dc       	rcall	.-1728   	; 0xc8 <pvPortMalloc>
 788:	98 8f       	std	Y+24, r25	; 0x18
 78a:	8f 8b       	std	Y+23, r24	; 0x17
 78c:	00 97       	sbiw	r24, 0x00	; 0
 78e:	19 f4       	brne	.+6      	; 0x796 <xTaskGenericCreate+0x50>
 790:	ce 01       	movw	r24, r28
 792:	be dc       	rcall	.-1668   	; 0x110 <vPortFree>
 794:	b9 c0       	rjmp	.+370    	; 0x908 <xTaskGenericCreate+0x1c2>
 796:	a3 01       	movw	r20, r6
 798:	65 ea       	ldi	r22, 0xA5	; 165
 79a:	70 e0       	ldi	r23, 0x00	; 0
 79c:	f5 d2       	rcall	.+1514   	; 0xd88 <memset>
 79e:	93 01       	movw	r18, r6
 7a0:	21 50       	subi	r18, 0x01	; 1
 7a2:	31 09       	sbc	r19, r1
 7a4:	8f 89       	ldd	r24, Y+23	; 0x17
 7a6:	98 8d       	ldd	r25, Y+24	; 0x18
 7a8:	3c 01       	movw	r6, r24
 7aa:	62 0e       	add	r6, r18
 7ac:	73 1e       	adc	r7, r19
 7ae:	48 e0       	ldi	r20, 0x08	; 8
 7b0:	50 e0       	ldi	r21, 0x00	; 0
 7b2:	b4 01       	movw	r22, r8
 7b4:	ce 01       	movw	r24, r28
 7b6:	49 96       	adiw	r24, 0x19	; 25
 7b8:	ee d2       	rcall	.+1500   	; 0xd96 <strncpy>
 7ba:	18 a2       	std	Y+32, r1	; 0x20
 7bc:	10 2f       	mov	r17, r16
 7be:	04 30       	cpi	r16, 0x04	; 4
 7c0:	08 f0       	brcs	.+2      	; 0x7c4 <xTaskGenericCreate+0x7e>
 7c2:	13 e0       	ldi	r17, 0x03	; 3
 7c4:	1e 8b       	std	Y+22, r17	; 0x16
 7c6:	6e 01       	movw	r12, r28
 7c8:	82 e0       	ldi	r24, 0x02	; 2
 7ca:	c8 0e       	add	r12, r24
 7cc:	d1 1c       	adc	r13, r1
 7ce:	c6 01       	movw	r24, r12
 7d0:	ae dc       	rcall	.-1700   	; 0x12e <vListInitialiseItem>
 7d2:	ce 01       	movw	r24, r28
 7d4:	0c 96       	adiw	r24, 0x0c	; 12
 7d6:	ab dc       	rcall	.-1706   	; 0x12e <vListInitialiseItem>
 7d8:	d9 87       	std	Y+9, r29	; 0x09
 7da:	c8 87       	std	Y+8, r28	; 0x08
 7dc:	84 e0       	ldi	r24, 0x04	; 4
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	81 1b       	sub	r24, r17
 7e2:	91 09       	sbc	r25, r1
 7e4:	9d 87       	std	Y+13, r25	; 0x0d
 7e6:	8c 87       	std	Y+12, r24	; 0x0c
 7e8:	db 8b       	std	Y+19, r29	; 0x13
 7ea:	ca 8b       	std	Y+18, r28	; 0x12
 7ec:	a2 01       	movw	r20, r4
 7ee:	b5 01       	movw	r22, r10
 7f0:	c3 01       	movw	r24, r6
 7f2:	1b de       	rcall	.-970    	; 0x42a <pxPortInitialiseStack>
 7f4:	99 83       	std	Y+1, r25	; 0x01
 7f6:	88 83       	st	Y, r24
 7f8:	e1 14       	cp	r14, r1
 7fa:	f1 04       	cpc	r15, r1
 7fc:	19 f0       	breq	.+6      	; 0x804 <xTaskGenericCreate+0xbe>
 7fe:	f7 01       	movw	r30, r14
 800:	d1 83       	std	Z+1, r29	; 0x01
 802:	c0 83       	st	Z, r28
 804:	0f b6       	in	r0, 0x3f	; 63
 806:	f8 94       	cli
 808:	0f 92       	push	r0
 80a:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <uxCurrentNumberOfTasks>
 80e:	8f 5f       	subi	r24, 0xFF	; 255
 810:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <uxCurrentNumberOfTasks>
 814:	80 91 6c 07 	lds	r24, 0x076C	; 0x80076c <pxCurrentTCB>
 818:	90 91 6d 07 	lds	r25, 0x076D	; 0x80076d <pxCurrentTCB+0x1>
 81c:	89 2b       	or	r24, r25
 81e:	69 f5       	brne	.+90     	; 0x87a <xTaskGenericCreate+0x134>
 820:	d0 93 6d 07 	sts	0x076D, r29	; 0x80076d <pxCurrentTCB+0x1>
 824:	c0 93 6c 07 	sts	0x076C, r28	; 0x80076c <pxCurrentTCB>
 828:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <uxCurrentNumberOfTasks>
 82c:	81 30       	cpi	r24, 0x01	; 1
 82e:	a1 f5       	brne	.+104    	; 0x898 <xTaskGenericCreate+0x152>
 830:	88 e4       	ldi	r24, 0x48	; 72
 832:	97 e0       	ldi	r25, 0x07	; 7
 834:	6e dc       	rcall	.-1828   	; 0x112 <vListInitialise>
 836:	81 e5       	ldi	r24, 0x51	; 81
 838:	97 e0       	ldi	r25, 0x07	; 7
 83a:	6b dc       	rcall	.-1834   	; 0x112 <vListInitialise>
 83c:	8a e5       	ldi	r24, 0x5A	; 90
 83e:	97 e0       	ldi	r25, 0x07	; 7
 840:	68 dc       	rcall	.-1840   	; 0x112 <vListInitialise>
 842:	83 e6       	ldi	r24, 0x63	; 99
 844:	97 e0       	ldi	r25, 0x07	; 7
 846:	65 dc       	rcall	.-1846   	; 0x112 <vListInitialise>
 848:	8f e3       	ldi	r24, 0x3F	; 63
 84a:	97 e0       	ldi	r25, 0x07	; 7
 84c:	62 dc       	rcall	.-1852   	; 0x112 <vListInitialise>
 84e:	86 e3       	ldi	r24, 0x36	; 54
 850:	97 e0       	ldi	r25, 0x07	; 7
 852:	5f dc       	rcall	.-1858   	; 0x112 <vListInitialise>
 854:	89 e2       	ldi	r24, 0x29	; 41
 856:	97 e0       	ldi	r25, 0x07	; 7
 858:	5c dc       	rcall	.-1864   	; 0x112 <vListInitialise>
 85a:	80 e2       	ldi	r24, 0x20	; 32
 85c:	97 e0       	ldi	r25, 0x07	; 7
 85e:	59 dc       	rcall	.-1870   	; 0x112 <vListInitialise>
 860:	8f e3       	ldi	r24, 0x3F	; 63
 862:	97 e0       	ldi	r25, 0x07	; 7
 864:	90 93 35 07 	sts	0x0735, r25	; 0x800735 <pxDelayedTaskList+0x1>
 868:	80 93 34 07 	sts	0x0734, r24	; 0x800734 <pxDelayedTaskList>
 86c:	86 e3       	ldi	r24, 0x36	; 54
 86e:	97 e0       	ldi	r25, 0x07	; 7
 870:	90 93 33 07 	sts	0x0733, r25	; 0x800733 <pxOverflowDelayedTaskList+0x1>
 874:	80 93 32 07 	sts	0x0732, r24	; 0x800732 <pxOverflowDelayedTaskList>
 878:	0f c0       	rjmp	.+30     	; 0x898 <xTaskGenericCreate+0x152>
 87a:	80 91 19 07 	lds	r24, 0x0719	; 0x800719 <xSchedulerRunning>
 87e:	81 11       	cpse	r24, r1
 880:	0b c0       	rjmp	.+22     	; 0x898 <xTaskGenericCreate+0x152>
 882:	e0 91 6c 07 	lds	r30, 0x076C	; 0x80076c <pxCurrentTCB>
 886:	f0 91 6d 07 	lds	r31, 0x076D	; 0x80076d <pxCurrentTCB+0x1>
 88a:	86 89       	ldd	r24, Z+22	; 0x16
 88c:	08 17       	cp	r16, r24
 88e:	20 f0       	brcs	.+8      	; 0x898 <xTaskGenericCreate+0x152>
 890:	d0 93 6d 07 	sts	0x076D, r29	; 0x80076d <pxCurrentTCB+0x1>
 894:	c0 93 6c 07 	sts	0x076C, r28	; 0x80076c <pxCurrentTCB>
 898:	8e 89       	ldd	r24, Y+22	; 0x16
 89a:	90 91 1b 07 	lds	r25, 0x071B	; 0x80071b <uxTopUsedPriority>
 89e:	98 17       	cp	r25, r24
 8a0:	10 f4       	brcc	.+4      	; 0x8a6 <xTaskGenericCreate+0x160>
 8a2:	80 93 1b 07 	sts	0x071B, r24	; 0x80071b <uxTopUsedPriority>
 8a6:	90 91 14 07 	lds	r25, 0x0714	; 0x800714 <uxTaskNumber>
 8aa:	9f 5f       	subi	r25, 0xFF	; 255
 8ac:	90 93 14 07 	sts	0x0714, r25	; 0x800714 <uxTaskNumber>
 8b0:	90 91 1a 07 	lds	r25, 0x071A	; 0x80071a <uxTopReadyPriority>
 8b4:	98 17       	cp	r25, r24
 8b6:	10 f4       	brcc	.+4      	; 0x8bc <xTaskGenericCreate+0x176>
 8b8:	80 93 1a 07 	sts	0x071A, r24	; 0x80071a <uxTopReadyPriority>
 8bc:	90 e0       	ldi	r25, 0x00	; 0
 8be:	9c 01       	movw	r18, r24
 8c0:	22 0f       	add	r18, r18
 8c2:	33 1f       	adc	r19, r19
 8c4:	22 0f       	add	r18, r18
 8c6:	33 1f       	adc	r19, r19
 8c8:	22 0f       	add	r18, r18
 8ca:	33 1f       	adc	r19, r19
 8cc:	82 0f       	add	r24, r18
 8ce:	93 1f       	adc	r25, r19
 8d0:	b6 01       	movw	r22, r12
 8d2:	88 5b       	subi	r24, 0xB8	; 184
 8d4:	98 4f       	sbci	r25, 0xF8	; 248
 8d6:	2f dc       	rcall	.-1954   	; 0x136 <vListInsertEnd>
 8d8:	0f 90       	pop	r0
 8da:	0f be       	out	0x3f, r0	; 63
 8dc:	80 91 19 07 	lds	r24, 0x0719	; 0x800719 <xSchedulerRunning>
 8e0:	88 23       	and	r24, r24
 8e2:	51 f0       	breq	.+20     	; 0x8f8 <xTaskGenericCreate+0x1b2>
 8e4:	e0 91 6c 07 	lds	r30, 0x076C	; 0x80076c <pxCurrentTCB>
 8e8:	f0 91 6d 07 	lds	r31, 0x076D	; 0x80076d <pxCurrentTCB+0x1>
 8ec:	86 89       	ldd	r24, Z+22	; 0x16
 8ee:	80 17       	cp	r24, r16
 8f0:	28 f4       	brcc	.+10     	; 0x8fc <xTaskGenericCreate+0x1b6>
 8f2:	41 de       	rcall	.-894    	; 0x576 <vPortYield>
 8f4:	81 e0       	ldi	r24, 0x01	; 1
 8f6:	09 c0       	rjmp	.+18     	; 0x90a <xTaskGenericCreate+0x1c4>
 8f8:	81 e0       	ldi	r24, 0x01	; 1
 8fa:	07 c0       	rjmp	.+14     	; 0x90a <xTaskGenericCreate+0x1c4>
 8fc:	81 e0       	ldi	r24, 0x01	; 1
 8fe:	05 c0       	rjmp	.+10     	; 0x90a <xTaskGenericCreate+0x1c4>
 900:	d8 8e       	std	Y+24, r13	; 0x18
 902:	cf 8a       	std	Y+23, r12	; 0x17
 904:	c6 01       	movw	r24, r12
 906:	47 cf       	rjmp	.-370    	; 0x796 <xTaskGenericCreate+0x50>
 908:	8f ef       	ldi	r24, 0xFF	; 255
 90a:	df 91       	pop	r29
 90c:	cf 91       	pop	r28
 90e:	1f 91       	pop	r17
 910:	0f 91       	pop	r16
 912:	ff 90       	pop	r15
 914:	ef 90       	pop	r14
 916:	df 90       	pop	r13
 918:	cf 90       	pop	r12
 91a:	bf 90       	pop	r11
 91c:	af 90       	pop	r10
 91e:	9f 90       	pop	r9
 920:	8f 90       	pop	r8
 922:	7f 90       	pop	r7
 924:	6f 90       	pop	r6
 926:	5f 90       	pop	r5
 928:	4f 90       	pop	r4
 92a:	08 95       	ret

0000092c <vTaskStartScheduler>:
 92c:	af 92       	push	r10
 92e:	bf 92       	push	r11
 930:	cf 92       	push	r12
 932:	df 92       	push	r13
 934:	ef 92       	push	r14
 936:	ff 92       	push	r15
 938:	0f 93       	push	r16
 93a:	a1 2c       	mov	r10, r1
 93c:	b1 2c       	mov	r11, r1
 93e:	c1 2c       	mov	r12, r1
 940:	d1 2c       	mov	r13, r1
 942:	e1 2c       	mov	r14, r1
 944:	f1 2c       	mov	r15, r1
 946:	00 e0       	ldi	r16, 0x00	; 0
 948:	20 e0       	ldi	r18, 0x00	; 0
 94a:	30 e0       	ldi	r19, 0x00	; 0
 94c:	45 e5       	ldi	r20, 0x55	; 85
 94e:	50 e0       	ldi	r21, 0x00	; 0
 950:	6e e2       	ldi	r22, 0x2E	; 46
 952:	71 e0       	ldi	r23, 0x01	; 1
 954:	82 e2       	ldi	r24, 0x22	; 34
 956:	96 e0       	ldi	r25, 0x06	; 6
 958:	f6 de       	rcall	.-532    	; 0x746 <xTaskGenericCreate>
 95a:	81 30       	cpi	r24, 0x01	; 1
 95c:	41 f4       	brne	.+16     	; 0x96e <vTaskStartScheduler+0x42>
 95e:	f8 94       	cli
 960:	80 93 19 07 	sts	0x0719, r24	; 0x800719 <xSchedulerRunning>
 964:	10 92 1d 07 	sts	0x071D, r1	; 0x80071d <xTickCount+0x1>
 968:	10 92 1c 07 	sts	0x071C, r1	; 0x80071c <xTickCount>
 96c:	ca dd       	rcall	.-1132   	; 0x502 <xPortStartScheduler>
 96e:	0f 91       	pop	r16
 970:	ff 90       	pop	r15
 972:	ef 90       	pop	r14
 974:	df 90       	pop	r13
 976:	cf 90       	pop	r12
 978:	bf 90       	pop	r11
 97a:	af 90       	pop	r10
 97c:	08 95       	ret

0000097e <vTaskSuspendAll>:
 97e:	80 91 18 07 	lds	r24, 0x0718	; 0x800718 <uxSchedulerSuspended>
 982:	8f 5f       	subi	r24, 0xFF	; 255
 984:	80 93 18 07 	sts	0x0718, r24	; 0x800718 <uxSchedulerSuspended>
 988:	08 95       	ret

0000098a <vTaskIncrementTick>:
 98a:	0f 93       	push	r16
 98c:	1f 93       	push	r17
 98e:	cf 93       	push	r28
 990:	df 93       	push	r29
 992:	80 91 18 07 	lds	r24, 0x0718	; 0x800718 <uxSchedulerSuspended>
 996:	81 11       	cpse	r24, r1
 998:	af c0       	rjmp	.+350    	; 0xaf8 <vTaskIncrementTick+0x16e>
 99a:	80 91 1c 07 	lds	r24, 0x071C	; 0x80071c <xTickCount>
 99e:	90 91 1d 07 	lds	r25, 0x071D	; 0x80071d <xTickCount+0x1>
 9a2:	01 96       	adiw	r24, 0x01	; 1
 9a4:	90 93 1d 07 	sts	0x071D, r25	; 0x80071d <xTickCount+0x1>
 9a8:	80 93 1c 07 	sts	0x071C, r24	; 0x80071c <xTickCount>
 9ac:	80 91 1c 07 	lds	r24, 0x071C	; 0x80071c <xTickCount>
 9b0:	90 91 1d 07 	lds	r25, 0x071D	; 0x80071d <xTickCount+0x1>
 9b4:	89 2b       	or	r24, r25
 9b6:	99 f5       	brne	.+102    	; 0xa1e <vTaskIncrementTick+0x94>
 9b8:	80 91 34 07 	lds	r24, 0x0734	; 0x800734 <pxDelayedTaskList>
 9bc:	90 91 35 07 	lds	r25, 0x0735	; 0x800735 <pxDelayedTaskList+0x1>
 9c0:	20 91 32 07 	lds	r18, 0x0732	; 0x800732 <pxOverflowDelayedTaskList>
 9c4:	30 91 33 07 	lds	r19, 0x0733	; 0x800733 <pxOverflowDelayedTaskList+0x1>
 9c8:	30 93 35 07 	sts	0x0735, r19	; 0x800735 <pxDelayedTaskList+0x1>
 9cc:	20 93 34 07 	sts	0x0734, r18	; 0x800734 <pxDelayedTaskList>
 9d0:	90 93 33 07 	sts	0x0733, r25	; 0x800733 <pxOverflowDelayedTaskList+0x1>
 9d4:	80 93 32 07 	sts	0x0732, r24	; 0x800732 <pxOverflowDelayedTaskList>
 9d8:	80 91 15 07 	lds	r24, 0x0715	; 0x800715 <xNumOfOverflows>
 9dc:	8f 5f       	subi	r24, 0xFF	; 255
 9de:	80 93 15 07 	sts	0x0715, r24	; 0x800715 <xNumOfOverflows>
 9e2:	e0 91 34 07 	lds	r30, 0x0734	; 0x800734 <pxDelayedTaskList>
 9e6:	f0 91 35 07 	lds	r31, 0x0735	; 0x800735 <pxDelayedTaskList+0x1>
 9ea:	80 81       	ld	r24, Z
 9ec:	81 11       	cpse	r24, r1
 9ee:	07 c0       	rjmp	.+14     	; 0x9fe <vTaskIncrementTick+0x74>
 9f0:	8f ef       	ldi	r24, 0xFF	; 255
 9f2:	9f ef       	ldi	r25, 0xFF	; 255
 9f4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 9f8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 9fc:	10 c0       	rjmp	.+32     	; 0xa1e <vTaskIncrementTick+0x94>
 9fe:	e0 91 34 07 	lds	r30, 0x0734	; 0x800734 <pxDelayedTaskList>
 a02:	f0 91 35 07 	lds	r31, 0x0735	; 0x800735 <pxDelayedTaskList+0x1>
 a06:	05 80       	ldd	r0, Z+5	; 0x05
 a08:	f6 81       	ldd	r31, Z+6	; 0x06
 a0a:	e0 2d       	mov	r30, r0
 a0c:	06 80       	ldd	r0, Z+6	; 0x06
 a0e:	f7 81       	ldd	r31, Z+7	; 0x07
 a10:	e0 2d       	mov	r30, r0
 a12:	82 81       	ldd	r24, Z+2	; 0x02
 a14:	93 81       	ldd	r25, Z+3	; 0x03
 a16:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 a1a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 a1e:	20 91 1c 07 	lds	r18, 0x071C	; 0x80071c <xTickCount>
 a22:	30 91 1d 07 	lds	r19, 0x071D	; 0x80071d <xTickCount+0x1>
 a26:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 a2a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 a2e:	28 17       	cp	r18, r24
 a30:	39 07       	cpc	r19, r25
 a32:	08 f4       	brcc	.+2      	; 0xa36 <vTaskIncrementTick+0xac>
 a34:	66 c0       	rjmp	.+204    	; 0xb02 <vTaskIncrementTick+0x178>
 a36:	e0 91 34 07 	lds	r30, 0x0734	; 0x800734 <pxDelayedTaskList>
 a3a:	f0 91 35 07 	lds	r31, 0x0735	; 0x800735 <pxDelayedTaskList+0x1>
 a3e:	80 81       	ld	r24, Z
 a40:	88 23       	and	r24, r24
 a42:	99 f0       	breq	.+38     	; 0xa6a <vTaskIncrementTick+0xe0>
 a44:	e0 91 34 07 	lds	r30, 0x0734	; 0x800734 <pxDelayedTaskList>
 a48:	f0 91 35 07 	lds	r31, 0x0735	; 0x800735 <pxDelayedTaskList+0x1>
 a4c:	05 80       	ldd	r0, Z+5	; 0x05
 a4e:	f6 81       	ldd	r31, Z+6	; 0x06
 a50:	e0 2d       	mov	r30, r0
 a52:	c6 81       	ldd	r28, Z+6	; 0x06
 a54:	d7 81       	ldd	r29, Z+7	; 0x07
 a56:	8a 81       	ldd	r24, Y+2	; 0x02
 a58:	9b 81       	ldd	r25, Y+3	; 0x03
 a5a:	20 91 1c 07 	lds	r18, 0x071C	; 0x80071c <xTickCount>
 a5e:	30 91 1d 07 	lds	r19, 0x071D	; 0x80071d <xTickCount+0x1>
 a62:	28 17       	cp	r18, r24
 a64:	39 07       	cpc	r19, r25
 a66:	f8 f4       	brcc	.+62     	; 0xaa6 <vTaskIncrementTick+0x11c>
 a68:	19 c0       	rjmp	.+50     	; 0xa9c <vTaskIncrementTick+0x112>
 a6a:	8f ef       	ldi	r24, 0xFF	; 255
 a6c:	9f ef       	ldi	r25, 0xFF	; 255
 a6e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 a72:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 a76:	45 c0       	rjmp	.+138    	; 0xb02 <vTaskIncrementTick+0x178>
 a78:	e0 91 34 07 	lds	r30, 0x0734	; 0x800734 <pxDelayedTaskList>
 a7c:	f0 91 35 07 	lds	r31, 0x0735	; 0x800735 <pxDelayedTaskList+0x1>
 a80:	05 80       	ldd	r0, Z+5	; 0x05
 a82:	f6 81       	ldd	r31, Z+6	; 0x06
 a84:	e0 2d       	mov	r30, r0
 a86:	c6 81       	ldd	r28, Z+6	; 0x06
 a88:	d7 81       	ldd	r29, Z+7	; 0x07
 a8a:	8a 81       	ldd	r24, Y+2	; 0x02
 a8c:	9b 81       	ldd	r25, Y+3	; 0x03
 a8e:	20 91 1c 07 	lds	r18, 0x071C	; 0x80071c <xTickCount>
 a92:	30 91 1d 07 	lds	r19, 0x071D	; 0x80071d <xTickCount+0x1>
 a96:	28 17       	cp	r18, r24
 a98:	39 07       	cpc	r19, r25
 a9a:	28 f4       	brcc	.+10     	; 0xaa6 <vTaskIncrementTick+0x11c>
 a9c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 aa0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 aa4:	2e c0       	rjmp	.+92     	; 0xb02 <vTaskIncrementTick+0x178>
 aa6:	8e 01       	movw	r16, r28
 aa8:	0e 5f       	subi	r16, 0xFE	; 254
 aaa:	1f 4f       	sbci	r17, 0xFF	; 255
 aac:	c8 01       	movw	r24, r16
 aae:	a5 db       	rcall	.-2230   	; 0x1fa <vListRemove>
 ab0:	8c 89       	ldd	r24, Y+20	; 0x14
 ab2:	9d 89       	ldd	r25, Y+21	; 0x15
 ab4:	89 2b       	or	r24, r25
 ab6:	19 f0       	breq	.+6      	; 0xabe <vTaskIncrementTick+0x134>
 ab8:	ce 01       	movw	r24, r28
 aba:	0c 96       	adiw	r24, 0x0c	; 12
 abc:	9e db       	rcall	.-2244   	; 0x1fa <vListRemove>
 abe:	8e 89       	ldd	r24, Y+22	; 0x16
 ac0:	90 91 1a 07 	lds	r25, 0x071A	; 0x80071a <uxTopReadyPriority>
 ac4:	98 17       	cp	r25, r24
 ac6:	10 f4       	brcc	.+4      	; 0xacc <vTaskIncrementTick+0x142>
 ac8:	80 93 1a 07 	sts	0x071A, r24	; 0x80071a <uxTopReadyPriority>
 acc:	90 e0       	ldi	r25, 0x00	; 0
 ace:	9c 01       	movw	r18, r24
 ad0:	22 0f       	add	r18, r18
 ad2:	33 1f       	adc	r19, r19
 ad4:	22 0f       	add	r18, r18
 ad6:	33 1f       	adc	r19, r19
 ad8:	22 0f       	add	r18, r18
 ada:	33 1f       	adc	r19, r19
 adc:	82 0f       	add	r24, r18
 ade:	93 1f       	adc	r25, r19
 ae0:	b8 01       	movw	r22, r16
 ae2:	88 5b       	subi	r24, 0xB8	; 184
 ae4:	98 4f       	sbci	r25, 0xF8	; 248
 ae6:	27 db       	rcall	.-2482   	; 0x136 <vListInsertEnd>
 ae8:	e0 91 34 07 	lds	r30, 0x0734	; 0x800734 <pxDelayedTaskList>
 aec:	f0 91 35 07 	lds	r31, 0x0735	; 0x800735 <pxDelayedTaskList+0x1>
 af0:	80 81       	ld	r24, Z
 af2:	81 11       	cpse	r24, r1
 af4:	c1 cf       	rjmp	.-126    	; 0xa78 <vTaskIncrementTick+0xee>
 af6:	b9 cf       	rjmp	.-142    	; 0xa6a <vTaskIncrementTick+0xe0>
 af8:	80 91 17 07 	lds	r24, 0x0717	; 0x800717 <uxMissedTicks>
 afc:	8f 5f       	subi	r24, 0xFF	; 255
 afe:	80 93 17 07 	sts	0x0717, r24	; 0x800717 <uxMissedTicks>
 b02:	df 91       	pop	r29
 b04:	cf 91       	pop	r28
 b06:	1f 91       	pop	r17
 b08:	0f 91       	pop	r16
 b0a:	08 95       	ret

00000b0c <xTaskResumeAll>:
 b0c:	cf 92       	push	r12
 b0e:	df 92       	push	r13
 b10:	ef 92       	push	r14
 b12:	ff 92       	push	r15
 b14:	0f 93       	push	r16
 b16:	1f 93       	push	r17
 b18:	cf 93       	push	r28
 b1a:	df 93       	push	r29
 b1c:	0f b6       	in	r0, 0x3f	; 63
 b1e:	f8 94       	cli
 b20:	0f 92       	push	r0
 b22:	80 91 18 07 	lds	r24, 0x0718	; 0x800718 <uxSchedulerSuspended>
 b26:	81 50       	subi	r24, 0x01	; 1
 b28:	80 93 18 07 	sts	0x0718, r24	; 0x800718 <uxSchedulerSuspended>
 b2c:	80 91 18 07 	lds	r24, 0x0718	; 0x800718 <uxSchedulerSuspended>
 b30:	81 11       	cpse	r24, r1
 b32:	5f c0       	rjmp	.+190    	; 0xbf2 <xTaskResumeAll+0xe6>
 b34:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <uxCurrentNumberOfTasks>
 b38:	81 11       	cpse	r24, r1
 b3a:	2f c0       	rjmp	.+94     	; 0xb9a <xTaskResumeAll+0x8e>
 b3c:	5d c0       	rjmp	.+186    	; 0xbf8 <xTaskResumeAll+0xec>
 b3e:	d7 01       	movw	r26, r14
 b40:	15 96       	adiw	r26, 0x05	; 5
 b42:	ed 91       	ld	r30, X+
 b44:	fc 91       	ld	r31, X
 b46:	16 97       	sbiw	r26, 0x06	; 6
 b48:	c6 81       	ldd	r28, Z+6	; 0x06
 b4a:	d7 81       	ldd	r29, Z+7	; 0x07
 b4c:	ce 01       	movw	r24, r28
 b4e:	0c 96       	adiw	r24, 0x0c	; 12
 b50:	54 db       	rcall	.-2392   	; 0x1fa <vListRemove>
 b52:	8e 01       	movw	r16, r28
 b54:	0e 5f       	subi	r16, 0xFE	; 254
 b56:	1f 4f       	sbci	r17, 0xFF	; 255
 b58:	c8 01       	movw	r24, r16
 b5a:	4f db       	rcall	.-2402   	; 0x1fa <vListRemove>
 b5c:	8e 89       	ldd	r24, Y+22	; 0x16
 b5e:	90 91 1a 07 	lds	r25, 0x071A	; 0x80071a <uxTopReadyPriority>
 b62:	98 17       	cp	r25, r24
 b64:	10 f4       	brcc	.+4      	; 0xb6a <xTaskResumeAll+0x5e>
 b66:	80 93 1a 07 	sts	0x071A, r24	; 0x80071a <uxTopReadyPriority>
 b6a:	90 e0       	ldi	r25, 0x00	; 0
 b6c:	9c 01       	movw	r18, r24
 b6e:	22 0f       	add	r18, r18
 b70:	33 1f       	adc	r19, r19
 b72:	22 0f       	add	r18, r18
 b74:	33 1f       	adc	r19, r19
 b76:	22 0f       	add	r18, r18
 b78:	33 1f       	adc	r19, r19
 b7a:	82 0f       	add	r24, r18
 b7c:	93 1f       	adc	r25, r19
 b7e:	b8 01       	movw	r22, r16
 b80:	88 5b       	subi	r24, 0xB8	; 184
 b82:	98 4f       	sbci	r25, 0xF8	; 248
 b84:	d8 da       	rcall	.-2640   	; 0x136 <vListInsertEnd>
 b86:	e0 91 6c 07 	lds	r30, 0x076C	; 0x80076c <pxCurrentTCB>
 b8a:	f0 91 6d 07 	lds	r31, 0x076D	; 0x80076d <pxCurrentTCB+0x1>
 b8e:	9e 89       	ldd	r25, Y+22	; 0x16
 b90:	86 89       	ldd	r24, Z+22	; 0x16
 b92:	98 17       	cp	r25, r24
 b94:	58 f0       	brcs	.+22     	; 0xbac <xTaskResumeAll+0xa0>
 b96:	dc 2c       	mov	r13, r12
 b98:	09 c0       	rjmp	.+18     	; 0xbac <xTaskResumeAll+0xa0>
 b9a:	d1 2c       	mov	r13, r1
 b9c:	0f 2e       	mov	r0, r31
 b9e:	f9 e2       	ldi	r31, 0x29	; 41
 ba0:	ef 2e       	mov	r14, r31
 ba2:	f7 e0       	ldi	r31, 0x07	; 7
 ba4:	ff 2e       	mov	r15, r31
 ba6:	f0 2d       	mov	r31, r0
 ba8:	cc 24       	eor	r12, r12
 baa:	c3 94       	inc	r12
 bac:	f7 01       	movw	r30, r14
 bae:	80 81       	ld	r24, Z
 bb0:	81 11       	cpse	r24, r1
 bb2:	c5 cf       	rjmp	.-118    	; 0xb3e <xTaskResumeAll+0x32>
 bb4:	80 91 17 07 	lds	r24, 0x0717	; 0x800717 <uxMissedTicks>
 bb8:	88 23       	and	r24, r24
 bba:	79 f0       	breq	.+30     	; 0xbda <xTaskResumeAll+0xce>
 bbc:	80 91 17 07 	lds	r24, 0x0717	; 0x800717 <uxMissedTicks>
 bc0:	88 23       	and	r24, r24
 bc2:	91 f0       	breq	.+36     	; 0xbe8 <xTaskResumeAll+0xdc>
 bc4:	e2 de       	rcall	.-572    	; 0x98a <vTaskIncrementTick>
 bc6:	80 91 17 07 	lds	r24, 0x0717	; 0x800717 <uxMissedTicks>
 bca:	81 50       	subi	r24, 0x01	; 1
 bcc:	80 93 17 07 	sts	0x0717, r24	; 0x800717 <uxMissedTicks>
 bd0:	80 91 17 07 	lds	r24, 0x0717	; 0x800717 <uxMissedTicks>
 bd4:	81 11       	cpse	r24, r1
 bd6:	f6 cf       	rjmp	.-20     	; 0xbc4 <xTaskResumeAll+0xb8>
 bd8:	07 c0       	rjmp	.+14     	; 0xbe8 <xTaskResumeAll+0xdc>
 bda:	f1 e0       	ldi	r31, 0x01	; 1
 bdc:	df 16       	cp	r13, r31
 bde:	21 f0       	breq	.+8      	; 0xbe8 <xTaskResumeAll+0xdc>
 be0:	80 91 16 07 	lds	r24, 0x0716	; 0x800716 <xMissedYield>
 be4:	81 30       	cpi	r24, 0x01	; 1
 be6:	39 f4       	brne	.+14     	; 0xbf6 <xTaskResumeAll+0xea>
 be8:	10 92 16 07 	sts	0x0716, r1	; 0x800716 <xMissedYield>
 bec:	c4 dc       	rcall	.-1656   	; 0x576 <vPortYield>
 bee:	81 e0       	ldi	r24, 0x01	; 1
 bf0:	03 c0       	rjmp	.+6      	; 0xbf8 <xTaskResumeAll+0xec>
 bf2:	80 e0       	ldi	r24, 0x00	; 0
 bf4:	01 c0       	rjmp	.+2      	; 0xbf8 <xTaskResumeAll+0xec>
 bf6:	80 e0       	ldi	r24, 0x00	; 0
 bf8:	0f 90       	pop	r0
 bfa:	0f be       	out	0x3f, r0	; 63
 bfc:	df 91       	pop	r29
 bfe:	cf 91       	pop	r28
 c00:	1f 91       	pop	r17
 c02:	0f 91       	pop	r16
 c04:	ff 90       	pop	r15
 c06:	ef 90       	pop	r14
 c08:	df 90       	pop	r13
 c0a:	cf 90       	pop	r12
 c0c:	08 95       	ret

00000c0e <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
 c0e:	cf 93       	push	r28
 c10:	df 93       	push	r29
 c12:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
 c14:	89 2b       	or	r24, r25
 c16:	91 f0       	breq	.+36     	; 0xc3c <vTaskDelay+0x2e>
		{
			vTaskSuspendAll();
 c18:	b2 de       	rcall	.-668    	; 0x97e <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 c1a:	80 91 1c 07 	lds	r24, 0x071C	; 0x80071c <xTickCount>
 c1e:	90 91 1d 07 	lds	r25, 0x071D	; 0x80071d <xTickCount+0x1>
 c22:	c8 0f       	add	r28, r24
 c24:	d9 1f       	adc	r29, r25

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 c26:	80 91 6c 07 	lds	r24, 0x076C	; 0x80076c <pxCurrentTCB>
 c2a:	90 91 6d 07 	lds	r25, 0x076D	; 0x80076d <pxCurrentTCB+0x1>
 c2e:	02 96       	adiw	r24, 0x02	; 2
 c30:	e4 da       	rcall	.-2616   	; 0x1fa <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 c32:	ce 01       	movw	r24, r28
 c34:	53 dd       	rcall	.-1370   	; 0x6dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 c36:	6a df       	rcall	.-300    	; 0xb0c <xTaskResumeAll>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 c38:	81 11       	cpse	r24, r1
 c3a:	01 c0       	rjmp	.+2      	; 0xc3e <vTaskDelay+0x30>
		{
			portYIELD_WITHIN_API();
 c3c:	9c dc       	rcall	.-1736   	; 0x576 <vPortYield>
 c3e:	df 91       	pop	r29
		}
	}
 c40:	cf 91       	pop	r28
 c42:	08 95       	ret

00000c44 <prvIdleTask>:
 c44:	0f 2e       	mov	r0, r31
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 c46:	f0 e2       	ldi	r31, 0x20	; 32
 c48:	ef 2e       	mov	r14, r31
 c4a:	f7 e0       	ldi	r31, 0x07	; 7
 c4c:	ff 2e       	mov	r15, r31
 c4e:	f0 2d       	mov	r31, r0

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 c50:	c8 e4       	ldi	r28, 0x48	; 72
 c52:	d7 e0       	ldi	r29, 0x07	; 7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 c54:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <uxTasksDeleted>
 c58:	88 23       	and	r24, r24
 c5a:	29 f1       	breq	.+74     	; 0xca6 <prvIdleTask+0x62>
		{
			vTaskSuspendAll();
 c5c:	90 de       	rcall	.-736    	; 0x97e <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 c5e:	d7 01       	movw	r26, r14
			xTaskResumeAll();
 c60:	1c 91       	ld	r17, X
 c62:	54 df       	rcall	.-344    	; 0xb0c <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 c64:	11 23       	and	r17, r17
 c66:	f9 f0       	breq	.+62     	; 0xca6 <prvIdleTask+0x62>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 c68:	0f b6       	in	r0, 0x3f	; 63
 c6a:	f8 94       	cli
 c6c:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 c6e:	d7 01       	movw	r26, r14
 c70:	15 96       	adiw	r26, 0x05	; 5
 c72:	ed 91       	ld	r30, X+
 c74:	fc 91       	ld	r31, X
 c76:	16 97       	sbiw	r26, 0x06	; 6
 c78:	06 81       	ldd	r16, Z+6	; 0x06
 c7a:	17 81       	ldd	r17, Z+7	; 0x07
					vListRemove( &( pxTCB->xGenericListItem ) );
 c7c:	c8 01       	movw	r24, r16
 c7e:	02 96       	adiw	r24, 0x02	; 2
 c80:	bc da       	rcall	.-2696   	; 0x1fa <vListRemove>
					--uxCurrentNumberOfTasks;
 c82:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <uxCurrentNumberOfTasks>
 c86:	81 50       	subi	r24, 0x01	; 1
 c88:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <uxCurrentNumberOfTasks>
					--uxTasksDeleted;
 c8c:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <uxTasksDeleted>
 c90:	81 50       	subi	r24, 0x01	; 1
 c92:	80 93 1f 07 	sts	0x071F, r24	; 0x80071f <uxTasksDeleted>
				}
				taskEXIT_CRITICAL();
 c96:	0f 90       	pop	r0
 c98:	0f be       	out	0x3f, r0	; 63
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 c9a:	f8 01       	movw	r30, r16
 c9c:	87 89       	ldd	r24, Z+23	; 0x17
 c9e:	90 8d       	ldd	r25, Z+24	; 0x18
		vPortFree( pxTCB );
 ca0:	37 da       	rcall	.-2962   	; 0x110 <vPortFree>
 ca2:	c8 01       	movw	r24, r16

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 ca4:	35 da       	rcall	.-2966   	; 0x110 <vPortFree>
 ca6:	88 81       	ld	r24, Y
 ca8:	82 30       	cpi	r24, 0x02	; 2
			{
				taskYIELD();
 caa:	a0 f2       	brcs	.-88     	; 0xc54 <prvIdleTask+0x10>
 cac:	64 dc       	rcall	.-1848   	; 0x576 <vPortYield>
 cae:	d2 cf       	rjmp	.-92     	; 0xc54 <prvIdleTask+0x10>

00000cb0 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 cb0:	80 91 18 07 	lds	r24, 0x0718	; 0x800718 <uxSchedulerSuspended>
 cb4:	81 11       	cpse	r24, r1
 cb6:	13 c0       	rjmp	.+38     	; 0xcde <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 cb8:	80 91 1a 07 	lds	r24, 0x071A	; 0x80071a <uxTopReadyPriority>
 cbc:	90 e0       	ldi	r25, 0x00	; 0
 cbe:	fc 01       	movw	r30, r24
 cc0:	ee 0f       	add	r30, r30
 cc2:	ff 1f       	adc	r31, r31
 cc4:	ee 0f       	add	r30, r30
 cc6:	ff 1f       	adc	r31, r31
 cc8:	ee 0f       	add	r30, r30
 cca:	ff 1f       	adc	r31, r31
 ccc:	8e 0f       	add	r24, r30
 cce:	9f 1f       	adc	r25, r31
 cd0:	fc 01       	movw	r30, r24
 cd2:	e8 5b       	subi	r30, 0xB8	; 184
 cd4:	f8 4f       	sbci	r31, 0xF8	; 248
 cd6:	80 81       	ld	r24, Z
 cd8:	88 23       	and	r24, r24
 cda:	29 f0       	breq	.+10     	; 0xce6 <vTaskSwitchContext+0x36>
 cdc:	1b c0       	rjmp	.+54     	; 0xd14 <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 cde:	81 e0       	ldi	r24, 0x01	; 1
 ce0:	80 93 16 07 	sts	0x0716, r24	; 0x800716 <xMissedYield>
 ce4:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
 ce6:	80 91 1a 07 	lds	r24, 0x071A	; 0x80071a <uxTopReadyPriority>
 cea:	81 50       	subi	r24, 0x01	; 1
 cec:	80 93 1a 07 	sts	0x071A, r24	; 0x80071a <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 cf0:	80 91 1a 07 	lds	r24, 0x071A	; 0x80071a <uxTopReadyPriority>
 cf4:	90 e0       	ldi	r25, 0x00	; 0
 cf6:	fc 01       	movw	r30, r24
 cf8:	ee 0f       	add	r30, r30
 cfa:	ff 1f       	adc	r31, r31
 cfc:	ee 0f       	add	r30, r30
 cfe:	ff 1f       	adc	r31, r31
 d00:	ee 0f       	add	r30, r30
 d02:	ff 1f       	adc	r31, r31
 d04:	8e 0f       	add	r24, r30
 d06:	9f 1f       	adc	r25, r31
 d08:	fc 01       	movw	r30, r24
 d0a:	e8 5b       	subi	r30, 0xB8	; 184
 d0c:	f8 4f       	sbci	r31, 0xF8	; 248
 d0e:	80 81       	ld	r24, Z
 d10:	88 23       	and	r24, r24
 d12:	49 f3       	breq	.-46     	; 0xce6 <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 d14:	80 91 1a 07 	lds	r24, 0x071A	; 0x80071a <uxTopReadyPriority>
 d18:	90 e0       	ldi	r25, 0x00	; 0
 d1a:	9c 01       	movw	r18, r24
 d1c:	22 0f       	add	r18, r18
 d1e:	33 1f       	adc	r19, r19
 d20:	22 0f       	add	r18, r18
 d22:	33 1f       	adc	r19, r19
 d24:	22 0f       	add	r18, r18
 d26:	33 1f       	adc	r19, r19
 d28:	28 0f       	add	r18, r24
 d2a:	39 1f       	adc	r19, r25
 d2c:	d9 01       	movw	r26, r18
 d2e:	a8 5b       	subi	r26, 0xB8	; 184
 d30:	b8 4f       	sbci	r27, 0xF8	; 248
 d32:	11 96       	adiw	r26, 0x01	; 1
 d34:	ed 91       	ld	r30, X+
 d36:	fc 91       	ld	r31, X
 d38:	12 97       	sbiw	r26, 0x02	; 2
 d3a:	02 80       	ldd	r0, Z+2	; 0x02
 d3c:	f3 81       	ldd	r31, Z+3	; 0x03
 d3e:	e0 2d       	mov	r30, r0
 d40:	12 96       	adiw	r26, 0x02	; 2
 d42:	fc 93       	st	X, r31
 d44:	ee 93       	st	-X, r30
 d46:	11 97       	sbiw	r26, 0x01	; 1
 d48:	25 5b       	subi	r18, 0xB5	; 181
 d4a:	38 4f       	sbci	r19, 0xF8	; 248
 d4c:	e2 17       	cp	r30, r18
 d4e:	f3 07       	cpc	r31, r19
 d50:	29 f4       	brne	.+10     	; 0xd5c <vTaskSwitchContext+0xac>
 d52:	22 81       	ldd	r18, Z+2	; 0x02
 d54:	33 81       	ldd	r19, Z+3	; 0x03
 d56:	fd 01       	movw	r30, r26
 d58:	32 83       	std	Z+2, r19	; 0x02
 d5a:	21 83       	std	Z+1, r18	; 0x01
 d5c:	fc 01       	movw	r30, r24
 d5e:	ee 0f       	add	r30, r30
 d60:	ff 1f       	adc	r31, r31
 d62:	ee 0f       	add	r30, r30
 d64:	ff 1f       	adc	r31, r31
 d66:	ee 0f       	add	r30, r30
 d68:	ff 1f       	adc	r31, r31
 d6a:	8e 0f       	add	r24, r30
 d6c:	9f 1f       	adc	r25, r31
 d6e:	fc 01       	movw	r30, r24
 d70:	e8 5b       	subi	r30, 0xB8	; 184
 d72:	f8 4f       	sbci	r31, 0xF8	; 248
 d74:	01 80       	ldd	r0, Z+1	; 0x01
 d76:	f2 81       	ldd	r31, Z+2	; 0x02
 d78:	e0 2d       	mov	r30, r0
 d7a:	86 81       	ldd	r24, Z+6	; 0x06
 d7c:	97 81       	ldd	r25, Z+7	; 0x07
 d7e:	90 93 6d 07 	sts	0x076D, r25	; 0x80076d <pxCurrentTCB+0x1>
 d82:	80 93 6c 07 	sts	0x076C, r24	; 0x80076c <pxCurrentTCB>
 d86:	08 95       	ret

00000d88 <memset>:
 d88:	dc 01       	movw	r26, r24
 d8a:	01 c0       	rjmp	.+2      	; 0xd8e <memset+0x6>
 d8c:	6d 93       	st	X+, r22
 d8e:	41 50       	subi	r20, 0x01	; 1
 d90:	50 40       	sbci	r21, 0x00	; 0
 d92:	e0 f7       	brcc	.-8      	; 0xd8c <memset+0x4>
 d94:	08 95       	ret

00000d96 <strncpy>:
 d96:	fb 01       	movw	r30, r22
 d98:	dc 01       	movw	r26, r24
 d9a:	41 50       	subi	r20, 0x01	; 1
 d9c:	50 40       	sbci	r21, 0x00	; 0
 d9e:	48 f0       	brcs	.+18     	; 0xdb2 <strncpy+0x1c>
 da0:	01 90       	ld	r0, Z+
 da2:	0d 92       	st	X+, r0
 da4:	00 20       	and	r0, r0
 da6:	c9 f7       	brne	.-14     	; 0xd9a <strncpy+0x4>
 da8:	01 c0       	rjmp	.+2      	; 0xdac <strncpy+0x16>
 daa:	1d 92       	st	X+, r1
 dac:	41 50       	subi	r20, 0x01	; 1
 dae:	50 40       	sbci	r21, 0x00	; 0
 db0:	e0 f7       	brcc	.-8      	; 0xdaa <strncpy+0x14>
 db2:	08 95       	ret

00000db4 <_exit>:
 db4:	f8 94       	cli

00000db6 <__stop_program>:
 db6:	ff cf       	rjmp	.-2      	; 0xdb6 <__stop_program>
