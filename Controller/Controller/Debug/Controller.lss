
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  00000ebe  00000f52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ebe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000640  00800132  00800132  00000f84  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f84  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fb4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  00000ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002721  00000000  00000000  00001244  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fd4  00000000  00000000  00003965  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001725  00000000  00000000  00004939  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005c0  00000000  00000000  00006060  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e55  00000000  00000000  00006620  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001502  00000000  00000000  00007475  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000248  00000000  00000000  00008977  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	d4 c3       	rjmp	.+1960   	; 0x7de <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee eb       	ldi	r30, 0xBE	; 190
  a0:	fe e0       	ldi	r31, 0x0E	; 14
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 33       	cpi	r26, 0x32	; 50
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	27 e0       	ldi	r18, 0x07	; 7
  b4:	a2 e3       	ldi	r26, 0x32	; 50
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 37       	cpi	r26, 0x72	; 114
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	26 d2       	rcall	.+1100   	; 0x510 <main>
  c4:	fa c6       	rjmp	.+3572   	; 0xeba <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
  cc:	ec 01       	movw	r28, r24
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
  ce:	da d4       	rcall	.+2484   	; 0xa84 <vTaskSuspendAll>
  d0:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <__data_end>
  d4:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <__data_end+0x1>
  d8:	c9 01       	movw	r24, r18
  da:	8c 0f       	add	r24, r28
  dc:	9d 1f       	adc	r25, r29
  de:	8c 3d       	cpi	r24, 0xDC	; 220
  e0:	45 e0       	ldi	r20, 0x05	; 5
  e2:	94 07       	cpc	r25, r20
  e4:	58 f4       	brcc	.+22     	; 0xfc <pvPortMalloc+0x34>
  e6:	28 17       	cp	r18, r24
  e8:	39 07       	cpc	r19, r25
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
  ea:	58 f4       	brcc	.+22     	; 0x102 <pvPortMalloc+0x3a>
  ec:	e9 01       	movw	r28, r18
  ee:	cc 5c       	subi	r28, 0xCC	; 204
			xNextFreeByte += xWantedSize;			
  f0:	de 4f       	sbci	r29, 0xFE	; 254
  f2:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <__data_end+0x1>
  f6:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__data_end>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
  fa:	05 c0       	rjmp	.+10     	; 0x106 <pvPortMalloc+0x3e>
  fc:	c0 e0       	ldi	r28, 0x00	; 0
  fe:	d0 e0       	ldi	r29, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <pvPortMalloc+0x3e>
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
 102:	c0 e0       	ldi	r28, 0x00	; 0
 104:	d0 e0       	ldi	r29, 0x00	; 0
		}
	}
	#endif	

	return pvReturn;
}
 106:	85 d5       	rcall	.+2826   	; 0xc12 <xTaskResumeAll>
 108:	ce 01       	movw	r24, r28
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 110:	08 95       	ret

00000112 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
 112:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 114:	03 96       	adiw	r24, 0x03	; 3
 116:	92 83       	std	Z+2, r25	; 0x02
 118:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 11a:	2f ef       	ldi	r18, 0xFF	; 255
 11c:	3f ef       	ldi	r19, 0xFF	; 255
 11e:	34 83       	std	Z+4, r19	; 0x04
 120:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 122:	96 83       	std	Z+6, r25	; 0x06
 124:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 126:	90 87       	std	Z+8, r25	; 0x08
 128:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 12a:	10 82       	st	Z, r1
 12c:	08 95       	ret

0000012e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 12e:	fc 01       	movw	r30, r24
 130:	11 86       	std	Z+9, r1	; 0x09
 132:	10 86       	std	Z+8, r1	; 0x08
 134:	08 95       	ret

00000136 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	fc 01       	movw	r30, r24
 13c:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
 13e:	21 81       	ldd	r18, Z+1	; 0x01
 140:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
 142:	e9 01       	movw	r28, r18
 144:	8a 81       	ldd	r24, Y+2	; 0x02
 146:	9b 81       	ldd	r25, Y+3	; 0x03
 148:	13 96       	adiw	r26, 0x03	; 3
 14a:	9c 93       	st	X, r25
 14c:	8e 93       	st	-X, r24
 14e:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
 150:	81 81       	ldd	r24, Z+1	; 0x01
 152:	92 81       	ldd	r25, Z+2	; 0x02
 154:	15 96       	adiw	r26, 0x05	; 5
 156:	9c 93       	st	X, r25
 158:	8e 93       	st	-X, r24
 15a:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 15c:	8a 81       	ldd	r24, Y+2	; 0x02
 15e:	9b 81       	ldd	r25, Y+3	; 0x03
 160:	ec 01       	movw	r28, r24
 162:	7d 83       	std	Y+5, r23	; 0x05
 164:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 166:	e9 01       	movw	r28, r18
 168:	7b 83       	std	Y+3, r23	; 0x03
 16a:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 16c:	72 83       	std	Z+2, r23	; 0x02
 16e:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 170:	19 96       	adiw	r26, 0x09	; 9
 172:	fc 93       	st	X, r31
 174:	ee 93       	st	-X, r30
 176:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
 178:	80 81       	ld	r24, Z
 17a:	8f 5f       	subi	r24, 0xFF	; 255
 17c:	80 83       	st	Z, r24
}
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 18a:	48 81       	ld	r20, Y
 18c:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 18e:	4f 3f       	cpi	r20, 0xFF	; 255
 190:	2f ef       	ldi	r18, 0xFF	; 255
 192:	52 07       	cpc	r21, r18
 194:	31 f4       	brne	.+12     	; 0x1a2 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 196:	dc 01       	movw	r26, r24
 198:	17 96       	adiw	r26, 0x07	; 7
 19a:	ed 91       	ld	r30, X+
 19c:	fc 91       	ld	r31, X
 19e:	18 97       	sbiw	r26, 0x08	; 8
 1a0:	17 c0       	rjmp	.+46     	; 0x1d0 <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 1a2:	fc 01       	movw	r30, r24
 1a4:	33 96       	adiw	r30, 0x03	; 3
 1a6:	dc 01       	movw	r26, r24
 1a8:	15 96       	adiw	r26, 0x05	; 5
 1aa:	2d 91       	ld	r18, X+
 1ac:	3c 91       	ld	r19, X
 1ae:	16 97       	sbiw	r26, 0x06	; 6
 1b0:	d9 01       	movw	r26, r18
 1b2:	2d 91       	ld	r18, X+
 1b4:	3c 91       	ld	r19, X
 1b6:	42 17       	cp	r20, r18
 1b8:	53 07       	cpc	r21, r19
 1ba:	50 f0       	brcs	.+20     	; 0x1d0 <vListInsert+0x4c>
 1bc:	02 80       	ldd	r0, Z+2	; 0x02
 1be:	f3 81       	ldd	r31, Z+3	; 0x03
 1c0:	e0 2d       	mov	r30, r0
 1c2:	a2 81       	ldd	r26, Z+2	; 0x02
 1c4:	b3 81       	ldd	r27, Z+3	; 0x03
 1c6:	2d 91       	ld	r18, X+
 1c8:	3c 91       	ld	r19, X
 1ca:	42 17       	cp	r20, r18
 1cc:	53 07       	cpc	r21, r19
 1ce:	b0 f7       	brcc	.-20     	; 0x1bc <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 1d0:	a2 81       	ldd	r26, Z+2	; 0x02
 1d2:	b3 81       	ldd	r27, Z+3	; 0x03
 1d4:	bb 83       	std	Y+3, r27	; 0x03
 1d6:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 1d8:	15 96       	adiw	r26, 0x05	; 5
 1da:	dc 93       	st	X, r29
 1dc:	ce 93       	st	-X, r28
 1de:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
 1e0:	fd 83       	std	Y+5, r31	; 0x05
 1e2:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 1e4:	d3 83       	std	Z+3, r29	; 0x03
 1e6:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 1e8:	99 87       	std	Y+9, r25	; 0x09
 1ea:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
 1ec:	fc 01       	movw	r30, r24
 1ee:	20 81       	ld	r18, Z
 1f0:	2f 5f       	subi	r18, 0xFF	; 255
 1f2:	20 83       	st	Z, r18
}
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
 1fa:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 1fc:	a2 81       	ldd	r26, Z+2	; 0x02
 1fe:	b3 81       	ldd	r27, Z+3	; 0x03
 200:	84 81       	ldd	r24, Z+4	; 0x04
 202:	95 81       	ldd	r25, Z+5	; 0x05
 204:	15 96       	adiw	r26, 0x05	; 5
 206:	9c 93       	st	X, r25
 208:	8e 93       	st	-X, r24
 20a:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 20c:	a4 81       	ldd	r26, Z+4	; 0x04
 20e:	b5 81       	ldd	r27, Z+5	; 0x05
 210:	82 81       	ldd	r24, Z+2	; 0x02
 212:	93 81       	ldd	r25, Z+3	; 0x03
 214:	13 96       	adiw	r26, 0x03	; 3
 216:	9c 93       	st	X, r25
 218:	8e 93       	st	-X, r24
 21a:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 21c:	a0 85       	ldd	r26, Z+8	; 0x08
 21e:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 220:	11 96       	adiw	r26, 0x01	; 1
 222:	8d 91       	ld	r24, X+
 224:	9c 91       	ld	r25, X
 226:	12 97       	sbiw	r26, 0x02	; 2
 228:	e8 17       	cp	r30, r24
 22a:	f9 07       	cpc	r31, r25
 22c:	31 f4       	brne	.+12     	; 0x23a <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 22e:	84 81       	ldd	r24, Z+4	; 0x04
 230:	95 81       	ldd	r25, Z+5	; 0x05
 232:	12 96       	adiw	r26, 0x02	; 2
 234:	9c 93       	st	X, r25
 236:	8e 93       	st	-X, r24
 238:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
 23a:	11 86       	std	Z+9, r1	; 0x09
 23c:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 23e:	8c 91       	ld	r24, X
 240:	81 50       	subi	r24, 0x01	; 1
 242:	8c 93       	st	X, r24
 244:	08 95       	ret

00000246 <adc_init>:
//-------------------------------------------------- End Steering SM --------------------------------------------------//

//-------------------------------------------------- Start Transmission SM --------------------------------------------------//

void TRANSMIT_Init(){
	transmit_state = wait_to_transmit;
 246:	80 e4       	ldi	r24, 0x40	; 64
 248:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 24c:	87 e8       	ldi	r24, 0x87	; 135
 24e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 252:	08 95       	ret

00000254 <adc_read>:
 254:	ec e7       	ldi	r30, 0x7C	; 124
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	90 81       	ld	r25, Z
 25a:	98 7f       	andi	r25, 0xF8	; 248
 25c:	87 70       	andi	r24, 0x07	; 7
 25e:	89 2b       	or	r24, r25
 260:	80 83       	st	Z, r24
 262:	ea e7       	ldi	r30, 0x7A	; 122
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	80 81       	ld	r24, Z
 268:	80 64       	ori	r24, 0x40	; 64
 26a:	80 83       	st	Z, r24
 26c:	80 81       	ld	r24, Z
 26e:	86 fd       	sbrc	r24, 6
 270:	fd cf       	rjmp	.-6      	; 0x26c <adc_read+0x18>
 272:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 276:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 27a:	08 95       	ret

0000027c <initUSART>:
 27c:	81 30       	cpi	r24, 0x01	; 1
 27e:	81 f0       	breq	.+32     	; 0x2a0 <initUSART+0x24>
 280:	e1 ec       	ldi	r30, 0xC1	; 193
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	80 81       	ld	r24, Z
 286:	88 61       	ori	r24, 0x18	; 24
 288:	80 83       	st	Z, r24
 28a:	e2 ec       	ldi	r30, 0xC2	; 194
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	80 81       	ld	r24, Z
 290:	86 60       	ori	r24, 0x06	; 6
 292:	80 83       	st	Z, r24
 294:	83 e3       	ldi	r24, 0x33	; 51
 296:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 29a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 29e:	08 95       	ret
 2a0:	e9 ec       	ldi	r30, 0xC9	; 201
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	80 81       	ld	r24, Z
 2a6:	88 61       	ori	r24, 0x18	; 24
 2a8:	80 83       	st	Z, r24
 2aa:	ea ec       	ldi	r30, 0xCA	; 202
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	80 81       	ld	r24, Z
 2b0:	86 60       	ori	r24, 0x06	; 6
 2b2:	80 83       	st	Z, r24
 2b4:	83 e3       	ldi	r24, 0x33	; 51
 2b6:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 2ba:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 2be:	08 95       	ret

000002c0 <USART_Send>:
 2c0:	61 30       	cpi	r22, 0x01	; 1
 2c2:	41 f0       	breq	.+16     	; 0x2d4 <USART_Send+0x14>
 2c4:	e0 ec       	ldi	r30, 0xC0	; 192
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	90 81       	ld	r25, Z
 2ca:	95 ff       	sbrs	r25, 5
 2cc:	fd cf       	rjmp	.-6      	; 0x2c8 <USART_Send+0x8>
 2ce:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 2d2:	08 95       	ret
 2d4:	e8 ec       	ldi	r30, 0xC8	; 200
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	90 81       	ld	r25, Z
 2da:	95 ff       	sbrs	r25, 5
 2dc:	fd cf       	rjmp	.-6      	; 0x2d8 <USART_Send+0x18>
 2de:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 2e2:	08 95       	ret

000002e4 <JOY_Tick>:
 2e4:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <joy_state>
 2e8:	81 11       	cpse	r24, r1
 2ea:	52 c0       	rjmp	.+164    	; 0x390 <JOY_Tick+0xac>
 2ec:	b3 df       	rcall	.-154    	; 0x254 <adc_read>
 2ee:	90 93 14 07 	sts	0x0714, r25	; 0x800714 <joystick_value+0x1>
 2f2:	80 93 13 07 	sts	0x0713, r24	; 0x800713 <joystick_value>
 2f6:	9c 01       	movw	r18, r24
 2f8:	25 54       	subi	r18, 0x45	; 69
 2fa:	32 40       	sbci	r19, 0x02	; 2
 2fc:	2b 38       	cpi	r18, 0x8B	; 139
 2fe:	31 05       	cpc	r19, r1
 300:	38 f4       	brcc	.+14     	; 0x310 <JOY_Tick+0x2c>
 302:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <data_to_transmit>
 306:	88 7f       	andi	r24, 0xF8	; 248
 308:	81 60       	ori	r24, 0x01	; 1
 30a:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <data_to_transmit>
 30e:	40 c0       	rjmp	.+128    	; 0x390 <JOY_Tick+0xac>
 310:	9c 01       	movw	r18, r24
 312:	21 5d       	subi	r18, 0xD1	; 209
 314:	32 40       	sbci	r19, 0x02	; 2
 316:	2b 38       	cpi	r18, 0x8B	; 139
 318:	31 05       	cpc	r19, r1
 31a:	38 f4       	brcc	.+14     	; 0x32a <JOY_Tick+0x46>
 31c:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <data_to_transmit>
 320:	88 7f       	andi	r24, 0xF8	; 248
 322:	82 60       	ori	r24, 0x02	; 2
 324:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <data_to_transmit>
 328:	33 c0       	rjmp	.+102    	; 0x390 <JOY_Tick+0xac>
 32a:	8d 35       	cpi	r24, 0x5D	; 93
 32c:	23 e0       	ldi	r18, 0x03	; 3
 32e:	92 07       	cpc	r25, r18
 330:	38 f0       	brcs	.+14     	; 0x340 <JOY_Tick+0x5c>
 332:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <data_to_transmit>
 336:	88 7f       	andi	r24, 0xF8	; 248
 338:	83 60       	ori	r24, 0x03	; 3
 33a:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <data_to_transmit>
 33e:	28 c0       	rjmp	.+80     	; 0x390 <JOY_Tick+0xac>
 340:	9c 01       	movw	r18, r24
 342:	2f 54       	subi	r18, 0x4F	; 79
 344:	31 40       	sbci	r19, 0x01	; 1
 346:	25 3a       	cpi	r18, 0xA5	; 165
 348:	31 05       	cpc	r19, r1
 34a:	38 f4       	brcc	.+14     	; 0x35a <JOY_Tick+0x76>
 34c:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <data_to_transmit>
 350:	88 7f       	andi	r24, 0xF8	; 248
 352:	85 60       	ori	r24, 0x05	; 5
 354:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <data_to_transmit>
 358:	1b c0       	rjmp	.+54     	; 0x390 <JOY_Tick+0xac>
 35a:	9c 01       	movw	r18, r24
 35c:	28 5a       	subi	r18, 0xA8	; 168
 35e:	31 09       	sbc	r19, r1
 360:	26 3a       	cpi	r18, 0xA6	; 166
 362:	31 05       	cpc	r19, r1
 364:	38 f4       	brcc	.+14     	; 0x374 <JOY_Tick+0x90>
 366:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <data_to_transmit>
 36a:	88 7f       	andi	r24, 0xF8	; 248
 36c:	86 60       	ori	r24, 0x06	; 6
 36e:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <data_to_transmit>
 372:	0e c0       	rjmp	.+28     	; 0x390 <JOY_Tick+0xac>
 374:	87 3a       	cpi	r24, 0xA7	; 167
 376:	91 05       	cpc	r25, r1
 378:	30 f4       	brcc	.+12     	; 0x386 <JOY_Tick+0xa2>
 37a:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <data_to_transmit>
 37e:	87 60       	ori	r24, 0x07	; 7
 380:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <data_to_transmit>
 384:	05 c0       	rjmp	.+10     	; 0x390 <JOY_Tick+0xac>
 386:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <data_to_transmit>
 38a:	88 7f       	andi	r24, 0xF8	; 248
 38c:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <data_to_transmit>
 390:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <joy_state>
 394:	81 11       	cpse	r24, r1
 396:	10 92 70 07 	sts	0x0770, r1	; 0x800770 <joy_state>
 39a:	08 95       	ret

0000039c <JOYSecTask>:
 39c:	10 92 70 07 	sts	0x0770, r1	; 0x800770 <joy_state>
 3a0:	a1 df       	rcall	.-190    	; 0x2e4 <JOY_Tick>
 3a2:	82 e0       	ldi	r24, 0x02	; 2
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	b6 d4       	rcall	.+2412   	; 0xd14 <vTaskDelay>
 3a8:	fb cf       	rjmp	.-10     	; 0x3a0 <JOYSecTask+0x4>

000003aa <JOYSecPulse>:
 3aa:	af 92       	push	r10
 3ac:	bf 92       	push	r11
 3ae:	cf 92       	push	r12
 3b0:	df 92       	push	r13
 3b2:	ef 92       	push	r14
 3b4:	ff 92       	push	r15
 3b6:	0f 93       	push	r16
 3b8:	a1 2c       	mov	r10, r1
 3ba:	b1 2c       	mov	r11, r1
 3bc:	c1 2c       	mov	r12, r1
 3be:	d1 2c       	mov	r13, r1
 3c0:	e1 2c       	mov	r14, r1
 3c2:	f1 2c       	mov	r15, r1
 3c4:	08 2f       	mov	r16, r24
 3c6:	20 e0       	ldi	r18, 0x00	; 0
 3c8:	30 e0       	ldi	r19, 0x00	; 0
 3ca:	45 e5       	ldi	r20, 0x55	; 85
 3cc:	50 e0       	ldi	r21, 0x00	; 0
 3ce:	62 e0       	ldi	r22, 0x02	; 2
 3d0:	71 e0       	ldi	r23, 0x01	; 1
 3d2:	8e ec       	ldi	r24, 0xCE	; 206
 3d4:	91 e0       	ldi	r25, 0x01	; 1
 3d6:	3a d2       	rcall	.+1140   	; 0x84c <xTaskGenericCreate>
 3d8:	0f 91       	pop	r16
 3da:	ff 90       	pop	r15
 3dc:	ef 90       	pop	r14
 3de:	df 90       	pop	r13
 3e0:	cf 90       	pop	r12
 3e2:	bf 90       	pop	r11
 3e4:	af 90       	pop	r10
 3e6:	08 95       	ret

000003e8 <STEERING_Tick>:
 3e8:	80 91 71 07 	lds	r24, 0x0771	; 0x800771 <steering_state>
 3ec:	81 11       	cpse	r24, r1
 3ee:	20 c0       	rjmp	.+64     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	30 df       	rcall	.-416    	; 0x254 <adc_read>
 3f4:	90 93 12 07 	sts	0x0712, r25	; 0x800712 <steering+0x1>
 3f8:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <steering>
 3fc:	85 34       	cpi	r24, 0x45	; 69
 3fe:	22 e0       	ldi	r18, 0x02	; 2
 400:	92 07       	cpc	r25, r18
 402:	38 f0       	brcs	.+14     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 404:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <data_to_transmit>
 408:	87 7e       	andi	r24, 0xE7	; 231
 40a:	80 61       	ori	r24, 0x10	; 16
 40c:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <data_to_transmit>
 410:	0f c0       	rjmp	.+30     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 412:	84 3f       	cpi	r24, 0xF4	; 244
 414:	91 40       	sbci	r25, 0x01	; 1
 416:	38 f4       	brcc	.+14     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 418:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <data_to_transmit>
 41c:	87 7e       	andi	r24, 0xE7	; 231
 41e:	88 60       	ori	r24, 0x08	; 8
 420:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <data_to_transmit>
 424:	05 c0       	rjmp	.+10     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 426:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <data_to_transmit>
 42a:	87 7e       	andi	r24, 0xE7	; 231
 42c:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <data_to_transmit>
 430:	80 91 71 07 	lds	r24, 0x0771	; 0x800771 <steering_state>
 434:	81 11       	cpse	r24, r1
 436:	10 92 71 07 	sts	0x0771, r1	; 0x800771 <steering_state>
 43a:	08 95       	ret

0000043c <STEERINGSecTask>:
 43c:	10 92 71 07 	sts	0x0771, r1	; 0x800771 <steering_state>
 440:	d3 df       	rcall	.-90     	; 0x3e8 <STEERING_Tick>
 442:	8f e0       	ldi	r24, 0x0F	; 15
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	66 d4       	rcall	.+2252   	; 0xd14 <vTaskDelay>
 448:	fb cf       	rjmp	.-10     	; 0x440 <STEERINGSecTask+0x4>

0000044a <STEERINGSecPulse>:
 44a:	af 92       	push	r10
 44c:	bf 92       	push	r11
 44e:	cf 92       	push	r12
 450:	df 92       	push	r13
 452:	ef 92       	push	r14
 454:	ff 92       	push	r15
 456:	0f 93       	push	r16
 458:	a1 2c       	mov	r10, r1
 45a:	b1 2c       	mov	r11, r1
 45c:	c1 2c       	mov	r12, r1
 45e:	d1 2c       	mov	r13, r1
 460:	e1 2c       	mov	r14, r1
 462:	f1 2c       	mov	r15, r1
 464:	08 2f       	mov	r16, r24
 466:	20 e0       	ldi	r18, 0x00	; 0
 468:	30 e0       	ldi	r19, 0x00	; 0
 46a:	45 e5       	ldi	r20, 0x55	; 85
 46c:	50 e0       	ldi	r21, 0x00	; 0
 46e:	6d e0       	ldi	r22, 0x0D	; 13
 470:	71 e0       	ldi	r23, 0x01	; 1
 472:	8e e1       	ldi	r24, 0x1E	; 30
 474:	92 e0       	ldi	r25, 0x02	; 2
 476:	ea d1       	rcall	.+980    	; 0x84c <xTaskGenericCreate>
 478:	0f 91       	pop	r16
 47a:	ff 90       	pop	r15
 47c:	ef 90       	pop	r14
 47e:	df 90       	pop	r13
 480:	cf 90       	pop	r12
 482:	bf 90       	pop	r11
 484:	af 90       	pop	r10
 486:	08 95       	ret

00000488 <TRANSMIT_Tick>:
}

void TRANSMIT_Tick(){
	//transitions
	switch(transmit_state){
 488:	80 91 6f 07 	lds	r24, 0x076F	; 0x80076f <transmit_state>
 48c:	88 23       	and	r24, r24
 48e:	19 f0       	breq	.+6      	; 0x496 <TRANSMIT_Tick+0xe>
 490:	81 30       	cpi	r24, 0x01	; 1
 492:	49 f0       	breq	.+18     	; 0x4a6 <TRANSMIT_Tick+0x1e>
 494:	0f c0       	rjmp	.+30     	; 0x4b4 <TRANSMIT_Tick+0x2c>
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
 496:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
		case wait_to_transmit:
			if(USART_IsSendReady(0)){
 49a:	85 ff       	sbrs	r24, 5
 49c:	12 c0       	rjmp	.+36     	; 0x4c2 <TRANSMIT_Tick+0x3a>
				transmit_state = transmit_data;
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	80 93 6f 07 	sts	0x076F, r24	; 0x80076f <transmit_state>
 4a4:	0a c0       	rjmp	.+20     	; 0x4ba <TRANSMIT_Tick+0x32>
//Functionality - checks if USART has successfully transmitted data
//Parameter: usartNum specifies which USART is being checked
//Returns: 1 if true else 0
unsigned char USART_HasTransmitted(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << TXC0)) : (UCSR1A & (1 << TXC1));
 4a6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
				transmit_state = wait_to_transmit;
			}
			break;
			
		case transmit_data:
			if(USART_HasTransmitted(0)){
 4aa:	86 ff       	sbrs	r24, 6
 4ac:	06 c0       	rjmp	.+12     	; 0x4ba <TRANSMIT_Tick+0x32>
				transmit_state = wait_to_transmit;
 4ae:	10 92 6f 07 	sts	0x076F, r1	; 0x80076f <transmit_state>
 4b2:	08 95       	ret
				transmit_state = transmit_data;
			}
			break;
		
		default:
			transmit_state = wait_to_transmit;
 4b4:	10 92 6f 07 	sts	0x076F, r1	; 0x80076f <transmit_state>
			break;
 4b8:	08 95       	ret
	switch(transmit_state){
		case wait_to_transmit:
			break;
		
		case transmit_data:
			USART_Send(data_to_transmit,0);
 4ba:	60 e0       	ldi	r22, 0x00	; 0
 4bc:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <data_to_transmit>
 4c0:	ff ce       	rjmp	.-514    	; 0x2c0 <USART_Send>
 4c2:	08 95       	ret

000004c4 <TRANSMITSecTask>:
//-------------------------------------------------- End Steering SM --------------------------------------------------//

//-------------------------------------------------- Start Transmission SM --------------------------------------------------//

void TRANSMIT_Init(){
	transmit_state = wait_to_transmit;
 4c4:	10 92 6f 07 	sts	0x076F, r1	; 0x80076f <transmit_state>
void TRANSMITSecTask(){
	TRANSMIT_Init();
	for(;;)
	{
		TRANSMIT_Tick();
		vTaskDelay(5);
 4c8:	df df       	rcall	.-66     	; 0x488 <TRANSMIT_Tick>
 4ca:	85 e0       	ldi	r24, 0x05	; 5
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	22 d4       	rcall	.+2116   	; 0xd14 <vTaskDelay>
 4d0:	fb cf       	rjmp	.-10     	; 0x4c8 <TRANSMITSecTask+0x4>

000004d2 <TRANSMITSecPulse>:
	}
}
	
void TRANSMITSecPulse(unsigned portBASE_TYPE Priority){
 4d2:	af 92       	push	r10
 4d4:	bf 92       	push	r11
 4d6:	cf 92       	push	r12
 4d8:	df 92       	push	r13
 4da:	ef 92       	push	r14
 4dc:	ff 92       	push	r15
 4de:	0f 93       	push	r16
	xTaskCreate(TRANSMITSecTask, (signed portCHAR *)"TRANSMITSecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
 4e0:	a1 2c       	mov	r10, r1
 4e2:	b1 2c       	mov	r11, r1
 4e4:	c1 2c       	mov	r12, r1
 4e6:	d1 2c       	mov	r13, r1
 4e8:	e1 2c       	mov	r14, r1
 4ea:	f1 2c       	mov	r15, r1
 4ec:	08 2f       	mov	r16, r24
 4ee:	20 e0       	ldi	r18, 0x00	; 0
 4f0:	30 e0       	ldi	r19, 0x00	; 0
 4f2:	45 e5       	ldi	r20, 0x55	; 85
 4f4:	50 e0       	ldi	r21, 0x00	; 0
 4f6:	6d e1       	ldi	r22, 0x1D	; 29
 4f8:	71 e0       	ldi	r23, 0x01	; 1
 4fa:	82 e6       	ldi	r24, 0x62	; 98
 4fc:	92 e0       	ldi	r25, 0x02	; 2
 4fe:	a6 d1       	rcall	.+844    	; 0x84c <xTaskGenericCreate>
}
 500:	0f 91       	pop	r16
 502:	ff 90       	pop	r15
 504:	ef 90       	pop	r14
 506:	df 90       	pop	r13
 508:	cf 90       	pop	r12
 50a:	bf 90       	pop	r11
 50c:	af 90       	pop	r10
 50e:	08 95       	ret

00000510 <main>:
//-------------------------------------------------- End Transmission SM --------------------------------------------------//


int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
 510:	11 b8       	out	0x01, r1	; 1
 512:	8f ef       	ldi	r24, 0xFF	; 255
	//DDRB = 0xFF; PORTB = 0x00;
	//DDRC = 0xFF; PORTC = 0x00;
	//DDRD = 0xFF; PORTD = 0x00;
	adc_init();
	initUSART(0);
 514:	82 b9       	out	0x02, r24	; 2
	//Start Tasks
	JOYSecPulse(1);
 516:	97 de       	rcall	.-722    	; 0x246 <adc_init>
	STEERINGSecPulse(1);
 518:	80 e0       	ldi	r24, 0x00	; 0
	TRANSMITSecPulse(1);
 51a:	b0 de       	rcall	.-672    	; 0x27c <initUSART>
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	45 df       	rcall	.-374    	; 0x3aa <JOYSecPulse>
	//RunSchedular
	vTaskStartScheduler();
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	93 df       	rcall	.-218    	; 0x44a <STEERINGSecPulse>
	
	return 0;
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	d5 df       	rcall	.-86     	; 0x4d2 <TRANSMITSecPulse>
 528:	84 d2       	rcall	.+1288   	; 0xa32 <vTaskStartScheduler>
 52a:	80 e0       	ldi	r24, 0x00	; 0
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	08 95       	ret

00000530 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 530:	31 e1       	ldi	r19, 0x11	; 17
 532:	fc 01       	movw	r30, r24
 534:	30 83       	st	Z, r19
 536:	31 97       	sbiw	r30, 0x01	; 1
 538:	22 e2       	ldi	r18, 0x22	; 34
 53a:	20 83       	st	Z, r18
 53c:	31 97       	sbiw	r30, 0x01	; 1
 53e:	a3 e3       	ldi	r26, 0x33	; 51
 540:	a0 83       	st	Z, r26
 542:	31 97       	sbiw	r30, 0x01	; 1
 544:	60 83       	st	Z, r22
 546:	31 97       	sbiw	r30, 0x01	; 1
 548:	70 83       	st	Z, r23
 54a:	31 97       	sbiw	r30, 0x01	; 1
 54c:	10 82       	st	Z, r1
 54e:	31 97       	sbiw	r30, 0x01	; 1
 550:	60 e8       	ldi	r22, 0x80	; 128
 552:	60 83       	st	Z, r22
 554:	31 97       	sbiw	r30, 0x01	; 1
 556:	10 82       	st	Z, r1
 558:	31 97       	sbiw	r30, 0x01	; 1
 55a:	62 e0       	ldi	r22, 0x02	; 2
 55c:	60 83       	st	Z, r22
 55e:	31 97       	sbiw	r30, 0x01	; 1
 560:	63 e0       	ldi	r22, 0x03	; 3
 562:	60 83       	st	Z, r22
 564:	31 97       	sbiw	r30, 0x01	; 1
 566:	64 e0       	ldi	r22, 0x04	; 4
 568:	60 83       	st	Z, r22
 56a:	31 97       	sbiw	r30, 0x01	; 1
 56c:	65 e0       	ldi	r22, 0x05	; 5
 56e:	60 83       	st	Z, r22
 570:	31 97       	sbiw	r30, 0x01	; 1
 572:	66 e0       	ldi	r22, 0x06	; 6
 574:	60 83       	st	Z, r22
 576:	31 97       	sbiw	r30, 0x01	; 1
 578:	67 e0       	ldi	r22, 0x07	; 7
 57a:	60 83       	st	Z, r22
 57c:	31 97       	sbiw	r30, 0x01	; 1
 57e:	68 e0       	ldi	r22, 0x08	; 8
 580:	60 83       	st	Z, r22
 582:	31 97       	sbiw	r30, 0x01	; 1
 584:	69 e0       	ldi	r22, 0x09	; 9
 586:	60 83       	st	Z, r22
 588:	31 97       	sbiw	r30, 0x01	; 1
 58a:	60 e1       	ldi	r22, 0x10	; 16
 58c:	60 83       	st	Z, r22
 58e:	31 97       	sbiw	r30, 0x01	; 1
 590:	30 83       	st	Z, r19
 592:	31 97       	sbiw	r30, 0x01	; 1
 594:	32 e1       	ldi	r19, 0x12	; 18
 596:	30 83       	st	Z, r19
 598:	31 97       	sbiw	r30, 0x01	; 1
 59a:	33 e1       	ldi	r19, 0x13	; 19
 59c:	30 83       	st	Z, r19
 59e:	31 97       	sbiw	r30, 0x01	; 1
 5a0:	34 e1       	ldi	r19, 0x14	; 20
 5a2:	30 83       	st	Z, r19
 5a4:	31 97       	sbiw	r30, 0x01	; 1
 5a6:	35 e1       	ldi	r19, 0x15	; 21
 5a8:	30 83       	st	Z, r19
 5aa:	31 97       	sbiw	r30, 0x01	; 1
 5ac:	36 e1       	ldi	r19, 0x16	; 22
 5ae:	30 83       	st	Z, r19
 5b0:	31 97       	sbiw	r30, 0x01	; 1
 5b2:	37 e1       	ldi	r19, 0x17	; 23
 5b4:	30 83       	st	Z, r19
 5b6:	31 97       	sbiw	r30, 0x01	; 1
 5b8:	38 e1       	ldi	r19, 0x18	; 24
 5ba:	30 83       	st	Z, r19
 5bc:	31 97       	sbiw	r30, 0x01	; 1
 5be:	39 e1       	ldi	r19, 0x19	; 25
 5c0:	30 83       	st	Z, r19
 5c2:	31 97       	sbiw	r30, 0x01	; 1
 5c4:	30 e2       	ldi	r19, 0x20	; 32
 5c6:	30 83       	st	Z, r19
 5c8:	31 97       	sbiw	r30, 0x01	; 1
 5ca:	31 e2       	ldi	r19, 0x21	; 33
 5cc:	30 83       	st	Z, r19
 5ce:	31 97       	sbiw	r30, 0x01	; 1
 5d0:	20 83       	st	Z, r18
 5d2:	31 97       	sbiw	r30, 0x01	; 1
 5d4:	23 e2       	ldi	r18, 0x23	; 35
 5d6:	20 83       	st	Z, r18
 5d8:	31 97       	sbiw	r30, 0x01	; 1
 5da:	40 83       	st	Z, r20
 5dc:	31 97       	sbiw	r30, 0x01	; 1
 5de:	50 83       	st	Z, r21
 5e0:	31 97       	sbiw	r30, 0x01	; 1
 5e2:	26 e2       	ldi	r18, 0x26	; 38
 5e4:	20 83       	st	Z, r18
 5e6:	31 97       	sbiw	r30, 0x01	; 1
 5e8:	27 e2       	ldi	r18, 0x27	; 39
 5ea:	20 83       	st	Z, r18
 5ec:	31 97       	sbiw	r30, 0x01	; 1
 5ee:	28 e2       	ldi	r18, 0x28	; 40
 5f0:	20 83       	st	Z, r18
 5f2:	31 97       	sbiw	r30, 0x01	; 1
 5f4:	29 e2       	ldi	r18, 0x29	; 41
 5f6:	20 83       	st	Z, r18
 5f8:	31 97       	sbiw	r30, 0x01	; 1
 5fa:	20 e3       	ldi	r18, 0x30	; 48
 5fc:	20 83       	st	Z, r18
 5fe:	31 97       	sbiw	r30, 0x01	; 1
 600:	21 e3       	ldi	r18, 0x31	; 49
 602:	20 83       	st	Z, r18
 604:	86 97       	sbiw	r24, 0x26	; 38
 606:	08 95       	ret

00000608 <xPortStartScheduler>:
 608:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 60c:	8c e7       	ldi	r24, 0x7C	; 124
 60e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 612:	8b e0       	ldi	r24, 0x0B	; 11
 614:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 618:	ef e6       	ldi	r30, 0x6F	; 111
 61a:	f0 e0       	ldi	r31, 0x00	; 0
 61c:	80 81       	ld	r24, Z
 61e:	82 60       	ori	r24, 0x02	; 2
 620:	80 83       	st	Z, r24
 622:	a0 91 6d 07 	lds	r26, 0x076D	; 0x80076d <pxCurrentTCB>
 626:	b0 91 6e 07 	lds	r27, 0x076E	; 0x80076e <pxCurrentTCB+0x1>
 62a:	cd 91       	ld	r28, X+
 62c:	cd bf       	out	0x3d, r28	; 61
 62e:	dd 91       	ld	r29, X+
 630:	de bf       	out	0x3e, r29	; 62
 632:	ff 91       	pop	r31
 634:	ef 91       	pop	r30
 636:	df 91       	pop	r29
 638:	cf 91       	pop	r28
 63a:	bf 91       	pop	r27
 63c:	af 91       	pop	r26
 63e:	9f 91       	pop	r25
 640:	8f 91       	pop	r24
 642:	7f 91       	pop	r23
 644:	6f 91       	pop	r22
 646:	5f 91       	pop	r21
 648:	4f 91       	pop	r20
 64a:	3f 91       	pop	r19
 64c:	2f 91       	pop	r18
 64e:	1f 91       	pop	r17
 650:	0f 91       	pop	r16
 652:	ff 90       	pop	r15
 654:	ef 90       	pop	r14
 656:	df 90       	pop	r13
 658:	cf 90       	pop	r12
 65a:	bf 90       	pop	r11
 65c:	af 90       	pop	r10
 65e:	9f 90       	pop	r9
 660:	8f 90       	pop	r8
 662:	7f 90       	pop	r7
 664:	6f 90       	pop	r6
 666:	5f 90       	pop	r5
 668:	4f 90       	pop	r4
 66a:	3f 90       	pop	r3
 66c:	2f 90       	pop	r2
 66e:	1f 90       	pop	r1
 670:	0f 90       	pop	r0
 672:	0f be       	out	0x3f, r0	; 63
 674:	0f 90       	pop	r0
 676:	08 95       	ret
 678:	81 e0       	ldi	r24, 0x01	; 1
 67a:	08 95       	ret

0000067c <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 67c:	0f 92       	push	r0
 67e:	0f b6       	in	r0, 0x3f	; 63
 680:	f8 94       	cli
 682:	0f 92       	push	r0
 684:	1f 92       	push	r1
 686:	11 24       	eor	r1, r1
 688:	2f 92       	push	r2
 68a:	3f 92       	push	r3
 68c:	4f 92       	push	r4
 68e:	5f 92       	push	r5
 690:	6f 92       	push	r6
 692:	7f 92       	push	r7
 694:	8f 92       	push	r8
 696:	9f 92       	push	r9
 698:	af 92       	push	r10
 69a:	bf 92       	push	r11
 69c:	cf 92       	push	r12
 69e:	df 92       	push	r13
 6a0:	ef 92       	push	r14
 6a2:	ff 92       	push	r15
 6a4:	0f 93       	push	r16
 6a6:	1f 93       	push	r17
 6a8:	2f 93       	push	r18
 6aa:	3f 93       	push	r19
 6ac:	4f 93       	push	r20
 6ae:	5f 93       	push	r21
 6b0:	6f 93       	push	r22
 6b2:	7f 93       	push	r23
 6b4:	8f 93       	push	r24
 6b6:	9f 93       	push	r25
 6b8:	af 93       	push	r26
 6ba:	bf 93       	push	r27
 6bc:	cf 93       	push	r28
 6be:	df 93       	push	r29
 6c0:	ef 93       	push	r30
 6c2:	ff 93       	push	r31
 6c4:	a0 91 6d 07 	lds	r26, 0x076D	; 0x80076d <pxCurrentTCB>
 6c8:	b0 91 6e 07 	lds	r27, 0x076E	; 0x80076e <pxCurrentTCB+0x1>
 6cc:	0d b6       	in	r0, 0x3d	; 61
 6ce:	0d 92       	st	X+, r0
 6d0:	0e b6       	in	r0, 0x3e	; 62
	vTaskSwitchContext();
 6d2:	0d 92       	st	X+, r0
	portRESTORE_CONTEXT();
 6d4:	70 d3       	rcall	.+1760   	; 0xdb6 <vTaskSwitchContext>
 6d6:	a0 91 6d 07 	lds	r26, 0x076D	; 0x80076d <pxCurrentTCB>
 6da:	b0 91 6e 07 	lds	r27, 0x076E	; 0x80076e <pxCurrentTCB+0x1>
 6de:	cd 91       	ld	r28, X+
 6e0:	cd bf       	out	0x3d, r28	; 61
 6e2:	dd 91       	ld	r29, X+
 6e4:	de bf       	out	0x3e, r29	; 62
 6e6:	ff 91       	pop	r31
 6e8:	ef 91       	pop	r30
 6ea:	df 91       	pop	r29
 6ec:	cf 91       	pop	r28
 6ee:	bf 91       	pop	r27
 6f0:	af 91       	pop	r26
 6f2:	9f 91       	pop	r25
 6f4:	8f 91       	pop	r24
 6f6:	7f 91       	pop	r23
 6f8:	6f 91       	pop	r22
 6fa:	5f 91       	pop	r21
 6fc:	4f 91       	pop	r20
 6fe:	3f 91       	pop	r19
 700:	2f 91       	pop	r18
 702:	1f 91       	pop	r17
 704:	0f 91       	pop	r16
 706:	ff 90       	pop	r15
 708:	ef 90       	pop	r14
 70a:	df 90       	pop	r13
 70c:	cf 90       	pop	r12
 70e:	bf 90       	pop	r11
 710:	af 90       	pop	r10
 712:	9f 90       	pop	r9
 714:	8f 90       	pop	r8
 716:	7f 90       	pop	r7
 718:	6f 90       	pop	r6
 71a:	5f 90       	pop	r5
 71c:	4f 90       	pop	r4
 71e:	3f 90       	pop	r3
 720:	2f 90       	pop	r2
 722:	1f 90       	pop	r1
 724:	0f 90       	pop	r0
 726:	0f be       	out	0x3f, r0	; 63

	asm volatile ( "ret" );
 728:	0f 90       	pop	r0
 72a:	08 95       	ret

0000072c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 72c:	0f 92       	push	r0
 72e:	0f b6       	in	r0, 0x3f	; 63
 730:	f8 94       	cli
 732:	0f 92       	push	r0
 734:	1f 92       	push	r1
 736:	11 24       	eor	r1, r1
 738:	2f 92       	push	r2
 73a:	3f 92       	push	r3
 73c:	4f 92       	push	r4
 73e:	5f 92       	push	r5
 740:	6f 92       	push	r6
 742:	7f 92       	push	r7
 744:	8f 92       	push	r8
 746:	9f 92       	push	r9
 748:	af 92       	push	r10
 74a:	bf 92       	push	r11
 74c:	cf 92       	push	r12
 74e:	df 92       	push	r13
 750:	ef 92       	push	r14
 752:	ff 92       	push	r15
 754:	0f 93       	push	r16
 756:	1f 93       	push	r17
 758:	2f 93       	push	r18
 75a:	3f 93       	push	r19
 75c:	4f 93       	push	r20
 75e:	5f 93       	push	r21
 760:	6f 93       	push	r22
 762:	7f 93       	push	r23
 764:	8f 93       	push	r24
 766:	9f 93       	push	r25
 768:	af 93       	push	r26
 76a:	bf 93       	push	r27
 76c:	cf 93       	push	r28
 76e:	df 93       	push	r29
 770:	ef 93       	push	r30
 772:	ff 93       	push	r31
 774:	a0 91 6d 07 	lds	r26, 0x076D	; 0x80076d <pxCurrentTCB>
 778:	b0 91 6e 07 	lds	r27, 0x076E	; 0x80076e <pxCurrentTCB+0x1>
 77c:	0d b6       	in	r0, 0x3d	; 61
 77e:	0d 92       	st	X+, r0
 780:	0e b6       	in	r0, 0x3e	; 62
	vTaskIncrementTick();
	vTaskSwitchContext();
 782:	0d 92       	st	X+, r0
 784:	85 d1       	rcall	.+778    	; 0xa90 <vTaskIncrementTick>
	portRESTORE_CONTEXT();
 786:	17 d3       	rcall	.+1582   	; 0xdb6 <vTaskSwitchContext>
 788:	a0 91 6d 07 	lds	r26, 0x076D	; 0x80076d <pxCurrentTCB>
 78c:	b0 91 6e 07 	lds	r27, 0x076E	; 0x80076e <pxCurrentTCB+0x1>
 790:	cd 91       	ld	r28, X+
 792:	cd bf       	out	0x3d, r28	; 61
 794:	dd 91       	ld	r29, X+
 796:	de bf       	out	0x3e, r29	; 62
 798:	ff 91       	pop	r31
 79a:	ef 91       	pop	r30
 79c:	df 91       	pop	r29
 79e:	cf 91       	pop	r28
 7a0:	bf 91       	pop	r27
 7a2:	af 91       	pop	r26
 7a4:	9f 91       	pop	r25
 7a6:	8f 91       	pop	r24
 7a8:	7f 91       	pop	r23
 7aa:	6f 91       	pop	r22
 7ac:	5f 91       	pop	r21
 7ae:	4f 91       	pop	r20
 7b0:	3f 91       	pop	r19
 7b2:	2f 91       	pop	r18
 7b4:	1f 91       	pop	r17
 7b6:	0f 91       	pop	r16
 7b8:	ff 90       	pop	r15
 7ba:	ef 90       	pop	r14
 7bc:	df 90       	pop	r13
 7be:	cf 90       	pop	r12
 7c0:	bf 90       	pop	r11
 7c2:	af 90       	pop	r10
 7c4:	9f 90       	pop	r9
 7c6:	8f 90       	pop	r8
 7c8:	7f 90       	pop	r7
 7ca:	6f 90       	pop	r6
 7cc:	5f 90       	pop	r5
 7ce:	4f 90       	pop	r4
 7d0:	3f 90       	pop	r3
 7d2:	2f 90       	pop	r2
 7d4:	1f 90       	pop	r1
 7d6:	0f 90       	pop	r0
 7d8:	0f be       	out	0x3f, r0	; 63

	asm volatile ( "ret" );
 7da:	0f 90       	pop	r0
 7dc:	08 95       	ret

000007de <__vector_13>:
}
 7de:	a6 df       	rcall	.-180    	; 0x72c <vPortYieldFromTick>
 7e0:	18 95       	reti

000007e2 <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
 7e2:	cf 93       	push	r28
 7e4:	df 93       	push	r29
 7e6:	ec 01       	movw	r28, r24
 7e8:	e0 91 6d 07 	lds	r30, 0x076D	; 0x80076d <pxCurrentTCB>
 7ec:	f0 91 6e 07 	lds	r31, 0x076E	; 0x80076e <pxCurrentTCB+0x1>
 7f0:	93 83       	std	Z+3, r25	; 0x03
 7f2:	82 83       	std	Z+2, r24	; 0x02
 7f4:	80 91 1d 07 	lds	r24, 0x071D	; 0x80071d <xTickCount>
 7f8:	90 91 1e 07 	lds	r25, 0x071E	; 0x80071e <xTickCount+0x1>
 7fc:	c8 17       	cp	r28, r24
 7fe:	d9 07       	cpc	r29, r25
 800:	60 f4       	brcc	.+24     	; 0x81a <prvAddCurrentTaskToDelayedList+0x38>
 802:	60 91 6d 07 	lds	r22, 0x076D	; 0x80076d <pxCurrentTCB>
 806:	70 91 6e 07 	lds	r23, 0x076E	; 0x80076e <pxCurrentTCB+0x1>
 80a:	80 91 33 07 	lds	r24, 0x0733	; 0x800733 <pxOverflowDelayedTaskList>
 80e:	90 91 34 07 	lds	r25, 0x0734	; 0x800734 <pxOverflowDelayedTaskList+0x1>
 812:	6e 5f       	subi	r22, 0xFE	; 254
 814:	7f 4f       	sbci	r23, 0xFF	; 255
 816:	b6 dc       	rcall	.-1684   	; 0x184 <vListInsert>
 818:	16 c0       	rjmp	.+44     	; 0x846 <prvAddCurrentTaskToDelayedList+0x64>
 81a:	60 91 6d 07 	lds	r22, 0x076D	; 0x80076d <pxCurrentTCB>
 81e:	70 91 6e 07 	lds	r23, 0x076E	; 0x80076e <pxCurrentTCB+0x1>
 822:	80 91 35 07 	lds	r24, 0x0735	; 0x800735 <pxDelayedTaskList>
 826:	90 91 36 07 	lds	r25, 0x0736	; 0x800736 <pxDelayedTaskList+0x1>
 82a:	6e 5f       	subi	r22, 0xFE	; 254
 82c:	7f 4f       	sbci	r23, 0xFF	; 255
 82e:	aa dc       	rcall	.-1708   	; 0x184 <vListInsert>
 830:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 834:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 838:	c8 17       	cp	r28, r24
 83a:	d9 07       	cpc	r29, r25
 83c:	20 f4       	brcc	.+8      	; 0x846 <prvAddCurrentTaskToDelayedList+0x64>
 83e:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <__data_start+0x1>
 842:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
 846:	df 91       	pop	r29
 848:	cf 91       	pop	r28
 84a:	08 95       	ret

0000084c <xTaskGenericCreate>:
 84c:	4f 92       	push	r4
 84e:	5f 92       	push	r5
 850:	6f 92       	push	r6
 852:	7f 92       	push	r7
 854:	8f 92       	push	r8
 856:	9f 92       	push	r9
 858:	af 92       	push	r10
 85a:	bf 92       	push	r11
 85c:	cf 92       	push	r12
 85e:	df 92       	push	r13
 860:	ef 92       	push	r14
 862:	ff 92       	push	r15
 864:	0f 93       	push	r16
 866:	1f 93       	push	r17
 868:	cf 93       	push	r28
 86a:	df 93       	push	r29
 86c:	5c 01       	movw	r10, r24
 86e:	4b 01       	movw	r8, r22
 870:	3a 01       	movw	r6, r20
 872:	29 01       	movw	r4, r18
 874:	81 e2       	ldi	r24, 0x21	; 33
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	27 dc       	rcall	.-1970   	; 0xc8 <pvPortMalloc>
 87a:	ec 01       	movw	r28, r24
 87c:	89 2b       	or	r24, r25
 87e:	09 f4       	brne	.+2      	; 0x882 <xTaskGenericCreate+0x36>
 880:	c6 c0       	rjmp	.+396    	; 0xa0e <xTaskGenericCreate+0x1c2>
 882:	c1 14       	cp	r12, r1
 884:	d1 04       	cpc	r13, r1
 886:	09 f0       	breq	.+2      	; 0x88a <xTaskGenericCreate+0x3e>
 888:	be c0       	rjmp	.+380    	; 0xa06 <xTaskGenericCreate+0x1ba>
 88a:	c3 01       	movw	r24, r6
 88c:	1d dc       	rcall	.-1990   	; 0xc8 <pvPortMalloc>
 88e:	98 8f       	std	Y+24, r25	; 0x18
 890:	8f 8b       	std	Y+23, r24	; 0x17
 892:	00 97       	sbiw	r24, 0x00	; 0
 894:	19 f4       	brne	.+6      	; 0x89c <xTaskGenericCreate+0x50>
 896:	ce 01       	movw	r24, r28
 898:	3b dc       	rcall	.-1930   	; 0x110 <vPortFree>
 89a:	b9 c0       	rjmp	.+370    	; 0xa0e <xTaskGenericCreate+0x1c2>
 89c:	a3 01       	movw	r20, r6
 89e:	65 ea       	ldi	r22, 0xA5	; 165
 8a0:	70 e0       	ldi	r23, 0x00	; 0
 8a2:	f5 d2       	rcall	.+1514   	; 0xe8e <memset>
 8a4:	93 01       	movw	r18, r6
 8a6:	21 50       	subi	r18, 0x01	; 1
 8a8:	31 09       	sbc	r19, r1
 8aa:	8f 89       	ldd	r24, Y+23	; 0x17
 8ac:	98 8d       	ldd	r25, Y+24	; 0x18
 8ae:	3c 01       	movw	r6, r24
 8b0:	62 0e       	add	r6, r18
 8b2:	73 1e       	adc	r7, r19
 8b4:	48 e0       	ldi	r20, 0x08	; 8
 8b6:	50 e0       	ldi	r21, 0x00	; 0
 8b8:	b4 01       	movw	r22, r8
 8ba:	ce 01       	movw	r24, r28
 8bc:	49 96       	adiw	r24, 0x19	; 25
 8be:	ee d2       	rcall	.+1500   	; 0xe9c <strncpy>
 8c0:	18 a2       	std	Y+32, r1	; 0x20
 8c2:	10 2f       	mov	r17, r16
 8c4:	04 30       	cpi	r16, 0x04	; 4
 8c6:	08 f0       	brcs	.+2      	; 0x8ca <xTaskGenericCreate+0x7e>
 8c8:	13 e0       	ldi	r17, 0x03	; 3
 8ca:	1e 8b       	std	Y+22, r17	; 0x16
 8cc:	6e 01       	movw	r12, r28
 8ce:	82 e0       	ldi	r24, 0x02	; 2
 8d0:	c8 0e       	add	r12, r24
 8d2:	d1 1c       	adc	r13, r1
 8d4:	c6 01       	movw	r24, r12
 8d6:	2b dc       	rcall	.-1962   	; 0x12e <vListInitialiseItem>
 8d8:	ce 01       	movw	r24, r28
 8da:	0c 96       	adiw	r24, 0x0c	; 12
 8dc:	28 dc       	rcall	.-1968   	; 0x12e <vListInitialiseItem>
 8de:	d9 87       	std	Y+9, r29	; 0x09
 8e0:	c8 87       	std	Y+8, r28	; 0x08
 8e2:	84 e0       	ldi	r24, 0x04	; 4
 8e4:	90 e0       	ldi	r25, 0x00	; 0
 8e6:	81 1b       	sub	r24, r17
 8e8:	91 09       	sbc	r25, r1
 8ea:	9d 87       	std	Y+13, r25	; 0x0d
 8ec:	8c 87       	std	Y+12, r24	; 0x0c
 8ee:	db 8b       	std	Y+19, r29	; 0x13
 8f0:	ca 8b       	std	Y+18, r28	; 0x12
 8f2:	a2 01       	movw	r20, r4
 8f4:	b5 01       	movw	r22, r10
 8f6:	c3 01       	movw	r24, r6
 8f8:	1b de       	rcall	.-970    	; 0x530 <pxPortInitialiseStack>
 8fa:	99 83       	std	Y+1, r25	; 0x01
 8fc:	88 83       	st	Y, r24
 8fe:	e1 14       	cp	r14, r1
 900:	f1 04       	cpc	r15, r1
 902:	19 f0       	breq	.+6      	; 0x90a <xTaskGenericCreate+0xbe>
 904:	f7 01       	movw	r30, r14
 906:	d1 83       	std	Z+1, r29	; 0x01
 908:	c0 83       	st	Z, r28
 90a:	0f b6       	in	r0, 0x3f	; 63
 90c:	f8 94       	cli
 90e:	0f 92       	push	r0
 910:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <uxCurrentNumberOfTasks>
 914:	8f 5f       	subi	r24, 0xFF	; 255
 916:	80 93 1f 07 	sts	0x071F, r24	; 0x80071f <uxCurrentNumberOfTasks>
 91a:	80 91 6d 07 	lds	r24, 0x076D	; 0x80076d <pxCurrentTCB>
 91e:	90 91 6e 07 	lds	r25, 0x076E	; 0x80076e <pxCurrentTCB+0x1>
 922:	89 2b       	or	r24, r25
 924:	69 f5       	brne	.+90     	; 0x980 <xTaskGenericCreate+0x134>
 926:	d0 93 6e 07 	sts	0x076E, r29	; 0x80076e <pxCurrentTCB+0x1>
 92a:	c0 93 6d 07 	sts	0x076D, r28	; 0x80076d <pxCurrentTCB>
 92e:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <uxCurrentNumberOfTasks>
 932:	81 30       	cpi	r24, 0x01	; 1
 934:	a1 f5       	brne	.+104    	; 0x99e <xTaskGenericCreate+0x152>
 936:	89 e4       	ldi	r24, 0x49	; 73
 938:	97 e0       	ldi	r25, 0x07	; 7
 93a:	eb db       	rcall	.-2090   	; 0x112 <vListInitialise>
 93c:	82 e5       	ldi	r24, 0x52	; 82
 93e:	97 e0       	ldi	r25, 0x07	; 7
 940:	e8 db       	rcall	.-2096   	; 0x112 <vListInitialise>
 942:	8b e5       	ldi	r24, 0x5B	; 91
 944:	97 e0       	ldi	r25, 0x07	; 7
 946:	e5 db       	rcall	.-2102   	; 0x112 <vListInitialise>
 948:	84 e6       	ldi	r24, 0x64	; 100
 94a:	97 e0       	ldi	r25, 0x07	; 7
 94c:	e2 db       	rcall	.-2108   	; 0x112 <vListInitialise>
 94e:	80 e4       	ldi	r24, 0x40	; 64
 950:	97 e0       	ldi	r25, 0x07	; 7
 952:	df db       	rcall	.-2114   	; 0x112 <vListInitialise>
 954:	87 e3       	ldi	r24, 0x37	; 55
 956:	97 e0       	ldi	r25, 0x07	; 7
 958:	dc db       	rcall	.-2120   	; 0x112 <vListInitialise>
 95a:	8a e2       	ldi	r24, 0x2A	; 42
 95c:	97 e0       	ldi	r25, 0x07	; 7
 95e:	d9 db       	rcall	.-2126   	; 0x112 <vListInitialise>
 960:	81 e2       	ldi	r24, 0x21	; 33
 962:	97 e0       	ldi	r25, 0x07	; 7
 964:	d6 db       	rcall	.-2132   	; 0x112 <vListInitialise>
 966:	80 e4       	ldi	r24, 0x40	; 64
 968:	97 e0       	ldi	r25, 0x07	; 7
 96a:	90 93 36 07 	sts	0x0736, r25	; 0x800736 <pxDelayedTaskList+0x1>
 96e:	80 93 35 07 	sts	0x0735, r24	; 0x800735 <pxDelayedTaskList>
 972:	87 e3       	ldi	r24, 0x37	; 55
 974:	97 e0       	ldi	r25, 0x07	; 7
 976:	90 93 34 07 	sts	0x0734, r25	; 0x800734 <pxOverflowDelayedTaskList+0x1>
 97a:	80 93 33 07 	sts	0x0733, r24	; 0x800733 <pxOverflowDelayedTaskList>
 97e:	0f c0       	rjmp	.+30     	; 0x99e <xTaskGenericCreate+0x152>
 980:	80 91 1a 07 	lds	r24, 0x071A	; 0x80071a <xSchedulerRunning>
 984:	81 11       	cpse	r24, r1
 986:	0b c0       	rjmp	.+22     	; 0x99e <xTaskGenericCreate+0x152>
 988:	e0 91 6d 07 	lds	r30, 0x076D	; 0x80076d <pxCurrentTCB>
 98c:	f0 91 6e 07 	lds	r31, 0x076E	; 0x80076e <pxCurrentTCB+0x1>
 990:	86 89       	ldd	r24, Z+22	; 0x16
 992:	08 17       	cp	r16, r24
 994:	20 f0       	brcs	.+8      	; 0x99e <xTaskGenericCreate+0x152>
 996:	d0 93 6e 07 	sts	0x076E, r29	; 0x80076e <pxCurrentTCB+0x1>
 99a:	c0 93 6d 07 	sts	0x076D, r28	; 0x80076d <pxCurrentTCB>
 99e:	8e 89       	ldd	r24, Y+22	; 0x16
 9a0:	90 91 1c 07 	lds	r25, 0x071C	; 0x80071c <uxTopUsedPriority>
 9a4:	98 17       	cp	r25, r24
 9a6:	10 f4       	brcc	.+4      	; 0x9ac <xTaskGenericCreate+0x160>
 9a8:	80 93 1c 07 	sts	0x071C, r24	; 0x80071c <uxTopUsedPriority>
 9ac:	90 91 15 07 	lds	r25, 0x0715	; 0x800715 <uxTaskNumber>
 9b0:	9f 5f       	subi	r25, 0xFF	; 255
 9b2:	90 93 15 07 	sts	0x0715, r25	; 0x800715 <uxTaskNumber>
 9b6:	90 91 1b 07 	lds	r25, 0x071B	; 0x80071b <uxTopReadyPriority>
 9ba:	98 17       	cp	r25, r24
 9bc:	10 f4       	brcc	.+4      	; 0x9c2 <xTaskGenericCreate+0x176>
 9be:	80 93 1b 07 	sts	0x071B, r24	; 0x80071b <uxTopReadyPriority>
 9c2:	90 e0       	ldi	r25, 0x00	; 0
 9c4:	9c 01       	movw	r18, r24
 9c6:	22 0f       	add	r18, r18
 9c8:	33 1f       	adc	r19, r19
 9ca:	22 0f       	add	r18, r18
 9cc:	33 1f       	adc	r19, r19
 9ce:	22 0f       	add	r18, r18
 9d0:	33 1f       	adc	r19, r19
 9d2:	82 0f       	add	r24, r18
 9d4:	93 1f       	adc	r25, r19
 9d6:	b6 01       	movw	r22, r12
 9d8:	87 5b       	subi	r24, 0xB7	; 183
 9da:	98 4f       	sbci	r25, 0xF8	; 248
 9dc:	ac db       	rcall	.-2216   	; 0x136 <vListInsertEnd>
 9de:	0f 90       	pop	r0
 9e0:	0f be       	out	0x3f, r0	; 63
 9e2:	80 91 1a 07 	lds	r24, 0x071A	; 0x80071a <xSchedulerRunning>
 9e6:	88 23       	and	r24, r24
 9e8:	51 f0       	breq	.+20     	; 0x9fe <xTaskGenericCreate+0x1b2>
 9ea:	e0 91 6d 07 	lds	r30, 0x076D	; 0x80076d <pxCurrentTCB>
 9ee:	f0 91 6e 07 	lds	r31, 0x076E	; 0x80076e <pxCurrentTCB+0x1>
 9f2:	86 89       	ldd	r24, Z+22	; 0x16
 9f4:	80 17       	cp	r24, r16
 9f6:	28 f4       	brcc	.+10     	; 0xa02 <xTaskGenericCreate+0x1b6>
 9f8:	41 de       	rcall	.-894    	; 0x67c <vPortYield>
 9fa:	81 e0       	ldi	r24, 0x01	; 1
 9fc:	09 c0       	rjmp	.+18     	; 0xa10 <xTaskGenericCreate+0x1c4>
 9fe:	81 e0       	ldi	r24, 0x01	; 1
 a00:	07 c0       	rjmp	.+14     	; 0xa10 <xTaskGenericCreate+0x1c4>
 a02:	81 e0       	ldi	r24, 0x01	; 1
 a04:	05 c0       	rjmp	.+10     	; 0xa10 <xTaskGenericCreate+0x1c4>
 a06:	d8 8e       	std	Y+24, r13	; 0x18
 a08:	cf 8a       	std	Y+23, r12	; 0x17
 a0a:	c6 01       	movw	r24, r12
 a0c:	47 cf       	rjmp	.-370    	; 0x89c <xTaskGenericCreate+0x50>
 a0e:	8f ef       	ldi	r24, 0xFF	; 255
 a10:	df 91       	pop	r29
 a12:	cf 91       	pop	r28
 a14:	1f 91       	pop	r17
 a16:	0f 91       	pop	r16
 a18:	ff 90       	pop	r15
 a1a:	ef 90       	pop	r14
 a1c:	df 90       	pop	r13
 a1e:	cf 90       	pop	r12
 a20:	bf 90       	pop	r11
 a22:	af 90       	pop	r10
 a24:	9f 90       	pop	r9
 a26:	8f 90       	pop	r8
 a28:	7f 90       	pop	r7
 a2a:	6f 90       	pop	r6
 a2c:	5f 90       	pop	r5
 a2e:	4f 90       	pop	r4
 a30:	08 95       	ret

00000a32 <vTaskStartScheduler>:
 a32:	af 92       	push	r10
 a34:	bf 92       	push	r11
 a36:	cf 92       	push	r12
 a38:	df 92       	push	r13
 a3a:	ef 92       	push	r14
 a3c:	ff 92       	push	r15
 a3e:	0f 93       	push	r16
 a40:	a1 2c       	mov	r10, r1
 a42:	b1 2c       	mov	r11, r1
 a44:	c1 2c       	mov	r12, r1
 a46:	d1 2c       	mov	r13, r1
 a48:	e1 2c       	mov	r14, r1
 a4a:	f1 2c       	mov	r15, r1
 a4c:	00 e0       	ldi	r16, 0x00	; 0
 a4e:	20 e0       	ldi	r18, 0x00	; 0
 a50:	30 e0       	ldi	r19, 0x00	; 0
 a52:	45 e5       	ldi	r20, 0x55	; 85
 a54:	50 e0       	ldi	r21, 0x00	; 0
 a56:	6d e2       	ldi	r22, 0x2D	; 45
 a58:	71 e0       	ldi	r23, 0x01	; 1
 a5a:	85 ea       	ldi	r24, 0xA5	; 165
 a5c:	96 e0       	ldi	r25, 0x06	; 6
 a5e:	f6 de       	rcall	.-532    	; 0x84c <xTaskGenericCreate>
 a60:	81 30       	cpi	r24, 0x01	; 1
 a62:	41 f4       	brne	.+16     	; 0xa74 <vTaskStartScheduler+0x42>
 a64:	f8 94       	cli
 a66:	80 93 1a 07 	sts	0x071A, r24	; 0x80071a <xSchedulerRunning>
 a6a:	10 92 1e 07 	sts	0x071E, r1	; 0x80071e <xTickCount+0x1>
 a6e:	10 92 1d 07 	sts	0x071D, r1	; 0x80071d <xTickCount>
 a72:	ca dd       	rcall	.-1132   	; 0x608 <xPortStartScheduler>
 a74:	0f 91       	pop	r16
 a76:	ff 90       	pop	r15
 a78:	ef 90       	pop	r14
 a7a:	df 90       	pop	r13
 a7c:	cf 90       	pop	r12
 a7e:	bf 90       	pop	r11
 a80:	af 90       	pop	r10
 a82:	08 95       	ret

00000a84 <vTaskSuspendAll>:
 a84:	80 91 19 07 	lds	r24, 0x0719	; 0x800719 <uxSchedulerSuspended>
 a88:	8f 5f       	subi	r24, 0xFF	; 255
 a8a:	80 93 19 07 	sts	0x0719, r24	; 0x800719 <uxSchedulerSuspended>
 a8e:	08 95       	ret

00000a90 <vTaskIncrementTick>:
 a90:	0f 93       	push	r16
 a92:	1f 93       	push	r17
 a94:	cf 93       	push	r28
 a96:	df 93       	push	r29
 a98:	80 91 19 07 	lds	r24, 0x0719	; 0x800719 <uxSchedulerSuspended>
 a9c:	81 11       	cpse	r24, r1
 a9e:	af c0       	rjmp	.+350    	; 0xbfe <vTaskIncrementTick+0x16e>
 aa0:	80 91 1d 07 	lds	r24, 0x071D	; 0x80071d <xTickCount>
 aa4:	90 91 1e 07 	lds	r25, 0x071E	; 0x80071e <xTickCount+0x1>
 aa8:	01 96       	adiw	r24, 0x01	; 1
 aaa:	90 93 1e 07 	sts	0x071E, r25	; 0x80071e <xTickCount+0x1>
 aae:	80 93 1d 07 	sts	0x071D, r24	; 0x80071d <xTickCount>
 ab2:	80 91 1d 07 	lds	r24, 0x071D	; 0x80071d <xTickCount>
 ab6:	90 91 1e 07 	lds	r25, 0x071E	; 0x80071e <xTickCount+0x1>
 aba:	89 2b       	or	r24, r25
 abc:	99 f5       	brne	.+102    	; 0xb24 <vTaskIncrementTick+0x94>
 abe:	80 91 35 07 	lds	r24, 0x0735	; 0x800735 <pxDelayedTaskList>
 ac2:	90 91 36 07 	lds	r25, 0x0736	; 0x800736 <pxDelayedTaskList+0x1>
 ac6:	20 91 33 07 	lds	r18, 0x0733	; 0x800733 <pxOverflowDelayedTaskList>
 aca:	30 91 34 07 	lds	r19, 0x0734	; 0x800734 <pxOverflowDelayedTaskList+0x1>
 ace:	30 93 36 07 	sts	0x0736, r19	; 0x800736 <pxDelayedTaskList+0x1>
 ad2:	20 93 35 07 	sts	0x0735, r18	; 0x800735 <pxDelayedTaskList>
 ad6:	90 93 34 07 	sts	0x0734, r25	; 0x800734 <pxOverflowDelayedTaskList+0x1>
 ada:	80 93 33 07 	sts	0x0733, r24	; 0x800733 <pxOverflowDelayedTaskList>
 ade:	80 91 16 07 	lds	r24, 0x0716	; 0x800716 <xNumOfOverflows>
 ae2:	8f 5f       	subi	r24, 0xFF	; 255
 ae4:	80 93 16 07 	sts	0x0716, r24	; 0x800716 <xNumOfOverflows>
 ae8:	e0 91 35 07 	lds	r30, 0x0735	; 0x800735 <pxDelayedTaskList>
 aec:	f0 91 36 07 	lds	r31, 0x0736	; 0x800736 <pxDelayedTaskList+0x1>
 af0:	80 81       	ld	r24, Z
 af2:	81 11       	cpse	r24, r1
 af4:	07 c0       	rjmp	.+14     	; 0xb04 <vTaskIncrementTick+0x74>
 af6:	8f ef       	ldi	r24, 0xFF	; 255
 af8:	9f ef       	ldi	r25, 0xFF	; 255
 afa:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 afe:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 b02:	10 c0       	rjmp	.+32     	; 0xb24 <vTaskIncrementTick+0x94>
 b04:	e0 91 35 07 	lds	r30, 0x0735	; 0x800735 <pxDelayedTaskList>
 b08:	f0 91 36 07 	lds	r31, 0x0736	; 0x800736 <pxDelayedTaskList+0x1>
 b0c:	05 80       	ldd	r0, Z+5	; 0x05
 b0e:	f6 81       	ldd	r31, Z+6	; 0x06
 b10:	e0 2d       	mov	r30, r0
 b12:	06 80       	ldd	r0, Z+6	; 0x06
 b14:	f7 81       	ldd	r31, Z+7	; 0x07
 b16:	e0 2d       	mov	r30, r0
 b18:	82 81       	ldd	r24, Z+2	; 0x02
 b1a:	93 81       	ldd	r25, Z+3	; 0x03
 b1c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 b20:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 b24:	20 91 1d 07 	lds	r18, 0x071D	; 0x80071d <xTickCount>
 b28:	30 91 1e 07 	lds	r19, 0x071E	; 0x80071e <xTickCount+0x1>
 b2c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 b30:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 b34:	28 17       	cp	r18, r24
 b36:	39 07       	cpc	r19, r25
 b38:	08 f4       	brcc	.+2      	; 0xb3c <vTaskIncrementTick+0xac>
 b3a:	66 c0       	rjmp	.+204    	; 0xc08 <vTaskIncrementTick+0x178>
 b3c:	e0 91 35 07 	lds	r30, 0x0735	; 0x800735 <pxDelayedTaskList>
 b40:	f0 91 36 07 	lds	r31, 0x0736	; 0x800736 <pxDelayedTaskList+0x1>
 b44:	80 81       	ld	r24, Z
 b46:	88 23       	and	r24, r24
 b48:	99 f0       	breq	.+38     	; 0xb70 <vTaskIncrementTick+0xe0>
 b4a:	e0 91 35 07 	lds	r30, 0x0735	; 0x800735 <pxDelayedTaskList>
 b4e:	f0 91 36 07 	lds	r31, 0x0736	; 0x800736 <pxDelayedTaskList+0x1>
 b52:	05 80       	ldd	r0, Z+5	; 0x05
 b54:	f6 81       	ldd	r31, Z+6	; 0x06
 b56:	e0 2d       	mov	r30, r0
 b58:	c6 81       	ldd	r28, Z+6	; 0x06
 b5a:	d7 81       	ldd	r29, Z+7	; 0x07
 b5c:	8a 81       	ldd	r24, Y+2	; 0x02
 b5e:	9b 81       	ldd	r25, Y+3	; 0x03
 b60:	20 91 1d 07 	lds	r18, 0x071D	; 0x80071d <xTickCount>
 b64:	30 91 1e 07 	lds	r19, 0x071E	; 0x80071e <xTickCount+0x1>
 b68:	28 17       	cp	r18, r24
 b6a:	39 07       	cpc	r19, r25
 b6c:	f8 f4       	brcc	.+62     	; 0xbac <vTaskIncrementTick+0x11c>
 b6e:	19 c0       	rjmp	.+50     	; 0xba2 <vTaskIncrementTick+0x112>
 b70:	8f ef       	ldi	r24, 0xFF	; 255
 b72:	9f ef       	ldi	r25, 0xFF	; 255
 b74:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 b78:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 b7c:	45 c0       	rjmp	.+138    	; 0xc08 <vTaskIncrementTick+0x178>
 b7e:	e0 91 35 07 	lds	r30, 0x0735	; 0x800735 <pxDelayedTaskList>
 b82:	f0 91 36 07 	lds	r31, 0x0736	; 0x800736 <pxDelayedTaskList+0x1>
 b86:	05 80       	ldd	r0, Z+5	; 0x05
 b88:	f6 81       	ldd	r31, Z+6	; 0x06
 b8a:	e0 2d       	mov	r30, r0
 b8c:	c6 81       	ldd	r28, Z+6	; 0x06
 b8e:	d7 81       	ldd	r29, Z+7	; 0x07
 b90:	8a 81       	ldd	r24, Y+2	; 0x02
 b92:	9b 81       	ldd	r25, Y+3	; 0x03
 b94:	20 91 1d 07 	lds	r18, 0x071D	; 0x80071d <xTickCount>
 b98:	30 91 1e 07 	lds	r19, 0x071E	; 0x80071e <xTickCount+0x1>
 b9c:	28 17       	cp	r18, r24
 b9e:	39 07       	cpc	r19, r25
 ba0:	28 f4       	brcc	.+10     	; 0xbac <vTaskIncrementTick+0x11c>
 ba2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 ba6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 baa:	2e c0       	rjmp	.+92     	; 0xc08 <vTaskIncrementTick+0x178>
 bac:	8e 01       	movw	r16, r28
 bae:	0e 5f       	subi	r16, 0xFE	; 254
 bb0:	1f 4f       	sbci	r17, 0xFF	; 255
 bb2:	c8 01       	movw	r24, r16
 bb4:	22 db       	rcall	.-2492   	; 0x1fa <vListRemove>
 bb6:	8c 89       	ldd	r24, Y+20	; 0x14
 bb8:	9d 89       	ldd	r25, Y+21	; 0x15
 bba:	89 2b       	or	r24, r25
 bbc:	19 f0       	breq	.+6      	; 0xbc4 <vTaskIncrementTick+0x134>
 bbe:	ce 01       	movw	r24, r28
 bc0:	0c 96       	adiw	r24, 0x0c	; 12
 bc2:	1b db       	rcall	.-2506   	; 0x1fa <vListRemove>
 bc4:	8e 89       	ldd	r24, Y+22	; 0x16
 bc6:	90 91 1b 07 	lds	r25, 0x071B	; 0x80071b <uxTopReadyPriority>
 bca:	98 17       	cp	r25, r24
 bcc:	10 f4       	brcc	.+4      	; 0xbd2 <vTaskIncrementTick+0x142>
 bce:	80 93 1b 07 	sts	0x071B, r24	; 0x80071b <uxTopReadyPriority>
 bd2:	90 e0       	ldi	r25, 0x00	; 0
 bd4:	9c 01       	movw	r18, r24
 bd6:	22 0f       	add	r18, r18
 bd8:	33 1f       	adc	r19, r19
 bda:	22 0f       	add	r18, r18
 bdc:	33 1f       	adc	r19, r19
 bde:	22 0f       	add	r18, r18
 be0:	33 1f       	adc	r19, r19
 be2:	82 0f       	add	r24, r18
 be4:	93 1f       	adc	r25, r19
 be6:	b8 01       	movw	r22, r16
 be8:	87 5b       	subi	r24, 0xB7	; 183
 bea:	98 4f       	sbci	r25, 0xF8	; 248
 bec:	a4 da       	rcall	.-2744   	; 0x136 <vListInsertEnd>
 bee:	e0 91 35 07 	lds	r30, 0x0735	; 0x800735 <pxDelayedTaskList>
 bf2:	f0 91 36 07 	lds	r31, 0x0736	; 0x800736 <pxDelayedTaskList+0x1>
 bf6:	80 81       	ld	r24, Z
 bf8:	81 11       	cpse	r24, r1
 bfa:	c1 cf       	rjmp	.-126    	; 0xb7e <vTaskIncrementTick+0xee>
 bfc:	b9 cf       	rjmp	.-142    	; 0xb70 <vTaskIncrementTick+0xe0>
 bfe:	80 91 18 07 	lds	r24, 0x0718	; 0x800718 <uxMissedTicks>
 c02:	8f 5f       	subi	r24, 0xFF	; 255
 c04:	80 93 18 07 	sts	0x0718, r24	; 0x800718 <uxMissedTicks>
 c08:	df 91       	pop	r29
 c0a:	cf 91       	pop	r28
 c0c:	1f 91       	pop	r17
 c0e:	0f 91       	pop	r16
 c10:	08 95       	ret

00000c12 <xTaskResumeAll>:
 c12:	cf 92       	push	r12
 c14:	df 92       	push	r13
 c16:	ef 92       	push	r14
 c18:	ff 92       	push	r15
 c1a:	0f 93       	push	r16
 c1c:	1f 93       	push	r17
 c1e:	cf 93       	push	r28
 c20:	df 93       	push	r29
 c22:	0f b6       	in	r0, 0x3f	; 63
 c24:	f8 94       	cli
 c26:	0f 92       	push	r0
 c28:	80 91 19 07 	lds	r24, 0x0719	; 0x800719 <uxSchedulerSuspended>
 c2c:	81 50       	subi	r24, 0x01	; 1
 c2e:	80 93 19 07 	sts	0x0719, r24	; 0x800719 <uxSchedulerSuspended>
 c32:	80 91 19 07 	lds	r24, 0x0719	; 0x800719 <uxSchedulerSuspended>
 c36:	81 11       	cpse	r24, r1
 c38:	5f c0       	rjmp	.+190    	; 0xcf8 <xTaskResumeAll+0xe6>
 c3a:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <uxCurrentNumberOfTasks>
 c3e:	81 11       	cpse	r24, r1
 c40:	2f c0       	rjmp	.+94     	; 0xca0 <xTaskResumeAll+0x8e>
 c42:	5d c0       	rjmp	.+186    	; 0xcfe <xTaskResumeAll+0xec>
 c44:	d7 01       	movw	r26, r14
 c46:	15 96       	adiw	r26, 0x05	; 5
 c48:	ed 91       	ld	r30, X+
 c4a:	fc 91       	ld	r31, X
 c4c:	16 97       	sbiw	r26, 0x06	; 6
 c4e:	c6 81       	ldd	r28, Z+6	; 0x06
 c50:	d7 81       	ldd	r29, Z+7	; 0x07
 c52:	ce 01       	movw	r24, r28
 c54:	0c 96       	adiw	r24, 0x0c	; 12
 c56:	d1 da       	rcall	.-2654   	; 0x1fa <vListRemove>
 c58:	8e 01       	movw	r16, r28
 c5a:	0e 5f       	subi	r16, 0xFE	; 254
 c5c:	1f 4f       	sbci	r17, 0xFF	; 255
 c5e:	c8 01       	movw	r24, r16
 c60:	cc da       	rcall	.-2664   	; 0x1fa <vListRemove>
 c62:	8e 89       	ldd	r24, Y+22	; 0x16
 c64:	90 91 1b 07 	lds	r25, 0x071B	; 0x80071b <uxTopReadyPriority>
 c68:	98 17       	cp	r25, r24
 c6a:	10 f4       	brcc	.+4      	; 0xc70 <xTaskResumeAll+0x5e>
 c6c:	80 93 1b 07 	sts	0x071B, r24	; 0x80071b <uxTopReadyPriority>
 c70:	90 e0       	ldi	r25, 0x00	; 0
 c72:	9c 01       	movw	r18, r24
 c74:	22 0f       	add	r18, r18
 c76:	33 1f       	adc	r19, r19
 c78:	22 0f       	add	r18, r18
 c7a:	33 1f       	adc	r19, r19
 c7c:	22 0f       	add	r18, r18
 c7e:	33 1f       	adc	r19, r19
 c80:	82 0f       	add	r24, r18
 c82:	93 1f       	adc	r25, r19
 c84:	b8 01       	movw	r22, r16
 c86:	87 5b       	subi	r24, 0xB7	; 183
 c88:	98 4f       	sbci	r25, 0xF8	; 248
 c8a:	55 da       	rcall	.-2902   	; 0x136 <vListInsertEnd>
 c8c:	e0 91 6d 07 	lds	r30, 0x076D	; 0x80076d <pxCurrentTCB>
 c90:	f0 91 6e 07 	lds	r31, 0x076E	; 0x80076e <pxCurrentTCB+0x1>
 c94:	9e 89       	ldd	r25, Y+22	; 0x16
 c96:	86 89       	ldd	r24, Z+22	; 0x16
 c98:	98 17       	cp	r25, r24
 c9a:	58 f0       	brcs	.+22     	; 0xcb2 <xTaskResumeAll+0xa0>
 c9c:	dc 2c       	mov	r13, r12
 c9e:	09 c0       	rjmp	.+18     	; 0xcb2 <xTaskResumeAll+0xa0>
 ca0:	d1 2c       	mov	r13, r1
 ca2:	0f 2e       	mov	r0, r31
 ca4:	fa e2       	ldi	r31, 0x2A	; 42
 ca6:	ef 2e       	mov	r14, r31
 ca8:	f7 e0       	ldi	r31, 0x07	; 7
 caa:	ff 2e       	mov	r15, r31
 cac:	f0 2d       	mov	r31, r0
 cae:	cc 24       	eor	r12, r12
 cb0:	c3 94       	inc	r12
 cb2:	f7 01       	movw	r30, r14
 cb4:	80 81       	ld	r24, Z
 cb6:	81 11       	cpse	r24, r1
 cb8:	c5 cf       	rjmp	.-118    	; 0xc44 <xTaskResumeAll+0x32>
 cba:	80 91 18 07 	lds	r24, 0x0718	; 0x800718 <uxMissedTicks>
 cbe:	88 23       	and	r24, r24
 cc0:	79 f0       	breq	.+30     	; 0xce0 <xTaskResumeAll+0xce>
 cc2:	80 91 18 07 	lds	r24, 0x0718	; 0x800718 <uxMissedTicks>
 cc6:	88 23       	and	r24, r24
 cc8:	91 f0       	breq	.+36     	; 0xcee <xTaskResumeAll+0xdc>
 cca:	e2 de       	rcall	.-572    	; 0xa90 <vTaskIncrementTick>
 ccc:	80 91 18 07 	lds	r24, 0x0718	; 0x800718 <uxMissedTicks>
 cd0:	81 50       	subi	r24, 0x01	; 1
 cd2:	80 93 18 07 	sts	0x0718, r24	; 0x800718 <uxMissedTicks>
 cd6:	80 91 18 07 	lds	r24, 0x0718	; 0x800718 <uxMissedTicks>
 cda:	81 11       	cpse	r24, r1
 cdc:	f6 cf       	rjmp	.-20     	; 0xcca <xTaskResumeAll+0xb8>
 cde:	07 c0       	rjmp	.+14     	; 0xcee <xTaskResumeAll+0xdc>
 ce0:	f1 e0       	ldi	r31, 0x01	; 1
 ce2:	df 16       	cp	r13, r31
 ce4:	21 f0       	breq	.+8      	; 0xcee <xTaskResumeAll+0xdc>
 ce6:	80 91 17 07 	lds	r24, 0x0717	; 0x800717 <xMissedYield>
 cea:	81 30       	cpi	r24, 0x01	; 1
 cec:	39 f4       	brne	.+14     	; 0xcfc <xTaskResumeAll+0xea>
 cee:	10 92 17 07 	sts	0x0717, r1	; 0x800717 <xMissedYield>
 cf2:	c4 dc       	rcall	.-1656   	; 0x67c <vPortYield>
 cf4:	81 e0       	ldi	r24, 0x01	; 1
 cf6:	03 c0       	rjmp	.+6      	; 0xcfe <xTaskResumeAll+0xec>
 cf8:	80 e0       	ldi	r24, 0x00	; 0
 cfa:	01 c0       	rjmp	.+2      	; 0xcfe <xTaskResumeAll+0xec>
 cfc:	80 e0       	ldi	r24, 0x00	; 0
 cfe:	0f 90       	pop	r0
 d00:	0f be       	out	0x3f, r0	; 63
 d02:	df 91       	pop	r29
 d04:	cf 91       	pop	r28
 d06:	1f 91       	pop	r17
 d08:	0f 91       	pop	r16
 d0a:	ff 90       	pop	r15
 d0c:	ef 90       	pop	r14
 d0e:	df 90       	pop	r13
 d10:	cf 90       	pop	r12
 d12:	08 95       	ret

00000d14 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
 d14:	cf 93       	push	r28
 d16:	df 93       	push	r29
 d18:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
 d1a:	89 2b       	or	r24, r25
		{
			vTaskSuspendAll();
 d1c:	91 f0       	breq	.+36     	; 0xd42 <vTaskDelay+0x2e>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 d1e:	b2 de       	rcall	.-668    	; 0xa84 <vTaskSuspendAll>
 d20:	80 91 1d 07 	lds	r24, 0x071D	; 0x80071d <xTickCount>
 d24:	90 91 1e 07 	lds	r25, 0x071E	; 0x80071e <xTickCount+0x1>
 d28:	c8 0f       	add	r28, r24

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 d2a:	d9 1f       	adc	r29, r25
 d2c:	80 91 6d 07 	lds	r24, 0x076D	; 0x80076d <pxCurrentTCB>
 d30:	90 91 6e 07 	lds	r25, 0x076E	; 0x80076e <pxCurrentTCB+0x1>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
			}
			xAlreadyYielded = xTaskResumeAll();
 d34:	02 96       	adiw	r24, 0x02	; 2
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 d36:	61 da       	rcall	.-2878   	; 0x1fa <vListRemove>
 d38:	ce 01       	movw	r24, r28
		{
			portYIELD_WITHIN_API();
 d3a:	53 dd       	rcall	.-1370   	; 0x7e2 <prvAddCurrentTaskToDelayedList>
 d3c:	6a df       	rcall	.-300    	; 0xc12 <xTaskResumeAll>
		}
	}
 d3e:	81 11       	cpse	r24, r1
 d40:	01 c0       	rjmp	.+2      	; 0xd44 <vTaskDelay+0x30>
 d42:	9c dc       	rcall	.-1736   	; 0x67c <vPortYield>
 d44:	df 91       	pop	r29
 d46:	cf 91       	pop	r28
 d48:	08 95       	ret

00000d4a <prvIdleTask>:
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 d4a:	0f 2e       	mov	r0, r31
 d4c:	f1 e2       	ldi	r31, 0x21	; 33
 d4e:	ef 2e       	mov	r14, r31
 d50:	f7 e0       	ldi	r31, 0x07	; 7
 d52:	ff 2e       	mov	r15, r31
 d54:	f0 2d       	mov	r31, r0

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 d56:	c9 e4       	ldi	r28, 0x49	; 73
 d58:	d7 e0       	ldi	r29, 0x07	; 7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 d5a:	80 91 20 07 	lds	r24, 0x0720	; 0x800720 <uxTasksDeleted>
 d5e:	88 23       	and	r24, r24
		{
			vTaskSuspendAll();
 d60:	29 f1       	breq	.+74     	; 0xdac <prvIdleTask+0x62>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 d62:	90 de       	rcall	.-736    	; 0xa84 <vTaskSuspendAll>
			xTaskResumeAll();
 d64:	d7 01       	movw	r26, r14
 d66:	1c 91       	ld	r17, X

			if( xListIsEmpty == pdFALSE )
 d68:	54 df       	rcall	.-344    	; 0xc12 <xTaskResumeAll>
 d6a:	11 23       	and	r17, r17
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 d6c:	f9 f0       	breq	.+62     	; 0xdac <prvIdleTask+0x62>
 d6e:	0f b6       	in	r0, 0x3f	; 63
 d70:	f8 94       	cli
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 d72:	0f 92       	push	r0
 d74:	d7 01       	movw	r26, r14
 d76:	15 96       	adiw	r26, 0x05	; 5
 d78:	ed 91       	ld	r30, X+
 d7a:	fc 91       	ld	r31, X
 d7c:	16 97       	sbiw	r26, 0x06	; 6
					vListRemove( &( pxTCB->xGenericListItem ) );
 d7e:	06 81       	ldd	r16, Z+6	; 0x06
 d80:	17 81       	ldd	r17, Z+7	; 0x07
 d82:	c8 01       	movw	r24, r16
					--uxCurrentNumberOfTasks;
 d84:	02 96       	adiw	r24, 0x02	; 2
 d86:	39 da       	rcall	.-2958   	; 0x1fa <vListRemove>
 d88:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <uxCurrentNumberOfTasks>
 d8c:	81 50       	subi	r24, 0x01	; 1
					--uxTasksDeleted;
 d8e:	80 93 1f 07 	sts	0x071F, r24	; 0x80071f <uxCurrentNumberOfTasks>
 d92:	80 91 20 07 	lds	r24, 0x0720	; 0x800720 <uxTasksDeleted>
 d96:	81 50       	subi	r24, 0x01	; 1
				}
				taskEXIT_CRITICAL();
 d98:	80 93 20 07 	sts	0x0720, r24	; 0x800720 <uxTasksDeleted>
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 d9c:	0f 90       	pop	r0
 d9e:	0f be       	out	0x3f, r0	; 63
		vPortFree( pxTCB );
 da0:	f8 01       	movw	r30, r16
 da2:	87 89       	ldd	r24, Z+23	; 0x17

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 da4:	90 8d       	ldd	r25, Z+24	; 0x18
 da6:	b4 d9       	rcall	.-3224   	; 0x110 <vPortFree>
 da8:	c8 01       	movw	r24, r16
			{
				taskYIELD();
 daa:	b2 d9       	rcall	.-3228   	; 0x110 <vPortFree>
 dac:	88 81       	ld	r24, Y
 dae:	82 30       	cpi	r24, 0x02	; 2
 db0:	a0 f2       	brcs	.-88     	; 0xd5a <prvIdleTask+0x10>
 db2:	64 dc       	rcall	.-1848   	; 0x67c <vPortYield>
 db4:	d2 cf       	rjmp	.-92     	; 0xd5a <prvIdleTask+0x10>

00000db6 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 db6:	80 91 19 07 	lds	r24, 0x0719	; 0x800719 <uxSchedulerSuspended>
 dba:	81 11       	cpse	r24, r1
 dbc:	13 c0       	rjmp	.+38     	; 0xde4 <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 dbe:	80 91 1b 07 	lds	r24, 0x071B	; 0x80071b <uxTopReadyPriority>
 dc2:	90 e0       	ldi	r25, 0x00	; 0
 dc4:	fc 01       	movw	r30, r24
 dc6:	ee 0f       	add	r30, r30
 dc8:	ff 1f       	adc	r31, r31
 dca:	ee 0f       	add	r30, r30
 dcc:	ff 1f       	adc	r31, r31
 dce:	ee 0f       	add	r30, r30
 dd0:	ff 1f       	adc	r31, r31
 dd2:	8e 0f       	add	r24, r30
 dd4:	9f 1f       	adc	r25, r31
 dd6:	fc 01       	movw	r30, r24
 dd8:	e7 5b       	subi	r30, 0xB7	; 183
 dda:	f8 4f       	sbci	r31, 0xF8	; 248
 ddc:	80 81       	ld	r24, Z
 dde:	88 23       	and	r24, r24
 de0:	29 f0       	breq	.+10     	; 0xdec <vTaskSwitchContext+0x36>
 de2:	1b c0       	rjmp	.+54     	; 0xe1a <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 de4:	81 e0       	ldi	r24, 0x01	; 1
 de6:	80 93 17 07 	sts	0x0717, r24	; 0x800717 <xMissedYield>
 dea:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
 dec:	80 91 1b 07 	lds	r24, 0x071B	; 0x80071b <uxTopReadyPriority>
 df0:	81 50       	subi	r24, 0x01	; 1
 df2:	80 93 1b 07 	sts	0x071B, r24	; 0x80071b <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 df6:	80 91 1b 07 	lds	r24, 0x071B	; 0x80071b <uxTopReadyPriority>
 dfa:	90 e0       	ldi	r25, 0x00	; 0
 dfc:	fc 01       	movw	r30, r24
 dfe:	ee 0f       	add	r30, r30
 e00:	ff 1f       	adc	r31, r31
 e02:	ee 0f       	add	r30, r30
 e04:	ff 1f       	adc	r31, r31
 e06:	ee 0f       	add	r30, r30
 e08:	ff 1f       	adc	r31, r31
 e0a:	8e 0f       	add	r24, r30
 e0c:	9f 1f       	adc	r25, r31
 e0e:	fc 01       	movw	r30, r24
 e10:	e7 5b       	subi	r30, 0xB7	; 183
 e12:	f8 4f       	sbci	r31, 0xF8	; 248
 e14:	80 81       	ld	r24, Z
 e16:	88 23       	and	r24, r24
 e18:	49 f3       	breq	.-46     	; 0xdec <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 e1a:	80 91 1b 07 	lds	r24, 0x071B	; 0x80071b <uxTopReadyPriority>
 e1e:	90 e0       	ldi	r25, 0x00	; 0
 e20:	9c 01       	movw	r18, r24
 e22:	22 0f       	add	r18, r18
 e24:	33 1f       	adc	r19, r19
 e26:	22 0f       	add	r18, r18
 e28:	33 1f       	adc	r19, r19
 e2a:	22 0f       	add	r18, r18
 e2c:	33 1f       	adc	r19, r19
 e2e:	28 0f       	add	r18, r24
 e30:	39 1f       	adc	r19, r25
 e32:	d9 01       	movw	r26, r18
 e34:	a7 5b       	subi	r26, 0xB7	; 183
 e36:	b8 4f       	sbci	r27, 0xF8	; 248
 e38:	11 96       	adiw	r26, 0x01	; 1
 e3a:	ed 91       	ld	r30, X+
 e3c:	fc 91       	ld	r31, X
 e3e:	12 97       	sbiw	r26, 0x02	; 2
 e40:	02 80       	ldd	r0, Z+2	; 0x02
 e42:	f3 81       	ldd	r31, Z+3	; 0x03
 e44:	e0 2d       	mov	r30, r0
 e46:	12 96       	adiw	r26, 0x02	; 2
 e48:	fc 93       	st	X, r31
 e4a:	ee 93       	st	-X, r30
 e4c:	11 97       	sbiw	r26, 0x01	; 1
 e4e:	24 5b       	subi	r18, 0xB4	; 180
 e50:	38 4f       	sbci	r19, 0xF8	; 248
 e52:	e2 17       	cp	r30, r18
 e54:	f3 07       	cpc	r31, r19
 e56:	29 f4       	brne	.+10     	; 0xe62 <vTaskSwitchContext+0xac>
 e58:	22 81       	ldd	r18, Z+2	; 0x02
 e5a:	33 81       	ldd	r19, Z+3	; 0x03
 e5c:	fd 01       	movw	r30, r26
 e5e:	32 83       	std	Z+2, r19	; 0x02
 e60:	21 83       	std	Z+1, r18	; 0x01
 e62:	fc 01       	movw	r30, r24
 e64:	ee 0f       	add	r30, r30
 e66:	ff 1f       	adc	r31, r31
 e68:	ee 0f       	add	r30, r30
 e6a:	ff 1f       	adc	r31, r31
 e6c:	ee 0f       	add	r30, r30
 e6e:	ff 1f       	adc	r31, r31
 e70:	8e 0f       	add	r24, r30
 e72:	9f 1f       	adc	r25, r31
 e74:	fc 01       	movw	r30, r24
 e76:	e7 5b       	subi	r30, 0xB7	; 183
 e78:	f8 4f       	sbci	r31, 0xF8	; 248
 e7a:	01 80       	ldd	r0, Z+1	; 0x01
 e7c:	f2 81       	ldd	r31, Z+2	; 0x02
 e7e:	e0 2d       	mov	r30, r0
 e80:	86 81       	ldd	r24, Z+6	; 0x06
 e82:	97 81       	ldd	r25, Z+7	; 0x07
 e84:	90 93 6e 07 	sts	0x076E, r25	; 0x80076e <pxCurrentTCB+0x1>
 e88:	80 93 6d 07 	sts	0x076D, r24	; 0x80076d <pxCurrentTCB>
 e8c:	08 95       	ret

00000e8e <memset>:
 e8e:	dc 01       	movw	r26, r24
 e90:	01 c0       	rjmp	.+2      	; 0xe94 <memset+0x6>
 e92:	6d 93       	st	X+, r22
 e94:	41 50       	subi	r20, 0x01	; 1
 e96:	50 40       	sbci	r21, 0x00	; 0
 e98:	e0 f7       	brcc	.-8      	; 0xe92 <memset+0x4>
 e9a:	08 95       	ret

00000e9c <strncpy>:
 e9c:	fb 01       	movw	r30, r22
 e9e:	dc 01       	movw	r26, r24
 ea0:	41 50       	subi	r20, 0x01	; 1
 ea2:	50 40       	sbci	r21, 0x00	; 0
 ea4:	48 f0       	brcs	.+18     	; 0xeb8 <strncpy+0x1c>
 ea6:	01 90       	ld	r0, Z+
 ea8:	0d 92       	st	X+, r0
 eaa:	00 20       	and	r0, r0
 eac:	c9 f7       	brne	.-14     	; 0xea0 <strncpy+0x4>
 eae:	01 c0       	rjmp	.+2      	; 0xeb2 <strncpy+0x16>
 eb0:	1d 92       	st	X+, r1
 eb2:	41 50       	subi	r20, 0x01	; 1
 eb4:	50 40       	sbci	r21, 0x00	; 0
 eb6:	e0 f7       	brcc	.-8      	; 0xeb0 <strncpy+0x14>
 eb8:	08 95       	ret

00000eba <_exit>:
 eba:	f8 94       	cli

00000ebc <__stop_program>:
 ebc:	ff cf       	rjmp	.-2      	; 0xebc <__stop_program>
