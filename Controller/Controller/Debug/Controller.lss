
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  00000f76  0000100a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f76  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000642  00800140  00800140  0000104a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000104a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000107c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000270  00000000  00000000  000010bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002896  00000000  00000000  0000132c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001011  00000000  00000000  00003bc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017f7  00000000  00000000  00004bd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000624  00000000  00000000  000063cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ebe  00000000  00000000  000069f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000159e  00000000  00000000  000078ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000268  00000000  00000000  00008e4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	30 c4       	rjmp	.+2144   	; 0x896 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e7       	ldi	r30, 0x76	; 118
  a0:	ff e0       	ldi	r31, 0x0F	; 15
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 34       	cpi	r26, 0x40	; 64
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	27 e0       	ldi	r18, 0x07	; 7
  b4:	a0 e4       	ldi	r26, 0x40	; 64
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 38       	cpi	r26, 0x82	; 130
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	7c d2       	rcall	.+1272   	; 0x5bc <main>
  c4:	56 c7       	rjmp	.+3756   	; 0xf72 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
  cc:	ec 01       	movw	r28, r24
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
  ce:	36 d5       	rcall	.+2668   	; 0xb3c <vTaskSuspendAll>
  d0:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <__data_end>
  d4:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <__data_end+0x1>
  d8:	c9 01       	movw	r24, r18
  da:	8c 0f       	add	r24, r28
  dc:	9d 1f       	adc	r25, r29
  de:	8c 3d       	cpi	r24, 0xDC	; 220
  e0:	45 e0       	ldi	r20, 0x05	; 5
  e2:	94 07       	cpc	r25, r20
  e4:	58 f4       	brcc	.+22     	; 0xfc <pvPortMalloc+0x34>
  e6:	28 17       	cp	r18, r24
  e8:	39 07       	cpc	r19, r25
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
  ea:	58 f4       	brcc	.+22     	; 0x102 <pvPortMalloc+0x3a>
  ec:	e9 01       	movw	r28, r18
  ee:	ce 5b       	subi	r28, 0xBE	; 190
			xNextFreeByte += xWantedSize;			
  f0:	de 4f       	sbci	r29, 0xFE	; 254
  f2:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <__data_end+0x1>
  f6:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__data_end>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
  fa:	05 c0       	rjmp	.+10     	; 0x106 <pvPortMalloc+0x3e>
  fc:	c0 e0       	ldi	r28, 0x00	; 0
  fe:	d0 e0       	ldi	r29, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <pvPortMalloc+0x3e>
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
 102:	c0 e0       	ldi	r28, 0x00	; 0
 104:	d0 e0       	ldi	r29, 0x00	; 0
		}
	}
	#endif	

	return pvReturn;
}
 106:	e1 d5       	rcall	.+3010   	; 0xcca <xTaskResumeAll>
 108:	ce 01       	movw	r24, r28
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 110:	08 95       	ret

00000112 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
 112:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 114:	03 96       	adiw	r24, 0x03	; 3
 116:	92 83       	std	Z+2, r25	; 0x02
 118:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 11a:	2f ef       	ldi	r18, 0xFF	; 255
 11c:	3f ef       	ldi	r19, 0xFF	; 255
 11e:	34 83       	std	Z+4, r19	; 0x04
 120:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 122:	96 83       	std	Z+6, r25	; 0x06
 124:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 126:	90 87       	std	Z+8, r25	; 0x08
 128:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 12a:	10 82       	st	Z, r1
 12c:	08 95       	ret

0000012e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 12e:	fc 01       	movw	r30, r24
 130:	11 86       	std	Z+9, r1	; 0x09
 132:	10 86       	std	Z+8, r1	; 0x08
 134:	08 95       	ret

00000136 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	fc 01       	movw	r30, r24
 13c:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
 13e:	21 81       	ldd	r18, Z+1	; 0x01
 140:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
 142:	e9 01       	movw	r28, r18
 144:	8a 81       	ldd	r24, Y+2	; 0x02
 146:	9b 81       	ldd	r25, Y+3	; 0x03
 148:	13 96       	adiw	r26, 0x03	; 3
 14a:	9c 93       	st	X, r25
 14c:	8e 93       	st	-X, r24
 14e:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
 150:	81 81       	ldd	r24, Z+1	; 0x01
 152:	92 81       	ldd	r25, Z+2	; 0x02
 154:	15 96       	adiw	r26, 0x05	; 5
 156:	9c 93       	st	X, r25
 158:	8e 93       	st	-X, r24
 15a:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 15c:	8a 81       	ldd	r24, Y+2	; 0x02
 15e:	9b 81       	ldd	r25, Y+3	; 0x03
 160:	ec 01       	movw	r28, r24
 162:	7d 83       	std	Y+5, r23	; 0x05
 164:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 166:	e9 01       	movw	r28, r18
 168:	7b 83       	std	Y+3, r23	; 0x03
 16a:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 16c:	72 83       	std	Z+2, r23	; 0x02
 16e:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 170:	19 96       	adiw	r26, 0x09	; 9
 172:	fc 93       	st	X, r31
 174:	ee 93       	st	-X, r30
 176:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
 178:	80 81       	ld	r24, Z
 17a:	8f 5f       	subi	r24, 0xFF	; 255
 17c:	80 83       	st	Z, r24
}
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 18a:	48 81       	ld	r20, Y
 18c:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 18e:	4f 3f       	cpi	r20, 0xFF	; 255
 190:	2f ef       	ldi	r18, 0xFF	; 255
 192:	52 07       	cpc	r21, r18
 194:	31 f4       	brne	.+12     	; 0x1a2 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 196:	dc 01       	movw	r26, r24
 198:	17 96       	adiw	r26, 0x07	; 7
 19a:	ed 91       	ld	r30, X+
 19c:	fc 91       	ld	r31, X
 19e:	18 97       	sbiw	r26, 0x08	; 8
 1a0:	17 c0       	rjmp	.+46     	; 0x1d0 <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 1a2:	fc 01       	movw	r30, r24
 1a4:	33 96       	adiw	r30, 0x03	; 3
 1a6:	dc 01       	movw	r26, r24
 1a8:	15 96       	adiw	r26, 0x05	; 5
 1aa:	2d 91       	ld	r18, X+
 1ac:	3c 91       	ld	r19, X
 1ae:	16 97       	sbiw	r26, 0x06	; 6
 1b0:	d9 01       	movw	r26, r18
 1b2:	2d 91       	ld	r18, X+
 1b4:	3c 91       	ld	r19, X
 1b6:	42 17       	cp	r20, r18
 1b8:	53 07       	cpc	r21, r19
 1ba:	50 f0       	brcs	.+20     	; 0x1d0 <vListInsert+0x4c>
 1bc:	02 80       	ldd	r0, Z+2	; 0x02
 1be:	f3 81       	ldd	r31, Z+3	; 0x03
 1c0:	e0 2d       	mov	r30, r0
 1c2:	a2 81       	ldd	r26, Z+2	; 0x02
 1c4:	b3 81       	ldd	r27, Z+3	; 0x03
 1c6:	2d 91       	ld	r18, X+
 1c8:	3c 91       	ld	r19, X
 1ca:	42 17       	cp	r20, r18
 1cc:	53 07       	cpc	r21, r19
 1ce:	b0 f7       	brcc	.-20     	; 0x1bc <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 1d0:	a2 81       	ldd	r26, Z+2	; 0x02
 1d2:	b3 81       	ldd	r27, Z+3	; 0x03
 1d4:	bb 83       	std	Y+3, r27	; 0x03
 1d6:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 1d8:	15 96       	adiw	r26, 0x05	; 5
 1da:	dc 93       	st	X, r29
 1dc:	ce 93       	st	-X, r28
 1de:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
 1e0:	fd 83       	std	Y+5, r31	; 0x05
 1e2:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 1e4:	d3 83       	std	Z+3, r29	; 0x03
 1e6:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 1e8:	99 87       	std	Y+9, r25	; 0x09
 1ea:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
 1ec:	fc 01       	movw	r30, r24
 1ee:	20 81       	ld	r18, Z
 1f0:	2f 5f       	subi	r18, 0xFF	; 255
 1f2:	20 83       	st	Z, r18
}
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
 1fa:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 1fc:	a2 81       	ldd	r26, Z+2	; 0x02
 1fe:	b3 81       	ldd	r27, Z+3	; 0x03
 200:	84 81       	ldd	r24, Z+4	; 0x04
 202:	95 81       	ldd	r25, Z+5	; 0x05
 204:	15 96       	adiw	r26, 0x05	; 5
 206:	9c 93       	st	X, r25
 208:	8e 93       	st	-X, r24
 20a:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 20c:	a4 81       	ldd	r26, Z+4	; 0x04
 20e:	b5 81       	ldd	r27, Z+5	; 0x05
 210:	82 81       	ldd	r24, Z+2	; 0x02
 212:	93 81       	ldd	r25, Z+3	; 0x03
 214:	13 96       	adiw	r26, 0x03	; 3
 216:	9c 93       	st	X, r25
 218:	8e 93       	st	-X, r24
 21a:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 21c:	a0 85       	ldd	r26, Z+8	; 0x08
 21e:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 220:	11 96       	adiw	r26, 0x01	; 1
 222:	8d 91       	ld	r24, X+
 224:	9c 91       	ld	r25, X
 226:	12 97       	sbiw	r26, 0x02	; 2
 228:	e8 17       	cp	r30, r24
 22a:	f9 07       	cpc	r31, r25
 22c:	31 f4       	brne	.+12     	; 0x23a <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 22e:	84 81       	ldd	r24, Z+4	; 0x04
 230:	95 81       	ldd	r25, Z+5	; 0x05
 232:	12 96       	adiw	r26, 0x02	; 2
 234:	9c 93       	st	X, r25
 236:	8e 93       	st	-X, r24
 238:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
 23a:	11 86       	std	Z+9, r1	; 0x09
 23c:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 23e:	8c 91       	ld	r24, X
 240:	81 50       	subi	r24, 0x01	; 1
 242:	8c 93       	st	X, r24
 244:	08 95       	ret

00000246 <adc_init>:
//-------------------------------------------------- End Button SM --------------------------------------------------//

//-------------------------------------------------- Start Transmission SM --------------------------------------------------//

void TRANSMIT_Init(){
	transmit_state = wait_to_transmit;
 246:	80 e4       	ldi	r24, 0x40	; 64
 248:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 24c:	87 e8       	ldi	r24, 0x87	; 135
 24e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 252:	08 95       	ret

00000254 <adc_read>:
 254:	ec e7       	ldi	r30, 0x7C	; 124
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	90 81       	ld	r25, Z
 25a:	98 7f       	andi	r25, 0xF8	; 248
 25c:	87 70       	andi	r24, 0x07	; 7
 25e:	89 2b       	or	r24, r25
 260:	80 83       	st	Z, r24
 262:	ea e7       	ldi	r30, 0x7A	; 122
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	80 81       	ld	r24, Z
 268:	80 64       	ori	r24, 0x40	; 64
 26a:	80 83       	st	Z, r24
 26c:	80 81       	ld	r24, Z
 26e:	86 fd       	sbrc	r24, 6
 270:	fd cf       	rjmp	.-6      	; 0x26c <adc_read+0x18>
 272:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 276:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 27a:	08 95       	ret

0000027c <initUSART>:
 27c:	81 30       	cpi	r24, 0x01	; 1
 27e:	81 f0       	breq	.+32     	; 0x2a0 <initUSART+0x24>
 280:	e1 ec       	ldi	r30, 0xC1	; 193
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	80 81       	ld	r24, Z
 286:	88 61       	ori	r24, 0x18	; 24
 288:	80 83       	st	Z, r24
 28a:	e2 ec       	ldi	r30, 0xC2	; 194
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	80 81       	ld	r24, Z
 290:	86 60       	ori	r24, 0x06	; 6
 292:	80 83       	st	Z, r24
 294:	83 e3       	ldi	r24, 0x33	; 51
 296:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 29a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 29e:	08 95       	ret
 2a0:	e9 ec       	ldi	r30, 0xC9	; 201
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	80 81       	ld	r24, Z
 2a6:	88 61       	ori	r24, 0x18	; 24
 2a8:	80 83       	st	Z, r24
 2aa:	ea ec       	ldi	r30, 0xCA	; 202
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	80 81       	ld	r24, Z
 2b0:	86 60       	ori	r24, 0x06	; 6
 2b2:	80 83       	st	Z, r24
 2b4:	83 e3       	ldi	r24, 0x33	; 51
 2b6:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 2ba:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 2be:	08 95       	ret

000002c0 <USART_Send>:
 2c0:	61 30       	cpi	r22, 0x01	; 1
 2c2:	41 f0       	breq	.+16     	; 0x2d4 <USART_Send+0x14>
 2c4:	e0 ec       	ldi	r30, 0xC0	; 192
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	90 81       	ld	r25, Z
 2ca:	95 ff       	sbrs	r25, 5
 2cc:	fd cf       	rjmp	.-6      	; 0x2c8 <USART_Send+0x8>
 2ce:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 2d2:	08 95       	ret
 2d4:	e8 ec       	ldi	r30, 0xC8	; 200
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	90 81       	ld	r25, Z
 2da:	95 ff       	sbrs	r25, 5
 2dc:	fd cf       	rjmp	.-6      	; 0x2d8 <USART_Send+0x18>
 2de:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 2e2:	08 95       	ret

000002e4 <JOY_Tick>:
 2e4:	80 91 7f 07 	lds	r24, 0x077F	; 0x80077f <joy_state>
 2e8:	81 11       	cpse	r24, r1
 2ea:	52 c0       	rjmp	.+164    	; 0x390 <JOY_Tick+0xac>
 2ec:	b3 df       	rcall	.-154    	; 0x254 <adc_read>
 2ee:	90 93 23 07 	sts	0x0723, r25	; 0x800723 <joystick_value+0x1>
 2f2:	80 93 22 07 	sts	0x0722, r24	; 0x800722 <joystick_value>
 2f6:	9c 01       	movw	r18, r24
 2f8:	25 54       	subi	r18, 0x45	; 69
 2fa:	32 40       	sbci	r19, 0x02	; 2
 2fc:	2b 38       	cpi	r18, 0x8B	; 139
 2fe:	31 05       	cpc	r19, r1
 300:	38 f4       	brcc	.+14     	; 0x310 <JOY_Tick+0x2c>
 302:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <data_to_transmit>
 306:	88 7f       	andi	r24, 0xF8	; 248
 308:	81 60       	ori	r24, 0x01	; 1
 30a:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <data_to_transmit>
 30e:	40 c0       	rjmp	.+128    	; 0x390 <JOY_Tick+0xac>
 310:	9c 01       	movw	r18, r24
 312:	21 5d       	subi	r18, 0xD1	; 209
 314:	32 40       	sbci	r19, 0x02	; 2
 316:	2b 38       	cpi	r18, 0x8B	; 139
 318:	31 05       	cpc	r19, r1
 31a:	38 f4       	brcc	.+14     	; 0x32a <JOY_Tick+0x46>
 31c:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <data_to_transmit>
 320:	88 7f       	andi	r24, 0xF8	; 248
 322:	82 60       	ori	r24, 0x02	; 2
 324:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <data_to_transmit>
 328:	33 c0       	rjmp	.+102    	; 0x390 <JOY_Tick+0xac>
 32a:	8d 35       	cpi	r24, 0x5D	; 93
 32c:	23 e0       	ldi	r18, 0x03	; 3
 32e:	92 07       	cpc	r25, r18
 330:	38 f0       	brcs	.+14     	; 0x340 <JOY_Tick+0x5c>
 332:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <data_to_transmit>
 336:	88 7f       	andi	r24, 0xF8	; 248
 338:	83 60       	ori	r24, 0x03	; 3
 33a:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <data_to_transmit>
 33e:	28 c0       	rjmp	.+80     	; 0x390 <JOY_Tick+0xac>
 340:	9c 01       	movw	r18, r24
 342:	2f 54       	subi	r18, 0x4F	; 79
 344:	31 40       	sbci	r19, 0x01	; 1
 346:	25 3a       	cpi	r18, 0xA5	; 165
 348:	31 05       	cpc	r19, r1
 34a:	38 f4       	brcc	.+14     	; 0x35a <JOY_Tick+0x76>
 34c:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <data_to_transmit>
 350:	88 7f       	andi	r24, 0xF8	; 248
 352:	85 60       	ori	r24, 0x05	; 5
 354:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <data_to_transmit>
 358:	1b c0       	rjmp	.+54     	; 0x390 <JOY_Tick+0xac>
 35a:	9c 01       	movw	r18, r24
 35c:	28 5a       	subi	r18, 0xA8	; 168
 35e:	31 09       	sbc	r19, r1
 360:	26 3a       	cpi	r18, 0xA6	; 166
 362:	31 05       	cpc	r19, r1
 364:	38 f4       	brcc	.+14     	; 0x374 <JOY_Tick+0x90>
 366:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <data_to_transmit>
 36a:	88 7f       	andi	r24, 0xF8	; 248
 36c:	86 60       	ori	r24, 0x06	; 6
 36e:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <data_to_transmit>
 372:	0e c0       	rjmp	.+28     	; 0x390 <JOY_Tick+0xac>
 374:	87 3a       	cpi	r24, 0xA7	; 167
 376:	91 05       	cpc	r25, r1
 378:	30 f4       	brcc	.+12     	; 0x386 <JOY_Tick+0xa2>
 37a:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <data_to_transmit>
 37e:	87 60       	ori	r24, 0x07	; 7
 380:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <data_to_transmit>
 384:	05 c0       	rjmp	.+10     	; 0x390 <JOY_Tick+0xac>
 386:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <data_to_transmit>
 38a:	88 7f       	andi	r24, 0xF8	; 248
 38c:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <data_to_transmit>
 390:	80 91 7f 07 	lds	r24, 0x077F	; 0x80077f <joy_state>
 394:	81 11       	cpse	r24, r1
 396:	10 92 7f 07 	sts	0x077F, r1	; 0x80077f <joy_state>
 39a:	08 95       	ret

0000039c <JOYSecTask>:
 39c:	10 92 7f 07 	sts	0x077F, r1	; 0x80077f <joy_state>
 3a0:	a1 df       	rcall	.-190    	; 0x2e4 <JOY_Tick>
 3a2:	82 e0       	ldi	r24, 0x02	; 2
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	12 d5       	rcall	.+2596   	; 0xdcc <vTaskDelay>
 3a8:	fb cf       	rjmp	.-10     	; 0x3a0 <JOYSecTask+0x4>

000003aa <JOYSecPulse>:
 3aa:	af 92       	push	r10
 3ac:	bf 92       	push	r11
 3ae:	cf 92       	push	r12
 3b0:	df 92       	push	r13
 3b2:	ef 92       	push	r14
 3b4:	ff 92       	push	r15
 3b6:	0f 93       	push	r16
 3b8:	a1 2c       	mov	r10, r1
 3ba:	b1 2c       	mov	r11, r1
 3bc:	c1 2c       	mov	r12, r1
 3be:	d1 2c       	mov	r13, r1
 3c0:	e1 2c       	mov	r14, r1
 3c2:	f1 2c       	mov	r15, r1
 3c4:	08 2f       	mov	r16, r24
 3c6:	20 e0       	ldi	r18, 0x00	; 0
 3c8:	30 e0       	ldi	r19, 0x00	; 0
 3ca:	45 e5       	ldi	r20, 0x55	; 85
 3cc:	50 e0       	ldi	r21, 0x00	; 0
 3ce:	62 e0       	ldi	r22, 0x02	; 2
 3d0:	71 e0       	ldi	r23, 0x01	; 1
 3d2:	8e ec       	ldi	r24, 0xCE	; 206
 3d4:	91 e0       	ldi	r25, 0x01	; 1
 3d6:	96 d2       	rcall	.+1324   	; 0x904 <xTaskGenericCreate>
 3d8:	0f 91       	pop	r16
 3da:	ff 90       	pop	r15
 3dc:	ef 90       	pop	r14
 3de:	df 90       	pop	r13
 3e0:	cf 90       	pop	r12
 3e2:	bf 90       	pop	r11
 3e4:	af 90       	pop	r10
 3e6:	08 95       	ret

000003e8 <STEERING_Tick>:
 3e8:	80 91 80 07 	lds	r24, 0x0780	; 0x800780 <steering_state>
 3ec:	81 11       	cpse	r24, r1
 3ee:	20 c0       	rjmp	.+64     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	30 df       	rcall	.-416    	; 0x254 <adc_read>
 3f4:	90 93 21 07 	sts	0x0721, r25	; 0x800721 <steering+0x1>
 3f8:	80 93 20 07 	sts	0x0720, r24	; 0x800720 <steering>
 3fc:	85 34       	cpi	r24, 0x45	; 69
 3fe:	22 e0       	ldi	r18, 0x02	; 2
 400:	92 07       	cpc	r25, r18
 402:	38 f0       	brcs	.+14     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 404:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <data_to_transmit>
 408:	87 7e       	andi	r24, 0xE7	; 231
 40a:	80 61       	ori	r24, 0x10	; 16
 40c:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <data_to_transmit>
 410:	0f c0       	rjmp	.+30     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 412:	84 3f       	cpi	r24, 0xF4	; 244
 414:	91 40       	sbci	r25, 0x01	; 1
 416:	38 f4       	brcc	.+14     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 418:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <data_to_transmit>
 41c:	87 7e       	andi	r24, 0xE7	; 231
 41e:	88 60       	ori	r24, 0x08	; 8
 420:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <data_to_transmit>
 424:	05 c0       	rjmp	.+10     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 426:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <data_to_transmit>
 42a:	87 7e       	andi	r24, 0xE7	; 231
 42c:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <data_to_transmit>
 430:	80 91 80 07 	lds	r24, 0x0780	; 0x800780 <steering_state>
 434:	81 11       	cpse	r24, r1
 436:	10 92 80 07 	sts	0x0780, r1	; 0x800780 <steering_state>
 43a:	08 95       	ret

0000043c <STEERINGSecTask>:
 43c:	10 92 80 07 	sts	0x0780, r1	; 0x800780 <steering_state>
 440:	d3 df       	rcall	.-90     	; 0x3e8 <STEERING_Tick>
 442:	8f e0       	ldi	r24, 0x0F	; 15
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	c2 d4       	rcall	.+2436   	; 0xdcc <vTaskDelay>
 448:	fb cf       	rjmp	.-10     	; 0x440 <STEERINGSecTask+0x4>

0000044a <STEERINGSecPulse>:
 44a:	af 92       	push	r10
 44c:	bf 92       	push	r11
 44e:	cf 92       	push	r12
 450:	df 92       	push	r13
 452:	ef 92       	push	r14
 454:	ff 92       	push	r15
 456:	0f 93       	push	r16
 458:	a1 2c       	mov	r10, r1
 45a:	b1 2c       	mov	r11, r1
 45c:	c1 2c       	mov	r12, r1
 45e:	d1 2c       	mov	r13, r1
 460:	e1 2c       	mov	r14, r1
 462:	f1 2c       	mov	r15, r1
 464:	08 2f       	mov	r16, r24
 466:	20 e0       	ldi	r18, 0x00	; 0
 468:	30 e0       	ldi	r19, 0x00	; 0
 46a:	45 e5       	ldi	r20, 0x55	; 85
 46c:	50 e0       	ldi	r21, 0x00	; 0
 46e:	6d e0       	ldi	r22, 0x0D	; 13
 470:	71 e0       	ldi	r23, 0x01	; 1
 472:	8e e1       	ldi	r24, 0x1E	; 30
 474:	92 e0       	ldi	r25, 0x02	; 2
 476:	46 d2       	rcall	.+1164   	; 0x904 <xTaskGenericCreate>
 478:	0f 91       	pop	r16
 47a:	ff 90       	pop	r15
 47c:	ef 90       	pop	r14
 47e:	df 90       	pop	r13
 480:	cf 90       	pop	r12
 482:	bf 90       	pop	r11
 484:	af 90       	pop	r10
 486:	08 95       	ret

00000488 <BUTTON_Tick>:
 488:	80 91 81 07 	lds	r24, 0x0781	; 0x800781 <button_state>
 48c:	88 23       	and	r24, r24
 48e:	19 f0       	breq	.+6      	; 0x496 <BUTTON_Tick+0xe>
 490:	81 30       	cpi	r24, 0x01	; 1
 492:	01 f1       	breq	.+64     	; 0x4d4 <BUTTON_Tick+0x4c>
 494:	26 c0       	rjmp	.+76     	; 0x4e2 <BUTTON_Tick+0x5a>
 496:	83 b1       	in	r24, 0x03	; 3
 498:	80 95       	com	r24
 49a:	81 ff       	sbrs	r24, 1
 49c:	24 c0       	rjmp	.+72     	; 0x4e6 <BUTTON_Tick+0x5e>
 49e:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <light>
 4a2:	88 23       	and	r24, r24
 4a4:	49 f0       	breq	.+18     	; 0x4b8 <BUTTON_Tick+0x30>
 4a6:	10 92 1f 07 	sts	0x071F, r1	; 0x80071f <light>
 4aa:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <data_to_transmit>
 4ae:	8f 7d       	andi	r24, 0xDF	; 223
 4b0:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <data_to_transmit>
 4b4:	18 b8       	out	0x08, r1	; 8
 4b6:	0a c0       	rjmp	.+20     	; 0x4cc <BUTTON_Tick+0x44>
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	80 93 1f 07 	sts	0x071F, r24	; 0x80071f <light>
 4be:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <data_to_transmit>
 4c2:	80 62       	ori	r24, 0x20	; 32
 4c4:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <data_to_transmit>
 4c8:	8f ef       	ldi	r24, 0xFF	; 255
 4ca:	88 b9       	out	0x08, r24	; 8
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	80 93 81 07 	sts	0x0781, r24	; 0x800781 <button_state>
 4d2:	08 95       	ret
 4d4:	83 b1       	in	r24, 0x03	; 3
 4d6:	80 95       	com	r24
 4d8:	81 fd       	sbrc	r24, 1
 4da:	05 c0       	rjmp	.+10     	; 0x4e6 <BUTTON_Tick+0x5e>
 4dc:	10 92 81 07 	sts	0x0781, r1	; 0x800781 <button_state>
 4e0:	08 95       	ret
 4e2:	10 92 81 07 	sts	0x0781, r1	; 0x800781 <button_state>
 4e6:	08 95       	ret

000004e8 <BUTTONSecTask>:
 4e8:	10 92 81 07 	sts	0x0781, r1	; 0x800781 <button_state>
 4ec:	cd df       	rcall	.-102    	; 0x488 <BUTTON_Tick>
 4ee:	8f e0       	ldi	r24, 0x0F	; 15
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	6c d4       	rcall	.+2264   	; 0xdcc <vTaskDelay>
 4f4:	fb cf       	rjmp	.-10     	; 0x4ec <BUTTONSecTask+0x4>

000004f6 <BUTTONSecPulse>:
 4f6:	af 92       	push	r10
 4f8:	bf 92       	push	r11
 4fa:	cf 92       	push	r12
 4fc:	df 92       	push	r13
 4fe:	ef 92       	push	r14
 500:	ff 92       	push	r15
 502:	0f 93       	push	r16
 504:	a1 2c       	mov	r10, r1
 506:	b1 2c       	mov	r11, r1
 508:	c1 2c       	mov	r12, r1
 50a:	d1 2c       	mov	r13, r1
 50c:	e1 2c       	mov	r14, r1
 50e:	f1 2c       	mov	r15, r1
 510:	08 2f       	mov	r16, r24
 512:	20 e0       	ldi	r18, 0x00	; 0
 514:	30 e0       	ldi	r19, 0x00	; 0
 516:	45 e5       	ldi	r20, 0x55	; 85
 518:	50 e0       	ldi	r21, 0x00	; 0
 51a:	6d e1       	ldi	r22, 0x1D	; 29
 51c:	71 e0       	ldi	r23, 0x01	; 1
 51e:	84 e7       	ldi	r24, 0x74	; 116
 520:	92 e0       	ldi	r25, 0x02	; 2
 522:	f0 d1       	rcall	.+992    	; 0x904 <xTaskGenericCreate>
 524:	0f 91       	pop	r16
 526:	ff 90       	pop	r15
 528:	ef 90       	pop	r14
 52a:	df 90       	pop	r13
 52c:	cf 90       	pop	r12
 52e:	bf 90       	pop	r11
 530:	af 90       	pop	r10
 532:	08 95       	ret

00000534 <TRANSMIT_Tick>:
}

void TRANSMIT_Tick(){
	//transitions
	switch(transmit_state){
 534:	80 91 7e 07 	lds	r24, 0x077E	; 0x80077e <transmit_state>
 538:	88 23       	and	r24, r24
 53a:	19 f0       	breq	.+6      	; 0x542 <TRANSMIT_Tick+0xe>
 53c:	81 30       	cpi	r24, 0x01	; 1
 53e:	49 f0       	breq	.+18     	; 0x552 <TRANSMIT_Tick+0x1e>
 540:	0f c0       	rjmp	.+30     	; 0x560 <TRANSMIT_Tick+0x2c>
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
 542:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
		case wait_to_transmit:
			if(USART_IsSendReady(0)){
 546:	85 ff       	sbrs	r24, 5
 548:	12 c0       	rjmp	.+36     	; 0x56e <TRANSMIT_Tick+0x3a>
				transmit_state = transmit_data;
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	80 93 7e 07 	sts	0x077E, r24	; 0x80077e <transmit_state>
 550:	0a c0       	rjmp	.+20     	; 0x566 <TRANSMIT_Tick+0x32>
//Functionality - checks if USART has successfully transmitted data
//Parameter: usartNum specifies which USART is being checked
//Returns: 1 if true else 0
unsigned char USART_HasTransmitted(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << TXC0)) : (UCSR1A & (1 << TXC1));
 552:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
				transmit_state = wait_to_transmit;
			}
			break;
			
		case transmit_data:
			if(USART_HasTransmitted(0)){
 556:	86 ff       	sbrs	r24, 6
 558:	06 c0       	rjmp	.+12     	; 0x566 <TRANSMIT_Tick+0x32>
				transmit_state = wait_to_transmit;
 55a:	10 92 7e 07 	sts	0x077E, r1	; 0x80077e <transmit_state>
 55e:	08 95       	ret
				transmit_state = transmit_data;
			}
			break;
		
		default:
			transmit_state = wait_to_transmit;
 560:	10 92 7e 07 	sts	0x077E, r1	; 0x80077e <transmit_state>
			break;
 564:	08 95       	ret
	switch(transmit_state){
		case wait_to_transmit:
			break;
		
		case transmit_data:
			USART_Send(data_to_transmit,0);
 566:	60 e0       	ldi	r22, 0x00	; 0
 568:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <data_to_transmit>
 56c:	a9 ce       	rjmp	.-686    	; 0x2c0 <USART_Send>
 56e:	08 95       	ret

00000570 <TRANSMITSecTask>:
//-------------------------------------------------- End Button SM --------------------------------------------------//

//-------------------------------------------------- Start Transmission SM --------------------------------------------------//

void TRANSMIT_Init(){
	transmit_state = wait_to_transmit;
 570:	10 92 7e 07 	sts	0x077E, r1	; 0x80077e <transmit_state>
void TRANSMITSecTask(){
	TRANSMIT_Init();
	for(;;)
	{
		TRANSMIT_Tick();
		vTaskDelay(5);
 574:	df df       	rcall	.-66     	; 0x534 <TRANSMIT_Tick>
 576:	85 e0       	ldi	r24, 0x05	; 5
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	28 d4       	rcall	.+2128   	; 0xdcc <vTaskDelay>
 57c:	fb cf       	rjmp	.-10     	; 0x574 <TRANSMITSecTask+0x4>

0000057e <TRANSMITSecPulse>:
	}
}
	
void TRANSMITSecPulse(unsigned portBASE_TYPE Priority){
 57e:	af 92       	push	r10
 580:	bf 92       	push	r11
 582:	cf 92       	push	r12
 584:	df 92       	push	r13
 586:	ef 92       	push	r14
 588:	ff 92       	push	r15
 58a:	0f 93       	push	r16
	xTaskCreate(TRANSMITSecTask, (signed portCHAR *)"TRANSMITSecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
 58c:	a1 2c       	mov	r10, r1
 58e:	b1 2c       	mov	r11, r1
 590:	c1 2c       	mov	r12, r1
 592:	d1 2c       	mov	r13, r1
 594:	e1 2c       	mov	r14, r1
 596:	f1 2c       	mov	r15, r1
 598:	08 2f       	mov	r16, r24
 59a:	20 e0       	ldi	r18, 0x00	; 0
 59c:	30 e0       	ldi	r19, 0x00	; 0
 59e:	45 e5       	ldi	r20, 0x55	; 85
 5a0:	50 e0       	ldi	r21, 0x00	; 0
 5a2:	6b e2       	ldi	r22, 0x2B	; 43
 5a4:	71 e0       	ldi	r23, 0x01	; 1
 5a6:	88 eb       	ldi	r24, 0xB8	; 184
 5a8:	92 e0       	ldi	r25, 0x02	; 2
 5aa:	ac d1       	rcall	.+856    	; 0x904 <xTaskGenericCreate>
}
 5ac:	0f 91       	pop	r16
 5ae:	ff 90       	pop	r15
 5b0:	ef 90       	pop	r14
 5b2:	df 90       	pop	r13
 5b4:	cf 90       	pop	r12
 5b6:	bf 90       	pop	r11
 5b8:	af 90       	pop	r10
 5ba:	08 95       	ret

000005bc <main>:
//-------------------------------------------------- End Transmission SM --------------------------------------------------//


int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
 5bc:	11 b8       	out	0x01, r1	; 1
 5be:	8f ef       	ldi	r24, 0xFF	; 255
 5c0:	82 b9       	out	0x02, r24	; 2
	DDRB = 0x00; PORTB = 0xFF;
 5c2:	14 b8       	out	0x04, r1	; 4
 5c4:	85 b9       	out	0x05, r24	; 5
	DDRC = 0xFF; PORTC = 0x00;
 5c6:	87 b9       	out	0x07, r24	; 7
	//DDRD = 0xFF; PORTD = 0x00;
	adc_init();
	initUSART(0);
 5c8:	18 b8       	out	0x08, r1	; 8
	//Start Tasks
	JOYSecPulse(1);
 5ca:	3d de       	rcall	.-902    	; 0x246 <adc_init>
	STEERINGSecPulse(1);
	BUTTONSecPulse(1);
 5cc:	80 e0       	ldi	r24, 0x00	; 0
 5ce:	56 de       	rcall	.-852    	; 0x27c <initUSART>
	TRANSMITSecPulse(1);
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	eb de       	rcall	.-554    	; 0x3aa <JOYSecPulse>
 5d4:	81 e0       	ldi	r24, 0x01	; 1
	//RunSchedular
	vTaskStartScheduler();
 5d6:	39 df       	rcall	.-398    	; 0x44a <STEERINGSecPulse>
 5d8:	81 e0       	ldi	r24, 0x01	; 1
	
	return 0;
 5da:	8d df       	rcall	.-230    	; 0x4f6 <BUTTONSecPulse>
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	cf df       	rcall	.-98     	; 0x57e <TRANSMITSecPulse>
 5e0:	84 d2       	rcall	.+1288   	; 0xaea <vTaskStartScheduler>
 5e2:	80 e0       	ldi	r24, 0x00	; 0
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	08 95       	ret

000005e8 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 5e8:	31 e1       	ldi	r19, 0x11	; 17
 5ea:	fc 01       	movw	r30, r24
 5ec:	30 83       	st	Z, r19
 5ee:	31 97       	sbiw	r30, 0x01	; 1
 5f0:	22 e2       	ldi	r18, 0x22	; 34
 5f2:	20 83       	st	Z, r18
 5f4:	31 97       	sbiw	r30, 0x01	; 1
 5f6:	a3 e3       	ldi	r26, 0x33	; 51
 5f8:	a0 83       	st	Z, r26
 5fa:	31 97       	sbiw	r30, 0x01	; 1
 5fc:	60 83       	st	Z, r22
 5fe:	31 97       	sbiw	r30, 0x01	; 1
 600:	70 83       	st	Z, r23
 602:	31 97       	sbiw	r30, 0x01	; 1
 604:	10 82       	st	Z, r1
 606:	31 97       	sbiw	r30, 0x01	; 1
 608:	60 e8       	ldi	r22, 0x80	; 128
 60a:	60 83       	st	Z, r22
 60c:	31 97       	sbiw	r30, 0x01	; 1
 60e:	10 82       	st	Z, r1
 610:	31 97       	sbiw	r30, 0x01	; 1
 612:	62 e0       	ldi	r22, 0x02	; 2
 614:	60 83       	st	Z, r22
 616:	31 97       	sbiw	r30, 0x01	; 1
 618:	63 e0       	ldi	r22, 0x03	; 3
 61a:	60 83       	st	Z, r22
 61c:	31 97       	sbiw	r30, 0x01	; 1
 61e:	64 e0       	ldi	r22, 0x04	; 4
 620:	60 83       	st	Z, r22
 622:	31 97       	sbiw	r30, 0x01	; 1
 624:	65 e0       	ldi	r22, 0x05	; 5
 626:	60 83       	st	Z, r22
 628:	31 97       	sbiw	r30, 0x01	; 1
 62a:	66 e0       	ldi	r22, 0x06	; 6
 62c:	60 83       	st	Z, r22
 62e:	31 97       	sbiw	r30, 0x01	; 1
 630:	67 e0       	ldi	r22, 0x07	; 7
 632:	60 83       	st	Z, r22
 634:	31 97       	sbiw	r30, 0x01	; 1
 636:	68 e0       	ldi	r22, 0x08	; 8
 638:	60 83       	st	Z, r22
 63a:	31 97       	sbiw	r30, 0x01	; 1
 63c:	69 e0       	ldi	r22, 0x09	; 9
 63e:	60 83       	st	Z, r22
 640:	31 97       	sbiw	r30, 0x01	; 1
 642:	60 e1       	ldi	r22, 0x10	; 16
 644:	60 83       	st	Z, r22
 646:	31 97       	sbiw	r30, 0x01	; 1
 648:	30 83       	st	Z, r19
 64a:	31 97       	sbiw	r30, 0x01	; 1
 64c:	32 e1       	ldi	r19, 0x12	; 18
 64e:	30 83       	st	Z, r19
 650:	31 97       	sbiw	r30, 0x01	; 1
 652:	33 e1       	ldi	r19, 0x13	; 19
 654:	30 83       	st	Z, r19
 656:	31 97       	sbiw	r30, 0x01	; 1
 658:	34 e1       	ldi	r19, 0x14	; 20
 65a:	30 83       	st	Z, r19
 65c:	31 97       	sbiw	r30, 0x01	; 1
 65e:	35 e1       	ldi	r19, 0x15	; 21
 660:	30 83       	st	Z, r19
 662:	31 97       	sbiw	r30, 0x01	; 1
 664:	36 e1       	ldi	r19, 0x16	; 22
 666:	30 83       	st	Z, r19
 668:	31 97       	sbiw	r30, 0x01	; 1
 66a:	37 e1       	ldi	r19, 0x17	; 23
 66c:	30 83       	st	Z, r19
 66e:	31 97       	sbiw	r30, 0x01	; 1
 670:	38 e1       	ldi	r19, 0x18	; 24
 672:	30 83       	st	Z, r19
 674:	31 97       	sbiw	r30, 0x01	; 1
 676:	39 e1       	ldi	r19, 0x19	; 25
 678:	30 83       	st	Z, r19
 67a:	31 97       	sbiw	r30, 0x01	; 1
 67c:	30 e2       	ldi	r19, 0x20	; 32
 67e:	30 83       	st	Z, r19
 680:	31 97       	sbiw	r30, 0x01	; 1
 682:	31 e2       	ldi	r19, 0x21	; 33
 684:	30 83       	st	Z, r19
 686:	31 97       	sbiw	r30, 0x01	; 1
 688:	20 83       	st	Z, r18
 68a:	31 97       	sbiw	r30, 0x01	; 1
 68c:	23 e2       	ldi	r18, 0x23	; 35
 68e:	20 83       	st	Z, r18
 690:	31 97       	sbiw	r30, 0x01	; 1
 692:	40 83       	st	Z, r20
 694:	31 97       	sbiw	r30, 0x01	; 1
 696:	50 83       	st	Z, r21
 698:	31 97       	sbiw	r30, 0x01	; 1
 69a:	26 e2       	ldi	r18, 0x26	; 38
 69c:	20 83       	st	Z, r18
 69e:	31 97       	sbiw	r30, 0x01	; 1
 6a0:	27 e2       	ldi	r18, 0x27	; 39
 6a2:	20 83       	st	Z, r18
 6a4:	31 97       	sbiw	r30, 0x01	; 1
 6a6:	28 e2       	ldi	r18, 0x28	; 40
 6a8:	20 83       	st	Z, r18
 6aa:	31 97       	sbiw	r30, 0x01	; 1
 6ac:	29 e2       	ldi	r18, 0x29	; 41
 6ae:	20 83       	st	Z, r18
 6b0:	31 97       	sbiw	r30, 0x01	; 1
 6b2:	20 e3       	ldi	r18, 0x30	; 48
 6b4:	20 83       	st	Z, r18
 6b6:	31 97       	sbiw	r30, 0x01	; 1
 6b8:	21 e3       	ldi	r18, 0x31	; 49
 6ba:	20 83       	st	Z, r18
 6bc:	86 97       	sbiw	r24, 0x26	; 38
 6be:	08 95       	ret

000006c0 <xPortStartScheduler>:
 6c0:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 6c4:	8c e7       	ldi	r24, 0x7C	; 124
 6c6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 6ca:	8b e0       	ldi	r24, 0x0B	; 11
 6cc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 6d0:	ef e6       	ldi	r30, 0x6F	; 111
 6d2:	f0 e0       	ldi	r31, 0x00	; 0
 6d4:	80 81       	ld	r24, Z
 6d6:	82 60       	ori	r24, 0x02	; 2
 6d8:	80 83       	st	Z, r24
 6da:	a0 91 7c 07 	lds	r26, 0x077C	; 0x80077c <pxCurrentTCB>
 6de:	b0 91 7d 07 	lds	r27, 0x077D	; 0x80077d <pxCurrentTCB+0x1>
 6e2:	cd 91       	ld	r28, X+
 6e4:	cd bf       	out	0x3d, r28	; 61
 6e6:	dd 91       	ld	r29, X+
 6e8:	de bf       	out	0x3e, r29	; 62
 6ea:	ff 91       	pop	r31
 6ec:	ef 91       	pop	r30
 6ee:	df 91       	pop	r29
 6f0:	cf 91       	pop	r28
 6f2:	bf 91       	pop	r27
 6f4:	af 91       	pop	r26
 6f6:	9f 91       	pop	r25
 6f8:	8f 91       	pop	r24
 6fa:	7f 91       	pop	r23
 6fc:	6f 91       	pop	r22
 6fe:	5f 91       	pop	r21
 700:	4f 91       	pop	r20
 702:	3f 91       	pop	r19
 704:	2f 91       	pop	r18
 706:	1f 91       	pop	r17
 708:	0f 91       	pop	r16
 70a:	ff 90       	pop	r15
 70c:	ef 90       	pop	r14
 70e:	df 90       	pop	r13
 710:	cf 90       	pop	r12
 712:	bf 90       	pop	r11
 714:	af 90       	pop	r10
 716:	9f 90       	pop	r9
 718:	8f 90       	pop	r8
 71a:	7f 90       	pop	r7
 71c:	6f 90       	pop	r6
 71e:	5f 90       	pop	r5
 720:	4f 90       	pop	r4
 722:	3f 90       	pop	r3
 724:	2f 90       	pop	r2
 726:	1f 90       	pop	r1
 728:	0f 90       	pop	r0
 72a:	0f be       	out	0x3f, r0	; 63
 72c:	0f 90       	pop	r0
 72e:	08 95       	ret
 730:	81 e0       	ldi	r24, 0x01	; 1
 732:	08 95       	ret

00000734 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 734:	0f 92       	push	r0
 736:	0f b6       	in	r0, 0x3f	; 63
 738:	f8 94       	cli
 73a:	0f 92       	push	r0
 73c:	1f 92       	push	r1
 73e:	11 24       	eor	r1, r1
 740:	2f 92       	push	r2
 742:	3f 92       	push	r3
 744:	4f 92       	push	r4
 746:	5f 92       	push	r5
 748:	6f 92       	push	r6
 74a:	7f 92       	push	r7
 74c:	8f 92       	push	r8
 74e:	9f 92       	push	r9
 750:	af 92       	push	r10
 752:	bf 92       	push	r11
 754:	cf 92       	push	r12
 756:	df 92       	push	r13
 758:	ef 92       	push	r14
 75a:	ff 92       	push	r15
 75c:	0f 93       	push	r16
 75e:	1f 93       	push	r17
 760:	2f 93       	push	r18
 762:	3f 93       	push	r19
 764:	4f 93       	push	r20
 766:	5f 93       	push	r21
 768:	6f 93       	push	r22
 76a:	7f 93       	push	r23
 76c:	8f 93       	push	r24
 76e:	9f 93       	push	r25
 770:	af 93       	push	r26
 772:	bf 93       	push	r27
 774:	cf 93       	push	r28
 776:	df 93       	push	r29
 778:	ef 93       	push	r30
 77a:	ff 93       	push	r31
 77c:	a0 91 7c 07 	lds	r26, 0x077C	; 0x80077c <pxCurrentTCB>
 780:	b0 91 7d 07 	lds	r27, 0x077D	; 0x80077d <pxCurrentTCB+0x1>
 784:	0d b6       	in	r0, 0x3d	; 61
 786:	0d 92       	st	X+, r0
 788:	0e b6       	in	r0, 0x3e	; 62
	vTaskSwitchContext();
 78a:	0d 92       	st	X+, r0
	portRESTORE_CONTEXT();
 78c:	70 d3       	rcall	.+1760   	; 0xe6e <vTaskSwitchContext>
 78e:	a0 91 7c 07 	lds	r26, 0x077C	; 0x80077c <pxCurrentTCB>
 792:	b0 91 7d 07 	lds	r27, 0x077D	; 0x80077d <pxCurrentTCB+0x1>
 796:	cd 91       	ld	r28, X+
 798:	cd bf       	out	0x3d, r28	; 61
 79a:	dd 91       	ld	r29, X+
 79c:	de bf       	out	0x3e, r29	; 62
 79e:	ff 91       	pop	r31
 7a0:	ef 91       	pop	r30
 7a2:	df 91       	pop	r29
 7a4:	cf 91       	pop	r28
 7a6:	bf 91       	pop	r27
 7a8:	af 91       	pop	r26
 7aa:	9f 91       	pop	r25
 7ac:	8f 91       	pop	r24
 7ae:	7f 91       	pop	r23
 7b0:	6f 91       	pop	r22
 7b2:	5f 91       	pop	r21
 7b4:	4f 91       	pop	r20
 7b6:	3f 91       	pop	r19
 7b8:	2f 91       	pop	r18
 7ba:	1f 91       	pop	r17
 7bc:	0f 91       	pop	r16
 7be:	ff 90       	pop	r15
 7c0:	ef 90       	pop	r14
 7c2:	df 90       	pop	r13
 7c4:	cf 90       	pop	r12
 7c6:	bf 90       	pop	r11
 7c8:	af 90       	pop	r10
 7ca:	9f 90       	pop	r9
 7cc:	8f 90       	pop	r8
 7ce:	7f 90       	pop	r7
 7d0:	6f 90       	pop	r6
 7d2:	5f 90       	pop	r5
 7d4:	4f 90       	pop	r4
 7d6:	3f 90       	pop	r3
 7d8:	2f 90       	pop	r2
 7da:	1f 90       	pop	r1
 7dc:	0f 90       	pop	r0
 7de:	0f be       	out	0x3f, r0	; 63

	asm volatile ( "ret" );
 7e0:	0f 90       	pop	r0
 7e2:	08 95       	ret

000007e4 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 7e4:	0f 92       	push	r0
 7e6:	0f b6       	in	r0, 0x3f	; 63
 7e8:	f8 94       	cli
 7ea:	0f 92       	push	r0
 7ec:	1f 92       	push	r1
 7ee:	11 24       	eor	r1, r1
 7f0:	2f 92       	push	r2
 7f2:	3f 92       	push	r3
 7f4:	4f 92       	push	r4
 7f6:	5f 92       	push	r5
 7f8:	6f 92       	push	r6
 7fa:	7f 92       	push	r7
 7fc:	8f 92       	push	r8
 7fe:	9f 92       	push	r9
 800:	af 92       	push	r10
 802:	bf 92       	push	r11
 804:	cf 92       	push	r12
 806:	df 92       	push	r13
 808:	ef 92       	push	r14
 80a:	ff 92       	push	r15
 80c:	0f 93       	push	r16
 80e:	1f 93       	push	r17
 810:	2f 93       	push	r18
 812:	3f 93       	push	r19
 814:	4f 93       	push	r20
 816:	5f 93       	push	r21
 818:	6f 93       	push	r22
 81a:	7f 93       	push	r23
 81c:	8f 93       	push	r24
 81e:	9f 93       	push	r25
 820:	af 93       	push	r26
 822:	bf 93       	push	r27
 824:	cf 93       	push	r28
 826:	df 93       	push	r29
 828:	ef 93       	push	r30
 82a:	ff 93       	push	r31
 82c:	a0 91 7c 07 	lds	r26, 0x077C	; 0x80077c <pxCurrentTCB>
 830:	b0 91 7d 07 	lds	r27, 0x077D	; 0x80077d <pxCurrentTCB+0x1>
 834:	0d b6       	in	r0, 0x3d	; 61
 836:	0d 92       	st	X+, r0
 838:	0e b6       	in	r0, 0x3e	; 62
	vTaskIncrementTick();
	vTaskSwitchContext();
 83a:	0d 92       	st	X+, r0
 83c:	85 d1       	rcall	.+778    	; 0xb48 <vTaskIncrementTick>
	portRESTORE_CONTEXT();
 83e:	17 d3       	rcall	.+1582   	; 0xe6e <vTaskSwitchContext>
 840:	a0 91 7c 07 	lds	r26, 0x077C	; 0x80077c <pxCurrentTCB>
 844:	b0 91 7d 07 	lds	r27, 0x077D	; 0x80077d <pxCurrentTCB+0x1>
 848:	cd 91       	ld	r28, X+
 84a:	cd bf       	out	0x3d, r28	; 61
 84c:	dd 91       	ld	r29, X+
 84e:	de bf       	out	0x3e, r29	; 62
 850:	ff 91       	pop	r31
 852:	ef 91       	pop	r30
 854:	df 91       	pop	r29
 856:	cf 91       	pop	r28
 858:	bf 91       	pop	r27
 85a:	af 91       	pop	r26
 85c:	9f 91       	pop	r25
 85e:	8f 91       	pop	r24
 860:	7f 91       	pop	r23
 862:	6f 91       	pop	r22
 864:	5f 91       	pop	r21
 866:	4f 91       	pop	r20
 868:	3f 91       	pop	r19
 86a:	2f 91       	pop	r18
 86c:	1f 91       	pop	r17
 86e:	0f 91       	pop	r16
 870:	ff 90       	pop	r15
 872:	ef 90       	pop	r14
 874:	df 90       	pop	r13
 876:	cf 90       	pop	r12
 878:	bf 90       	pop	r11
 87a:	af 90       	pop	r10
 87c:	9f 90       	pop	r9
 87e:	8f 90       	pop	r8
 880:	7f 90       	pop	r7
 882:	6f 90       	pop	r6
 884:	5f 90       	pop	r5
 886:	4f 90       	pop	r4
 888:	3f 90       	pop	r3
 88a:	2f 90       	pop	r2
 88c:	1f 90       	pop	r1
 88e:	0f 90       	pop	r0
 890:	0f be       	out	0x3f, r0	; 63

	asm volatile ( "ret" );
 892:	0f 90       	pop	r0
 894:	08 95       	ret

00000896 <__vector_13>:
}
 896:	a6 df       	rcall	.-180    	; 0x7e4 <vPortYieldFromTick>
 898:	18 95       	reti

0000089a <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
 89a:	cf 93       	push	r28
 89c:	df 93       	push	r29
 89e:	ec 01       	movw	r28, r24
 8a0:	e0 91 7c 07 	lds	r30, 0x077C	; 0x80077c <pxCurrentTCB>
 8a4:	f0 91 7d 07 	lds	r31, 0x077D	; 0x80077d <pxCurrentTCB+0x1>
 8a8:	93 83       	std	Z+3, r25	; 0x03
 8aa:	82 83       	std	Z+2, r24	; 0x02
 8ac:	80 91 2c 07 	lds	r24, 0x072C	; 0x80072c <xTickCount>
 8b0:	90 91 2d 07 	lds	r25, 0x072D	; 0x80072d <xTickCount+0x1>
 8b4:	c8 17       	cp	r28, r24
 8b6:	d9 07       	cpc	r29, r25
 8b8:	60 f4       	brcc	.+24     	; 0x8d2 <prvAddCurrentTaskToDelayedList+0x38>
 8ba:	60 91 7c 07 	lds	r22, 0x077C	; 0x80077c <pxCurrentTCB>
 8be:	70 91 7d 07 	lds	r23, 0x077D	; 0x80077d <pxCurrentTCB+0x1>
 8c2:	80 91 42 07 	lds	r24, 0x0742	; 0x800742 <pxOverflowDelayedTaskList>
 8c6:	90 91 43 07 	lds	r25, 0x0743	; 0x800743 <pxOverflowDelayedTaskList+0x1>
 8ca:	6e 5f       	subi	r22, 0xFE	; 254
 8cc:	7f 4f       	sbci	r23, 0xFF	; 255
 8ce:	5a dc       	rcall	.-1868   	; 0x184 <vListInsert>
 8d0:	16 c0       	rjmp	.+44     	; 0x8fe <prvAddCurrentTaskToDelayedList+0x64>
 8d2:	60 91 7c 07 	lds	r22, 0x077C	; 0x80077c <pxCurrentTCB>
 8d6:	70 91 7d 07 	lds	r23, 0x077D	; 0x80077d <pxCurrentTCB+0x1>
 8da:	80 91 44 07 	lds	r24, 0x0744	; 0x800744 <pxDelayedTaskList>
 8de:	90 91 45 07 	lds	r25, 0x0745	; 0x800745 <pxDelayedTaskList+0x1>
 8e2:	6e 5f       	subi	r22, 0xFE	; 254
 8e4:	7f 4f       	sbci	r23, 0xFF	; 255
 8e6:	4e dc       	rcall	.-1892   	; 0x184 <vListInsert>
 8e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 8ec:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 8f0:	c8 17       	cp	r28, r24
 8f2:	d9 07       	cpc	r29, r25
 8f4:	20 f4       	brcc	.+8      	; 0x8fe <prvAddCurrentTaskToDelayedList+0x64>
 8f6:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <__data_start+0x1>
 8fa:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
 8fe:	df 91       	pop	r29
 900:	cf 91       	pop	r28
 902:	08 95       	ret

00000904 <xTaskGenericCreate>:
 904:	4f 92       	push	r4
 906:	5f 92       	push	r5
 908:	6f 92       	push	r6
 90a:	7f 92       	push	r7
 90c:	8f 92       	push	r8
 90e:	9f 92       	push	r9
 910:	af 92       	push	r10
 912:	bf 92       	push	r11
 914:	cf 92       	push	r12
 916:	df 92       	push	r13
 918:	ef 92       	push	r14
 91a:	ff 92       	push	r15
 91c:	0f 93       	push	r16
 91e:	1f 93       	push	r17
 920:	cf 93       	push	r28
 922:	df 93       	push	r29
 924:	5c 01       	movw	r10, r24
 926:	4b 01       	movw	r8, r22
 928:	3a 01       	movw	r6, r20
 92a:	29 01       	movw	r4, r18
 92c:	81 e2       	ldi	r24, 0x21	; 33
 92e:	90 e0       	ldi	r25, 0x00	; 0
 930:	cb db       	rcall	.-2154   	; 0xc8 <pvPortMalloc>
 932:	ec 01       	movw	r28, r24
 934:	89 2b       	or	r24, r25
 936:	09 f4       	brne	.+2      	; 0x93a <xTaskGenericCreate+0x36>
 938:	c6 c0       	rjmp	.+396    	; 0xac6 <xTaskGenericCreate+0x1c2>
 93a:	c1 14       	cp	r12, r1
 93c:	d1 04       	cpc	r13, r1
 93e:	09 f0       	breq	.+2      	; 0x942 <xTaskGenericCreate+0x3e>
 940:	be c0       	rjmp	.+380    	; 0xabe <xTaskGenericCreate+0x1ba>
 942:	c3 01       	movw	r24, r6
 944:	c1 db       	rcall	.-2174   	; 0xc8 <pvPortMalloc>
 946:	98 8f       	std	Y+24, r25	; 0x18
 948:	8f 8b       	std	Y+23, r24	; 0x17
 94a:	00 97       	sbiw	r24, 0x00	; 0
 94c:	19 f4       	brne	.+6      	; 0x954 <xTaskGenericCreate+0x50>
 94e:	ce 01       	movw	r24, r28
 950:	df db       	rcall	.-2114   	; 0x110 <vPortFree>
 952:	b9 c0       	rjmp	.+370    	; 0xac6 <xTaskGenericCreate+0x1c2>
 954:	a3 01       	movw	r20, r6
 956:	65 ea       	ldi	r22, 0xA5	; 165
 958:	70 e0       	ldi	r23, 0x00	; 0
 95a:	f5 d2       	rcall	.+1514   	; 0xf46 <memset>
 95c:	93 01       	movw	r18, r6
 95e:	21 50       	subi	r18, 0x01	; 1
 960:	31 09       	sbc	r19, r1
 962:	8f 89       	ldd	r24, Y+23	; 0x17
 964:	98 8d       	ldd	r25, Y+24	; 0x18
 966:	3c 01       	movw	r6, r24
 968:	62 0e       	add	r6, r18
 96a:	73 1e       	adc	r7, r19
 96c:	48 e0       	ldi	r20, 0x08	; 8
 96e:	50 e0       	ldi	r21, 0x00	; 0
 970:	b4 01       	movw	r22, r8
 972:	ce 01       	movw	r24, r28
 974:	49 96       	adiw	r24, 0x19	; 25
 976:	ee d2       	rcall	.+1500   	; 0xf54 <strncpy>
 978:	18 a2       	std	Y+32, r1	; 0x20
 97a:	10 2f       	mov	r17, r16
 97c:	04 30       	cpi	r16, 0x04	; 4
 97e:	08 f0       	brcs	.+2      	; 0x982 <xTaskGenericCreate+0x7e>
 980:	13 e0       	ldi	r17, 0x03	; 3
 982:	1e 8b       	std	Y+22, r17	; 0x16
 984:	6e 01       	movw	r12, r28
 986:	82 e0       	ldi	r24, 0x02	; 2
 988:	c8 0e       	add	r12, r24
 98a:	d1 1c       	adc	r13, r1
 98c:	c6 01       	movw	r24, r12
 98e:	cf db       	rcall	.-2146   	; 0x12e <vListInitialiseItem>
 990:	ce 01       	movw	r24, r28
 992:	0c 96       	adiw	r24, 0x0c	; 12
 994:	cc db       	rcall	.-2152   	; 0x12e <vListInitialiseItem>
 996:	d9 87       	std	Y+9, r29	; 0x09
 998:	c8 87       	std	Y+8, r28	; 0x08
 99a:	84 e0       	ldi	r24, 0x04	; 4
 99c:	90 e0       	ldi	r25, 0x00	; 0
 99e:	81 1b       	sub	r24, r17
 9a0:	91 09       	sbc	r25, r1
 9a2:	9d 87       	std	Y+13, r25	; 0x0d
 9a4:	8c 87       	std	Y+12, r24	; 0x0c
 9a6:	db 8b       	std	Y+19, r29	; 0x13
 9a8:	ca 8b       	std	Y+18, r28	; 0x12
 9aa:	a2 01       	movw	r20, r4
 9ac:	b5 01       	movw	r22, r10
 9ae:	c3 01       	movw	r24, r6
 9b0:	1b de       	rcall	.-970    	; 0x5e8 <pxPortInitialiseStack>
 9b2:	99 83       	std	Y+1, r25	; 0x01
 9b4:	88 83       	st	Y, r24
 9b6:	e1 14       	cp	r14, r1
 9b8:	f1 04       	cpc	r15, r1
 9ba:	19 f0       	breq	.+6      	; 0x9c2 <xTaskGenericCreate+0xbe>
 9bc:	f7 01       	movw	r30, r14
 9be:	d1 83       	std	Z+1, r29	; 0x01
 9c0:	c0 83       	st	Z, r28
 9c2:	0f b6       	in	r0, 0x3f	; 63
 9c4:	f8 94       	cli
 9c6:	0f 92       	push	r0
 9c8:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <uxCurrentNumberOfTasks>
 9cc:	8f 5f       	subi	r24, 0xFF	; 255
 9ce:	80 93 2e 07 	sts	0x072E, r24	; 0x80072e <uxCurrentNumberOfTasks>
 9d2:	80 91 7c 07 	lds	r24, 0x077C	; 0x80077c <pxCurrentTCB>
 9d6:	90 91 7d 07 	lds	r25, 0x077D	; 0x80077d <pxCurrentTCB+0x1>
 9da:	89 2b       	or	r24, r25
 9dc:	69 f5       	brne	.+90     	; 0xa38 <xTaskGenericCreate+0x134>
 9de:	d0 93 7d 07 	sts	0x077D, r29	; 0x80077d <pxCurrentTCB+0x1>
 9e2:	c0 93 7c 07 	sts	0x077C, r28	; 0x80077c <pxCurrentTCB>
 9e6:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <uxCurrentNumberOfTasks>
 9ea:	81 30       	cpi	r24, 0x01	; 1
 9ec:	a1 f5       	brne	.+104    	; 0xa56 <xTaskGenericCreate+0x152>
 9ee:	88 e5       	ldi	r24, 0x58	; 88
 9f0:	97 e0       	ldi	r25, 0x07	; 7
 9f2:	8f db       	rcall	.-2274   	; 0x112 <vListInitialise>
 9f4:	81 e6       	ldi	r24, 0x61	; 97
 9f6:	97 e0       	ldi	r25, 0x07	; 7
 9f8:	8c db       	rcall	.-2280   	; 0x112 <vListInitialise>
 9fa:	8a e6       	ldi	r24, 0x6A	; 106
 9fc:	97 e0       	ldi	r25, 0x07	; 7
 9fe:	89 db       	rcall	.-2286   	; 0x112 <vListInitialise>
 a00:	83 e7       	ldi	r24, 0x73	; 115
 a02:	97 e0       	ldi	r25, 0x07	; 7
 a04:	86 db       	rcall	.-2292   	; 0x112 <vListInitialise>
 a06:	8f e4       	ldi	r24, 0x4F	; 79
 a08:	97 e0       	ldi	r25, 0x07	; 7
 a0a:	83 db       	rcall	.-2298   	; 0x112 <vListInitialise>
 a0c:	86 e4       	ldi	r24, 0x46	; 70
 a0e:	97 e0       	ldi	r25, 0x07	; 7
 a10:	80 db       	rcall	.-2304   	; 0x112 <vListInitialise>
 a12:	89 e3       	ldi	r24, 0x39	; 57
 a14:	97 e0       	ldi	r25, 0x07	; 7
 a16:	7d db       	rcall	.-2310   	; 0x112 <vListInitialise>
 a18:	80 e3       	ldi	r24, 0x30	; 48
 a1a:	97 e0       	ldi	r25, 0x07	; 7
 a1c:	7a db       	rcall	.-2316   	; 0x112 <vListInitialise>
 a1e:	8f e4       	ldi	r24, 0x4F	; 79
 a20:	97 e0       	ldi	r25, 0x07	; 7
 a22:	90 93 45 07 	sts	0x0745, r25	; 0x800745 <pxDelayedTaskList+0x1>
 a26:	80 93 44 07 	sts	0x0744, r24	; 0x800744 <pxDelayedTaskList>
 a2a:	86 e4       	ldi	r24, 0x46	; 70
 a2c:	97 e0       	ldi	r25, 0x07	; 7
 a2e:	90 93 43 07 	sts	0x0743, r25	; 0x800743 <pxOverflowDelayedTaskList+0x1>
 a32:	80 93 42 07 	sts	0x0742, r24	; 0x800742 <pxOverflowDelayedTaskList>
 a36:	0f c0       	rjmp	.+30     	; 0xa56 <xTaskGenericCreate+0x152>
 a38:	80 91 29 07 	lds	r24, 0x0729	; 0x800729 <xSchedulerRunning>
 a3c:	81 11       	cpse	r24, r1
 a3e:	0b c0       	rjmp	.+22     	; 0xa56 <xTaskGenericCreate+0x152>
 a40:	e0 91 7c 07 	lds	r30, 0x077C	; 0x80077c <pxCurrentTCB>
 a44:	f0 91 7d 07 	lds	r31, 0x077D	; 0x80077d <pxCurrentTCB+0x1>
 a48:	86 89       	ldd	r24, Z+22	; 0x16
 a4a:	08 17       	cp	r16, r24
 a4c:	20 f0       	brcs	.+8      	; 0xa56 <xTaskGenericCreate+0x152>
 a4e:	d0 93 7d 07 	sts	0x077D, r29	; 0x80077d <pxCurrentTCB+0x1>
 a52:	c0 93 7c 07 	sts	0x077C, r28	; 0x80077c <pxCurrentTCB>
 a56:	8e 89       	ldd	r24, Y+22	; 0x16
 a58:	90 91 2b 07 	lds	r25, 0x072B	; 0x80072b <uxTopUsedPriority>
 a5c:	98 17       	cp	r25, r24
 a5e:	10 f4       	brcc	.+4      	; 0xa64 <xTaskGenericCreate+0x160>
 a60:	80 93 2b 07 	sts	0x072B, r24	; 0x80072b <uxTopUsedPriority>
 a64:	90 91 24 07 	lds	r25, 0x0724	; 0x800724 <uxTaskNumber>
 a68:	9f 5f       	subi	r25, 0xFF	; 255
 a6a:	90 93 24 07 	sts	0x0724, r25	; 0x800724 <uxTaskNumber>
 a6e:	90 91 2a 07 	lds	r25, 0x072A	; 0x80072a <uxTopReadyPriority>
 a72:	98 17       	cp	r25, r24
 a74:	10 f4       	brcc	.+4      	; 0xa7a <xTaskGenericCreate+0x176>
 a76:	80 93 2a 07 	sts	0x072A, r24	; 0x80072a <uxTopReadyPriority>
 a7a:	90 e0       	ldi	r25, 0x00	; 0
 a7c:	9c 01       	movw	r18, r24
 a7e:	22 0f       	add	r18, r18
 a80:	33 1f       	adc	r19, r19
 a82:	22 0f       	add	r18, r18
 a84:	33 1f       	adc	r19, r19
 a86:	22 0f       	add	r18, r18
 a88:	33 1f       	adc	r19, r19
 a8a:	82 0f       	add	r24, r18
 a8c:	93 1f       	adc	r25, r19
 a8e:	b6 01       	movw	r22, r12
 a90:	88 5a       	subi	r24, 0xA8	; 168
 a92:	98 4f       	sbci	r25, 0xF8	; 248
 a94:	50 db       	rcall	.-2400   	; 0x136 <vListInsertEnd>
 a96:	0f 90       	pop	r0
 a98:	0f be       	out	0x3f, r0	; 63
 a9a:	80 91 29 07 	lds	r24, 0x0729	; 0x800729 <xSchedulerRunning>
 a9e:	88 23       	and	r24, r24
 aa0:	51 f0       	breq	.+20     	; 0xab6 <xTaskGenericCreate+0x1b2>
 aa2:	e0 91 7c 07 	lds	r30, 0x077C	; 0x80077c <pxCurrentTCB>
 aa6:	f0 91 7d 07 	lds	r31, 0x077D	; 0x80077d <pxCurrentTCB+0x1>
 aaa:	86 89       	ldd	r24, Z+22	; 0x16
 aac:	80 17       	cp	r24, r16
 aae:	28 f4       	brcc	.+10     	; 0xaba <xTaskGenericCreate+0x1b6>
 ab0:	41 de       	rcall	.-894    	; 0x734 <vPortYield>
 ab2:	81 e0       	ldi	r24, 0x01	; 1
 ab4:	09 c0       	rjmp	.+18     	; 0xac8 <xTaskGenericCreate+0x1c4>
 ab6:	81 e0       	ldi	r24, 0x01	; 1
 ab8:	07 c0       	rjmp	.+14     	; 0xac8 <xTaskGenericCreate+0x1c4>
 aba:	81 e0       	ldi	r24, 0x01	; 1
 abc:	05 c0       	rjmp	.+10     	; 0xac8 <xTaskGenericCreate+0x1c4>
 abe:	d8 8e       	std	Y+24, r13	; 0x18
 ac0:	cf 8a       	std	Y+23, r12	; 0x17
 ac2:	c6 01       	movw	r24, r12
 ac4:	47 cf       	rjmp	.-370    	; 0x954 <xTaskGenericCreate+0x50>
 ac6:	8f ef       	ldi	r24, 0xFF	; 255
 ac8:	df 91       	pop	r29
 aca:	cf 91       	pop	r28
 acc:	1f 91       	pop	r17
 ace:	0f 91       	pop	r16
 ad0:	ff 90       	pop	r15
 ad2:	ef 90       	pop	r14
 ad4:	df 90       	pop	r13
 ad6:	cf 90       	pop	r12
 ad8:	bf 90       	pop	r11
 ada:	af 90       	pop	r10
 adc:	9f 90       	pop	r9
 ade:	8f 90       	pop	r8
 ae0:	7f 90       	pop	r7
 ae2:	6f 90       	pop	r6
 ae4:	5f 90       	pop	r5
 ae6:	4f 90       	pop	r4
 ae8:	08 95       	ret

00000aea <vTaskStartScheduler>:
 aea:	af 92       	push	r10
 aec:	bf 92       	push	r11
 aee:	cf 92       	push	r12
 af0:	df 92       	push	r13
 af2:	ef 92       	push	r14
 af4:	ff 92       	push	r15
 af6:	0f 93       	push	r16
 af8:	a1 2c       	mov	r10, r1
 afa:	b1 2c       	mov	r11, r1
 afc:	c1 2c       	mov	r12, r1
 afe:	d1 2c       	mov	r13, r1
 b00:	e1 2c       	mov	r14, r1
 b02:	f1 2c       	mov	r15, r1
 b04:	00 e0       	ldi	r16, 0x00	; 0
 b06:	20 e0       	ldi	r18, 0x00	; 0
 b08:	30 e0       	ldi	r19, 0x00	; 0
 b0a:	45 e5       	ldi	r20, 0x55	; 85
 b0c:	50 e0       	ldi	r21, 0x00	; 0
 b0e:	6b e3       	ldi	r22, 0x3B	; 59
 b10:	71 e0       	ldi	r23, 0x01	; 1
 b12:	81 e0       	ldi	r24, 0x01	; 1
 b14:	97 e0       	ldi	r25, 0x07	; 7
 b16:	f6 de       	rcall	.-532    	; 0x904 <xTaskGenericCreate>
 b18:	81 30       	cpi	r24, 0x01	; 1
 b1a:	41 f4       	brne	.+16     	; 0xb2c <vTaskStartScheduler+0x42>
 b1c:	f8 94       	cli
 b1e:	80 93 29 07 	sts	0x0729, r24	; 0x800729 <xSchedulerRunning>
 b22:	10 92 2d 07 	sts	0x072D, r1	; 0x80072d <xTickCount+0x1>
 b26:	10 92 2c 07 	sts	0x072C, r1	; 0x80072c <xTickCount>
 b2a:	ca dd       	rcall	.-1132   	; 0x6c0 <xPortStartScheduler>
 b2c:	0f 91       	pop	r16
 b2e:	ff 90       	pop	r15
 b30:	ef 90       	pop	r14
 b32:	df 90       	pop	r13
 b34:	cf 90       	pop	r12
 b36:	bf 90       	pop	r11
 b38:	af 90       	pop	r10
 b3a:	08 95       	ret

00000b3c <vTaskSuspendAll>:
 b3c:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <uxSchedulerSuspended>
 b40:	8f 5f       	subi	r24, 0xFF	; 255
 b42:	80 93 28 07 	sts	0x0728, r24	; 0x800728 <uxSchedulerSuspended>
 b46:	08 95       	ret

00000b48 <vTaskIncrementTick>:
 b48:	0f 93       	push	r16
 b4a:	1f 93       	push	r17
 b4c:	cf 93       	push	r28
 b4e:	df 93       	push	r29
 b50:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <uxSchedulerSuspended>
 b54:	81 11       	cpse	r24, r1
 b56:	af c0       	rjmp	.+350    	; 0xcb6 <vTaskIncrementTick+0x16e>
 b58:	80 91 2c 07 	lds	r24, 0x072C	; 0x80072c <xTickCount>
 b5c:	90 91 2d 07 	lds	r25, 0x072D	; 0x80072d <xTickCount+0x1>
 b60:	01 96       	adiw	r24, 0x01	; 1
 b62:	90 93 2d 07 	sts	0x072D, r25	; 0x80072d <xTickCount+0x1>
 b66:	80 93 2c 07 	sts	0x072C, r24	; 0x80072c <xTickCount>
 b6a:	80 91 2c 07 	lds	r24, 0x072C	; 0x80072c <xTickCount>
 b6e:	90 91 2d 07 	lds	r25, 0x072D	; 0x80072d <xTickCount+0x1>
 b72:	89 2b       	or	r24, r25
 b74:	99 f5       	brne	.+102    	; 0xbdc <vTaskIncrementTick+0x94>
 b76:	80 91 44 07 	lds	r24, 0x0744	; 0x800744 <pxDelayedTaskList>
 b7a:	90 91 45 07 	lds	r25, 0x0745	; 0x800745 <pxDelayedTaskList+0x1>
 b7e:	20 91 42 07 	lds	r18, 0x0742	; 0x800742 <pxOverflowDelayedTaskList>
 b82:	30 91 43 07 	lds	r19, 0x0743	; 0x800743 <pxOverflowDelayedTaskList+0x1>
 b86:	30 93 45 07 	sts	0x0745, r19	; 0x800745 <pxDelayedTaskList+0x1>
 b8a:	20 93 44 07 	sts	0x0744, r18	; 0x800744 <pxDelayedTaskList>
 b8e:	90 93 43 07 	sts	0x0743, r25	; 0x800743 <pxOverflowDelayedTaskList+0x1>
 b92:	80 93 42 07 	sts	0x0742, r24	; 0x800742 <pxOverflowDelayedTaskList>
 b96:	80 91 25 07 	lds	r24, 0x0725	; 0x800725 <xNumOfOverflows>
 b9a:	8f 5f       	subi	r24, 0xFF	; 255
 b9c:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <xNumOfOverflows>
 ba0:	e0 91 44 07 	lds	r30, 0x0744	; 0x800744 <pxDelayedTaskList>
 ba4:	f0 91 45 07 	lds	r31, 0x0745	; 0x800745 <pxDelayedTaskList+0x1>
 ba8:	80 81       	ld	r24, Z
 baa:	81 11       	cpse	r24, r1
 bac:	07 c0       	rjmp	.+14     	; 0xbbc <vTaskIncrementTick+0x74>
 bae:	8f ef       	ldi	r24, 0xFF	; 255
 bb0:	9f ef       	ldi	r25, 0xFF	; 255
 bb2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 bb6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 bba:	10 c0       	rjmp	.+32     	; 0xbdc <vTaskIncrementTick+0x94>
 bbc:	e0 91 44 07 	lds	r30, 0x0744	; 0x800744 <pxDelayedTaskList>
 bc0:	f0 91 45 07 	lds	r31, 0x0745	; 0x800745 <pxDelayedTaskList+0x1>
 bc4:	05 80       	ldd	r0, Z+5	; 0x05
 bc6:	f6 81       	ldd	r31, Z+6	; 0x06
 bc8:	e0 2d       	mov	r30, r0
 bca:	06 80       	ldd	r0, Z+6	; 0x06
 bcc:	f7 81       	ldd	r31, Z+7	; 0x07
 bce:	e0 2d       	mov	r30, r0
 bd0:	82 81       	ldd	r24, Z+2	; 0x02
 bd2:	93 81       	ldd	r25, Z+3	; 0x03
 bd4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 bd8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 bdc:	20 91 2c 07 	lds	r18, 0x072C	; 0x80072c <xTickCount>
 be0:	30 91 2d 07 	lds	r19, 0x072D	; 0x80072d <xTickCount+0x1>
 be4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 be8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 bec:	28 17       	cp	r18, r24
 bee:	39 07       	cpc	r19, r25
 bf0:	08 f4       	brcc	.+2      	; 0xbf4 <vTaskIncrementTick+0xac>
 bf2:	66 c0       	rjmp	.+204    	; 0xcc0 <vTaskIncrementTick+0x178>
 bf4:	e0 91 44 07 	lds	r30, 0x0744	; 0x800744 <pxDelayedTaskList>
 bf8:	f0 91 45 07 	lds	r31, 0x0745	; 0x800745 <pxDelayedTaskList+0x1>
 bfc:	80 81       	ld	r24, Z
 bfe:	88 23       	and	r24, r24
 c00:	99 f0       	breq	.+38     	; 0xc28 <vTaskIncrementTick+0xe0>
 c02:	e0 91 44 07 	lds	r30, 0x0744	; 0x800744 <pxDelayedTaskList>
 c06:	f0 91 45 07 	lds	r31, 0x0745	; 0x800745 <pxDelayedTaskList+0x1>
 c0a:	05 80       	ldd	r0, Z+5	; 0x05
 c0c:	f6 81       	ldd	r31, Z+6	; 0x06
 c0e:	e0 2d       	mov	r30, r0
 c10:	c6 81       	ldd	r28, Z+6	; 0x06
 c12:	d7 81       	ldd	r29, Z+7	; 0x07
 c14:	8a 81       	ldd	r24, Y+2	; 0x02
 c16:	9b 81       	ldd	r25, Y+3	; 0x03
 c18:	20 91 2c 07 	lds	r18, 0x072C	; 0x80072c <xTickCount>
 c1c:	30 91 2d 07 	lds	r19, 0x072D	; 0x80072d <xTickCount+0x1>
 c20:	28 17       	cp	r18, r24
 c22:	39 07       	cpc	r19, r25
 c24:	f8 f4       	brcc	.+62     	; 0xc64 <vTaskIncrementTick+0x11c>
 c26:	19 c0       	rjmp	.+50     	; 0xc5a <vTaskIncrementTick+0x112>
 c28:	8f ef       	ldi	r24, 0xFF	; 255
 c2a:	9f ef       	ldi	r25, 0xFF	; 255
 c2c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 c30:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 c34:	45 c0       	rjmp	.+138    	; 0xcc0 <vTaskIncrementTick+0x178>
 c36:	e0 91 44 07 	lds	r30, 0x0744	; 0x800744 <pxDelayedTaskList>
 c3a:	f0 91 45 07 	lds	r31, 0x0745	; 0x800745 <pxDelayedTaskList+0x1>
 c3e:	05 80       	ldd	r0, Z+5	; 0x05
 c40:	f6 81       	ldd	r31, Z+6	; 0x06
 c42:	e0 2d       	mov	r30, r0
 c44:	c6 81       	ldd	r28, Z+6	; 0x06
 c46:	d7 81       	ldd	r29, Z+7	; 0x07
 c48:	8a 81       	ldd	r24, Y+2	; 0x02
 c4a:	9b 81       	ldd	r25, Y+3	; 0x03
 c4c:	20 91 2c 07 	lds	r18, 0x072C	; 0x80072c <xTickCount>
 c50:	30 91 2d 07 	lds	r19, 0x072D	; 0x80072d <xTickCount+0x1>
 c54:	28 17       	cp	r18, r24
 c56:	39 07       	cpc	r19, r25
 c58:	28 f4       	brcc	.+10     	; 0xc64 <vTaskIncrementTick+0x11c>
 c5a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 c5e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 c62:	2e c0       	rjmp	.+92     	; 0xcc0 <vTaskIncrementTick+0x178>
 c64:	8e 01       	movw	r16, r28
 c66:	0e 5f       	subi	r16, 0xFE	; 254
 c68:	1f 4f       	sbci	r17, 0xFF	; 255
 c6a:	c8 01       	movw	r24, r16
 c6c:	c6 da       	rcall	.-2676   	; 0x1fa <vListRemove>
 c6e:	8c 89       	ldd	r24, Y+20	; 0x14
 c70:	9d 89       	ldd	r25, Y+21	; 0x15
 c72:	89 2b       	or	r24, r25
 c74:	19 f0       	breq	.+6      	; 0xc7c <vTaskIncrementTick+0x134>
 c76:	ce 01       	movw	r24, r28
 c78:	0c 96       	adiw	r24, 0x0c	; 12
 c7a:	bf da       	rcall	.-2690   	; 0x1fa <vListRemove>
 c7c:	8e 89       	ldd	r24, Y+22	; 0x16
 c7e:	90 91 2a 07 	lds	r25, 0x072A	; 0x80072a <uxTopReadyPriority>
 c82:	98 17       	cp	r25, r24
 c84:	10 f4       	brcc	.+4      	; 0xc8a <vTaskIncrementTick+0x142>
 c86:	80 93 2a 07 	sts	0x072A, r24	; 0x80072a <uxTopReadyPriority>
 c8a:	90 e0       	ldi	r25, 0x00	; 0
 c8c:	9c 01       	movw	r18, r24
 c8e:	22 0f       	add	r18, r18
 c90:	33 1f       	adc	r19, r19
 c92:	22 0f       	add	r18, r18
 c94:	33 1f       	adc	r19, r19
 c96:	22 0f       	add	r18, r18
 c98:	33 1f       	adc	r19, r19
 c9a:	82 0f       	add	r24, r18
 c9c:	93 1f       	adc	r25, r19
 c9e:	b8 01       	movw	r22, r16
 ca0:	88 5a       	subi	r24, 0xA8	; 168
 ca2:	98 4f       	sbci	r25, 0xF8	; 248
 ca4:	48 da       	rcall	.-2928   	; 0x136 <vListInsertEnd>
 ca6:	e0 91 44 07 	lds	r30, 0x0744	; 0x800744 <pxDelayedTaskList>
 caa:	f0 91 45 07 	lds	r31, 0x0745	; 0x800745 <pxDelayedTaskList+0x1>
 cae:	80 81       	ld	r24, Z
 cb0:	81 11       	cpse	r24, r1
 cb2:	c1 cf       	rjmp	.-126    	; 0xc36 <vTaskIncrementTick+0xee>
 cb4:	b9 cf       	rjmp	.-142    	; 0xc28 <vTaskIncrementTick+0xe0>
 cb6:	80 91 27 07 	lds	r24, 0x0727	; 0x800727 <uxMissedTicks>
 cba:	8f 5f       	subi	r24, 0xFF	; 255
 cbc:	80 93 27 07 	sts	0x0727, r24	; 0x800727 <uxMissedTicks>
 cc0:	df 91       	pop	r29
 cc2:	cf 91       	pop	r28
 cc4:	1f 91       	pop	r17
 cc6:	0f 91       	pop	r16
 cc8:	08 95       	ret

00000cca <xTaskResumeAll>:
 cca:	cf 92       	push	r12
 ccc:	df 92       	push	r13
 cce:	ef 92       	push	r14
 cd0:	ff 92       	push	r15
 cd2:	0f 93       	push	r16
 cd4:	1f 93       	push	r17
 cd6:	cf 93       	push	r28
 cd8:	df 93       	push	r29
 cda:	0f b6       	in	r0, 0x3f	; 63
 cdc:	f8 94       	cli
 cde:	0f 92       	push	r0
 ce0:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <uxSchedulerSuspended>
 ce4:	81 50       	subi	r24, 0x01	; 1
 ce6:	80 93 28 07 	sts	0x0728, r24	; 0x800728 <uxSchedulerSuspended>
 cea:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <uxSchedulerSuspended>
 cee:	81 11       	cpse	r24, r1
 cf0:	5f c0       	rjmp	.+190    	; 0xdb0 <xTaskResumeAll+0xe6>
 cf2:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <uxCurrentNumberOfTasks>
 cf6:	81 11       	cpse	r24, r1
 cf8:	2f c0       	rjmp	.+94     	; 0xd58 <xTaskResumeAll+0x8e>
 cfa:	5d c0       	rjmp	.+186    	; 0xdb6 <xTaskResumeAll+0xec>
 cfc:	d7 01       	movw	r26, r14
 cfe:	15 96       	adiw	r26, 0x05	; 5
 d00:	ed 91       	ld	r30, X+
 d02:	fc 91       	ld	r31, X
 d04:	16 97       	sbiw	r26, 0x06	; 6
 d06:	c6 81       	ldd	r28, Z+6	; 0x06
 d08:	d7 81       	ldd	r29, Z+7	; 0x07
 d0a:	ce 01       	movw	r24, r28
 d0c:	0c 96       	adiw	r24, 0x0c	; 12
 d0e:	75 da       	rcall	.-2838   	; 0x1fa <vListRemove>
 d10:	8e 01       	movw	r16, r28
 d12:	0e 5f       	subi	r16, 0xFE	; 254
 d14:	1f 4f       	sbci	r17, 0xFF	; 255
 d16:	c8 01       	movw	r24, r16
 d18:	70 da       	rcall	.-2848   	; 0x1fa <vListRemove>
 d1a:	8e 89       	ldd	r24, Y+22	; 0x16
 d1c:	90 91 2a 07 	lds	r25, 0x072A	; 0x80072a <uxTopReadyPriority>
 d20:	98 17       	cp	r25, r24
 d22:	10 f4       	brcc	.+4      	; 0xd28 <xTaskResumeAll+0x5e>
 d24:	80 93 2a 07 	sts	0x072A, r24	; 0x80072a <uxTopReadyPriority>
 d28:	90 e0       	ldi	r25, 0x00	; 0
 d2a:	9c 01       	movw	r18, r24
 d2c:	22 0f       	add	r18, r18
 d2e:	33 1f       	adc	r19, r19
 d30:	22 0f       	add	r18, r18
 d32:	33 1f       	adc	r19, r19
 d34:	22 0f       	add	r18, r18
 d36:	33 1f       	adc	r19, r19
 d38:	82 0f       	add	r24, r18
 d3a:	93 1f       	adc	r25, r19
 d3c:	b8 01       	movw	r22, r16
 d3e:	88 5a       	subi	r24, 0xA8	; 168
 d40:	98 4f       	sbci	r25, 0xF8	; 248
 d42:	f9 d9       	rcall	.-3086   	; 0x136 <vListInsertEnd>
 d44:	e0 91 7c 07 	lds	r30, 0x077C	; 0x80077c <pxCurrentTCB>
 d48:	f0 91 7d 07 	lds	r31, 0x077D	; 0x80077d <pxCurrentTCB+0x1>
 d4c:	9e 89       	ldd	r25, Y+22	; 0x16
 d4e:	86 89       	ldd	r24, Z+22	; 0x16
 d50:	98 17       	cp	r25, r24
 d52:	58 f0       	brcs	.+22     	; 0xd6a <xTaskResumeAll+0xa0>
 d54:	dc 2c       	mov	r13, r12
 d56:	09 c0       	rjmp	.+18     	; 0xd6a <xTaskResumeAll+0xa0>
 d58:	d1 2c       	mov	r13, r1
 d5a:	0f 2e       	mov	r0, r31
 d5c:	f9 e3       	ldi	r31, 0x39	; 57
 d5e:	ef 2e       	mov	r14, r31
 d60:	f7 e0       	ldi	r31, 0x07	; 7
 d62:	ff 2e       	mov	r15, r31
 d64:	f0 2d       	mov	r31, r0
 d66:	cc 24       	eor	r12, r12
 d68:	c3 94       	inc	r12
 d6a:	f7 01       	movw	r30, r14
 d6c:	80 81       	ld	r24, Z
 d6e:	81 11       	cpse	r24, r1
 d70:	c5 cf       	rjmp	.-118    	; 0xcfc <xTaskResumeAll+0x32>
 d72:	80 91 27 07 	lds	r24, 0x0727	; 0x800727 <uxMissedTicks>
 d76:	88 23       	and	r24, r24
 d78:	79 f0       	breq	.+30     	; 0xd98 <xTaskResumeAll+0xce>
 d7a:	80 91 27 07 	lds	r24, 0x0727	; 0x800727 <uxMissedTicks>
 d7e:	88 23       	and	r24, r24
 d80:	91 f0       	breq	.+36     	; 0xda6 <xTaskResumeAll+0xdc>
 d82:	e2 de       	rcall	.-572    	; 0xb48 <vTaskIncrementTick>
 d84:	80 91 27 07 	lds	r24, 0x0727	; 0x800727 <uxMissedTicks>
 d88:	81 50       	subi	r24, 0x01	; 1
 d8a:	80 93 27 07 	sts	0x0727, r24	; 0x800727 <uxMissedTicks>
 d8e:	80 91 27 07 	lds	r24, 0x0727	; 0x800727 <uxMissedTicks>
 d92:	81 11       	cpse	r24, r1
 d94:	f6 cf       	rjmp	.-20     	; 0xd82 <xTaskResumeAll+0xb8>
 d96:	07 c0       	rjmp	.+14     	; 0xda6 <xTaskResumeAll+0xdc>
 d98:	f1 e0       	ldi	r31, 0x01	; 1
 d9a:	df 16       	cp	r13, r31
 d9c:	21 f0       	breq	.+8      	; 0xda6 <xTaskResumeAll+0xdc>
 d9e:	80 91 26 07 	lds	r24, 0x0726	; 0x800726 <xMissedYield>
 da2:	81 30       	cpi	r24, 0x01	; 1
 da4:	39 f4       	brne	.+14     	; 0xdb4 <xTaskResumeAll+0xea>
 da6:	10 92 26 07 	sts	0x0726, r1	; 0x800726 <xMissedYield>
 daa:	c4 dc       	rcall	.-1656   	; 0x734 <vPortYield>
 dac:	81 e0       	ldi	r24, 0x01	; 1
 dae:	03 c0       	rjmp	.+6      	; 0xdb6 <xTaskResumeAll+0xec>
 db0:	80 e0       	ldi	r24, 0x00	; 0
 db2:	01 c0       	rjmp	.+2      	; 0xdb6 <xTaskResumeAll+0xec>
 db4:	80 e0       	ldi	r24, 0x00	; 0
 db6:	0f 90       	pop	r0
 db8:	0f be       	out	0x3f, r0	; 63
 dba:	df 91       	pop	r29
 dbc:	cf 91       	pop	r28
 dbe:	1f 91       	pop	r17
 dc0:	0f 91       	pop	r16
 dc2:	ff 90       	pop	r15
 dc4:	ef 90       	pop	r14
 dc6:	df 90       	pop	r13
 dc8:	cf 90       	pop	r12
 dca:	08 95       	ret

00000dcc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
 dcc:	cf 93       	push	r28
 dce:	df 93       	push	r29
 dd0:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
 dd2:	89 2b       	or	r24, r25
		{
			vTaskSuspendAll();
 dd4:	91 f0       	breq	.+36     	; 0xdfa <vTaskDelay+0x2e>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 dd6:	b2 de       	rcall	.-668    	; 0xb3c <vTaskSuspendAll>
 dd8:	80 91 2c 07 	lds	r24, 0x072C	; 0x80072c <xTickCount>
 ddc:	90 91 2d 07 	lds	r25, 0x072D	; 0x80072d <xTickCount+0x1>
 de0:	c8 0f       	add	r28, r24

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 de2:	d9 1f       	adc	r29, r25
 de4:	80 91 7c 07 	lds	r24, 0x077C	; 0x80077c <pxCurrentTCB>
 de8:	90 91 7d 07 	lds	r25, 0x077D	; 0x80077d <pxCurrentTCB+0x1>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
			}
			xAlreadyYielded = xTaskResumeAll();
 dec:	02 96       	adiw	r24, 0x02	; 2
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 dee:	05 da       	rcall	.-3062   	; 0x1fa <vListRemove>
 df0:	ce 01       	movw	r24, r28
		{
			portYIELD_WITHIN_API();
 df2:	53 dd       	rcall	.-1370   	; 0x89a <prvAddCurrentTaskToDelayedList>
 df4:	6a df       	rcall	.-300    	; 0xcca <xTaskResumeAll>
		}
	}
 df6:	81 11       	cpse	r24, r1
 df8:	01 c0       	rjmp	.+2      	; 0xdfc <vTaskDelay+0x30>
 dfa:	9c dc       	rcall	.-1736   	; 0x734 <vPortYield>
 dfc:	df 91       	pop	r29
 dfe:	cf 91       	pop	r28
 e00:	08 95       	ret

00000e02 <prvIdleTask>:
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 e02:	0f 2e       	mov	r0, r31
 e04:	f0 e3       	ldi	r31, 0x30	; 48
 e06:	ef 2e       	mov	r14, r31
 e08:	f7 e0       	ldi	r31, 0x07	; 7
 e0a:	ff 2e       	mov	r15, r31
 e0c:	f0 2d       	mov	r31, r0

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 e0e:	c8 e5       	ldi	r28, 0x58	; 88
 e10:	d7 e0       	ldi	r29, 0x07	; 7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 e12:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <uxTasksDeleted>
 e16:	88 23       	and	r24, r24
		{
			vTaskSuspendAll();
 e18:	29 f1       	breq	.+74     	; 0xe64 <prvIdleTask+0x62>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 e1a:	90 de       	rcall	.-736    	; 0xb3c <vTaskSuspendAll>
			xTaskResumeAll();
 e1c:	d7 01       	movw	r26, r14
 e1e:	1c 91       	ld	r17, X

			if( xListIsEmpty == pdFALSE )
 e20:	54 df       	rcall	.-344    	; 0xcca <xTaskResumeAll>
 e22:	11 23       	and	r17, r17
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 e24:	f9 f0       	breq	.+62     	; 0xe64 <prvIdleTask+0x62>
 e26:	0f b6       	in	r0, 0x3f	; 63
 e28:	f8 94       	cli
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 e2a:	0f 92       	push	r0
 e2c:	d7 01       	movw	r26, r14
 e2e:	15 96       	adiw	r26, 0x05	; 5
 e30:	ed 91       	ld	r30, X+
 e32:	fc 91       	ld	r31, X
 e34:	16 97       	sbiw	r26, 0x06	; 6
					vListRemove( &( pxTCB->xGenericListItem ) );
 e36:	06 81       	ldd	r16, Z+6	; 0x06
 e38:	17 81       	ldd	r17, Z+7	; 0x07
 e3a:	c8 01       	movw	r24, r16
					--uxCurrentNumberOfTasks;
 e3c:	02 96       	adiw	r24, 0x02	; 2
 e3e:	dd d9       	rcall	.-3142   	; 0x1fa <vListRemove>
 e40:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <uxCurrentNumberOfTasks>
 e44:	81 50       	subi	r24, 0x01	; 1
					--uxTasksDeleted;
 e46:	80 93 2e 07 	sts	0x072E, r24	; 0x80072e <uxCurrentNumberOfTasks>
 e4a:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <uxTasksDeleted>
 e4e:	81 50       	subi	r24, 0x01	; 1
				}
				taskEXIT_CRITICAL();
 e50:	80 93 2f 07 	sts	0x072F, r24	; 0x80072f <uxTasksDeleted>
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 e54:	0f 90       	pop	r0
 e56:	0f be       	out	0x3f, r0	; 63
		vPortFree( pxTCB );
 e58:	f8 01       	movw	r30, r16
 e5a:	87 89       	ldd	r24, Z+23	; 0x17

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 e5c:	90 8d       	ldd	r25, Z+24	; 0x18
 e5e:	58 d9       	rcall	.-3408   	; 0x110 <vPortFree>
 e60:	c8 01       	movw	r24, r16
			{
				taskYIELD();
 e62:	56 d9       	rcall	.-3412   	; 0x110 <vPortFree>
 e64:	88 81       	ld	r24, Y
 e66:	82 30       	cpi	r24, 0x02	; 2
 e68:	a0 f2       	brcs	.-88     	; 0xe12 <prvIdleTask+0x10>
 e6a:	64 dc       	rcall	.-1848   	; 0x734 <vPortYield>
 e6c:	d2 cf       	rjmp	.-92     	; 0xe12 <prvIdleTask+0x10>

00000e6e <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 e6e:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <uxSchedulerSuspended>
 e72:	81 11       	cpse	r24, r1
 e74:	13 c0       	rjmp	.+38     	; 0xe9c <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 e76:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <uxTopReadyPriority>
 e7a:	90 e0       	ldi	r25, 0x00	; 0
 e7c:	fc 01       	movw	r30, r24
 e7e:	ee 0f       	add	r30, r30
 e80:	ff 1f       	adc	r31, r31
 e82:	ee 0f       	add	r30, r30
 e84:	ff 1f       	adc	r31, r31
 e86:	ee 0f       	add	r30, r30
 e88:	ff 1f       	adc	r31, r31
 e8a:	8e 0f       	add	r24, r30
 e8c:	9f 1f       	adc	r25, r31
 e8e:	fc 01       	movw	r30, r24
 e90:	e8 5a       	subi	r30, 0xA8	; 168
 e92:	f8 4f       	sbci	r31, 0xF8	; 248
 e94:	80 81       	ld	r24, Z
 e96:	88 23       	and	r24, r24
 e98:	29 f0       	breq	.+10     	; 0xea4 <vTaskSwitchContext+0x36>
 e9a:	1b c0       	rjmp	.+54     	; 0xed2 <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 e9c:	81 e0       	ldi	r24, 0x01	; 1
 e9e:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <xMissedYield>
 ea2:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
 ea4:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <uxTopReadyPriority>
 ea8:	81 50       	subi	r24, 0x01	; 1
 eaa:	80 93 2a 07 	sts	0x072A, r24	; 0x80072a <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 eae:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <uxTopReadyPriority>
 eb2:	90 e0       	ldi	r25, 0x00	; 0
 eb4:	fc 01       	movw	r30, r24
 eb6:	ee 0f       	add	r30, r30
 eb8:	ff 1f       	adc	r31, r31
 eba:	ee 0f       	add	r30, r30
 ebc:	ff 1f       	adc	r31, r31
 ebe:	ee 0f       	add	r30, r30
 ec0:	ff 1f       	adc	r31, r31
 ec2:	8e 0f       	add	r24, r30
 ec4:	9f 1f       	adc	r25, r31
 ec6:	fc 01       	movw	r30, r24
 ec8:	e8 5a       	subi	r30, 0xA8	; 168
 eca:	f8 4f       	sbci	r31, 0xF8	; 248
 ecc:	80 81       	ld	r24, Z
 ece:	88 23       	and	r24, r24
 ed0:	49 f3       	breq	.-46     	; 0xea4 <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 ed2:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <uxTopReadyPriority>
 ed6:	90 e0       	ldi	r25, 0x00	; 0
 ed8:	9c 01       	movw	r18, r24
 eda:	22 0f       	add	r18, r18
 edc:	33 1f       	adc	r19, r19
 ede:	22 0f       	add	r18, r18
 ee0:	33 1f       	adc	r19, r19
 ee2:	22 0f       	add	r18, r18
 ee4:	33 1f       	adc	r19, r19
 ee6:	28 0f       	add	r18, r24
 ee8:	39 1f       	adc	r19, r25
 eea:	d9 01       	movw	r26, r18
 eec:	a8 5a       	subi	r26, 0xA8	; 168
 eee:	b8 4f       	sbci	r27, 0xF8	; 248
 ef0:	11 96       	adiw	r26, 0x01	; 1
 ef2:	ed 91       	ld	r30, X+
 ef4:	fc 91       	ld	r31, X
 ef6:	12 97       	sbiw	r26, 0x02	; 2
 ef8:	02 80       	ldd	r0, Z+2	; 0x02
 efa:	f3 81       	ldd	r31, Z+3	; 0x03
 efc:	e0 2d       	mov	r30, r0
 efe:	12 96       	adiw	r26, 0x02	; 2
 f00:	fc 93       	st	X, r31
 f02:	ee 93       	st	-X, r30
 f04:	11 97       	sbiw	r26, 0x01	; 1
 f06:	25 5a       	subi	r18, 0xA5	; 165
 f08:	38 4f       	sbci	r19, 0xF8	; 248
 f0a:	e2 17       	cp	r30, r18
 f0c:	f3 07       	cpc	r31, r19
 f0e:	29 f4       	brne	.+10     	; 0xf1a <vTaskSwitchContext+0xac>
 f10:	22 81       	ldd	r18, Z+2	; 0x02
 f12:	33 81       	ldd	r19, Z+3	; 0x03
 f14:	fd 01       	movw	r30, r26
 f16:	32 83       	std	Z+2, r19	; 0x02
 f18:	21 83       	std	Z+1, r18	; 0x01
 f1a:	fc 01       	movw	r30, r24
 f1c:	ee 0f       	add	r30, r30
 f1e:	ff 1f       	adc	r31, r31
 f20:	ee 0f       	add	r30, r30
 f22:	ff 1f       	adc	r31, r31
 f24:	ee 0f       	add	r30, r30
 f26:	ff 1f       	adc	r31, r31
 f28:	8e 0f       	add	r24, r30
 f2a:	9f 1f       	adc	r25, r31
 f2c:	fc 01       	movw	r30, r24
 f2e:	e8 5a       	subi	r30, 0xA8	; 168
 f30:	f8 4f       	sbci	r31, 0xF8	; 248
 f32:	01 80       	ldd	r0, Z+1	; 0x01
 f34:	f2 81       	ldd	r31, Z+2	; 0x02
 f36:	e0 2d       	mov	r30, r0
 f38:	86 81       	ldd	r24, Z+6	; 0x06
 f3a:	97 81       	ldd	r25, Z+7	; 0x07
 f3c:	90 93 7d 07 	sts	0x077D, r25	; 0x80077d <pxCurrentTCB+0x1>
 f40:	80 93 7c 07 	sts	0x077C, r24	; 0x80077c <pxCurrentTCB>
 f44:	08 95       	ret

00000f46 <memset>:
 f46:	dc 01       	movw	r26, r24
 f48:	01 c0       	rjmp	.+2      	; 0xf4c <memset+0x6>
 f4a:	6d 93       	st	X+, r22
 f4c:	41 50       	subi	r20, 0x01	; 1
 f4e:	50 40       	sbci	r21, 0x00	; 0
 f50:	e0 f7       	brcc	.-8      	; 0xf4a <memset+0x4>
 f52:	08 95       	ret

00000f54 <strncpy>:
 f54:	fb 01       	movw	r30, r22
 f56:	dc 01       	movw	r26, r24
 f58:	41 50       	subi	r20, 0x01	; 1
 f5a:	50 40       	sbci	r21, 0x00	; 0
 f5c:	48 f0       	brcs	.+18     	; 0xf70 <strncpy+0x1c>
 f5e:	01 90       	ld	r0, Z+
 f60:	0d 92       	st	X+, r0
 f62:	00 20       	and	r0, r0
 f64:	c9 f7       	brne	.-14     	; 0xf58 <strncpy+0x4>
 f66:	01 c0       	rjmp	.+2      	; 0xf6a <strncpy+0x16>
 f68:	1d 92       	st	X+, r1
 f6a:	41 50       	subi	r20, 0x01	; 1
 f6c:	50 40       	sbci	r21, 0x00	; 0
 f6e:	e0 f7       	brcc	.-8      	; 0xf68 <strncpy+0x14>
 f70:	08 95       	ret

00000f72 <_exit>:
 f72:	f8 94       	cli

00000f74 <__stop_program>:
 f74:	ff cf       	rjmp	.-2      	; 0xf74 <__stop_program>
