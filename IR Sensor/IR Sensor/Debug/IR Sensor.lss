
IR Sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000db2  00000e46  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000db2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000063f  0080011c  0080011c  00000e62  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e62  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e94  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00000ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023ca  00000000  00000000  000010bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f0f  00000000  00000000  00003486  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014e8  00000000  00000000  00004395  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004cc  00000000  00000000  00005880  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d10  00000000  00000000  00005d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012a5  00000000  00000000  00006a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e0  00000000  00000000  00007d01  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	4e c3       	rjmp	.+1692   	; 0x6d2 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 eb       	ldi	r30, 0xB2	; 178
  a0:	fd e0       	ldi	r31, 0x0D	; 13
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 31       	cpi	r26, 0x1C	; 28
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	27 e0       	ldi	r18, 0x07	; 7
  b4:	ac e1       	ldi	r26, 0x1C	; 28
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 35       	cpi	r26, 0x5B	; 91
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	a1 d1       	rcall	.+834    	; 0x406 <main>
  c4:	74 c6       	rjmp	.+3304   	; 0xdae <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
  ce:	54 d4       	rcall	.+2216   	; 0x978 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
  d0:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
  d4:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
  d8:	c9 01       	movw	r24, r18
  da:	8c 0f       	add	r24, r28
  dc:	9d 1f       	adc	r25, r29
  de:	8c 3d       	cpi	r24, 0xDC	; 220
  e0:	45 e0       	ldi	r20, 0x05	; 5
  e2:	94 07       	cpc	r25, r20
  e4:	58 f4       	brcc	.+22     	; 0xfc <pvPortMalloc+0x34>
  e6:	28 17       	cp	r18, r24
  e8:	39 07       	cpc	r19, r25
  ea:	58 f4       	brcc	.+22     	; 0x102 <pvPortMalloc+0x3a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
  ec:	e9 01       	movw	r28, r18
  ee:	c2 5e       	subi	r28, 0xE2	; 226
  f0:	de 4f       	sbci	r29, 0xFE	; 254
			xNextFreeByte += xWantedSize;			
  f2:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__data_end+0x1>
  f6:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
  fa:	05 c0       	rjmp	.+10     	; 0x106 <pvPortMalloc+0x3e>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
  fc:	c0 e0       	ldi	r28, 0x00	; 0
  fe:	d0 e0       	ldi	r29, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <pvPortMalloc+0x3e>
 102:	c0 e0       	ldi	r28, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
 104:	d0 e0       	ldi	r29, 0x00	; 0
 106:	ff d4       	rcall	.+2558   	; 0xb06 <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
 108:	ce 01       	movw	r24, r28
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 110:	08 95       	ret

00000112 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
 112:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 114:	03 96       	adiw	r24, 0x03	; 3
 116:	92 83       	std	Z+2, r25	; 0x02
 118:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 11a:	2f ef       	ldi	r18, 0xFF	; 255
 11c:	3f ef       	ldi	r19, 0xFF	; 255
 11e:	34 83       	std	Z+4, r19	; 0x04
 120:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 122:	96 83       	std	Z+6, r25	; 0x06
 124:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 126:	90 87       	std	Z+8, r25	; 0x08
 128:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 12a:	10 82       	st	Z, r1
 12c:	08 95       	ret

0000012e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 12e:	fc 01       	movw	r30, r24
 130:	11 86       	std	Z+9, r1	; 0x09
 132:	10 86       	std	Z+8, r1	; 0x08
 134:	08 95       	ret

00000136 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	fc 01       	movw	r30, r24
 13c:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
 13e:	21 81       	ldd	r18, Z+1	; 0x01
 140:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
 142:	e9 01       	movw	r28, r18
 144:	8a 81       	ldd	r24, Y+2	; 0x02
 146:	9b 81       	ldd	r25, Y+3	; 0x03
 148:	13 96       	adiw	r26, 0x03	; 3
 14a:	9c 93       	st	X, r25
 14c:	8e 93       	st	-X, r24
 14e:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
 150:	81 81       	ldd	r24, Z+1	; 0x01
 152:	92 81       	ldd	r25, Z+2	; 0x02
 154:	15 96       	adiw	r26, 0x05	; 5
 156:	9c 93       	st	X, r25
 158:	8e 93       	st	-X, r24
 15a:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 15c:	8a 81       	ldd	r24, Y+2	; 0x02
 15e:	9b 81       	ldd	r25, Y+3	; 0x03
 160:	ec 01       	movw	r28, r24
 162:	7d 83       	std	Y+5, r23	; 0x05
 164:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 166:	e9 01       	movw	r28, r18
 168:	7b 83       	std	Y+3, r23	; 0x03
 16a:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 16c:	72 83       	std	Z+2, r23	; 0x02
 16e:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 170:	19 96       	adiw	r26, 0x09	; 9
 172:	fc 93       	st	X, r31
 174:	ee 93       	st	-X, r30
 176:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
 178:	80 81       	ld	r24, Z
 17a:	8f 5f       	subi	r24, 0xFF	; 255
 17c:	80 83       	st	Z, r24
}
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 18a:	48 81       	ld	r20, Y
 18c:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 18e:	4f 3f       	cpi	r20, 0xFF	; 255
 190:	2f ef       	ldi	r18, 0xFF	; 255
 192:	52 07       	cpc	r21, r18
 194:	31 f4       	brne	.+12     	; 0x1a2 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 196:	dc 01       	movw	r26, r24
 198:	17 96       	adiw	r26, 0x07	; 7
 19a:	ed 91       	ld	r30, X+
 19c:	fc 91       	ld	r31, X
 19e:	18 97       	sbiw	r26, 0x08	; 8
 1a0:	17 c0       	rjmp	.+46     	; 0x1d0 <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 1a2:	fc 01       	movw	r30, r24
 1a4:	33 96       	adiw	r30, 0x03	; 3
 1a6:	dc 01       	movw	r26, r24
 1a8:	15 96       	adiw	r26, 0x05	; 5
 1aa:	2d 91       	ld	r18, X+
 1ac:	3c 91       	ld	r19, X
 1ae:	16 97       	sbiw	r26, 0x06	; 6
 1b0:	d9 01       	movw	r26, r18
 1b2:	2d 91       	ld	r18, X+
 1b4:	3c 91       	ld	r19, X
 1b6:	42 17       	cp	r20, r18
 1b8:	53 07       	cpc	r21, r19
 1ba:	50 f0       	brcs	.+20     	; 0x1d0 <vListInsert+0x4c>
 1bc:	02 80       	ldd	r0, Z+2	; 0x02
 1be:	f3 81       	ldd	r31, Z+3	; 0x03
 1c0:	e0 2d       	mov	r30, r0
 1c2:	a2 81       	ldd	r26, Z+2	; 0x02
 1c4:	b3 81       	ldd	r27, Z+3	; 0x03
 1c6:	2d 91       	ld	r18, X+
 1c8:	3c 91       	ld	r19, X
 1ca:	42 17       	cp	r20, r18
 1cc:	53 07       	cpc	r21, r19
 1ce:	b0 f7       	brcc	.-20     	; 0x1bc <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 1d0:	a2 81       	ldd	r26, Z+2	; 0x02
 1d2:	b3 81       	ldd	r27, Z+3	; 0x03
 1d4:	bb 83       	std	Y+3, r27	; 0x03
 1d6:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 1d8:	15 96       	adiw	r26, 0x05	; 5
 1da:	dc 93       	st	X, r29
 1dc:	ce 93       	st	-X, r28
 1de:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
 1e0:	fd 83       	std	Y+5, r31	; 0x05
 1e2:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 1e4:	d3 83       	std	Z+3, r29	; 0x03
 1e6:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 1e8:	99 87       	std	Y+9, r25	; 0x09
 1ea:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
 1ec:	fc 01       	movw	r30, r24
 1ee:	20 81       	ld	r18, Z
 1f0:	2f 5f       	subi	r18, 0xFF	; 255
 1f2:	20 83       	st	Z, r18
}
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
 1fa:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 1fc:	a2 81       	ldd	r26, Z+2	; 0x02
 1fe:	b3 81       	ldd	r27, Z+3	; 0x03
 200:	84 81       	ldd	r24, Z+4	; 0x04
 202:	95 81       	ldd	r25, Z+5	; 0x05
 204:	15 96       	adiw	r26, 0x05	; 5
 206:	9c 93       	st	X, r25
 208:	8e 93       	st	-X, r24
 20a:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 20c:	a4 81       	ldd	r26, Z+4	; 0x04
 20e:	b5 81       	ldd	r27, Z+5	; 0x05
 210:	82 81       	ldd	r24, Z+2	; 0x02
 212:	93 81       	ldd	r25, Z+3	; 0x03
 214:	13 96       	adiw	r26, 0x03	; 3
 216:	9c 93       	st	X, r25
 218:	8e 93       	st	-X, r24
 21a:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 21c:	a0 85       	ldd	r26, Z+8	; 0x08
 21e:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 220:	11 96       	adiw	r26, 0x01	; 1
 222:	8d 91       	ld	r24, X+
 224:	9c 91       	ld	r25, X
 226:	12 97       	sbiw	r26, 0x02	; 2
 228:	e8 17       	cp	r30, r24
 22a:	f9 07       	cpc	r31, r25
 22c:	31 f4       	brne	.+12     	; 0x23a <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 22e:	84 81       	ldd	r24, Z+4	; 0x04
 230:	95 81       	ldd	r25, Z+5	; 0x05
 232:	12 96       	adiw	r26, 0x02	; 2
 234:	9c 93       	st	X, r25
 236:	8e 93       	st	-X, r24
 238:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
 23a:	11 86       	std	Z+9, r1	; 0x09
 23c:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 23e:	8c 91       	ld	r24, X
 240:	81 50       	subi	r24, 0x01	; 1
 242:	8c 93       	st	X, r24
 244:	08 95       	ret

00000246 <IR_Tick>:
{
	xTaskCreate(IRSecTask, (signed portCHAR *)"IRSecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
}

void LED_Init(){
	led_state = led_output;
 246:	80 91 5a 07 	lds	r24, 0x075A	; 0x80075a <ir_state>
 24a:	81 11       	cpse	r24, r1
 24c:	2e c0       	rjmp	.+92     	; 0x2aa <IR_Tick+0x64>
 24e:	00 99       	sbic	0x00, 0	; 0
 250:	03 c0       	rjmp	.+6      	; 0x258 <IR_Tick+0x12>
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	80 93 fe 06 	sts	0x06FE, r24	; 0x8006fe <front>
 258:	00 99       	sbic	0x00, 0	; 0
 25a:	10 92 fe 06 	sts	0x06FE, r1	; 0x8006fe <front>
 25e:	80 b1       	in	r24, 0x00	; 0
 260:	80 95       	com	r24
 262:	81 ff       	sbrs	r24, 1
 264:	03 c0       	rjmp	.+6      	; 0x26c <IR_Tick+0x26>
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	80 93 fd 06 	sts	0x06FD, r24	; 0x8006fd <back>
 26c:	80 b1       	in	r24, 0x00	; 0
 26e:	80 95       	com	r24
 270:	81 ff       	sbrs	r24, 1
 272:	10 92 fd 06 	sts	0x06FD, r1	; 0x8006fd <back>
 276:	80 b1       	in	r24, 0x00	; 0
 278:	80 95       	com	r24
 27a:	82 ff       	sbrs	r24, 2
 27c:	03 c0       	rjmp	.+6      	; 0x284 <IR_Tick+0x3e>
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	80 93 fc 06 	sts	0x06FC, r24	; 0x8006fc <left>
 284:	80 b1       	in	r24, 0x00	; 0
 286:	80 95       	com	r24
 288:	82 ff       	sbrs	r24, 2
 28a:	10 92 fc 06 	sts	0x06FC, r1	; 0x8006fc <left>
 28e:	80 b1       	in	r24, 0x00	; 0
 290:	80 95       	com	r24
 292:	83 ff       	sbrs	r24, 3
 294:	03 c0       	rjmp	.+6      	; 0x29c <IR_Tick+0x56>
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	80 93 fb 06 	sts	0x06FB, r24	; 0x8006fb <right>
 29c:	80 b1       	in	r24, 0x00	; 0
 29e:	80 95       	com	r24
 2a0:	83 fd       	sbrc	r24, 3
 2a2:	05 c0       	rjmp	.+10     	; 0x2ae <IR_Tick+0x68>
 2a4:	10 92 fb 06 	sts	0x06FB, r1	; 0x8006fb <right>
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <IR_Tick+0x68>
 2aa:	81 11       	cpse	r24, r1
 2ac:	03 c0       	rjmp	.+6      	; 0x2b4 <IR_Tick+0x6e>
 2ae:	10 92 5a 07 	sts	0x075A, r1	; 0x80075a <ir_state>
 2b2:	08 95       	ret
 2b4:	10 92 5a 07 	sts	0x075A, r1	; 0x80075a <ir_state>
 2b8:	08 95       	ret

000002ba <IRSecTask>:
 2ba:	10 92 5a 07 	sts	0x075A, r1	; 0x80075a <ir_state>
 2be:	c3 df       	rcall	.-122    	; 0x246 <IR_Tick>
 2c0:	8a e0       	ldi	r24, 0x0A	; 10
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	a1 d4       	rcall	.+2370   	; 0xc08 <vTaskDelay>
 2c6:	fb cf       	rjmp	.-10     	; 0x2be <IRSecTask+0x4>

000002c8 <IRSecPulse>:
 2c8:	af 92       	push	r10
 2ca:	bf 92       	push	r11
 2cc:	cf 92       	push	r12
 2ce:	df 92       	push	r13
 2d0:	ef 92       	push	r14
 2d2:	ff 92       	push	r15
 2d4:	0f 93       	push	r16
 2d6:	a1 2c       	mov	r10, r1
 2d8:	b1 2c       	mov	r11, r1
 2da:	c1 2c       	mov	r12, r1
 2dc:	d1 2c       	mov	r13, r1
 2de:	e1 2c       	mov	r14, r1
 2e0:	f1 2c       	mov	r15, r1
 2e2:	08 2f       	mov	r16, r24
 2e4:	20 e0       	ldi	r18, 0x00	; 0
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	45 e5       	ldi	r20, 0x55	; 85
 2ea:	50 e0       	ldi	r21, 0x00	; 0
 2ec:	62 e0       	ldi	r22, 0x02	; 2
 2ee:	71 e0       	ldi	r23, 0x01	; 1
 2f0:	8d e5       	ldi	r24, 0x5D	; 93
 2f2:	91 e0       	ldi	r25, 0x01	; 1
 2f4:	25 d2       	rcall	.+1098   	; 0x740 <xTaskGenericCreate>
 2f6:	0f 91       	pop	r16
 2f8:	ff 90       	pop	r15
 2fa:	ef 90       	pop	r14
 2fc:	df 90       	pop	r13
 2fe:	cf 90       	pop	r12
 300:	bf 90       	pop	r11
 302:	af 90       	pop	r10
 304:	08 95       	ret

00000306 <LED_Tick>:
}

void LED_Tick(){
	//Actions
	switch(led_state){
 306:	80 91 59 07 	lds	r24, 0x0759	; 0x800759 <led_state>
 30a:	81 11       	cpse	r24, r1
 30c:	50 c0       	rjmp	.+160    	; 0x3ae <LED_Tick+0xa8>
		case led_output:
			if(front){
 30e:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <front>
 312:	88 23       	and	r24, r24
 314:	51 f0       	breq	.+20     	; 0x32a <LED_Tick+0x24>
				led_value = led_value | 0x01;
 316:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <led_value>
 31a:	81 60       	ori	r24, 0x01	; 1
 31c:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <led_value>
				PORTD = led_value;
 320:	8b b9       	out	0x0b, r24	; 11
			}
			
			if(!front){
 322:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <front>
 326:	81 11       	cpse	r24, r1
 328:	06 c0       	rjmp	.+12     	; 0x336 <LED_Tick+0x30>
				led_value = led_value & 0xFE;
 32a:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <led_value>
 32e:	8e 7f       	andi	r24, 0xFE	; 254
 330:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <led_value>
				PORTD = led_value;
 334:	8b b9       	out	0x0b, r24	; 11
			}
			
			if(back){
 336:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <back>
 33a:	88 23       	and	r24, r24
 33c:	51 f0       	breq	.+20     	; 0x352 <LED_Tick+0x4c>
				led_value = led_value | 0x02;
 33e:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <led_value>
 342:	82 60       	ori	r24, 0x02	; 2
 344:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <led_value>
				PORTD = led_value;
 348:	8b b9       	out	0x0b, r24	; 11
			}
			
			if(!back){
 34a:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <back>
 34e:	81 11       	cpse	r24, r1
 350:	06 c0       	rjmp	.+12     	; 0x35e <LED_Tick+0x58>
				led_value = led_value & 0xFD;
 352:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <led_value>
 356:	8d 7f       	andi	r24, 0xFD	; 253
 358:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <led_value>
				PORTD = led_value;
 35c:	8b b9       	out	0x0b, r24	; 11
			}
			
			if(left){
 35e:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <left>
 362:	88 23       	and	r24, r24
 364:	51 f0       	breq	.+20     	; 0x37a <LED_Tick+0x74>
				led_value = led_value | 0x04;
 366:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <led_value>
 36a:	84 60       	ori	r24, 0x04	; 4
 36c:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <led_value>
				PORTD = led_value;
 370:	8b b9       	out	0x0b, r24	; 11
			}
			
			if(!left){
 372:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <left>
 376:	81 11       	cpse	r24, r1
 378:	06 c0       	rjmp	.+12     	; 0x386 <LED_Tick+0x80>
				led_value = led_value & 0xFB;
 37a:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <led_value>
 37e:	8b 7f       	andi	r24, 0xFB	; 251
 380:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <led_value>
				PORTD = led_value;
 384:	8b b9       	out	0x0b, r24	; 11
			}
			
			if(right){
 386:	80 91 fb 06 	lds	r24, 0x06FB	; 0x8006fb <right>
 38a:	88 23       	and	r24, r24
 38c:	51 f0       	breq	.+20     	; 0x3a2 <LED_Tick+0x9c>
				led_value = led_value | 0x08;
 38e:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <led_value>
 392:	88 60       	ori	r24, 0x08	; 8
 394:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <led_value>
				PORTD = led_value;
 398:	8b b9       	out	0x0b, r24	; 11
			}
			
			if(!right){
 39a:	80 91 fb 06 	lds	r24, 0x06FB	; 0x8006fb <right>
 39e:	81 11       	cpse	r24, r1
 3a0:	06 c0       	rjmp	.+12     	; 0x3ae <LED_Tick+0xa8>
				led_value = led_value & 0xF7;
 3a2:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <led_value>
 3a6:	87 7f       	andi	r24, 0xF7	; 247
 3a8:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <led_value>
				PORTD = led_value;
 3ac:	8b b9       	out	0x0b, r24	; 11
		
		default:
			break;
	}
	//Transitions
	switch(led_state){
 3ae:	80 91 59 07 	lds	r24, 0x0759	; 0x800759 <led_state>
 3b2:	81 11       	cpse	r24, r1
		case led_output:
			led_state = led_output;
			break;
		
		default:
			led_state = led_output;
 3b4:	10 92 59 07 	sts	0x0759, r1	; 0x800759 <led_state>
 3b8:	08 95       	ret

000003ba <LEDSecTask>:
{
	xTaskCreate(IRSecTask, (signed portCHAR *)"IRSecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
}

void LED_Init(){
	led_state = led_output;
 3ba:	10 92 59 07 	sts	0x0759, r1	; 0x800759 <led_state>
void LEDSecTask()
{
	LED_Init();
	for(;;)
	{
		LED_Tick();
 3be:	a3 df       	rcall	.-186    	; 0x306 <LED_Tick>
		vTaskDelay(10);
 3c0:	8a e0       	ldi	r24, 0x0A	; 10
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	21 d4       	rcall	.+2114   	; 0xc08 <vTaskDelay>
 3c6:	fb cf       	rjmp	.-10     	; 0x3be <LEDSecTask+0x4>

000003c8 <LEDSecPulse>:
	}
}

void LEDSecPulse(unsigned portBASE_TYPE Priority)
{
 3c8:	af 92       	push	r10
 3ca:	bf 92       	push	r11
 3cc:	cf 92       	push	r12
 3ce:	df 92       	push	r13
 3d0:	ef 92       	push	r14
 3d2:	ff 92       	push	r15
 3d4:	0f 93       	push	r16
	xTaskCreate(LEDSecTask, (signed portCHAR *)"LEDSecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
 3d6:	a1 2c       	mov	r10, r1
 3d8:	b1 2c       	mov	r11, r1
 3da:	c1 2c       	mov	r12, r1
 3dc:	d1 2c       	mov	r13, r1
 3de:	e1 2c       	mov	r14, r1
 3e0:	f1 2c       	mov	r15, r1
 3e2:	08 2f       	mov	r16, r24
 3e4:	20 e0       	ldi	r18, 0x00	; 0
 3e6:	30 e0       	ldi	r19, 0x00	; 0
 3e8:	45 e5       	ldi	r20, 0x55	; 85
 3ea:	50 e0       	ldi	r21, 0x00	; 0
 3ec:	6c e0       	ldi	r22, 0x0C	; 12
 3ee:	71 e0       	ldi	r23, 0x01	; 1
 3f0:	8d ed       	ldi	r24, 0xDD	; 221
 3f2:	91 e0       	ldi	r25, 0x01	; 1
 3f4:	a5 d1       	rcall	.+842    	; 0x740 <xTaskGenericCreate>
}	
 3f6:	0f 91       	pop	r16
 3f8:	ff 90       	pop	r15
 3fa:	ef 90       	pop	r14
 3fc:	df 90       	pop	r13
 3fe:	cf 90       	pop	r12
 400:	bf 90       	pop	r11
 402:	af 90       	pop	r10
 404:	08 95       	ret

00000406 <main>:
 
int main(void) 
{ 
   DDRA = 0x00; PORTA=0xFF;
 406:	11 b8       	out	0x01, r1	; 1
 408:	8f ef       	ldi	r24, 0xFF	; 255
 40a:	82 b9       	out	0x02, r24	; 2
   DDRC = 0xFF; PORTC = 0x00;
 40c:	87 b9       	out	0x07, r24	; 7
 40e:	18 b8       	out	0x08, r1	; 8
   DDRD = 0xFF; PORTD = 0x00;
 410:	8a b9       	out	0x0a, r24	; 10
 412:	1b b8       	out	0x0b, r1	; 11
   //Start Tasks  
   IRSecPulse(1);
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	58 df       	rcall	.-336    	; 0x2c8 <IRSecPulse>
   LEDSecPulse(1);
 418:	81 e0       	ldi	r24, 0x01	; 1
    //RunSchedular 
   vTaskStartScheduler(); 
 41a:	d6 df       	rcall	.-84     	; 0x3c8 <LEDSecPulse>
 41c:	84 d2       	rcall	.+1288   	; 0x926 <vTaskStartScheduler>
 
   return 0; 
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	08 95       	ret

00000424 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 424:	31 e1       	ldi	r19, 0x11	; 17
 426:	fc 01       	movw	r30, r24
 428:	30 83       	st	Z, r19
 42a:	31 97       	sbiw	r30, 0x01	; 1
 42c:	22 e2       	ldi	r18, 0x22	; 34
 42e:	20 83       	st	Z, r18
 430:	31 97       	sbiw	r30, 0x01	; 1
 432:	a3 e3       	ldi	r26, 0x33	; 51
 434:	a0 83       	st	Z, r26
 436:	31 97       	sbiw	r30, 0x01	; 1
 438:	60 83       	st	Z, r22
 43a:	31 97       	sbiw	r30, 0x01	; 1
 43c:	70 83       	st	Z, r23
 43e:	31 97       	sbiw	r30, 0x01	; 1
 440:	10 82       	st	Z, r1
 442:	31 97       	sbiw	r30, 0x01	; 1
 444:	60 e8       	ldi	r22, 0x80	; 128
 446:	60 83       	st	Z, r22
 448:	31 97       	sbiw	r30, 0x01	; 1
 44a:	10 82       	st	Z, r1
 44c:	31 97       	sbiw	r30, 0x01	; 1
 44e:	62 e0       	ldi	r22, 0x02	; 2
 450:	60 83       	st	Z, r22
 452:	31 97       	sbiw	r30, 0x01	; 1
 454:	63 e0       	ldi	r22, 0x03	; 3
 456:	60 83       	st	Z, r22
 458:	31 97       	sbiw	r30, 0x01	; 1
 45a:	64 e0       	ldi	r22, 0x04	; 4
 45c:	60 83       	st	Z, r22
 45e:	31 97       	sbiw	r30, 0x01	; 1
 460:	65 e0       	ldi	r22, 0x05	; 5
 462:	60 83       	st	Z, r22
 464:	31 97       	sbiw	r30, 0x01	; 1
 466:	66 e0       	ldi	r22, 0x06	; 6
 468:	60 83       	st	Z, r22
 46a:	31 97       	sbiw	r30, 0x01	; 1
 46c:	67 e0       	ldi	r22, 0x07	; 7
 46e:	60 83       	st	Z, r22
 470:	31 97       	sbiw	r30, 0x01	; 1
 472:	68 e0       	ldi	r22, 0x08	; 8
 474:	60 83       	st	Z, r22
 476:	31 97       	sbiw	r30, 0x01	; 1
 478:	69 e0       	ldi	r22, 0x09	; 9
 47a:	60 83       	st	Z, r22
 47c:	31 97       	sbiw	r30, 0x01	; 1
 47e:	60 e1       	ldi	r22, 0x10	; 16
 480:	60 83       	st	Z, r22
 482:	31 97       	sbiw	r30, 0x01	; 1
 484:	30 83       	st	Z, r19
 486:	31 97       	sbiw	r30, 0x01	; 1
 488:	32 e1       	ldi	r19, 0x12	; 18
 48a:	30 83       	st	Z, r19
 48c:	31 97       	sbiw	r30, 0x01	; 1
 48e:	33 e1       	ldi	r19, 0x13	; 19
 490:	30 83       	st	Z, r19
 492:	31 97       	sbiw	r30, 0x01	; 1
 494:	34 e1       	ldi	r19, 0x14	; 20
 496:	30 83       	st	Z, r19
 498:	31 97       	sbiw	r30, 0x01	; 1
 49a:	35 e1       	ldi	r19, 0x15	; 21
 49c:	30 83       	st	Z, r19
 49e:	31 97       	sbiw	r30, 0x01	; 1
 4a0:	36 e1       	ldi	r19, 0x16	; 22
 4a2:	30 83       	st	Z, r19
 4a4:	31 97       	sbiw	r30, 0x01	; 1
 4a6:	37 e1       	ldi	r19, 0x17	; 23
 4a8:	30 83       	st	Z, r19
 4aa:	31 97       	sbiw	r30, 0x01	; 1
 4ac:	38 e1       	ldi	r19, 0x18	; 24
 4ae:	30 83       	st	Z, r19
 4b0:	31 97       	sbiw	r30, 0x01	; 1
 4b2:	39 e1       	ldi	r19, 0x19	; 25
 4b4:	30 83       	st	Z, r19
 4b6:	31 97       	sbiw	r30, 0x01	; 1
 4b8:	30 e2       	ldi	r19, 0x20	; 32
 4ba:	30 83       	st	Z, r19
 4bc:	31 97       	sbiw	r30, 0x01	; 1
 4be:	31 e2       	ldi	r19, 0x21	; 33
 4c0:	30 83       	st	Z, r19
 4c2:	31 97       	sbiw	r30, 0x01	; 1
 4c4:	20 83       	st	Z, r18
 4c6:	31 97       	sbiw	r30, 0x01	; 1
 4c8:	23 e2       	ldi	r18, 0x23	; 35
 4ca:	20 83       	st	Z, r18
 4cc:	31 97       	sbiw	r30, 0x01	; 1
 4ce:	40 83       	st	Z, r20
 4d0:	31 97       	sbiw	r30, 0x01	; 1
 4d2:	50 83       	st	Z, r21
 4d4:	31 97       	sbiw	r30, 0x01	; 1
 4d6:	26 e2       	ldi	r18, 0x26	; 38
 4d8:	20 83       	st	Z, r18
 4da:	31 97       	sbiw	r30, 0x01	; 1
 4dc:	27 e2       	ldi	r18, 0x27	; 39
 4de:	20 83       	st	Z, r18
 4e0:	31 97       	sbiw	r30, 0x01	; 1
 4e2:	28 e2       	ldi	r18, 0x28	; 40
 4e4:	20 83       	st	Z, r18
 4e6:	31 97       	sbiw	r30, 0x01	; 1
 4e8:	29 e2       	ldi	r18, 0x29	; 41
 4ea:	20 83       	st	Z, r18
 4ec:	31 97       	sbiw	r30, 0x01	; 1
 4ee:	20 e3       	ldi	r18, 0x30	; 48
 4f0:	20 83       	st	Z, r18
 4f2:	31 97       	sbiw	r30, 0x01	; 1
 4f4:	21 e3       	ldi	r18, 0x31	; 49
 4f6:	20 83       	st	Z, r18
 4f8:	86 97       	sbiw	r24, 0x26	; 38
 4fa:	08 95       	ret

000004fc <xPortStartScheduler>:
 4fc:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 500:	8c e7       	ldi	r24, 0x7C	; 124
 502:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 506:	8b e0       	ldi	r24, 0x0B	; 11
 508:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 50c:	ef e6       	ldi	r30, 0x6F	; 111
 50e:	f0 e0       	ldi	r31, 0x00	; 0
 510:	80 81       	ld	r24, Z
 512:	82 60       	ori	r24, 0x02	; 2
 514:	80 83       	st	Z, r24
 516:	a0 91 57 07 	lds	r26, 0x0757	; 0x800757 <pxCurrentTCB>
 51a:	b0 91 58 07 	lds	r27, 0x0758	; 0x800758 <pxCurrentTCB+0x1>
 51e:	cd 91       	ld	r28, X+
 520:	cd bf       	out	0x3d, r28	; 61
 522:	dd 91       	ld	r29, X+
 524:	de bf       	out	0x3e, r29	; 62
 526:	ff 91       	pop	r31
 528:	ef 91       	pop	r30
 52a:	df 91       	pop	r29
 52c:	cf 91       	pop	r28
 52e:	bf 91       	pop	r27
 530:	af 91       	pop	r26
 532:	9f 91       	pop	r25
 534:	8f 91       	pop	r24
 536:	7f 91       	pop	r23
 538:	6f 91       	pop	r22
 53a:	5f 91       	pop	r21
 53c:	4f 91       	pop	r20
 53e:	3f 91       	pop	r19
 540:	2f 91       	pop	r18
 542:	1f 91       	pop	r17
 544:	0f 91       	pop	r16
 546:	ff 90       	pop	r15
 548:	ef 90       	pop	r14
 54a:	df 90       	pop	r13
 54c:	cf 90       	pop	r12
 54e:	bf 90       	pop	r11
 550:	af 90       	pop	r10
 552:	9f 90       	pop	r9
 554:	8f 90       	pop	r8
 556:	7f 90       	pop	r7
 558:	6f 90       	pop	r6
 55a:	5f 90       	pop	r5
 55c:	4f 90       	pop	r4
 55e:	3f 90       	pop	r3
 560:	2f 90       	pop	r2
 562:	1f 90       	pop	r1
 564:	0f 90       	pop	r0
 566:	0f be       	out	0x3f, r0	; 63
 568:	0f 90       	pop	r0
 56a:	08 95       	ret
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	08 95       	ret

00000570 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 570:	0f 92       	push	r0
 572:	0f b6       	in	r0, 0x3f	; 63
 574:	f8 94       	cli
 576:	0f 92       	push	r0
 578:	1f 92       	push	r1
 57a:	11 24       	eor	r1, r1
 57c:	2f 92       	push	r2
 57e:	3f 92       	push	r3
 580:	4f 92       	push	r4
 582:	5f 92       	push	r5
 584:	6f 92       	push	r6
 586:	7f 92       	push	r7
 588:	8f 92       	push	r8
 58a:	9f 92       	push	r9
 58c:	af 92       	push	r10
 58e:	bf 92       	push	r11
 590:	cf 92       	push	r12
 592:	df 92       	push	r13
 594:	ef 92       	push	r14
 596:	ff 92       	push	r15
 598:	0f 93       	push	r16
 59a:	1f 93       	push	r17
 59c:	2f 93       	push	r18
 59e:	3f 93       	push	r19
 5a0:	4f 93       	push	r20
 5a2:	5f 93       	push	r21
 5a4:	6f 93       	push	r22
 5a6:	7f 93       	push	r23
 5a8:	8f 93       	push	r24
 5aa:	9f 93       	push	r25
 5ac:	af 93       	push	r26
 5ae:	bf 93       	push	r27
 5b0:	cf 93       	push	r28
 5b2:	df 93       	push	r29
 5b4:	ef 93       	push	r30
 5b6:	ff 93       	push	r31
 5b8:	a0 91 57 07 	lds	r26, 0x0757	; 0x800757 <pxCurrentTCB>
 5bc:	b0 91 58 07 	lds	r27, 0x0758	; 0x800758 <pxCurrentTCB+0x1>
 5c0:	0d b6       	in	r0, 0x3d	; 61
 5c2:	0d 92       	st	X+, r0
 5c4:	0e b6       	in	r0, 0x3e	; 62
 5c6:	0d 92       	st	X+, r0
	vTaskSwitchContext();
 5c8:	70 d3       	rcall	.+1760   	; 0xcaa <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 5ca:	a0 91 57 07 	lds	r26, 0x0757	; 0x800757 <pxCurrentTCB>
 5ce:	b0 91 58 07 	lds	r27, 0x0758	; 0x800758 <pxCurrentTCB+0x1>
 5d2:	cd 91       	ld	r28, X+
 5d4:	cd bf       	out	0x3d, r28	; 61
 5d6:	dd 91       	ld	r29, X+
 5d8:	de bf       	out	0x3e, r29	; 62
 5da:	ff 91       	pop	r31
 5dc:	ef 91       	pop	r30
 5de:	df 91       	pop	r29
 5e0:	cf 91       	pop	r28
 5e2:	bf 91       	pop	r27
 5e4:	af 91       	pop	r26
 5e6:	9f 91       	pop	r25
 5e8:	8f 91       	pop	r24
 5ea:	7f 91       	pop	r23
 5ec:	6f 91       	pop	r22
 5ee:	5f 91       	pop	r21
 5f0:	4f 91       	pop	r20
 5f2:	3f 91       	pop	r19
 5f4:	2f 91       	pop	r18
 5f6:	1f 91       	pop	r17
 5f8:	0f 91       	pop	r16
 5fa:	ff 90       	pop	r15
 5fc:	ef 90       	pop	r14
 5fe:	df 90       	pop	r13
 600:	cf 90       	pop	r12
 602:	bf 90       	pop	r11
 604:	af 90       	pop	r10
 606:	9f 90       	pop	r9
 608:	8f 90       	pop	r8
 60a:	7f 90       	pop	r7
 60c:	6f 90       	pop	r6
 60e:	5f 90       	pop	r5
 610:	4f 90       	pop	r4
 612:	3f 90       	pop	r3
 614:	2f 90       	pop	r2
 616:	1f 90       	pop	r1
 618:	0f 90       	pop	r0
 61a:	0f be       	out	0x3f, r0	; 63
 61c:	0f 90       	pop	r0

	asm volatile ( "ret" );
 61e:	08 95       	ret

00000620 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 620:	0f 92       	push	r0
 622:	0f b6       	in	r0, 0x3f	; 63
 624:	f8 94       	cli
 626:	0f 92       	push	r0
 628:	1f 92       	push	r1
 62a:	11 24       	eor	r1, r1
 62c:	2f 92       	push	r2
 62e:	3f 92       	push	r3
 630:	4f 92       	push	r4
 632:	5f 92       	push	r5
 634:	6f 92       	push	r6
 636:	7f 92       	push	r7
 638:	8f 92       	push	r8
 63a:	9f 92       	push	r9
 63c:	af 92       	push	r10
 63e:	bf 92       	push	r11
 640:	cf 92       	push	r12
 642:	df 92       	push	r13
 644:	ef 92       	push	r14
 646:	ff 92       	push	r15
 648:	0f 93       	push	r16
 64a:	1f 93       	push	r17
 64c:	2f 93       	push	r18
 64e:	3f 93       	push	r19
 650:	4f 93       	push	r20
 652:	5f 93       	push	r21
 654:	6f 93       	push	r22
 656:	7f 93       	push	r23
 658:	8f 93       	push	r24
 65a:	9f 93       	push	r25
 65c:	af 93       	push	r26
 65e:	bf 93       	push	r27
 660:	cf 93       	push	r28
 662:	df 93       	push	r29
 664:	ef 93       	push	r30
 666:	ff 93       	push	r31
 668:	a0 91 57 07 	lds	r26, 0x0757	; 0x800757 <pxCurrentTCB>
 66c:	b0 91 58 07 	lds	r27, 0x0758	; 0x800758 <pxCurrentTCB+0x1>
 670:	0d b6       	in	r0, 0x3d	; 61
 672:	0d 92       	st	X+, r0
 674:	0e b6       	in	r0, 0x3e	; 62
 676:	0d 92       	st	X+, r0
	vTaskIncrementTick();
 678:	85 d1       	rcall	.+778    	; 0x984 <vTaskIncrementTick>
	vTaskSwitchContext();
 67a:	17 d3       	rcall	.+1582   	; 0xcaa <vTaskSwitchContext>
 67c:	a0 91 57 07 	lds	r26, 0x0757	; 0x800757 <pxCurrentTCB>
	portRESTORE_CONTEXT();
 680:	b0 91 58 07 	lds	r27, 0x0758	; 0x800758 <pxCurrentTCB+0x1>
 684:	cd 91       	ld	r28, X+
 686:	cd bf       	out	0x3d, r28	; 61
 688:	dd 91       	ld	r29, X+
 68a:	de bf       	out	0x3e, r29	; 62
 68c:	ff 91       	pop	r31
 68e:	ef 91       	pop	r30
 690:	df 91       	pop	r29
 692:	cf 91       	pop	r28
 694:	bf 91       	pop	r27
 696:	af 91       	pop	r26
 698:	9f 91       	pop	r25
 69a:	8f 91       	pop	r24
 69c:	7f 91       	pop	r23
 69e:	6f 91       	pop	r22
 6a0:	5f 91       	pop	r21
 6a2:	4f 91       	pop	r20
 6a4:	3f 91       	pop	r19
 6a6:	2f 91       	pop	r18
 6a8:	1f 91       	pop	r17
 6aa:	0f 91       	pop	r16
 6ac:	ff 90       	pop	r15
 6ae:	ef 90       	pop	r14
 6b0:	df 90       	pop	r13
 6b2:	cf 90       	pop	r12
 6b4:	bf 90       	pop	r11
 6b6:	af 90       	pop	r10
 6b8:	9f 90       	pop	r9
 6ba:	8f 90       	pop	r8
 6bc:	7f 90       	pop	r7
 6be:	6f 90       	pop	r6
 6c0:	5f 90       	pop	r5
 6c2:	4f 90       	pop	r4
 6c4:	3f 90       	pop	r3
 6c6:	2f 90       	pop	r2
 6c8:	1f 90       	pop	r1
 6ca:	0f 90       	pop	r0
 6cc:	0f be       	out	0x3f, r0	; 63
 6ce:	0f 90       	pop	r0
 6d0:	08 95       	ret

000006d2 <__vector_13>:

	asm volatile ( "ret" );
 6d2:	a6 df       	rcall	.-180    	; 0x620 <vPortYieldFromTick>
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
		asm volatile ( "reti" );
 6d4:	18 95       	reti

000006d6 <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
 6d6:	cf 93       	push	r28
 6d8:	df 93       	push	r29
 6da:	ec 01       	movw	r28, r24
 6dc:	e0 91 57 07 	lds	r30, 0x0757	; 0x800757 <pxCurrentTCB>
 6e0:	f0 91 58 07 	lds	r31, 0x0758	; 0x800758 <pxCurrentTCB+0x1>
 6e4:	93 83       	std	Z+3, r25	; 0x03
 6e6:	82 83       	std	Z+2, r24	; 0x02
 6e8:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <xTickCount>
 6ec:	90 91 08 07 	lds	r25, 0x0708	; 0x800708 <xTickCount+0x1>
 6f0:	c8 17       	cp	r28, r24
 6f2:	d9 07       	cpc	r29, r25
 6f4:	60 f4       	brcc	.+24     	; 0x70e <prvAddCurrentTaskToDelayedList+0x38>
 6f6:	60 91 57 07 	lds	r22, 0x0757	; 0x800757 <pxCurrentTCB>
 6fa:	70 91 58 07 	lds	r23, 0x0758	; 0x800758 <pxCurrentTCB+0x1>
 6fe:	80 91 1d 07 	lds	r24, 0x071D	; 0x80071d <pxOverflowDelayedTaskList>
 702:	90 91 1e 07 	lds	r25, 0x071E	; 0x80071e <pxOverflowDelayedTaskList+0x1>
 706:	6e 5f       	subi	r22, 0xFE	; 254
 708:	7f 4f       	sbci	r23, 0xFF	; 255
 70a:	3c dd       	rcall	.-1416   	; 0x184 <vListInsert>
 70c:	16 c0       	rjmp	.+44     	; 0x73a <prvAddCurrentTaskToDelayedList+0x64>
 70e:	60 91 57 07 	lds	r22, 0x0757	; 0x800757 <pxCurrentTCB>
 712:	70 91 58 07 	lds	r23, 0x0758	; 0x800758 <pxCurrentTCB+0x1>
 716:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <pxDelayedTaskList>
 71a:	90 91 20 07 	lds	r25, 0x0720	; 0x800720 <pxDelayedTaskList+0x1>
 71e:	6e 5f       	subi	r22, 0xFE	; 254
 720:	7f 4f       	sbci	r23, 0xFF	; 255
 722:	30 dd       	rcall	.-1440   	; 0x184 <vListInsert>
 724:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 728:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 72c:	c8 17       	cp	r28, r24
 72e:	d9 07       	cpc	r29, r25
 730:	20 f4       	brcc	.+8      	; 0x73a <prvAddCurrentTaskToDelayedList+0x64>
 732:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <__data_start+0x1>
 736:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
 73a:	df 91       	pop	r29
 73c:	cf 91       	pop	r28
 73e:	08 95       	ret

00000740 <xTaskGenericCreate>:
 740:	4f 92       	push	r4
 742:	5f 92       	push	r5
 744:	6f 92       	push	r6
 746:	7f 92       	push	r7
 748:	8f 92       	push	r8
 74a:	9f 92       	push	r9
 74c:	af 92       	push	r10
 74e:	bf 92       	push	r11
 750:	cf 92       	push	r12
 752:	df 92       	push	r13
 754:	ef 92       	push	r14
 756:	ff 92       	push	r15
 758:	0f 93       	push	r16
 75a:	1f 93       	push	r17
 75c:	cf 93       	push	r28
 75e:	df 93       	push	r29
 760:	5c 01       	movw	r10, r24
 762:	4b 01       	movw	r8, r22
 764:	3a 01       	movw	r6, r20
 766:	29 01       	movw	r4, r18
 768:	81 e2       	ldi	r24, 0x21	; 33
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	ad dc       	rcall	.-1702   	; 0xc8 <pvPortMalloc>
 76e:	ec 01       	movw	r28, r24
 770:	89 2b       	or	r24, r25
 772:	09 f4       	brne	.+2      	; 0x776 <xTaskGenericCreate+0x36>
 774:	c6 c0       	rjmp	.+396    	; 0x902 <xTaskGenericCreate+0x1c2>
 776:	c1 14       	cp	r12, r1
 778:	d1 04       	cpc	r13, r1
 77a:	09 f0       	breq	.+2      	; 0x77e <xTaskGenericCreate+0x3e>
 77c:	be c0       	rjmp	.+380    	; 0x8fa <xTaskGenericCreate+0x1ba>
 77e:	c3 01       	movw	r24, r6
 780:	a3 dc       	rcall	.-1722   	; 0xc8 <pvPortMalloc>
 782:	98 8f       	std	Y+24, r25	; 0x18
 784:	8f 8b       	std	Y+23, r24	; 0x17
 786:	00 97       	sbiw	r24, 0x00	; 0
 788:	19 f4       	brne	.+6      	; 0x790 <xTaskGenericCreate+0x50>
 78a:	ce 01       	movw	r24, r28
 78c:	c1 dc       	rcall	.-1662   	; 0x110 <vPortFree>
 78e:	b9 c0       	rjmp	.+370    	; 0x902 <xTaskGenericCreate+0x1c2>
 790:	a3 01       	movw	r20, r6
 792:	65 ea       	ldi	r22, 0xA5	; 165
 794:	70 e0       	ldi	r23, 0x00	; 0
 796:	f5 d2       	rcall	.+1514   	; 0xd82 <memset>
 798:	93 01       	movw	r18, r6
 79a:	21 50       	subi	r18, 0x01	; 1
 79c:	31 09       	sbc	r19, r1
 79e:	8f 89       	ldd	r24, Y+23	; 0x17
 7a0:	98 8d       	ldd	r25, Y+24	; 0x18
 7a2:	3c 01       	movw	r6, r24
 7a4:	62 0e       	add	r6, r18
 7a6:	73 1e       	adc	r7, r19
 7a8:	48 e0       	ldi	r20, 0x08	; 8
 7aa:	50 e0       	ldi	r21, 0x00	; 0
 7ac:	b4 01       	movw	r22, r8
 7ae:	ce 01       	movw	r24, r28
 7b0:	49 96       	adiw	r24, 0x19	; 25
 7b2:	ee d2       	rcall	.+1500   	; 0xd90 <strncpy>
 7b4:	18 a2       	std	Y+32, r1	; 0x20
 7b6:	10 2f       	mov	r17, r16
 7b8:	04 30       	cpi	r16, 0x04	; 4
 7ba:	08 f0       	brcs	.+2      	; 0x7be <xTaskGenericCreate+0x7e>
 7bc:	13 e0       	ldi	r17, 0x03	; 3
 7be:	1e 8b       	std	Y+22, r17	; 0x16
 7c0:	6e 01       	movw	r12, r28
 7c2:	82 e0       	ldi	r24, 0x02	; 2
 7c4:	c8 0e       	add	r12, r24
 7c6:	d1 1c       	adc	r13, r1
 7c8:	c6 01       	movw	r24, r12
 7ca:	b1 dc       	rcall	.-1694   	; 0x12e <vListInitialiseItem>
 7cc:	ce 01       	movw	r24, r28
 7ce:	0c 96       	adiw	r24, 0x0c	; 12
 7d0:	ae dc       	rcall	.-1700   	; 0x12e <vListInitialiseItem>
 7d2:	d9 87       	std	Y+9, r29	; 0x09
 7d4:	c8 87       	std	Y+8, r28	; 0x08
 7d6:	84 e0       	ldi	r24, 0x04	; 4
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	81 1b       	sub	r24, r17
 7dc:	91 09       	sbc	r25, r1
 7de:	9d 87       	std	Y+13, r25	; 0x0d
 7e0:	8c 87       	std	Y+12, r24	; 0x0c
 7e2:	db 8b       	std	Y+19, r29	; 0x13
 7e4:	ca 8b       	std	Y+18, r28	; 0x12
 7e6:	a2 01       	movw	r20, r4
 7e8:	b5 01       	movw	r22, r10
 7ea:	c3 01       	movw	r24, r6
 7ec:	1b de       	rcall	.-970    	; 0x424 <pxPortInitialiseStack>
 7ee:	99 83       	std	Y+1, r25	; 0x01
 7f0:	88 83       	st	Y, r24
 7f2:	e1 14       	cp	r14, r1
 7f4:	f1 04       	cpc	r15, r1
 7f6:	19 f0       	breq	.+6      	; 0x7fe <xTaskGenericCreate+0xbe>
 7f8:	f7 01       	movw	r30, r14
 7fa:	d1 83       	std	Z+1, r29	; 0x01
 7fc:	c0 83       	st	Z, r28
 7fe:	0f b6       	in	r0, 0x3f	; 63
 800:	f8 94       	cli
 802:	0f 92       	push	r0
 804:	80 91 09 07 	lds	r24, 0x0709	; 0x800709 <uxCurrentNumberOfTasks>
 808:	8f 5f       	subi	r24, 0xFF	; 255
 80a:	80 93 09 07 	sts	0x0709, r24	; 0x800709 <uxCurrentNumberOfTasks>
 80e:	80 91 57 07 	lds	r24, 0x0757	; 0x800757 <pxCurrentTCB>
 812:	90 91 58 07 	lds	r25, 0x0758	; 0x800758 <pxCurrentTCB+0x1>
 816:	89 2b       	or	r24, r25
 818:	69 f5       	brne	.+90     	; 0x874 <xTaskGenericCreate+0x134>
 81a:	d0 93 58 07 	sts	0x0758, r29	; 0x800758 <pxCurrentTCB+0x1>
 81e:	c0 93 57 07 	sts	0x0757, r28	; 0x800757 <pxCurrentTCB>
 822:	80 91 09 07 	lds	r24, 0x0709	; 0x800709 <uxCurrentNumberOfTasks>
 826:	81 30       	cpi	r24, 0x01	; 1
 828:	a1 f5       	brne	.+104    	; 0x892 <xTaskGenericCreate+0x152>
 82a:	83 e3       	ldi	r24, 0x33	; 51
 82c:	97 e0       	ldi	r25, 0x07	; 7
 82e:	71 dc       	rcall	.-1822   	; 0x112 <vListInitialise>
 830:	8c e3       	ldi	r24, 0x3C	; 60
 832:	97 e0       	ldi	r25, 0x07	; 7
 834:	6e dc       	rcall	.-1828   	; 0x112 <vListInitialise>
 836:	85 e4       	ldi	r24, 0x45	; 69
 838:	97 e0       	ldi	r25, 0x07	; 7
 83a:	6b dc       	rcall	.-1834   	; 0x112 <vListInitialise>
 83c:	8e e4       	ldi	r24, 0x4E	; 78
 83e:	97 e0       	ldi	r25, 0x07	; 7
 840:	68 dc       	rcall	.-1840   	; 0x112 <vListInitialise>
 842:	8a e2       	ldi	r24, 0x2A	; 42
 844:	97 e0       	ldi	r25, 0x07	; 7
 846:	65 dc       	rcall	.-1846   	; 0x112 <vListInitialise>
 848:	81 e2       	ldi	r24, 0x21	; 33
 84a:	97 e0       	ldi	r25, 0x07	; 7
 84c:	62 dc       	rcall	.-1852   	; 0x112 <vListInitialise>
 84e:	84 e1       	ldi	r24, 0x14	; 20
 850:	97 e0       	ldi	r25, 0x07	; 7
 852:	5f dc       	rcall	.-1858   	; 0x112 <vListInitialise>
 854:	8b e0       	ldi	r24, 0x0B	; 11
 856:	97 e0       	ldi	r25, 0x07	; 7
 858:	5c dc       	rcall	.-1864   	; 0x112 <vListInitialise>
 85a:	8a e2       	ldi	r24, 0x2A	; 42
 85c:	97 e0       	ldi	r25, 0x07	; 7
 85e:	90 93 20 07 	sts	0x0720, r25	; 0x800720 <pxDelayedTaskList+0x1>
 862:	80 93 1f 07 	sts	0x071F, r24	; 0x80071f <pxDelayedTaskList>
 866:	81 e2       	ldi	r24, 0x21	; 33
 868:	97 e0       	ldi	r25, 0x07	; 7
 86a:	90 93 1e 07 	sts	0x071E, r25	; 0x80071e <pxOverflowDelayedTaskList+0x1>
 86e:	80 93 1d 07 	sts	0x071D, r24	; 0x80071d <pxOverflowDelayedTaskList>
 872:	0f c0       	rjmp	.+30     	; 0x892 <xTaskGenericCreate+0x152>
 874:	80 91 04 07 	lds	r24, 0x0704	; 0x800704 <xSchedulerRunning>
 878:	81 11       	cpse	r24, r1
 87a:	0b c0       	rjmp	.+22     	; 0x892 <xTaskGenericCreate+0x152>
 87c:	e0 91 57 07 	lds	r30, 0x0757	; 0x800757 <pxCurrentTCB>
 880:	f0 91 58 07 	lds	r31, 0x0758	; 0x800758 <pxCurrentTCB+0x1>
 884:	86 89       	ldd	r24, Z+22	; 0x16
 886:	08 17       	cp	r16, r24
 888:	20 f0       	brcs	.+8      	; 0x892 <xTaskGenericCreate+0x152>
 88a:	d0 93 58 07 	sts	0x0758, r29	; 0x800758 <pxCurrentTCB+0x1>
 88e:	c0 93 57 07 	sts	0x0757, r28	; 0x800757 <pxCurrentTCB>
 892:	8e 89       	ldd	r24, Y+22	; 0x16
 894:	90 91 06 07 	lds	r25, 0x0706	; 0x800706 <uxTopUsedPriority>
 898:	98 17       	cp	r25, r24
 89a:	10 f4       	brcc	.+4      	; 0x8a0 <xTaskGenericCreate+0x160>
 89c:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <uxTopUsedPriority>
 8a0:	90 91 ff 06 	lds	r25, 0x06FF	; 0x8006ff <uxTaskNumber>
 8a4:	9f 5f       	subi	r25, 0xFF	; 255
 8a6:	90 93 ff 06 	sts	0x06FF, r25	; 0x8006ff <uxTaskNumber>
 8aa:	90 91 05 07 	lds	r25, 0x0705	; 0x800705 <uxTopReadyPriority>
 8ae:	98 17       	cp	r25, r24
 8b0:	10 f4       	brcc	.+4      	; 0x8b6 <xTaskGenericCreate+0x176>
 8b2:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <uxTopReadyPriority>
 8b6:	90 e0       	ldi	r25, 0x00	; 0
 8b8:	9c 01       	movw	r18, r24
 8ba:	22 0f       	add	r18, r18
 8bc:	33 1f       	adc	r19, r19
 8be:	22 0f       	add	r18, r18
 8c0:	33 1f       	adc	r19, r19
 8c2:	22 0f       	add	r18, r18
 8c4:	33 1f       	adc	r19, r19
 8c6:	82 0f       	add	r24, r18
 8c8:	93 1f       	adc	r25, r19
 8ca:	b6 01       	movw	r22, r12
 8cc:	8d 5c       	subi	r24, 0xCD	; 205
 8ce:	98 4f       	sbci	r25, 0xF8	; 248
 8d0:	32 dc       	rcall	.-1948   	; 0x136 <vListInsertEnd>
 8d2:	0f 90       	pop	r0
 8d4:	0f be       	out	0x3f, r0	; 63
 8d6:	80 91 04 07 	lds	r24, 0x0704	; 0x800704 <xSchedulerRunning>
 8da:	88 23       	and	r24, r24
 8dc:	51 f0       	breq	.+20     	; 0x8f2 <xTaskGenericCreate+0x1b2>
 8de:	e0 91 57 07 	lds	r30, 0x0757	; 0x800757 <pxCurrentTCB>
 8e2:	f0 91 58 07 	lds	r31, 0x0758	; 0x800758 <pxCurrentTCB+0x1>
 8e6:	86 89       	ldd	r24, Z+22	; 0x16
 8e8:	80 17       	cp	r24, r16
 8ea:	28 f4       	brcc	.+10     	; 0x8f6 <xTaskGenericCreate+0x1b6>
 8ec:	41 de       	rcall	.-894    	; 0x570 <vPortYield>
 8ee:	81 e0       	ldi	r24, 0x01	; 1
 8f0:	09 c0       	rjmp	.+18     	; 0x904 <xTaskGenericCreate+0x1c4>
 8f2:	81 e0       	ldi	r24, 0x01	; 1
 8f4:	07 c0       	rjmp	.+14     	; 0x904 <xTaskGenericCreate+0x1c4>
 8f6:	81 e0       	ldi	r24, 0x01	; 1
 8f8:	05 c0       	rjmp	.+10     	; 0x904 <xTaskGenericCreate+0x1c4>
 8fa:	d8 8e       	std	Y+24, r13	; 0x18
 8fc:	cf 8a       	std	Y+23, r12	; 0x17
 8fe:	c6 01       	movw	r24, r12
 900:	47 cf       	rjmp	.-370    	; 0x790 <xTaskGenericCreate+0x50>
 902:	8f ef       	ldi	r24, 0xFF	; 255
 904:	df 91       	pop	r29
 906:	cf 91       	pop	r28
 908:	1f 91       	pop	r17
 90a:	0f 91       	pop	r16
 90c:	ff 90       	pop	r15
 90e:	ef 90       	pop	r14
 910:	df 90       	pop	r13
 912:	cf 90       	pop	r12
 914:	bf 90       	pop	r11
 916:	af 90       	pop	r10
 918:	9f 90       	pop	r9
 91a:	8f 90       	pop	r8
 91c:	7f 90       	pop	r7
 91e:	6f 90       	pop	r6
 920:	5f 90       	pop	r5
 922:	4f 90       	pop	r4
 924:	08 95       	ret

00000926 <vTaskStartScheduler>:
 926:	af 92       	push	r10
 928:	bf 92       	push	r11
 92a:	cf 92       	push	r12
 92c:	df 92       	push	r13
 92e:	ef 92       	push	r14
 930:	ff 92       	push	r15
 932:	0f 93       	push	r16
 934:	a1 2c       	mov	r10, r1
 936:	b1 2c       	mov	r11, r1
 938:	c1 2c       	mov	r12, r1
 93a:	d1 2c       	mov	r13, r1
 93c:	e1 2c       	mov	r14, r1
 93e:	f1 2c       	mov	r15, r1
 940:	00 e0       	ldi	r16, 0x00	; 0
 942:	20 e0       	ldi	r18, 0x00	; 0
 944:	30 e0       	ldi	r19, 0x00	; 0
 946:	45 e5       	ldi	r20, 0x55	; 85
 948:	50 e0       	ldi	r21, 0x00	; 0
 94a:	67 e1       	ldi	r22, 0x17	; 23
 94c:	71 e0       	ldi	r23, 0x01	; 1
 94e:	8f e1       	ldi	r24, 0x1F	; 31
 950:	96 e0       	ldi	r25, 0x06	; 6
 952:	f6 de       	rcall	.-532    	; 0x740 <xTaskGenericCreate>
 954:	81 30       	cpi	r24, 0x01	; 1
 956:	41 f4       	brne	.+16     	; 0x968 <vTaskStartScheduler+0x42>
 958:	f8 94       	cli
 95a:	80 93 04 07 	sts	0x0704, r24	; 0x800704 <xSchedulerRunning>
 95e:	10 92 08 07 	sts	0x0708, r1	; 0x800708 <xTickCount+0x1>
 962:	10 92 07 07 	sts	0x0707, r1	; 0x800707 <xTickCount>
 966:	ca dd       	rcall	.-1132   	; 0x4fc <xPortStartScheduler>
 968:	0f 91       	pop	r16
 96a:	ff 90       	pop	r15
 96c:	ef 90       	pop	r14
 96e:	df 90       	pop	r13
 970:	cf 90       	pop	r12
 972:	bf 90       	pop	r11
 974:	af 90       	pop	r10
 976:	08 95       	ret

00000978 <vTaskSuspendAll>:
 978:	80 91 03 07 	lds	r24, 0x0703	; 0x800703 <uxSchedulerSuspended>
 97c:	8f 5f       	subi	r24, 0xFF	; 255
 97e:	80 93 03 07 	sts	0x0703, r24	; 0x800703 <uxSchedulerSuspended>
 982:	08 95       	ret

00000984 <vTaskIncrementTick>:
 984:	0f 93       	push	r16
 986:	1f 93       	push	r17
 988:	cf 93       	push	r28
 98a:	df 93       	push	r29
 98c:	80 91 03 07 	lds	r24, 0x0703	; 0x800703 <uxSchedulerSuspended>
 990:	81 11       	cpse	r24, r1
 992:	af c0       	rjmp	.+350    	; 0xaf2 <vTaskIncrementTick+0x16e>
 994:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <xTickCount>
 998:	90 91 08 07 	lds	r25, 0x0708	; 0x800708 <xTickCount+0x1>
 99c:	01 96       	adiw	r24, 0x01	; 1
 99e:	90 93 08 07 	sts	0x0708, r25	; 0x800708 <xTickCount+0x1>
 9a2:	80 93 07 07 	sts	0x0707, r24	; 0x800707 <xTickCount>
 9a6:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <xTickCount>
 9aa:	90 91 08 07 	lds	r25, 0x0708	; 0x800708 <xTickCount+0x1>
 9ae:	89 2b       	or	r24, r25
 9b0:	99 f5       	brne	.+102    	; 0xa18 <vTaskIncrementTick+0x94>
 9b2:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <pxDelayedTaskList>
 9b6:	90 91 20 07 	lds	r25, 0x0720	; 0x800720 <pxDelayedTaskList+0x1>
 9ba:	20 91 1d 07 	lds	r18, 0x071D	; 0x80071d <pxOverflowDelayedTaskList>
 9be:	30 91 1e 07 	lds	r19, 0x071E	; 0x80071e <pxOverflowDelayedTaskList+0x1>
 9c2:	30 93 20 07 	sts	0x0720, r19	; 0x800720 <pxDelayedTaskList+0x1>
 9c6:	20 93 1f 07 	sts	0x071F, r18	; 0x80071f <pxDelayedTaskList>
 9ca:	90 93 1e 07 	sts	0x071E, r25	; 0x80071e <pxOverflowDelayedTaskList+0x1>
 9ce:	80 93 1d 07 	sts	0x071D, r24	; 0x80071d <pxOverflowDelayedTaskList>
 9d2:	80 91 00 07 	lds	r24, 0x0700	; 0x800700 <xNumOfOverflows>
 9d6:	8f 5f       	subi	r24, 0xFF	; 255
 9d8:	80 93 00 07 	sts	0x0700, r24	; 0x800700 <xNumOfOverflows>
 9dc:	e0 91 1f 07 	lds	r30, 0x071F	; 0x80071f <pxDelayedTaskList>
 9e0:	f0 91 20 07 	lds	r31, 0x0720	; 0x800720 <pxDelayedTaskList+0x1>
 9e4:	80 81       	ld	r24, Z
 9e6:	81 11       	cpse	r24, r1
 9e8:	07 c0       	rjmp	.+14     	; 0x9f8 <vTaskIncrementTick+0x74>
 9ea:	8f ef       	ldi	r24, 0xFF	; 255
 9ec:	9f ef       	ldi	r25, 0xFF	; 255
 9ee:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 9f2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 9f6:	10 c0       	rjmp	.+32     	; 0xa18 <vTaskIncrementTick+0x94>
 9f8:	e0 91 1f 07 	lds	r30, 0x071F	; 0x80071f <pxDelayedTaskList>
 9fc:	f0 91 20 07 	lds	r31, 0x0720	; 0x800720 <pxDelayedTaskList+0x1>
 a00:	05 80       	ldd	r0, Z+5	; 0x05
 a02:	f6 81       	ldd	r31, Z+6	; 0x06
 a04:	e0 2d       	mov	r30, r0
 a06:	06 80       	ldd	r0, Z+6	; 0x06
 a08:	f7 81       	ldd	r31, Z+7	; 0x07
 a0a:	e0 2d       	mov	r30, r0
 a0c:	82 81       	ldd	r24, Z+2	; 0x02
 a0e:	93 81       	ldd	r25, Z+3	; 0x03
 a10:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 a14:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 a18:	20 91 07 07 	lds	r18, 0x0707	; 0x800707 <xTickCount>
 a1c:	30 91 08 07 	lds	r19, 0x0708	; 0x800708 <xTickCount+0x1>
 a20:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 a24:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 a28:	28 17       	cp	r18, r24
 a2a:	39 07       	cpc	r19, r25
 a2c:	08 f4       	brcc	.+2      	; 0xa30 <vTaskIncrementTick+0xac>
 a2e:	66 c0       	rjmp	.+204    	; 0xafc <vTaskIncrementTick+0x178>
 a30:	e0 91 1f 07 	lds	r30, 0x071F	; 0x80071f <pxDelayedTaskList>
 a34:	f0 91 20 07 	lds	r31, 0x0720	; 0x800720 <pxDelayedTaskList+0x1>
 a38:	80 81       	ld	r24, Z
 a3a:	88 23       	and	r24, r24
 a3c:	99 f0       	breq	.+38     	; 0xa64 <vTaskIncrementTick+0xe0>
 a3e:	e0 91 1f 07 	lds	r30, 0x071F	; 0x80071f <pxDelayedTaskList>
 a42:	f0 91 20 07 	lds	r31, 0x0720	; 0x800720 <pxDelayedTaskList+0x1>
 a46:	05 80       	ldd	r0, Z+5	; 0x05
 a48:	f6 81       	ldd	r31, Z+6	; 0x06
 a4a:	e0 2d       	mov	r30, r0
 a4c:	c6 81       	ldd	r28, Z+6	; 0x06
 a4e:	d7 81       	ldd	r29, Z+7	; 0x07
 a50:	8a 81       	ldd	r24, Y+2	; 0x02
 a52:	9b 81       	ldd	r25, Y+3	; 0x03
 a54:	20 91 07 07 	lds	r18, 0x0707	; 0x800707 <xTickCount>
 a58:	30 91 08 07 	lds	r19, 0x0708	; 0x800708 <xTickCount+0x1>
 a5c:	28 17       	cp	r18, r24
 a5e:	39 07       	cpc	r19, r25
 a60:	f8 f4       	brcc	.+62     	; 0xaa0 <vTaskIncrementTick+0x11c>
 a62:	19 c0       	rjmp	.+50     	; 0xa96 <vTaskIncrementTick+0x112>
 a64:	8f ef       	ldi	r24, 0xFF	; 255
 a66:	9f ef       	ldi	r25, 0xFF	; 255
 a68:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 a6c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 a70:	45 c0       	rjmp	.+138    	; 0xafc <vTaskIncrementTick+0x178>
 a72:	e0 91 1f 07 	lds	r30, 0x071F	; 0x80071f <pxDelayedTaskList>
 a76:	f0 91 20 07 	lds	r31, 0x0720	; 0x800720 <pxDelayedTaskList+0x1>
 a7a:	05 80       	ldd	r0, Z+5	; 0x05
 a7c:	f6 81       	ldd	r31, Z+6	; 0x06
 a7e:	e0 2d       	mov	r30, r0
 a80:	c6 81       	ldd	r28, Z+6	; 0x06
 a82:	d7 81       	ldd	r29, Z+7	; 0x07
 a84:	8a 81       	ldd	r24, Y+2	; 0x02
 a86:	9b 81       	ldd	r25, Y+3	; 0x03
 a88:	20 91 07 07 	lds	r18, 0x0707	; 0x800707 <xTickCount>
 a8c:	30 91 08 07 	lds	r19, 0x0708	; 0x800708 <xTickCount+0x1>
 a90:	28 17       	cp	r18, r24
 a92:	39 07       	cpc	r19, r25
 a94:	28 f4       	brcc	.+10     	; 0xaa0 <vTaskIncrementTick+0x11c>
 a96:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 a9a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 a9e:	2e c0       	rjmp	.+92     	; 0xafc <vTaskIncrementTick+0x178>
 aa0:	8e 01       	movw	r16, r28
 aa2:	0e 5f       	subi	r16, 0xFE	; 254
 aa4:	1f 4f       	sbci	r17, 0xFF	; 255
 aa6:	c8 01       	movw	r24, r16
 aa8:	a8 db       	rcall	.-2224   	; 0x1fa <vListRemove>
 aaa:	8c 89       	ldd	r24, Y+20	; 0x14
 aac:	9d 89       	ldd	r25, Y+21	; 0x15
 aae:	89 2b       	or	r24, r25
 ab0:	19 f0       	breq	.+6      	; 0xab8 <vTaskIncrementTick+0x134>
 ab2:	ce 01       	movw	r24, r28
 ab4:	0c 96       	adiw	r24, 0x0c	; 12
 ab6:	a1 db       	rcall	.-2238   	; 0x1fa <vListRemove>
 ab8:	8e 89       	ldd	r24, Y+22	; 0x16
 aba:	90 91 05 07 	lds	r25, 0x0705	; 0x800705 <uxTopReadyPriority>
 abe:	98 17       	cp	r25, r24
 ac0:	10 f4       	brcc	.+4      	; 0xac6 <vTaskIncrementTick+0x142>
 ac2:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <uxTopReadyPriority>
 ac6:	90 e0       	ldi	r25, 0x00	; 0
 ac8:	9c 01       	movw	r18, r24
 aca:	22 0f       	add	r18, r18
 acc:	33 1f       	adc	r19, r19
 ace:	22 0f       	add	r18, r18
 ad0:	33 1f       	adc	r19, r19
 ad2:	22 0f       	add	r18, r18
 ad4:	33 1f       	adc	r19, r19
 ad6:	82 0f       	add	r24, r18
 ad8:	93 1f       	adc	r25, r19
 ada:	b8 01       	movw	r22, r16
 adc:	8d 5c       	subi	r24, 0xCD	; 205
 ade:	98 4f       	sbci	r25, 0xF8	; 248
 ae0:	2a db       	rcall	.-2476   	; 0x136 <vListInsertEnd>
 ae2:	e0 91 1f 07 	lds	r30, 0x071F	; 0x80071f <pxDelayedTaskList>
 ae6:	f0 91 20 07 	lds	r31, 0x0720	; 0x800720 <pxDelayedTaskList+0x1>
 aea:	80 81       	ld	r24, Z
 aec:	81 11       	cpse	r24, r1
 aee:	c1 cf       	rjmp	.-126    	; 0xa72 <vTaskIncrementTick+0xee>
 af0:	b9 cf       	rjmp	.-142    	; 0xa64 <vTaskIncrementTick+0xe0>
 af2:	80 91 02 07 	lds	r24, 0x0702	; 0x800702 <uxMissedTicks>
 af6:	8f 5f       	subi	r24, 0xFF	; 255
 af8:	80 93 02 07 	sts	0x0702, r24	; 0x800702 <uxMissedTicks>
 afc:	df 91       	pop	r29
 afe:	cf 91       	pop	r28
 b00:	1f 91       	pop	r17
 b02:	0f 91       	pop	r16
 b04:	08 95       	ret

00000b06 <xTaskResumeAll>:
 b06:	cf 92       	push	r12
 b08:	df 92       	push	r13
 b0a:	ef 92       	push	r14
 b0c:	ff 92       	push	r15
 b0e:	0f 93       	push	r16
 b10:	1f 93       	push	r17
 b12:	cf 93       	push	r28
 b14:	df 93       	push	r29
 b16:	0f b6       	in	r0, 0x3f	; 63
 b18:	f8 94       	cli
 b1a:	0f 92       	push	r0
 b1c:	80 91 03 07 	lds	r24, 0x0703	; 0x800703 <uxSchedulerSuspended>
 b20:	81 50       	subi	r24, 0x01	; 1
 b22:	80 93 03 07 	sts	0x0703, r24	; 0x800703 <uxSchedulerSuspended>
 b26:	80 91 03 07 	lds	r24, 0x0703	; 0x800703 <uxSchedulerSuspended>
 b2a:	81 11       	cpse	r24, r1
 b2c:	5f c0       	rjmp	.+190    	; 0xbec <xTaskResumeAll+0xe6>
 b2e:	80 91 09 07 	lds	r24, 0x0709	; 0x800709 <uxCurrentNumberOfTasks>
 b32:	81 11       	cpse	r24, r1
 b34:	2f c0       	rjmp	.+94     	; 0xb94 <xTaskResumeAll+0x8e>
 b36:	5d c0       	rjmp	.+186    	; 0xbf2 <xTaskResumeAll+0xec>
 b38:	d7 01       	movw	r26, r14
 b3a:	15 96       	adiw	r26, 0x05	; 5
 b3c:	ed 91       	ld	r30, X+
 b3e:	fc 91       	ld	r31, X
 b40:	16 97       	sbiw	r26, 0x06	; 6
 b42:	c6 81       	ldd	r28, Z+6	; 0x06
 b44:	d7 81       	ldd	r29, Z+7	; 0x07
 b46:	ce 01       	movw	r24, r28
 b48:	0c 96       	adiw	r24, 0x0c	; 12
 b4a:	57 db       	rcall	.-2386   	; 0x1fa <vListRemove>
 b4c:	8e 01       	movw	r16, r28
 b4e:	0e 5f       	subi	r16, 0xFE	; 254
 b50:	1f 4f       	sbci	r17, 0xFF	; 255
 b52:	c8 01       	movw	r24, r16
 b54:	52 db       	rcall	.-2396   	; 0x1fa <vListRemove>
 b56:	8e 89       	ldd	r24, Y+22	; 0x16
 b58:	90 91 05 07 	lds	r25, 0x0705	; 0x800705 <uxTopReadyPriority>
 b5c:	98 17       	cp	r25, r24
 b5e:	10 f4       	brcc	.+4      	; 0xb64 <xTaskResumeAll+0x5e>
 b60:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <uxTopReadyPriority>
 b64:	90 e0       	ldi	r25, 0x00	; 0
 b66:	9c 01       	movw	r18, r24
 b68:	22 0f       	add	r18, r18
 b6a:	33 1f       	adc	r19, r19
 b6c:	22 0f       	add	r18, r18
 b6e:	33 1f       	adc	r19, r19
 b70:	22 0f       	add	r18, r18
 b72:	33 1f       	adc	r19, r19
 b74:	82 0f       	add	r24, r18
 b76:	93 1f       	adc	r25, r19
 b78:	b8 01       	movw	r22, r16
 b7a:	8d 5c       	subi	r24, 0xCD	; 205
 b7c:	98 4f       	sbci	r25, 0xF8	; 248
 b7e:	db da       	rcall	.-2634   	; 0x136 <vListInsertEnd>
 b80:	e0 91 57 07 	lds	r30, 0x0757	; 0x800757 <pxCurrentTCB>
 b84:	f0 91 58 07 	lds	r31, 0x0758	; 0x800758 <pxCurrentTCB+0x1>
 b88:	9e 89       	ldd	r25, Y+22	; 0x16
 b8a:	86 89       	ldd	r24, Z+22	; 0x16
 b8c:	98 17       	cp	r25, r24
 b8e:	58 f0       	brcs	.+22     	; 0xba6 <xTaskResumeAll+0xa0>
 b90:	dc 2c       	mov	r13, r12
 b92:	09 c0       	rjmp	.+18     	; 0xba6 <xTaskResumeAll+0xa0>
 b94:	d1 2c       	mov	r13, r1
 b96:	0f 2e       	mov	r0, r31
 b98:	f4 e1       	ldi	r31, 0x14	; 20
 b9a:	ef 2e       	mov	r14, r31
 b9c:	f7 e0       	ldi	r31, 0x07	; 7
 b9e:	ff 2e       	mov	r15, r31
 ba0:	f0 2d       	mov	r31, r0
 ba2:	cc 24       	eor	r12, r12
 ba4:	c3 94       	inc	r12
 ba6:	f7 01       	movw	r30, r14
 ba8:	80 81       	ld	r24, Z
 baa:	81 11       	cpse	r24, r1
 bac:	c5 cf       	rjmp	.-118    	; 0xb38 <xTaskResumeAll+0x32>
 bae:	80 91 02 07 	lds	r24, 0x0702	; 0x800702 <uxMissedTicks>
 bb2:	88 23       	and	r24, r24
 bb4:	79 f0       	breq	.+30     	; 0xbd4 <xTaskResumeAll+0xce>
 bb6:	80 91 02 07 	lds	r24, 0x0702	; 0x800702 <uxMissedTicks>
 bba:	88 23       	and	r24, r24
 bbc:	91 f0       	breq	.+36     	; 0xbe2 <xTaskResumeAll+0xdc>
 bbe:	e2 de       	rcall	.-572    	; 0x984 <vTaskIncrementTick>
 bc0:	80 91 02 07 	lds	r24, 0x0702	; 0x800702 <uxMissedTicks>
 bc4:	81 50       	subi	r24, 0x01	; 1
 bc6:	80 93 02 07 	sts	0x0702, r24	; 0x800702 <uxMissedTicks>
 bca:	80 91 02 07 	lds	r24, 0x0702	; 0x800702 <uxMissedTicks>
 bce:	81 11       	cpse	r24, r1
 bd0:	f6 cf       	rjmp	.-20     	; 0xbbe <xTaskResumeAll+0xb8>
 bd2:	07 c0       	rjmp	.+14     	; 0xbe2 <xTaskResumeAll+0xdc>
 bd4:	f1 e0       	ldi	r31, 0x01	; 1
 bd6:	df 16       	cp	r13, r31
 bd8:	21 f0       	breq	.+8      	; 0xbe2 <xTaskResumeAll+0xdc>
 bda:	80 91 01 07 	lds	r24, 0x0701	; 0x800701 <xMissedYield>
 bde:	81 30       	cpi	r24, 0x01	; 1
 be0:	39 f4       	brne	.+14     	; 0xbf0 <xTaskResumeAll+0xea>
 be2:	10 92 01 07 	sts	0x0701, r1	; 0x800701 <xMissedYield>
 be6:	c4 dc       	rcall	.-1656   	; 0x570 <vPortYield>
 be8:	81 e0       	ldi	r24, 0x01	; 1
 bea:	03 c0       	rjmp	.+6      	; 0xbf2 <xTaskResumeAll+0xec>
 bec:	80 e0       	ldi	r24, 0x00	; 0
 bee:	01 c0       	rjmp	.+2      	; 0xbf2 <xTaskResumeAll+0xec>
 bf0:	80 e0       	ldi	r24, 0x00	; 0
 bf2:	0f 90       	pop	r0
 bf4:	0f be       	out	0x3f, r0	; 63
 bf6:	df 91       	pop	r29
 bf8:	cf 91       	pop	r28
 bfa:	1f 91       	pop	r17
 bfc:	0f 91       	pop	r16
 bfe:	ff 90       	pop	r15
 c00:	ef 90       	pop	r14
 c02:	df 90       	pop	r13
 c04:	cf 90       	pop	r12
 c06:	08 95       	ret

00000c08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
 c08:	cf 93       	push	r28
 c0a:	df 93       	push	r29
 c0c:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
 c0e:	89 2b       	or	r24, r25
 c10:	91 f0       	breq	.+36     	; 0xc36 <vTaskDelay+0x2e>
		{
			vTaskSuspendAll();
 c12:	b2 de       	rcall	.-668    	; 0x978 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 c14:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <xTickCount>
 c18:	90 91 08 07 	lds	r25, 0x0708	; 0x800708 <xTickCount+0x1>
 c1c:	c8 0f       	add	r28, r24
 c1e:	d9 1f       	adc	r29, r25

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 c20:	80 91 57 07 	lds	r24, 0x0757	; 0x800757 <pxCurrentTCB>
 c24:	90 91 58 07 	lds	r25, 0x0758	; 0x800758 <pxCurrentTCB+0x1>
 c28:	02 96       	adiw	r24, 0x02	; 2
 c2a:	e7 da       	rcall	.-2610   	; 0x1fa <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 c2c:	ce 01       	movw	r24, r28
 c2e:	53 dd       	rcall	.-1370   	; 0x6d6 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 c30:	6a df       	rcall	.-300    	; 0xb06 <xTaskResumeAll>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 c32:	81 11       	cpse	r24, r1
 c34:	01 c0       	rjmp	.+2      	; 0xc38 <vTaskDelay+0x30>
		{
			portYIELD_WITHIN_API();
 c36:	9c dc       	rcall	.-1736   	; 0x570 <vPortYield>
 c38:	df 91       	pop	r29
		}
	}
 c3a:	cf 91       	pop	r28
 c3c:	08 95       	ret

00000c3e <prvIdleTask>:
 c3e:	0f 2e       	mov	r0, r31
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 c40:	fb e0       	ldi	r31, 0x0B	; 11
 c42:	ef 2e       	mov	r14, r31
 c44:	f7 e0       	ldi	r31, 0x07	; 7
 c46:	ff 2e       	mov	r15, r31
 c48:	f0 2d       	mov	r31, r0

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 c4a:	c3 e3       	ldi	r28, 0x33	; 51
 c4c:	d7 e0       	ldi	r29, 0x07	; 7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 c4e:	80 91 0a 07 	lds	r24, 0x070A	; 0x80070a <uxTasksDeleted>
 c52:	88 23       	and	r24, r24
 c54:	29 f1       	breq	.+74     	; 0xca0 <prvIdleTask+0x62>
		{
			vTaskSuspendAll();
 c56:	90 de       	rcall	.-736    	; 0x978 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 c58:	d7 01       	movw	r26, r14
			xTaskResumeAll();
 c5a:	1c 91       	ld	r17, X
 c5c:	54 df       	rcall	.-344    	; 0xb06 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 c5e:	11 23       	and	r17, r17
 c60:	f9 f0       	breq	.+62     	; 0xca0 <prvIdleTask+0x62>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 c62:	0f b6       	in	r0, 0x3f	; 63
 c64:	f8 94       	cli
 c66:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 c68:	d7 01       	movw	r26, r14
 c6a:	15 96       	adiw	r26, 0x05	; 5
 c6c:	ed 91       	ld	r30, X+
 c6e:	fc 91       	ld	r31, X
 c70:	16 97       	sbiw	r26, 0x06	; 6
 c72:	06 81       	ldd	r16, Z+6	; 0x06
 c74:	17 81       	ldd	r17, Z+7	; 0x07
					vListRemove( &( pxTCB->xGenericListItem ) );
 c76:	c8 01       	movw	r24, r16
 c78:	02 96       	adiw	r24, 0x02	; 2
 c7a:	bf da       	rcall	.-2690   	; 0x1fa <vListRemove>
					--uxCurrentNumberOfTasks;
 c7c:	80 91 09 07 	lds	r24, 0x0709	; 0x800709 <uxCurrentNumberOfTasks>
 c80:	81 50       	subi	r24, 0x01	; 1
 c82:	80 93 09 07 	sts	0x0709, r24	; 0x800709 <uxCurrentNumberOfTasks>
					--uxTasksDeleted;
 c86:	80 91 0a 07 	lds	r24, 0x070A	; 0x80070a <uxTasksDeleted>
 c8a:	81 50       	subi	r24, 0x01	; 1
 c8c:	80 93 0a 07 	sts	0x070A, r24	; 0x80070a <uxTasksDeleted>
				}
				taskEXIT_CRITICAL();
 c90:	0f 90       	pop	r0
 c92:	0f be       	out	0x3f, r0	; 63
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 c94:	f8 01       	movw	r30, r16
 c96:	87 89       	ldd	r24, Z+23	; 0x17
 c98:	90 8d       	ldd	r25, Z+24	; 0x18
		vPortFree( pxTCB );
 c9a:	3a da       	rcall	.-2956   	; 0x110 <vPortFree>
 c9c:	c8 01       	movw	r24, r16

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 c9e:	38 da       	rcall	.-2960   	; 0x110 <vPortFree>
 ca0:	88 81       	ld	r24, Y
 ca2:	82 30       	cpi	r24, 0x02	; 2
			{
				taskYIELD();
 ca4:	a0 f2       	brcs	.-88     	; 0xc4e <prvIdleTask+0x10>
 ca6:	64 dc       	rcall	.-1848   	; 0x570 <vPortYield>
 ca8:	d2 cf       	rjmp	.-92     	; 0xc4e <prvIdleTask+0x10>

00000caa <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 caa:	80 91 03 07 	lds	r24, 0x0703	; 0x800703 <uxSchedulerSuspended>
 cae:	81 11       	cpse	r24, r1
 cb0:	13 c0       	rjmp	.+38     	; 0xcd8 <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 cb2:	80 91 05 07 	lds	r24, 0x0705	; 0x800705 <uxTopReadyPriority>
 cb6:	90 e0       	ldi	r25, 0x00	; 0
 cb8:	fc 01       	movw	r30, r24
 cba:	ee 0f       	add	r30, r30
 cbc:	ff 1f       	adc	r31, r31
 cbe:	ee 0f       	add	r30, r30
 cc0:	ff 1f       	adc	r31, r31
 cc2:	ee 0f       	add	r30, r30
 cc4:	ff 1f       	adc	r31, r31
 cc6:	8e 0f       	add	r24, r30
 cc8:	9f 1f       	adc	r25, r31
 cca:	fc 01       	movw	r30, r24
 ccc:	ed 5c       	subi	r30, 0xCD	; 205
 cce:	f8 4f       	sbci	r31, 0xF8	; 248
 cd0:	80 81       	ld	r24, Z
 cd2:	88 23       	and	r24, r24
 cd4:	29 f0       	breq	.+10     	; 0xce0 <vTaskSwitchContext+0x36>
 cd6:	1b c0       	rjmp	.+54     	; 0xd0e <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 cd8:	81 e0       	ldi	r24, 0x01	; 1
 cda:	80 93 01 07 	sts	0x0701, r24	; 0x800701 <xMissedYield>
 cde:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
 ce0:	80 91 05 07 	lds	r24, 0x0705	; 0x800705 <uxTopReadyPriority>
 ce4:	81 50       	subi	r24, 0x01	; 1
 ce6:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 cea:	80 91 05 07 	lds	r24, 0x0705	; 0x800705 <uxTopReadyPriority>
 cee:	90 e0       	ldi	r25, 0x00	; 0
 cf0:	fc 01       	movw	r30, r24
 cf2:	ee 0f       	add	r30, r30
 cf4:	ff 1f       	adc	r31, r31
 cf6:	ee 0f       	add	r30, r30
 cf8:	ff 1f       	adc	r31, r31
 cfa:	ee 0f       	add	r30, r30
 cfc:	ff 1f       	adc	r31, r31
 cfe:	8e 0f       	add	r24, r30
 d00:	9f 1f       	adc	r25, r31
 d02:	fc 01       	movw	r30, r24
 d04:	ed 5c       	subi	r30, 0xCD	; 205
 d06:	f8 4f       	sbci	r31, 0xF8	; 248
 d08:	80 81       	ld	r24, Z
 d0a:	88 23       	and	r24, r24
 d0c:	49 f3       	breq	.-46     	; 0xce0 <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 d0e:	80 91 05 07 	lds	r24, 0x0705	; 0x800705 <uxTopReadyPriority>
 d12:	90 e0       	ldi	r25, 0x00	; 0
 d14:	9c 01       	movw	r18, r24
 d16:	22 0f       	add	r18, r18
 d18:	33 1f       	adc	r19, r19
 d1a:	22 0f       	add	r18, r18
 d1c:	33 1f       	adc	r19, r19
 d1e:	22 0f       	add	r18, r18
 d20:	33 1f       	adc	r19, r19
 d22:	28 0f       	add	r18, r24
 d24:	39 1f       	adc	r19, r25
 d26:	d9 01       	movw	r26, r18
 d28:	ad 5c       	subi	r26, 0xCD	; 205
 d2a:	b8 4f       	sbci	r27, 0xF8	; 248
 d2c:	11 96       	adiw	r26, 0x01	; 1
 d2e:	ed 91       	ld	r30, X+
 d30:	fc 91       	ld	r31, X
 d32:	12 97       	sbiw	r26, 0x02	; 2
 d34:	02 80       	ldd	r0, Z+2	; 0x02
 d36:	f3 81       	ldd	r31, Z+3	; 0x03
 d38:	e0 2d       	mov	r30, r0
 d3a:	12 96       	adiw	r26, 0x02	; 2
 d3c:	fc 93       	st	X, r31
 d3e:	ee 93       	st	-X, r30
 d40:	11 97       	sbiw	r26, 0x01	; 1
 d42:	2a 5c       	subi	r18, 0xCA	; 202
 d44:	38 4f       	sbci	r19, 0xF8	; 248
 d46:	e2 17       	cp	r30, r18
 d48:	f3 07       	cpc	r31, r19
 d4a:	29 f4       	brne	.+10     	; 0xd56 <vTaskSwitchContext+0xac>
 d4c:	22 81       	ldd	r18, Z+2	; 0x02
 d4e:	33 81       	ldd	r19, Z+3	; 0x03
 d50:	fd 01       	movw	r30, r26
 d52:	32 83       	std	Z+2, r19	; 0x02
 d54:	21 83       	std	Z+1, r18	; 0x01
 d56:	fc 01       	movw	r30, r24
 d58:	ee 0f       	add	r30, r30
 d5a:	ff 1f       	adc	r31, r31
 d5c:	ee 0f       	add	r30, r30
 d5e:	ff 1f       	adc	r31, r31
 d60:	ee 0f       	add	r30, r30
 d62:	ff 1f       	adc	r31, r31
 d64:	8e 0f       	add	r24, r30
 d66:	9f 1f       	adc	r25, r31
 d68:	fc 01       	movw	r30, r24
 d6a:	ed 5c       	subi	r30, 0xCD	; 205
 d6c:	f8 4f       	sbci	r31, 0xF8	; 248
 d6e:	01 80       	ldd	r0, Z+1	; 0x01
 d70:	f2 81       	ldd	r31, Z+2	; 0x02
 d72:	e0 2d       	mov	r30, r0
 d74:	86 81       	ldd	r24, Z+6	; 0x06
 d76:	97 81       	ldd	r25, Z+7	; 0x07
 d78:	90 93 58 07 	sts	0x0758, r25	; 0x800758 <pxCurrentTCB+0x1>
 d7c:	80 93 57 07 	sts	0x0757, r24	; 0x800757 <pxCurrentTCB>
 d80:	08 95       	ret

00000d82 <memset>:
 d82:	dc 01       	movw	r26, r24
 d84:	01 c0       	rjmp	.+2      	; 0xd88 <memset+0x6>
 d86:	6d 93       	st	X+, r22
 d88:	41 50       	subi	r20, 0x01	; 1
 d8a:	50 40       	sbci	r21, 0x00	; 0
 d8c:	e0 f7       	brcc	.-8      	; 0xd86 <memset+0x4>
 d8e:	08 95       	ret

00000d90 <strncpy>:
 d90:	fb 01       	movw	r30, r22
 d92:	dc 01       	movw	r26, r24
 d94:	41 50       	subi	r20, 0x01	; 1
 d96:	50 40       	sbci	r21, 0x00	; 0
 d98:	48 f0       	brcs	.+18     	; 0xdac <strncpy+0x1c>
 d9a:	01 90       	ld	r0, Z+
 d9c:	0d 92       	st	X+, r0
 d9e:	00 20       	and	r0, r0
 da0:	c9 f7       	brne	.-14     	; 0xd94 <strncpy+0x4>
 da2:	01 c0       	rjmp	.+2      	; 0xda6 <strncpy+0x16>
 da4:	1d 92       	st	X+, r1
 da6:	41 50       	subi	r20, 0x01	; 1
 da8:	50 40       	sbci	r21, 0x00	; 0
 daa:	e0 f7       	brcc	.-8      	; 0xda4 <strncpy+0x14>
 dac:	08 95       	ret

00000dae <_exit>:
 dae:	f8 94       	cli

00000db0 <__stop_program>:
 db0:	ff cf       	rjmp	.-2      	; 0xdb0 <__stop_program>
