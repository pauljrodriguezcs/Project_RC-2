
Throttle_and_Steering.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00000ec6  00000f5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ec6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000644  0080012e  0080012e  00000f88  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f88  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fb8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000218  00000000  00000000  00000ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002596  00000000  00000000  00001210  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f50  00000000  00000000  000037a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015e1  00000000  00000000  000046f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000550  00000000  00000000  00005cd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000de2  00000000  00000000  00006228  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000137e  00000000  00000000  0000700a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000210  00000000  00000000  00008388  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	d8 c3       	rjmp	.+1968   	; 0x7e6 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 ec       	ldi	r30, 0xC6	; 198
  a0:	fe e0       	ldi	r31, 0x0E	; 14
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 32       	cpi	r26, 0x2E	; 46
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	27 e0       	ldi	r18, 0x07	; 7
  b4:	ae e2       	ldi	r26, 0x2E	; 46
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 37       	cpi	r26, 0x72	; 114
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	2a d2       	rcall	.+1108   	; 0x518 <main>
  c4:	fe c6       	rjmp	.+3580   	; 0xec2 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
  ce:	de d4       	rcall	.+2492   	; 0xa8c <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
  d0:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <__data_end>
  d4:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <__data_end+0x1>
  d8:	c9 01       	movw	r24, r18
  da:	8c 0f       	add	r24, r28
  dc:	9d 1f       	adc	r25, r29
  de:	8c 3d       	cpi	r24, 0xDC	; 220
  e0:	45 e0       	ldi	r20, 0x05	; 5
  e2:	94 07       	cpc	r25, r20
  e4:	58 f4       	brcc	.+22     	; 0xfc <pvPortMalloc+0x34>
  e6:	28 17       	cp	r18, r24
  e8:	39 07       	cpc	r19, r25
  ea:	58 f4       	brcc	.+22     	; 0x102 <pvPortMalloc+0x3a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
  ec:	e9 01       	movw	r28, r18
  ee:	c0 5d       	subi	r28, 0xD0	; 208
  f0:	de 4f       	sbci	r29, 0xFE	; 254
			xNextFreeByte += xWantedSize;			
  f2:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <__data_end+0x1>
  f6:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
  fa:	05 c0       	rjmp	.+10     	; 0x106 <pvPortMalloc+0x3e>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
  fc:	c0 e0       	ldi	r28, 0x00	; 0
  fe:	d0 e0       	ldi	r29, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <pvPortMalloc+0x3e>
 102:	c0 e0       	ldi	r28, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
 104:	d0 e0       	ldi	r29, 0x00	; 0
 106:	89 d5       	rcall	.+2834   	; 0xc1a <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
 108:	ce 01       	movw	r24, r28
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 110:	08 95       	ret

00000112 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
 112:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 114:	03 96       	adiw	r24, 0x03	; 3
 116:	92 83       	std	Z+2, r25	; 0x02
 118:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 11a:	2f ef       	ldi	r18, 0xFF	; 255
 11c:	3f ef       	ldi	r19, 0xFF	; 255
 11e:	34 83       	std	Z+4, r19	; 0x04
 120:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 122:	96 83       	std	Z+6, r25	; 0x06
 124:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 126:	90 87       	std	Z+8, r25	; 0x08
 128:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 12a:	10 82       	st	Z, r1
 12c:	08 95       	ret

0000012e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 12e:	fc 01       	movw	r30, r24
 130:	11 86       	std	Z+9, r1	; 0x09
 132:	10 86       	std	Z+8, r1	; 0x08
 134:	08 95       	ret

00000136 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	fc 01       	movw	r30, r24
 13c:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
 13e:	21 81       	ldd	r18, Z+1	; 0x01
 140:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
 142:	e9 01       	movw	r28, r18
 144:	8a 81       	ldd	r24, Y+2	; 0x02
 146:	9b 81       	ldd	r25, Y+3	; 0x03
 148:	13 96       	adiw	r26, 0x03	; 3
 14a:	9c 93       	st	X, r25
 14c:	8e 93       	st	-X, r24
 14e:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
 150:	81 81       	ldd	r24, Z+1	; 0x01
 152:	92 81       	ldd	r25, Z+2	; 0x02
 154:	15 96       	adiw	r26, 0x05	; 5
 156:	9c 93       	st	X, r25
 158:	8e 93       	st	-X, r24
 15a:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 15c:	8a 81       	ldd	r24, Y+2	; 0x02
 15e:	9b 81       	ldd	r25, Y+3	; 0x03
 160:	ec 01       	movw	r28, r24
 162:	7d 83       	std	Y+5, r23	; 0x05
 164:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 166:	e9 01       	movw	r28, r18
 168:	7b 83       	std	Y+3, r23	; 0x03
 16a:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 16c:	72 83       	std	Z+2, r23	; 0x02
 16e:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 170:	19 96       	adiw	r26, 0x09	; 9
 172:	fc 93       	st	X, r31
 174:	ee 93       	st	-X, r30
 176:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
 178:	80 81       	ld	r24, Z
 17a:	8f 5f       	subi	r24, 0xFF	; 255
 17c:	80 83       	st	Z, r24
}
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 18a:	48 81       	ld	r20, Y
 18c:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 18e:	4f 3f       	cpi	r20, 0xFF	; 255
 190:	2f ef       	ldi	r18, 0xFF	; 255
 192:	52 07       	cpc	r21, r18
 194:	31 f4       	brne	.+12     	; 0x1a2 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 196:	dc 01       	movw	r26, r24
 198:	17 96       	adiw	r26, 0x07	; 7
 19a:	ed 91       	ld	r30, X+
 19c:	fc 91       	ld	r31, X
 19e:	18 97       	sbiw	r26, 0x08	; 8
 1a0:	17 c0       	rjmp	.+46     	; 0x1d0 <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 1a2:	fc 01       	movw	r30, r24
 1a4:	33 96       	adiw	r30, 0x03	; 3
 1a6:	dc 01       	movw	r26, r24
 1a8:	15 96       	adiw	r26, 0x05	; 5
 1aa:	2d 91       	ld	r18, X+
 1ac:	3c 91       	ld	r19, X
 1ae:	16 97       	sbiw	r26, 0x06	; 6
 1b0:	d9 01       	movw	r26, r18
 1b2:	2d 91       	ld	r18, X+
 1b4:	3c 91       	ld	r19, X
 1b6:	42 17       	cp	r20, r18
 1b8:	53 07       	cpc	r21, r19
 1ba:	50 f0       	brcs	.+20     	; 0x1d0 <vListInsert+0x4c>
 1bc:	02 80       	ldd	r0, Z+2	; 0x02
 1be:	f3 81       	ldd	r31, Z+3	; 0x03
 1c0:	e0 2d       	mov	r30, r0
 1c2:	a2 81       	ldd	r26, Z+2	; 0x02
 1c4:	b3 81       	ldd	r27, Z+3	; 0x03
 1c6:	2d 91       	ld	r18, X+
 1c8:	3c 91       	ld	r19, X
 1ca:	42 17       	cp	r20, r18
 1cc:	53 07       	cpc	r21, r19
 1ce:	b0 f7       	brcc	.-20     	; 0x1bc <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 1d0:	a2 81       	ldd	r26, Z+2	; 0x02
 1d2:	b3 81       	ldd	r27, Z+3	; 0x03
 1d4:	bb 83       	std	Y+3, r27	; 0x03
 1d6:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 1d8:	15 96       	adiw	r26, 0x05	; 5
 1da:	dc 93       	st	X, r29
 1dc:	ce 93       	st	-X, r28
 1de:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
 1e0:	fd 83       	std	Y+5, r31	; 0x05
 1e2:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 1e4:	d3 83       	std	Z+3, r29	; 0x03
 1e6:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 1e8:	99 87       	std	Y+9, r25	; 0x09
 1ea:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
 1ec:	fc 01       	movw	r30, r24
 1ee:	20 81       	ld	r18, Z
 1f0:	2f 5f       	subi	r18, 0xFF	; 255
 1f2:	20 83       	st	Z, r18
}
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
 1fa:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 1fc:	a2 81       	ldd	r26, Z+2	; 0x02
 1fe:	b3 81       	ldd	r27, Z+3	; 0x03
 200:	84 81       	ldd	r24, Z+4	; 0x04
 202:	95 81       	ldd	r25, Z+5	; 0x05
 204:	15 96       	adiw	r26, 0x05	; 5
 206:	9c 93       	st	X, r25
 208:	8e 93       	st	-X, r24
 20a:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 20c:	a4 81       	ldd	r26, Z+4	; 0x04
 20e:	b5 81       	ldd	r27, Z+5	; 0x05
 210:	82 81       	ldd	r24, Z+2	; 0x02
 212:	93 81       	ldd	r25, Z+3	; 0x03
 214:	13 96       	adiw	r26, 0x03	; 3
 216:	9c 93       	st	X, r25
 218:	8e 93       	st	-X, r24
 21a:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 21c:	a0 85       	ldd	r26, Z+8	; 0x08
 21e:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 220:	11 96       	adiw	r26, 0x01	; 1
 222:	8d 91       	ld	r24, X+
 224:	9c 91       	ld	r25, X
 226:	12 97       	sbiw	r26, 0x02	; 2
 228:	e8 17       	cp	r30, r24
 22a:	f9 07       	cpc	r31, r25
 22c:	31 f4       	brne	.+12     	; 0x23a <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 22e:	84 81       	ldd	r24, Z+4	; 0x04
 230:	95 81       	ldd	r25, Z+5	; 0x05
 232:	12 96       	adiw	r26, 0x02	; 2
 234:	9c 93       	st	X, r25
 236:	8e 93       	st	-X, r24
 238:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
 23a:	11 86       	std	Z+9, r1	; 0x09
 23c:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 23e:	8c 91       	ld	r24, X
 240:	81 50       	subi	r24, 0x01	; 1
 242:	8c 93       	st	X, r24
 244:	08 95       	ret

00000246 <adc_init>:
}	

enum LEDState {led_output} led_state;

void LED_Init(){
	led_state = led_output;
 246:	80 e4       	ldi	r24, 0x40	; 64
 248:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 24c:	87 e8       	ldi	r24, 0x87	; 135
 24e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 252:	08 95       	ret

00000254 <adc_read>:
 254:	ec e7       	ldi	r30, 0x7C	; 124
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	90 81       	ld	r25, Z
 25a:	98 7f       	andi	r25, 0xF8	; 248
 25c:	87 70       	andi	r24, 0x07	; 7
 25e:	89 2b       	or	r24, r25
 260:	80 83       	st	Z, r24
 262:	ea e7       	ldi	r30, 0x7A	; 122
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	80 81       	ld	r24, Z
 268:	80 64       	ori	r24, 0x40	; 64
 26a:	80 83       	st	Z, r24
 26c:	80 81       	ld	r24, Z
 26e:	86 fd       	sbrc	r24, 6
 270:	fd cf       	rjmp	.-6      	; 0x26c <adc_read+0x18>
 272:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 276:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 27a:	08 95       	ret

0000027c <JOY_Tick>:
 27c:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <joy_state>
 280:	81 11       	cpse	r24, r1
 282:	40 c0       	rjmp	.+128    	; 0x304 <JOY_Tick+0x88>
 284:	e7 df       	rcall	.-50     	; 0x254 <adc_read>
 286:	90 93 0f 07 	sts	0x070F, r25	; 0x80070f <joystick_value+0x1>
 28a:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <joystick_value>
 28e:	9c 01       	movw	r18, r24
 290:	25 54       	subi	r18, 0x45	; 69
 292:	32 40       	sbci	r19, 0x02	; 2
 294:	2b 38       	cpi	r18, 0x8B	; 139
 296:	31 05       	cpc	r19, r1
 298:	20 f4       	brcc	.+8      	; 0x2a2 <JOY_Tick+0x26>
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	80 93 14 07 	sts	0x0714, r24	; 0x800714 <throttle>
 2a0:	31 c0       	rjmp	.+98     	; 0x304 <JOY_Tick+0x88>
 2a2:	9c 01       	movw	r18, r24
 2a4:	21 5d       	subi	r18, 0xD1	; 209
 2a6:	32 40       	sbci	r19, 0x02	; 2
 2a8:	2b 38       	cpi	r18, 0x8B	; 139
 2aa:	31 05       	cpc	r19, r1
 2ac:	20 f4       	brcc	.+8      	; 0x2b6 <JOY_Tick+0x3a>
 2ae:	82 e0       	ldi	r24, 0x02	; 2
 2b0:	80 93 14 07 	sts	0x0714, r24	; 0x800714 <throttle>
 2b4:	27 c0       	rjmp	.+78     	; 0x304 <JOY_Tick+0x88>
 2b6:	8d 35       	cpi	r24, 0x5D	; 93
 2b8:	23 e0       	ldi	r18, 0x03	; 3
 2ba:	92 07       	cpc	r25, r18
 2bc:	20 f0       	brcs	.+8      	; 0x2c6 <JOY_Tick+0x4a>
 2be:	83 e0       	ldi	r24, 0x03	; 3
 2c0:	80 93 14 07 	sts	0x0714, r24	; 0x800714 <throttle>
 2c4:	1f c0       	rjmp	.+62     	; 0x304 <JOY_Tick+0x88>
 2c6:	9c 01       	movw	r18, r24
 2c8:	2f 54       	subi	r18, 0x4F	; 79
 2ca:	31 40       	sbci	r19, 0x01	; 1
 2cc:	25 3a       	cpi	r18, 0xA5	; 165
 2ce:	31 05       	cpc	r19, r1
 2d0:	20 f4       	brcc	.+8      	; 0x2da <JOY_Tick+0x5e>
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	80 93 13 07 	sts	0x0713, r24	; 0x800713 <reverse>
 2d8:	15 c0       	rjmp	.+42     	; 0x304 <JOY_Tick+0x88>
 2da:	9c 01       	movw	r18, r24
 2dc:	28 5a       	subi	r18, 0xA8	; 168
 2de:	31 09       	sbc	r19, r1
 2e0:	26 3a       	cpi	r18, 0xA6	; 166
 2e2:	31 05       	cpc	r19, r1
 2e4:	20 f4       	brcc	.+8      	; 0x2ee <JOY_Tick+0x72>
 2e6:	82 e0       	ldi	r24, 0x02	; 2
 2e8:	80 93 13 07 	sts	0x0713, r24	; 0x800713 <reverse>
 2ec:	0b c0       	rjmp	.+22     	; 0x304 <JOY_Tick+0x88>
 2ee:	87 3a       	cpi	r24, 0xA7	; 167
 2f0:	91 05       	cpc	r25, r1
 2f2:	20 f4       	brcc	.+8      	; 0x2fc <JOY_Tick+0x80>
 2f4:	83 e0       	ldi	r24, 0x03	; 3
 2f6:	80 93 13 07 	sts	0x0713, r24	; 0x800713 <reverse>
 2fa:	04 c0       	rjmp	.+8      	; 0x304 <JOY_Tick+0x88>
 2fc:	10 92 14 07 	sts	0x0714, r1	; 0x800714 <throttle>
 300:	10 92 13 07 	sts	0x0713, r1	; 0x800713 <reverse>
 304:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <joy_state>
 308:	81 11       	cpse	r24, r1
 30a:	10 92 70 07 	sts	0x0770, r1	; 0x800770 <joy_state>
 30e:	08 95       	ret

00000310 <JOYSecTask>:
 310:	10 92 70 07 	sts	0x0770, r1	; 0x800770 <joy_state>
 314:	b3 df       	rcall	.-154    	; 0x27c <JOY_Tick>
 316:	8f e0       	ldi	r24, 0x0F	; 15
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	00 d5       	rcall	.+2560   	; 0xd1c <vTaskDelay>
 31c:	fb cf       	rjmp	.-10     	; 0x314 <JOYSecTask+0x4>

0000031e <JOYSecPulse>:
 31e:	af 92       	push	r10
 320:	bf 92       	push	r11
 322:	cf 92       	push	r12
 324:	df 92       	push	r13
 326:	ef 92       	push	r14
 328:	ff 92       	push	r15
 32a:	0f 93       	push	r16
 32c:	a1 2c       	mov	r10, r1
 32e:	b1 2c       	mov	r11, r1
 330:	c1 2c       	mov	r12, r1
 332:	d1 2c       	mov	r13, r1
 334:	e1 2c       	mov	r14, r1
 336:	f1 2c       	mov	r15, r1
 338:	08 2f       	mov	r16, r24
 33a:	20 e0       	ldi	r18, 0x00	; 0
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	45 e5       	ldi	r20, 0x55	; 85
 340:	50 e0       	ldi	r21, 0x00	; 0
 342:	62 e0       	ldi	r22, 0x02	; 2
 344:	71 e0       	ldi	r23, 0x01	; 1
 346:	88 e8       	ldi	r24, 0x88	; 136
 348:	91 e0       	ldi	r25, 0x01	; 1
 34a:	84 d2       	rcall	.+1288   	; 0x854 <xTaskGenericCreate>
 34c:	0f 91       	pop	r16
 34e:	ff 90       	pop	r15
 350:	ef 90       	pop	r14
 352:	df 90       	pop	r13
 354:	cf 90       	pop	r12
 356:	bf 90       	pop	r11
 358:	af 90       	pop	r10
 35a:	08 95       	ret

0000035c <STEERING_Tick>:
 35c:	80 91 71 07 	lds	r24, 0x0771	; 0x800771 <steering_state>
 360:	81 11       	cpse	r24, r1
 362:	19 c0       	rjmp	.+50     	; 0x396 <STEERING_Tick+0x3a>
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	76 df       	rcall	.-276    	; 0x254 <adc_read>
 368:	90 93 0d 07 	sts	0x070D, r25	; 0x80070d <steering+0x1>
 36c:	80 93 0c 07 	sts	0x070C, r24	; 0x80070c <steering>
 370:	85 34       	cpi	r24, 0x45	; 69
 372:	22 e0       	ldi	r18, 0x02	; 2
 374:	92 07       	cpc	r25, r18
 376:	20 f0       	brcs	.+8      	; 0x380 <STEERING_Tick+0x24>
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	80 93 12 07 	sts	0x0712, r24	; 0x800712 <steering_left>
 37e:	0b c0       	rjmp	.+22     	; 0x396 <STEERING_Tick+0x3a>
 380:	84 3f       	cpi	r24, 0xF4	; 244
 382:	91 40       	sbci	r25, 0x01	; 1
 384:	20 f4       	brcc	.+8      	; 0x38e <STEERING_Tick+0x32>
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <steering_right>
 38c:	04 c0       	rjmp	.+8      	; 0x396 <STEERING_Tick+0x3a>
 38e:	10 92 12 07 	sts	0x0712, r1	; 0x800712 <steering_left>
 392:	10 92 11 07 	sts	0x0711, r1	; 0x800711 <steering_right>
 396:	80 91 71 07 	lds	r24, 0x0771	; 0x800771 <steering_state>
 39a:	81 11       	cpse	r24, r1
 39c:	10 92 71 07 	sts	0x0771, r1	; 0x800771 <steering_state>
 3a0:	08 95       	ret

000003a2 <STEERINGSecTask>:
 3a2:	10 92 71 07 	sts	0x0771, r1	; 0x800771 <steering_state>
 3a6:	da df       	rcall	.-76     	; 0x35c <STEERING_Tick>
 3a8:	8f e0       	ldi	r24, 0x0F	; 15
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	b7 d4       	rcall	.+2414   	; 0xd1c <vTaskDelay>
 3ae:	fb cf       	rjmp	.-10     	; 0x3a6 <STEERINGSecTask+0x4>

000003b0 <STEERINGSecPulse>:
 3b0:	af 92       	push	r10
 3b2:	bf 92       	push	r11
 3b4:	cf 92       	push	r12
 3b6:	df 92       	push	r13
 3b8:	ef 92       	push	r14
 3ba:	ff 92       	push	r15
 3bc:	0f 93       	push	r16
 3be:	a1 2c       	mov	r10, r1
 3c0:	b1 2c       	mov	r11, r1
 3c2:	c1 2c       	mov	r12, r1
 3c4:	d1 2c       	mov	r13, r1
 3c6:	e1 2c       	mov	r14, r1
 3c8:	f1 2c       	mov	r15, r1
 3ca:	08 2f       	mov	r16, r24
 3cc:	20 e0       	ldi	r18, 0x00	; 0
 3ce:	30 e0       	ldi	r19, 0x00	; 0
 3d0:	45 e5       	ldi	r20, 0x55	; 85
 3d2:	50 e0       	ldi	r21, 0x00	; 0
 3d4:	6d e0       	ldi	r22, 0x0D	; 13
 3d6:	71 e0       	ldi	r23, 0x01	; 1
 3d8:	81 ed       	ldi	r24, 0xD1	; 209
 3da:	91 e0       	ldi	r25, 0x01	; 1
 3dc:	3b d2       	rcall	.+1142   	; 0x854 <xTaskGenericCreate>
 3de:	0f 91       	pop	r16
 3e0:	ff 90       	pop	r15
 3e2:	ef 90       	pop	r14
 3e4:	df 90       	pop	r13
 3e6:	cf 90       	pop	r12
 3e8:	bf 90       	pop	r11
 3ea:	af 90       	pop	r10
 3ec:	08 95       	ret

000003ee <LED_Tick>:
}

void LED_Tick(){
	//Actions
	switch(led_state){
 3ee:	80 91 6f 07 	lds	r24, 0x076F	; 0x80076f <led_state>
 3f2:	81 11       	cpse	r24, r1
 3f4:	64 c0       	rjmp	.+200    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
		case led_output:
			if(throttle == 1){
 3f6:	80 91 14 07 	lds	r24, 0x0714	; 0x800714 <throttle>
 3fa:	81 30       	cpi	r24, 0x01	; 1
 3fc:	41 f4       	brne	.+16     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
				led_value = led_value & 0xC0;
				led_value = led_value | 0x04;
 3fe:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <led_value>
 402:	80 7c       	andi	r24, 0xC0	; 192
 404:	84 60       	ori	r24, 0x04	; 4
 406:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <led_value>
				PORTD = led_value;
 40a:	8b b9       	out	0x0b, r24	; 11
 40c:	39 c0       	rjmp	.+114    	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
			}
			
			else if(throttle == 2){
 40e:	82 30       	cpi	r24, 0x02	; 2
 410:	41 f4       	brne	.+16     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
				led_value = led_value & 0xC0;
				led_value = led_value | 0x06;
 412:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <led_value>
 416:	80 7c       	andi	r24, 0xC0	; 192
 418:	86 60       	ori	r24, 0x06	; 6
 41a:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <led_value>
				PORTD = led_value;
 41e:	8b b9       	out	0x0b, r24	; 11
 420:	2f c0       	rjmp	.+94     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>

			}
			
			else if(throttle == 3){
 422:	83 30       	cpi	r24, 0x03	; 3
 424:	41 f4       	brne	.+16     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
				led_value = led_value & 0xC0;
				led_value = led_value | 0x07;
 426:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <led_value>
 42a:	80 7c       	andi	r24, 0xC0	; 192
 42c:	87 60       	ori	r24, 0x07	; 7
 42e:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <led_value>
				PORTD = led_value;
 432:	8b b9       	out	0x0b, r24	; 11
 434:	25 c0       	rjmp	.+74     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
			}
			
			else if(reverse == 1){
 436:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <reverse>
 43a:	81 30       	cpi	r24, 0x01	; 1
 43c:	41 f4       	brne	.+16     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
				led_value = led_value & 0xC0;
				led_value = led_value | 0x08;
 43e:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <led_value>
 442:	80 7c       	andi	r24, 0xC0	; 192
 444:	88 60       	ori	r24, 0x08	; 8
 446:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <led_value>
				PORTD = led_value;
 44a:	8b b9       	out	0x0b, r24	; 11
 44c:	19 c0       	rjmp	.+50     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
			}
			
			else if(reverse == 2){
 44e:	82 30       	cpi	r24, 0x02	; 2
 450:	41 f4       	brne	.+16     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
				led_value = led_value & 0xC0;
				led_value = led_value | 0x18;
 452:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <led_value>
 456:	80 7c       	andi	r24, 0xC0	; 192
 458:	88 61       	ori	r24, 0x18	; 24
 45a:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <led_value>
				PORTD = led_value;
 45e:	8b b9       	out	0x0b, r24	; 11
 460:	0f c0       	rjmp	.+30     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
			}
			
			else if(reverse == 3){
 462:	83 30       	cpi	r24, 0x03	; 3
 464:	41 f4       	brne	.+16     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
				led_value = led_value & 0xC0;
				led_value = led_value | 0x38;
 466:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <led_value>
 46a:	80 7c       	andi	r24, 0xC0	; 192
 46c:	88 63       	ori	r24, 0x38	; 56
 46e:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <led_value>
				PORTD = led_value;
 472:	8b b9       	out	0x0b, r24	; 11
 474:	05 c0       	rjmp	.+10     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
			}
			
			else{
				led_value = led_value & 0xC0;
 476:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <led_value>
 47a:	80 7c       	andi	r24, 0xC0	; 192
 47c:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <led_value>
			}
			
			if(steering_left == 1){
 480:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <steering_left>
 484:	81 30       	cpi	r24, 0x01	; 1
 486:	41 f4       	brne	.+16     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
				led_value = led_value & 0x3F;
				led_value = led_value | 0x40;
 488:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <led_value>
 48c:	8f 73       	andi	r24, 0x3F	; 63
 48e:	80 64       	ori	r24, 0x40	; 64
 490:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <led_value>
				PORTD = led_value;
 494:	8b b9       	out	0x0b, r24	; 11
 496:	14 c0       	rjmp	.+40     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
			}
			
			else if(steering_right){
 498:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <steering_right>
 49c:	88 23       	and	r24, r24
 49e:	41 f0       	breq	.+16     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
				led_value = led_value & 0x3F;
				led_value = led_value | 0x80;
 4a0:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <led_value>
 4a4:	8f 73       	andi	r24, 0x3F	; 63
 4a6:	80 68       	ori	r24, 0x80	; 128
 4a8:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <led_value>
				PORTD = led_value;
 4ac:	8b b9       	out	0x0b, r24	; 11
 4ae:	08 c0       	rjmp	.+16     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
			}
			
			else{
				led_value = led_value & 0x3F;
 4b0:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <led_value>
 4b4:	8f 73       	andi	r24, 0x3F	; 63
 4b6:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <led_value>
				PORTD = led_value;
 4ba:	8b b9       	out	0x0b, r24	; 11
 4bc:	01 c0       	rjmp	.+2      	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
			}
			
			break;
		
		default:
			PORTD = 0x00;
 4be:	1b b8       	out	0x0b, r1	; 11
			break;
	}
	//Transitions
	switch(led_state){
 4c0:	80 91 6f 07 	lds	r24, 0x076F	; 0x80076f <led_state>
 4c4:	81 11       	cpse	r24, r1
		case led_output:
			led_state = led_output;
			break;
		
		default:
			led_state = led_output;
 4c6:	10 92 6f 07 	sts	0x076F, r1	; 0x80076f <led_state>
 4ca:	08 95       	ret

000004cc <LEDSecTask>:
}	

enum LEDState {led_output} led_state;

void LED_Init(){
	led_state = led_output;
 4cc:	10 92 6f 07 	sts	0x076F, r1	; 0x80076f <led_state>
void LEDSecTask()
{
	LED_Init();
	for(;;)
	{
		LED_Tick();
 4d0:	8e df       	rcall	.-228    	; 0x3ee <LED_Tick>
		vTaskDelay(15);
 4d2:	8f e0       	ldi	r24, 0x0F	; 15
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	22 d4       	rcall	.+2116   	; 0xd1c <vTaskDelay>
 4d8:	fb cf       	rjmp	.-10     	; 0x4d0 <LEDSecTask+0x4>

000004da <LEDSecPulse>:
	}
}

void LEDSecPulse(unsigned portBASE_TYPE Priority)
{
 4da:	af 92       	push	r10
 4dc:	bf 92       	push	r11
 4de:	cf 92       	push	r12
 4e0:	df 92       	push	r13
 4e2:	ef 92       	push	r14
 4e4:	ff 92       	push	r15
 4e6:	0f 93       	push	r16
	xTaskCreate(LEDSecTask, (signed portCHAR *)"LEDSecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
 4e8:	a1 2c       	mov	r10, r1
 4ea:	b1 2c       	mov	r11, r1
 4ec:	c1 2c       	mov	r12, r1
 4ee:	d1 2c       	mov	r13, r1
 4f0:	e1 2c       	mov	r14, r1
 4f2:	f1 2c       	mov	r15, r1
 4f4:	08 2f       	mov	r16, r24
 4f6:	20 e0       	ldi	r18, 0x00	; 0
 4f8:	30 e0       	ldi	r19, 0x00	; 0
 4fa:	45 e5       	ldi	r20, 0x55	; 85
 4fc:	50 e0       	ldi	r21, 0x00	; 0
 4fe:	6d e1       	ldi	r22, 0x1D	; 29
 500:	71 e0       	ldi	r23, 0x01	; 1
 502:	86 e6       	ldi	r24, 0x66	; 102
 504:	92 e0       	ldi	r25, 0x02	; 2
 506:	a6 d1       	rcall	.+844    	; 0x854 <xTaskGenericCreate>
}
 508:	0f 91       	pop	r16
 50a:	ff 90       	pop	r15
 50c:	ef 90       	pop	r14
 50e:	df 90       	pop	r13
 510:	cf 90       	pop	r12
 512:	bf 90       	pop	r11
 514:	af 90       	pop	r10
 516:	08 95       	ret

00000518 <main>:
 
int main(void) 
{ 
   DDRA = 0x00; PORTA=0xFF;
 518:	11 b8       	out	0x01, r1	; 1
 51a:	8f ef       	ldi	r24, 0xFF	; 255
 51c:	82 b9       	out	0x02, r24	; 2
   DDRD = 0xFF; PORTD = 0x00;
 51e:	8a b9       	out	0x0a, r24	; 10
 520:	1b b8       	out	0x0b, r1	; 11
   adc_init();
 522:	91 de       	rcall	.-734    	; 0x246 <adc_init>
   //Start Tasks  
   JOYSecPulse(1);
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	fb de       	rcall	.-522    	; 0x31e <JOYSecPulse>
   STEERINGSecPulse(1);
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	42 df       	rcall	.-380    	; 0x3b0 <STEERINGSecPulse>
   LEDSecPulse(1);
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	d5 df       	rcall	.-86     	; 0x4da <LEDSecPulse>
 530:	84 d2       	rcall	.+1288   	; 0xa3a <vTaskStartScheduler>
    //RunSchedular 
   vTaskStartScheduler(); 
 532:	80 e0       	ldi	r24, 0x00	; 0
 534:	90 e0       	ldi	r25, 0x00	; 0
 
   return 0; 
 536:	08 95       	ret

00000538 <pxPortInitialiseStack>:
 538:	31 e1       	ldi	r19, 0x11	; 17
 53a:	fc 01       	movw	r30, r24
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 53c:	30 83       	st	Z, r19
 53e:	31 97       	sbiw	r30, 0x01	; 1
 540:	22 e2       	ldi	r18, 0x22	; 34
 542:	20 83       	st	Z, r18
 544:	31 97       	sbiw	r30, 0x01	; 1
 546:	a3 e3       	ldi	r26, 0x33	; 51
 548:	a0 83       	st	Z, r26
 54a:	31 97       	sbiw	r30, 0x01	; 1
 54c:	60 83       	st	Z, r22
 54e:	31 97       	sbiw	r30, 0x01	; 1
 550:	70 83       	st	Z, r23
 552:	31 97       	sbiw	r30, 0x01	; 1
 554:	10 82       	st	Z, r1
 556:	31 97       	sbiw	r30, 0x01	; 1
 558:	60 e8       	ldi	r22, 0x80	; 128
 55a:	60 83       	st	Z, r22
 55c:	31 97       	sbiw	r30, 0x01	; 1
 55e:	10 82       	st	Z, r1
 560:	31 97       	sbiw	r30, 0x01	; 1
 562:	62 e0       	ldi	r22, 0x02	; 2
 564:	60 83       	st	Z, r22
 566:	31 97       	sbiw	r30, 0x01	; 1
 568:	63 e0       	ldi	r22, 0x03	; 3
 56a:	60 83       	st	Z, r22
 56c:	31 97       	sbiw	r30, 0x01	; 1
 56e:	64 e0       	ldi	r22, 0x04	; 4
 570:	60 83       	st	Z, r22
 572:	31 97       	sbiw	r30, 0x01	; 1
 574:	65 e0       	ldi	r22, 0x05	; 5
 576:	60 83       	st	Z, r22
 578:	31 97       	sbiw	r30, 0x01	; 1
 57a:	66 e0       	ldi	r22, 0x06	; 6
 57c:	60 83       	st	Z, r22
 57e:	31 97       	sbiw	r30, 0x01	; 1
 580:	67 e0       	ldi	r22, 0x07	; 7
 582:	60 83       	st	Z, r22
 584:	31 97       	sbiw	r30, 0x01	; 1
 586:	68 e0       	ldi	r22, 0x08	; 8
 588:	60 83       	st	Z, r22
 58a:	31 97       	sbiw	r30, 0x01	; 1
 58c:	69 e0       	ldi	r22, 0x09	; 9
 58e:	60 83       	st	Z, r22
 590:	31 97       	sbiw	r30, 0x01	; 1
 592:	60 e1       	ldi	r22, 0x10	; 16
 594:	60 83       	st	Z, r22
 596:	31 97       	sbiw	r30, 0x01	; 1
 598:	30 83       	st	Z, r19
 59a:	31 97       	sbiw	r30, 0x01	; 1
 59c:	32 e1       	ldi	r19, 0x12	; 18
 59e:	30 83       	st	Z, r19
 5a0:	31 97       	sbiw	r30, 0x01	; 1
 5a2:	33 e1       	ldi	r19, 0x13	; 19
 5a4:	30 83       	st	Z, r19
 5a6:	31 97       	sbiw	r30, 0x01	; 1
 5a8:	34 e1       	ldi	r19, 0x14	; 20
 5aa:	30 83       	st	Z, r19
 5ac:	31 97       	sbiw	r30, 0x01	; 1
 5ae:	35 e1       	ldi	r19, 0x15	; 21
 5b0:	30 83       	st	Z, r19
 5b2:	31 97       	sbiw	r30, 0x01	; 1
 5b4:	36 e1       	ldi	r19, 0x16	; 22
 5b6:	30 83       	st	Z, r19
 5b8:	31 97       	sbiw	r30, 0x01	; 1
 5ba:	37 e1       	ldi	r19, 0x17	; 23
 5bc:	30 83       	st	Z, r19
 5be:	31 97       	sbiw	r30, 0x01	; 1
 5c0:	38 e1       	ldi	r19, 0x18	; 24
 5c2:	30 83       	st	Z, r19
 5c4:	31 97       	sbiw	r30, 0x01	; 1
 5c6:	39 e1       	ldi	r19, 0x19	; 25
 5c8:	30 83       	st	Z, r19
 5ca:	31 97       	sbiw	r30, 0x01	; 1
 5cc:	30 e2       	ldi	r19, 0x20	; 32
 5ce:	30 83       	st	Z, r19
 5d0:	31 97       	sbiw	r30, 0x01	; 1
 5d2:	31 e2       	ldi	r19, 0x21	; 33
 5d4:	30 83       	st	Z, r19
 5d6:	31 97       	sbiw	r30, 0x01	; 1
 5d8:	20 83       	st	Z, r18
 5da:	31 97       	sbiw	r30, 0x01	; 1
 5dc:	23 e2       	ldi	r18, 0x23	; 35
 5de:	20 83       	st	Z, r18
 5e0:	31 97       	sbiw	r30, 0x01	; 1
 5e2:	40 83       	st	Z, r20
 5e4:	31 97       	sbiw	r30, 0x01	; 1
 5e6:	50 83       	st	Z, r21
 5e8:	31 97       	sbiw	r30, 0x01	; 1
 5ea:	26 e2       	ldi	r18, 0x26	; 38
 5ec:	20 83       	st	Z, r18
 5ee:	31 97       	sbiw	r30, 0x01	; 1
 5f0:	27 e2       	ldi	r18, 0x27	; 39
 5f2:	20 83       	st	Z, r18
 5f4:	31 97       	sbiw	r30, 0x01	; 1
 5f6:	28 e2       	ldi	r18, 0x28	; 40
 5f8:	20 83       	st	Z, r18
 5fa:	31 97       	sbiw	r30, 0x01	; 1
 5fc:	29 e2       	ldi	r18, 0x29	; 41
 5fe:	20 83       	st	Z, r18
 600:	31 97       	sbiw	r30, 0x01	; 1
 602:	20 e3       	ldi	r18, 0x30	; 48
 604:	20 83       	st	Z, r18
 606:	31 97       	sbiw	r30, 0x01	; 1
 608:	21 e3       	ldi	r18, 0x31	; 49
 60a:	20 83       	st	Z, r18
 60c:	86 97       	sbiw	r24, 0x26	; 38
 60e:	08 95       	ret

00000610 <xPortStartScheduler>:
 610:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 614:	8c e7       	ldi	r24, 0x7C	; 124
 616:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 61a:	8b e0       	ldi	r24, 0x0B	; 11
 61c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 620:	ef e6       	ldi	r30, 0x6F	; 111
 622:	f0 e0       	ldi	r31, 0x00	; 0
 624:	80 81       	ld	r24, Z
 626:	82 60       	ori	r24, 0x02	; 2
 628:	80 83       	st	Z, r24
 62a:	a0 91 6d 07 	lds	r26, 0x076D	; 0x80076d <pxCurrentTCB>
 62e:	b0 91 6e 07 	lds	r27, 0x076E	; 0x80076e <pxCurrentTCB+0x1>
 632:	cd 91       	ld	r28, X+
 634:	cd bf       	out	0x3d, r28	; 61
 636:	dd 91       	ld	r29, X+
 638:	de bf       	out	0x3e, r29	; 62
 63a:	ff 91       	pop	r31
 63c:	ef 91       	pop	r30
 63e:	df 91       	pop	r29
 640:	cf 91       	pop	r28
 642:	bf 91       	pop	r27
 644:	af 91       	pop	r26
 646:	9f 91       	pop	r25
 648:	8f 91       	pop	r24
 64a:	7f 91       	pop	r23
 64c:	6f 91       	pop	r22
 64e:	5f 91       	pop	r21
 650:	4f 91       	pop	r20
 652:	3f 91       	pop	r19
 654:	2f 91       	pop	r18
 656:	1f 91       	pop	r17
 658:	0f 91       	pop	r16
 65a:	ff 90       	pop	r15
 65c:	ef 90       	pop	r14
 65e:	df 90       	pop	r13
 660:	cf 90       	pop	r12
 662:	bf 90       	pop	r11
 664:	af 90       	pop	r10
 666:	9f 90       	pop	r9
 668:	8f 90       	pop	r8
 66a:	7f 90       	pop	r7
 66c:	6f 90       	pop	r6
 66e:	5f 90       	pop	r5
 670:	4f 90       	pop	r4
 672:	3f 90       	pop	r3
 674:	2f 90       	pop	r2
 676:	1f 90       	pop	r1
 678:	0f 90       	pop	r0
 67a:	0f be       	out	0x3f, r0	; 63
 67c:	0f 90       	pop	r0
 67e:	08 95       	ret
 680:	81 e0       	ldi	r24, 0x01	; 1
 682:	08 95       	ret

00000684 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 684:	0f 92       	push	r0
 686:	0f b6       	in	r0, 0x3f	; 63
 688:	f8 94       	cli
 68a:	0f 92       	push	r0
 68c:	1f 92       	push	r1
 68e:	11 24       	eor	r1, r1
 690:	2f 92       	push	r2
 692:	3f 92       	push	r3
 694:	4f 92       	push	r4
 696:	5f 92       	push	r5
 698:	6f 92       	push	r6
 69a:	7f 92       	push	r7
 69c:	8f 92       	push	r8
 69e:	9f 92       	push	r9
 6a0:	af 92       	push	r10
 6a2:	bf 92       	push	r11
 6a4:	cf 92       	push	r12
 6a6:	df 92       	push	r13
 6a8:	ef 92       	push	r14
 6aa:	ff 92       	push	r15
 6ac:	0f 93       	push	r16
 6ae:	1f 93       	push	r17
 6b0:	2f 93       	push	r18
 6b2:	3f 93       	push	r19
 6b4:	4f 93       	push	r20
 6b6:	5f 93       	push	r21
 6b8:	6f 93       	push	r22
 6ba:	7f 93       	push	r23
 6bc:	8f 93       	push	r24
 6be:	9f 93       	push	r25
 6c0:	af 93       	push	r26
 6c2:	bf 93       	push	r27
 6c4:	cf 93       	push	r28
 6c6:	df 93       	push	r29
 6c8:	ef 93       	push	r30
 6ca:	ff 93       	push	r31
 6cc:	a0 91 6d 07 	lds	r26, 0x076D	; 0x80076d <pxCurrentTCB>
 6d0:	b0 91 6e 07 	lds	r27, 0x076E	; 0x80076e <pxCurrentTCB+0x1>
 6d4:	0d b6       	in	r0, 0x3d	; 61
 6d6:	0d 92       	st	X+, r0
 6d8:	0e b6       	in	r0, 0x3e	; 62
 6da:	0d 92       	st	X+, r0
	vTaskSwitchContext();
 6dc:	70 d3       	rcall	.+1760   	; 0xdbe <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 6de:	a0 91 6d 07 	lds	r26, 0x076D	; 0x80076d <pxCurrentTCB>
 6e2:	b0 91 6e 07 	lds	r27, 0x076E	; 0x80076e <pxCurrentTCB+0x1>
 6e6:	cd 91       	ld	r28, X+
 6e8:	cd bf       	out	0x3d, r28	; 61
 6ea:	dd 91       	ld	r29, X+
 6ec:	de bf       	out	0x3e, r29	; 62
 6ee:	ff 91       	pop	r31
 6f0:	ef 91       	pop	r30
 6f2:	df 91       	pop	r29
 6f4:	cf 91       	pop	r28
 6f6:	bf 91       	pop	r27
 6f8:	af 91       	pop	r26
 6fa:	9f 91       	pop	r25
 6fc:	8f 91       	pop	r24
 6fe:	7f 91       	pop	r23
 700:	6f 91       	pop	r22
 702:	5f 91       	pop	r21
 704:	4f 91       	pop	r20
 706:	3f 91       	pop	r19
 708:	2f 91       	pop	r18
 70a:	1f 91       	pop	r17
 70c:	0f 91       	pop	r16
 70e:	ff 90       	pop	r15
 710:	ef 90       	pop	r14
 712:	df 90       	pop	r13
 714:	cf 90       	pop	r12
 716:	bf 90       	pop	r11
 718:	af 90       	pop	r10
 71a:	9f 90       	pop	r9
 71c:	8f 90       	pop	r8
 71e:	7f 90       	pop	r7
 720:	6f 90       	pop	r6
 722:	5f 90       	pop	r5
 724:	4f 90       	pop	r4
 726:	3f 90       	pop	r3
 728:	2f 90       	pop	r2
 72a:	1f 90       	pop	r1
 72c:	0f 90       	pop	r0
 72e:	0f be       	out	0x3f, r0	; 63
 730:	0f 90       	pop	r0

	asm volatile ( "ret" );
 732:	08 95       	ret

00000734 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 734:	0f 92       	push	r0
 736:	0f b6       	in	r0, 0x3f	; 63
 738:	f8 94       	cli
 73a:	0f 92       	push	r0
 73c:	1f 92       	push	r1
 73e:	11 24       	eor	r1, r1
 740:	2f 92       	push	r2
 742:	3f 92       	push	r3
 744:	4f 92       	push	r4
 746:	5f 92       	push	r5
 748:	6f 92       	push	r6
 74a:	7f 92       	push	r7
 74c:	8f 92       	push	r8
 74e:	9f 92       	push	r9
 750:	af 92       	push	r10
 752:	bf 92       	push	r11
 754:	cf 92       	push	r12
 756:	df 92       	push	r13
 758:	ef 92       	push	r14
 75a:	ff 92       	push	r15
 75c:	0f 93       	push	r16
 75e:	1f 93       	push	r17
 760:	2f 93       	push	r18
 762:	3f 93       	push	r19
 764:	4f 93       	push	r20
 766:	5f 93       	push	r21
 768:	6f 93       	push	r22
 76a:	7f 93       	push	r23
 76c:	8f 93       	push	r24
 76e:	9f 93       	push	r25
 770:	af 93       	push	r26
 772:	bf 93       	push	r27
 774:	cf 93       	push	r28
 776:	df 93       	push	r29
 778:	ef 93       	push	r30
 77a:	ff 93       	push	r31
 77c:	a0 91 6d 07 	lds	r26, 0x076D	; 0x80076d <pxCurrentTCB>
 780:	b0 91 6e 07 	lds	r27, 0x076E	; 0x80076e <pxCurrentTCB+0x1>
 784:	0d b6       	in	r0, 0x3d	; 61
 786:	0d 92       	st	X+, r0
 788:	0e b6       	in	r0, 0x3e	; 62
 78a:	0d 92       	st	X+, r0
	vTaskIncrementTick();
 78c:	85 d1       	rcall	.+778    	; 0xa98 <vTaskIncrementTick>
	vTaskSwitchContext();
 78e:	17 d3       	rcall	.+1582   	; 0xdbe <vTaskSwitchContext>
 790:	a0 91 6d 07 	lds	r26, 0x076D	; 0x80076d <pxCurrentTCB>
	portRESTORE_CONTEXT();
 794:	b0 91 6e 07 	lds	r27, 0x076E	; 0x80076e <pxCurrentTCB+0x1>
 798:	cd 91       	ld	r28, X+
 79a:	cd bf       	out	0x3d, r28	; 61
 79c:	dd 91       	ld	r29, X+
 79e:	de bf       	out	0x3e, r29	; 62
 7a0:	ff 91       	pop	r31
 7a2:	ef 91       	pop	r30
 7a4:	df 91       	pop	r29
 7a6:	cf 91       	pop	r28
 7a8:	bf 91       	pop	r27
 7aa:	af 91       	pop	r26
 7ac:	9f 91       	pop	r25
 7ae:	8f 91       	pop	r24
 7b0:	7f 91       	pop	r23
 7b2:	6f 91       	pop	r22
 7b4:	5f 91       	pop	r21
 7b6:	4f 91       	pop	r20
 7b8:	3f 91       	pop	r19
 7ba:	2f 91       	pop	r18
 7bc:	1f 91       	pop	r17
 7be:	0f 91       	pop	r16
 7c0:	ff 90       	pop	r15
 7c2:	ef 90       	pop	r14
 7c4:	df 90       	pop	r13
 7c6:	cf 90       	pop	r12
 7c8:	bf 90       	pop	r11
 7ca:	af 90       	pop	r10
 7cc:	9f 90       	pop	r9
 7ce:	8f 90       	pop	r8
 7d0:	7f 90       	pop	r7
 7d2:	6f 90       	pop	r6
 7d4:	5f 90       	pop	r5
 7d6:	4f 90       	pop	r4
 7d8:	3f 90       	pop	r3
 7da:	2f 90       	pop	r2
 7dc:	1f 90       	pop	r1
 7de:	0f 90       	pop	r0
 7e0:	0f be       	out	0x3f, r0	; 63
 7e2:	0f 90       	pop	r0
 7e4:	08 95       	ret

000007e6 <__vector_13>:

	asm volatile ( "ret" );
 7e6:	a6 df       	rcall	.-180    	; 0x734 <vPortYieldFromTick>
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
		asm volatile ( "reti" );
 7e8:	18 95       	reti

000007ea <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
 7ea:	cf 93       	push	r28
 7ec:	df 93       	push	r29
 7ee:	ec 01       	movw	r28, r24
 7f0:	e0 91 6d 07 	lds	r30, 0x076D	; 0x80076d <pxCurrentTCB>
 7f4:	f0 91 6e 07 	lds	r31, 0x076E	; 0x80076e <pxCurrentTCB+0x1>
 7f8:	93 83       	std	Z+3, r25	; 0x03
 7fa:	82 83       	std	Z+2, r24	; 0x02
 7fc:	80 91 1d 07 	lds	r24, 0x071D	; 0x80071d <xTickCount>
 800:	90 91 1e 07 	lds	r25, 0x071E	; 0x80071e <xTickCount+0x1>
 804:	c8 17       	cp	r28, r24
 806:	d9 07       	cpc	r29, r25
 808:	60 f4       	brcc	.+24     	; 0x822 <prvAddCurrentTaskToDelayedList+0x38>
 80a:	60 91 6d 07 	lds	r22, 0x076D	; 0x80076d <pxCurrentTCB>
 80e:	70 91 6e 07 	lds	r23, 0x076E	; 0x80076e <pxCurrentTCB+0x1>
 812:	80 91 33 07 	lds	r24, 0x0733	; 0x800733 <pxOverflowDelayedTaskList>
 816:	90 91 34 07 	lds	r25, 0x0734	; 0x800734 <pxOverflowDelayedTaskList+0x1>
 81a:	6e 5f       	subi	r22, 0xFE	; 254
 81c:	7f 4f       	sbci	r23, 0xFF	; 255
 81e:	b2 dc       	rcall	.-1692   	; 0x184 <vListInsert>
 820:	16 c0       	rjmp	.+44     	; 0x84e <prvAddCurrentTaskToDelayedList+0x64>
 822:	60 91 6d 07 	lds	r22, 0x076D	; 0x80076d <pxCurrentTCB>
 826:	70 91 6e 07 	lds	r23, 0x076E	; 0x80076e <pxCurrentTCB+0x1>
 82a:	80 91 35 07 	lds	r24, 0x0735	; 0x800735 <pxDelayedTaskList>
 82e:	90 91 36 07 	lds	r25, 0x0736	; 0x800736 <pxDelayedTaskList+0x1>
 832:	6e 5f       	subi	r22, 0xFE	; 254
 834:	7f 4f       	sbci	r23, 0xFF	; 255
 836:	a6 dc       	rcall	.-1716   	; 0x184 <vListInsert>
 838:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 83c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 840:	c8 17       	cp	r28, r24
 842:	d9 07       	cpc	r29, r25
 844:	20 f4       	brcc	.+8      	; 0x84e <prvAddCurrentTaskToDelayedList+0x64>
 846:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <__data_start+0x1>
 84a:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
 84e:	df 91       	pop	r29
 850:	cf 91       	pop	r28
 852:	08 95       	ret

00000854 <xTaskGenericCreate>:
 854:	4f 92       	push	r4
 856:	5f 92       	push	r5
 858:	6f 92       	push	r6
 85a:	7f 92       	push	r7
 85c:	8f 92       	push	r8
 85e:	9f 92       	push	r9
 860:	af 92       	push	r10
 862:	bf 92       	push	r11
 864:	cf 92       	push	r12
 866:	df 92       	push	r13
 868:	ef 92       	push	r14
 86a:	ff 92       	push	r15
 86c:	0f 93       	push	r16
 86e:	1f 93       	push	r17
 870:	cf 93       	push	r28
 872:	df 93       	push	r29
 874:	5c 01       	movw	r10, r24
 876:	4b 01       	movw	r8, r22
 878:	3a 01       	movw	r6, r20
 87a:	29 01       	movw	r4, r18
 87c:	81 e2       	ldi	r24, 0x21	; 33
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	23 dc       	rcall	.-1978   	; 0xc8 <pvPortMalloc>
 882:	ec 01       	movw	r28, r24
 884:	89 2b       	or	r24, r25
 886:	09 f4       	brne	.+2      	; 0x88a <xTaskGenericCreate+0x36>
 888:	c6 c0       	rjmp	.+396    	; 0xa16 <xTaskGenericCreate+0x1c2>
 88a:	c1 14       	cp	r12, r1
 88c:	d1 04       	cpc	r13, r1
 88e:	09 f0       	breq	.+2      	; 0x892 <xTaskGenericCreate+0x3e>
 890:	be c0       	rjmp	.+380    	; 0xa0e <xTaskGenericCreate+0x1ba>
 892:	c3 01       	movw	r24, r6
 894:	19 dc       	rcall	.-1998   	; 0xc8 <pvPortMalloc>
 896:	98 8f       	std	Y+24, r25	; 0x18
 898:	8f 8b       	std	Y+23, r24	; 0x17
 89a:	00 97       	sbiw	r24, 0x00	; 0
 89c:	19 f4       	brne	.+6      	; 0x8a4 <xTaskGenericCreate+0x50>
 89e:	ce 01       	movw	r24, r28
 8a0:	37 dc       	rcall	.-1938   	; 0x110 <vPortFree>
 8a2:	b9 c0       	rjmp	.+370    	; 0xa16 <xTaskGenericCreate+0x1c2>
 8a4:	a3 01       	movw	r20, r6
 8a6:	65 ea       	ldi	r22, 0xA5	; 165
 8a8:	70 e0       	ldi	r23, 0x00	; 0
 8aa:	f5 d2       	rcall	.+1514   	; 0xe96 <memset>
 8ac:	93 01       	movw	r18, r6
 8ae:	21 50       	subi	r18, 0x01	; 1
 8b0:	31 09       	sbc	r19, r1
 8b2:	8f 89       	ldd	r24, Y+23	; 0x17
 8b4:	98 8d       	ldd	r25, Y+24	; 0x18
 8b6:	3c 01       	movw	r6, r24
 8b8:	62 0e       	add	r6, r18
 8ba:	73 1e       	adc	r7, r19
 8bc:	48 e0       	ldi	r20, 0x08	; 8
 8be:	50 e0       	ldi	r21, 0x00	; 0
 8c0:	b4 01       	movw	r22, r8
 8c2:	ce 01       	movw	r24, r28
 8c4:	49 96       	adiw	r24, 0x19	; 25
 8c6:	ee d2       	rcall	.+1500   	; 0xea4 <strncpy>
 8c8:	18 a2       	std	Y+32, r1	; 0x20
 8ca:	10 2f       	mov	r17, r16
 8cc:	04 30       	cpi	r16, 0x04	; 4
 8ce:	08 f0       	brcs	.+2      	; 0x8d2 <xTaskGenericCreate+0x7e>
 8d0:	13 e0       	ldi	r17, 0x03	; 3
 8d2:	1e 8b       	std	Y+22, r17	; 0x16
 8d4:	6e 01       	movw	r12, r28
 8d6:	82 e0       	ldi	r24, 0x02	; 2
 8d8:	c8 0e       	add	r12, r24
 8da:	d1 1c       	adc	r13, r1
 8dc:	c6 01       	movw	r24, r12
 8de:	27 dc       	rcall	.-1970   	; 0x12e <vListInitialiseItem>
 8e0:	ce 01       	movw	r24, r28
 8e2:	0c 96       	adiw	r24, 0x0c	; 12
 8e4:	24 dc       	rcall	.-1976   	; 0x12e <vListInitialiseItem>
 8e6:	d9 87       	std	Y+9, r29	; 0x09
 8e8:	c8 87       	std	Y+8, r28	; 0x08
 8ea:	84 e0       	ldi	r24, 0x04	; 4
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	81 1b       	sub	r24, r17
 8f0:	91 09       	sbc	r25, r1
 8f2:	9d 87       	std	Y+13, r25	; 0x0d
 8f4:	8c 87       	std	Y+12, r24	; 0x0c
 8f6:	db 8b       	std	Y+19, r29	; 0x13
 8f8:	ca 8b       	std	Y+18, r28	; 0x12
 8fa:	a2 01       	movw	r20, r4
 8fc:	b5 01       	movw	r22, r10
 8fe:	c3 01       	movw	r24, r6
 900:	1b de       	rcall	.-970    	; 0x538 <pxPortInitialiseStack>
 902:	99 83       	std	Y+1, r25	; 0x01
 904:	88 83       	st	Y, r24
 906:	e1 14       	cp	r14, r1
 908:	f1 04       	cpc	r15, r1
 90a:	19 f0       	breq	.+6      	; 0x912 <xTaskGenericCreate+0xbe>
 90c:	f7 01       	movw	r30, r14
 90e:	d1 83       	std	Z+1, r29	; 0x01
 910:	c0 83       	st	Z, r28
 912:	0f b6       	in	r0, 0x3f	; 63
 914:	f8 94       	cli
 916:	0f 92       	push	r0
 918:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <uxCurrentNumberOfTasks>
 91c:	8f 5f       	subi	r24, 0xFF	; 255
 91e:	80 93 1f 07 	sts	0x071F, r24	; 0x80071f <uxCurrentNumberOfTasks>
 922:	80 91 6d 07 	lds	r24, 0x076D	; 0x80076d <pxCurrentTCB>
 926:	90 91 6e 07 	lds	r25, 0x076E	; 0x80076e <pxCurrentTCB+0x1>
 92a:	89 2b       	or	r24, r25
 92c:	69 f5       	brne	.+90     	; 0x988 <xTaskGenericCreate+0x134>
 92e:	d0 93 6e 07 	sts	0x076E, r29	; 0x80076e <pxCurrentTCB+0x1>
 932:	c0 93 6d 07 	sts	0x076D, r28	; 0x80076d <pxCurrentTCB>
 936:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <uxCurrentNumberOfTasks>
 93a:	81 30       	cpi	r24, 0x01	; 1
 93c:	a1 f5       	brne	.+104    	; 0x9a6 <xTaskGenericCreate+0x152>
 93e:	89 e4       	ldi	r24, 0x49	; 73
 940:	97 e0       	ldi	r25, 0x07	; 7
 942:	e7 db       	rcall	.-2098   	; 0x112 <vListInitialise>
 944:	82 e5       	ldi	r24, 0x52	; 82
 946:	97 e0       	ldi	r25, 0x07	; 7
 948:	e4 db       	rcall	.-2104   	; 0x112 <vListInitialise>
 94a:	8b e5       	ldi	r24, 0x5B	; 91
 94c:	97 e0       	ldi	r25, 0x07	; 7
 94e:	e1 db       	rcall	.-2110   	; 0x112 <vListInitialise>
 950:	84 e6       	ldi	r24, 0x64	; 100
 952:	97 e0       	ldi	r25, 0x07	; 7
 954:	de db       	rcall	.-2116   	; 0x112 <vListInitialise>
 956:	80 e4       	ldi	r24, 0x40	; 64
 958:	97 e0       	ldi	r25, 0x07	; 7
 95a:	db db       	rcall	.-2122   	; 0x112 <vListInitialise>
 95c:	87 e3       	ldi	r24, 0x37	; 55
 95e:	97 e0       	ldi	r25, 0x07	; 7
 960:	d8 db       	rcall	.-2128   	; 0x112 <vListInitialise>
 962:	8a e2       	ldi	r24, 0x2A	; 42
 964:	97 e0       	ldi	r25, 0x07	; 7
 966:	d5 db       	rcall	.-2134   	; 0x112 <vListInitialise>
 968:	81 e2       	ldi	r24, 0x21	; 33
 96a:	97 e0       	ldi	r25, 0x07	; 7
 96c:	d2 db       	rcall	.-2140   	; 0x112 <vListInitialise>
 96e:	80 e4       	ldi	r24, 0x40	; 64
 970:	97 e0       	ldi	r25, 0x07	; 7
 972:	90 93 36 07 	sts	0x0736, r25	; 0x800736 <pxDelayedTaskList+0x1>
 976:	80 93 35 07 	sts	0x0735, r24	; 0x800735 <pxDelayedTaskList>
 97a:	87 e3       	ldi	r24, 0x37	; 55
 97c:	97 e0       	ldi	r25, 0x07	; 7
 97e:	90 93 34 07 	sts	0x0734, r25	; 0x800734 <pxOverflowDelayedTaskList+0x1>
 982:	80 93 33 07 	sts	0x0733, r24	; 0x800733 <pxOverflowDelayedTaskList>
 986:	0f c0       	rjmp	.+30     	; 0x9a6 <xTaskGenericCreate+0x152>
 988:	80 91 1a 07 	lds	r24, 0x071A	; 0x80071a <xSchedulerRunning>
 98c:	81 11       	cpse	r24, r1
 98e:	0b c0       	rjmp	.+22     	; 0x9a6 <xTaskGenericCreate+0x152>
 990:	e0 91 6d 07 	lds	r30, 0x076D	; 0x80076d <pxCurrentTCB>
 994:	f0 91 6e 07 	lds	r31, 0x076E	; 0x80076e <pxCurrentTCB+0x1>
 998:	86 89       	ldd	r24, Z+22	; 0x16
 99a:	08 17       	cp	r16, r24
 99c:	20 f0       	brcs	.+8      	; 0x9a6 <xTaskGenericCreate+0x152>
 99e:	d0 93 6e 07 	sts	0x076E, r29	; 0x80076e <pxCurrentTCB+0x1>
 9a2:	c0 93 6d 07 	sts	0x076D, r28	; 0x80076d <pxCurrentTCB>
 9a6:	8e 89       	ldd	r24, Y+22	; 0x16
 9a8:	90 91 1c 07 	lds	r25, 0x071C	; 0x80071c <uxTopUsedPriority>
 9ac:	98 17       	cp	r25, r24
 9ae:	10 f4       	brcc	.+4      	; 0x9b4 <xTaskGenericCreate+0x160>
 9b0:	80 93 1c 07 	sts	0x071C, r24	; 0x80071c <uxTopUsedPriority>
 9b4:	90 91 15 07 	lds	r25, 0x0715	; 0x800715 <uxTaskNumber>
 9b8:	9f 5f       	subi	r25, 0xFF	; 255
 9ba:	90 93 15 07 	sts	0x0715, r25	; 0x800715 <uxTaskNumber>
 9be:	90 91 1b 07 	lds	r25, 0x071B	; 0x80071b <uxTopReadyPriority>
 9c2:	98 17       	cp	r25, r24
 9c4:	10 f4       	brcc	.+4      	; 0x9ca <xTaskGenericCreate+0x176>
 9c6:	80 93 1b 07 	sts	0x071B, r24	; 0x80071b <uxTopReadyPriority>
 9ca:	90 e0       	ldi	r25, 0x00	; 0
 9cc:	9c 01       	movw	r18, r24
 9ce:	22 0f       	add	r18, r18
 9d0:	33 1f       	adc	r19, r19
 9d2:	22 0f       	add	r18, r18
 9d4:	33 1f       	adc	r19, r19
 9d6:	22 0f       	add	r18, r18
 9d8:	33 1f       	adc	r19, r19
 9da:	82 0f       	add	r24, r18
 9dc:	93 1f       	adc	r25, r19
 9de:	b6 01       	movw	r22, r12
 9e0:	87 5b       	subi	r24, 0xB7	; 183
 9e2:	98 4f       	sbci	r25, 0xF8	; 248
 9e4:	a8 db       	rcall	.-2224   	; 0x136 <vListInsertEnd>
 9e6:	0f 90       	pop	r0
 9e8:	0f be       	out	0x3f, r0	; 63
 9ea:	80 91 1a 07 	lds	r24, 0x071A	; 0x80071a <xSchedulerRunning>
 9ee:	88 23       	and	r24, r24
 9f0:	51 f0       	breq	.+20     	; 0xa06 <xTaskGenericCreate+0x1b2>
 9f2:	e0 91 6d 07 	lds	r30, 0x076D	; 0x80076d <pxCurrentTCB>
 9f6:	f0 91 6e 07 	lds	r31, 0x076E	; 0x80076e <pxCurrentTCB+0x1>
 9fa:	86 89       	ldd	r24, Z+22	; 0x16
 9fc:	80 17       	cp	r24, r16
 9fe:	28 f4       	brcc	.+10     	; 0xa0a <xTaskGenericCreate+0x1b6>
 a00:	41 de       	rcall	.-894    	; 0x684 <vPortYield>
 a02:	81 e0       	ldi	r24, 0x01	; 1
 a04:	09 c0       	rjmp	.+18     	; 0xa18 <xTaskGenericCreate+0x1c4>
 a06:	81 e0       	ldi	r24, 0x01	; 1
 a08:	07 c0       	rjmp	.+14     	; 0xa18 <xTaskGenericCreate+0x1c4>
 a0a:	81 e0       	ldi	r24, 0x01	; 1
 a0c:	05 c0       	rjmp	.+10     	; 0xa18 <xTaskGenericCreate+0x1c4>
 a0e:	d8 8e       	std	Y+24, r13	; 0x18
 a10:	cf 8a       	std	Y+23, r12	; 0x17
 a12:	c6 01       	movw	r24, r12
 a14:	47 cf       	rjmp	.-370    	; 0x8a4 <xTaskGenericCreate+0x50>
 a16:	8f ef       	ldi	r24, 0xFF	; 255
 a18:	df 91       	pop	r29
 a1a:	cf 91       	pop	r28
 a1c:	1f 91       	pop	r17
 a1e:	0f 91       	pop	r16
 a20:	ff 90       	pop	r15
 a22:	ef 90       	pop	r14
 a24:	df 90       	pop	r13
 a26:	cf 90       	pop	r12
 a28:	bf 90       	pop	r11
 a2a:	af 90       	pop	r10
 a2c:	9f 90       	pop	r9
 a2e:	8f 90       	pop	r8
 a30:	7f 90       	pop	r7
 a32:	6f 90       	pop	r6
 a34:	5f 90       	pop	r5
 a36:	4f 90       	pop	r4
 a38:	08 95       	ret

00000a3a <vTaskStartScheduler>:
 a3a:	af 92       	push	r10
 a3c:	bf 92       	push	r11
 a3e:	cf 92       	push	r12
 a40:	df 92       	push	r13
 a42:	ef 92       	push	r14
 a44:	ff 92       	push	r15
 a46:	0f 93       	push	r16
 a48:	a1 2c       	mov	r10, r1
 a4a:	b1 2c       	mov	r11, r1
 a4c:	c1 2c       	mov	r12, r1
 a4e:	d1 2c       	mov	r13, r1
 a50:	e1 2c       	mov	r14, r1
 a52:	f1 2c       	mov	r15, r1
 a54:	00 e0       	ldi	r16, 0x00	; 0
 a56:	20 e0       	ldi	r18, 0x00	; 0
 a58:	30 e0       	ldi	r19, 0x00	; 0
 a5a:	45 e5       	ldi	r20, 0x55	; 85
 a5c:	50 e0       	ldi	r21, 0x00	; 0
 a5e:	68 e2       	ldi	r22, 0x28	; 40
 a60:	71 e0       	ldi	r23, 0x01	; 1
 a62:	89 ea       	ldi	r24, 0xA9	; 169
 a64:	96 e0       	ldi	r25, 0x06	; 6
 a66:	f6 de       	rcall	.-532    	; 0x854 <xTaskGenericCreate>
 a68:	81 30       	cpi	r24, 0x01	; 1
 a6a:	41 f4       	brne	.+16     	; 0xa7c <vTaskStartScheduler+0x42>
 a6c:	f8 94       	cli
 a6e:	80 93 1a 07 	sts	0x071A, r24	; 0x80071a <xSchedulerRunning>
 a72:	10 92 1e 07 	sts	0x071E, r1	; 0x80071e <xTickCount+0x1>
 a76:	10 92 1d 07 	sts	0x071D, r1	; 0x80071d <xTickCount>
 a7a:	ca dd       	rcall	.-1132   	; 0x610 <xPortStartScheduler>
 a7c:	0f 91       	pop	r16
 a7e:	ff 90       	pop	r15
 a80:	ef 90       	pop	r14
 a82:	df 90       	pop	r13
 a84:	cf 90       	pop	r12
 a86:	bf 90       	pop	r11
 a88:	af 90       	pop	r10
 a8a:	08 95       	ret

00000a8c <vTaskSuspendAll>:
 a8c:	80 91 19 07 	lds	r24, 0x0719	; 0x800719 <uxSchedulerSuspended>
 a90:	8f 5f       	subi	r24, 0xFF	; 255
 a92:	80 93 19 07 	sts	0x0719, r24	; 0x800719 <uxSchedulerSuspended>
 a96:	08 95       	ret

00000a98 <vTaskIncrementTick>:
 a98:	0f 93       	push	r16
 a9a:	1f 93       	push	r17
 a9c:	cf 93       	push	r28
 a9e:	df 93       	push	r29
 aa0:	80 91 19 07 	lds	r24, 0x0719	; 0x800719 <uxSchedulerSuspended>
 aa4:	81 11       	cpse	r24, r1
 aa6:	af c0       	rjmp	.+350    	; 0xc06 <vTaskIncrementTick+0x16e>
 aa8:	80 91 1d 07 	lds	r24, 0x071D	; 0x80071d <xTickCount>
 aac:	90 91 1e 07 	lds	r25, 0x071E	; 0x80071e <xTickCount+0x1>
 ab0:	01 96       	adiw	r24, 0x01	; 1
 ab2:	90 93 1e 07 	sts	0x071E, r25	; 0x80071e <xTickCount+0x1>
 ab6:	80 93 1d 07 	sts	0x071D, r24	; 0x80071d <xTickCount>
 aba:	80 91 1d 07 	lds	r24, 0x071D	; 0x80071d <xTickCount>
 abe:	90 91 1e 07 	lds	r25, 0x071E	; 0x80071e <xTickCount+0x1>
 ac2:	89 2b       	or	r24, r25
 ac4:	99 f5       	brne	.+102    	; 0xb2c <vTaskIncrementTick+0x94>
 ac6:	80 91 35 07 	lds	r24, 0x0735	; 0x800735 <pxDelayedTaskList>
 aca:	90 91 36 07 	lds	r25, 0x0736	; 0x800736 <pxDelayedTaskList+0x1>
 ace:	20 91 33 07 	lds	r18, 0x0733	; 0x800733 <pxOverflowDelayedTaskList>
 ad2:	30 91 34 07 	lds	r19, 0x0734	; 0x800734 <pxOverflowDelayedTaskList+0x1>
 ad6:	30 93 36 07 	sts	0x0736, r19	; 0x800736 <pxDelayedTaskList+0x1>
 ada:	20 93 35 07 	sts	0x0735, r18	; 0x800735 <pxDelayedTaskList>
 ade:	90 93 34 07 	sts	0x0734, r25	; 0x800734 <pxOverflowDelayedTaskList+0x1>
 ae2:	80 93 33 07 	sts	0x0733, r24	; 0x800733 <pxOverflowDelayedTaskList>
 ae6:	80 91 16 07 	lds	r24, 0x0716	; 0x800716 <xNumOfOverflows>
 aea:	8f 5f       	subi	r24, 0xFF	; 255
 aec:	80 93 16 07 	sts	0x0716, r24	; 0x800716 <xNumOfOverflows>
 af0:	e0 91 35 07 	lds	r30, 0x0735	; 0x800735 <pxDelayedTaskList>
 af4:	f0 91 36 07 	lds	r31, 0x0736	; 0x800736 <pxDelayedTaskList+0x1>
 af8:	80 81       	ld	r24, Z
 afa:	81 11       	cpse	r24, r1
 afc:	07 c0       	rjmp	.+14     	; 0xb0c <vTaskIncrementTick+0x74>
 afe:	8f ef       	ldi	r24, 0xFF	; 255
 b00:	9f ef       	ldi	r25, 0xFF	; 255
 b02:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 b06:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 b0a:	10 c0       	rjmp	.+32     	; 0xb2c <vTaskIncrementTick+0x94>
 b0c:	e0 91 35 07 	lds	r30, 0x0735	; 0x800735 <pxDelayedTaskList>
 b10:	f0 91 36 07 	lds	r31, 0x0736	; 0x800736 <pxDelayedTaskList+0x1>
 b14:	05 80       	ldd	r0, Z+5	; 0x05
 b16:	f6 81       	ldd	r31, Z+6	; 0x06
 b18:	e0 2d       	mov	r30, r0
 b1a:	06 80       	ldd	r0, Z+6	; 0x06
 b1c:	f7 81       	ldd	r31, Z+7	; 0x07
 b1e:	e0 2d       	mov	r30, r0
 b20:	82 81       	ldd	r24, Z+2	; 0x02
 b22:	93 81       	ldd	r25, Z+3	; 0x03
 b24:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 b28:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 b2c:	20 91 1d 07 	lds	r18, 0x071D	; 0x80071d <xTickCount>
 b30:	30 91 1e 07 	lds	r19, 0x071E	; 0x80071e <xTickCount+0x1>
 b34:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 b38:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 b3c:	28 17       	cp	r18, r24
 b3e:	39 07       	cpc	r19, r25
 b40:	08 f4       	brcc	.+2      	; 0xb44 <vTaskIncrementTick+0xac>
 b42:	66 c0       	rjmp	.+204    	; 0xc10 <vTaskIncrementTick+0x178>
 b44:	e0 91 35 07 	lds	r30, 0x0735	; 0x800735 <pxDelayedTaskList>
 b48:	f0 91 36 07 	lds	r31, 0x0736	; 0x800736 <pxDelayedTaskList+0x1>
 b4c:	80 81       	ld	r24, Z
 b4e:	88 23       	and	r24, r24
 b50:	99 f0       	breq	.+38     	; 0xb78 <vTaskIncrementTick+0xe0>
 b52:	e0 91 35 07 	lds	r30, 0x0735	; 0x800735 <pxDelayedTaskList>
 b56:	f0 91 36 07 	lds	r31, 0x0736	; 0x800736 <pxDelayedTaskList+0x1>
 b5a:	05 80       	ldd	r0, Z+5	; 0x05
 b5c:	f6 81       	ldd	r31, Z+6	; 0x06
 b5e:	e0 2d       	mov	r30, r0
 b60:	c6 81       	ldd	r28, Z+6	; 0x06
 b62:	d7 81       	ldd	r29, Z+7	; 0x07
 b64:	8a 81       	ldd	r24, Y+2	; 0x02
 b66:	9b 81       	ldd	r25, Y+3	; 0x03
 b68:	20 91 1d 07 	lds	r18, 0x071D	; 0x80071d <xTickCount>
 b6c:	30 91 1e 07 	lds	r19, 0x071E	; 0x80071e <xTickCount+0x1>
 b70:	28 17       	cp	r18, r24
 b72:	39 07       	cpc	r19, r25
 b74:	f8 f4       	brcc	.+62     	; 0xbb4 <vTaskIncrementTick+0x11c>
 b76:	19 c0       	rjmp	.+50     	; 0xbaa <vTaskIncrementTick+0x112>
 b78:	8f ef       	ldi	r24, 0xFF	; 255
 b7a:	9f ef       	ldi	r25, 0xFF	; 255
 b7c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 b80:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 b84:	45 c0       	rjmp	.+138    	; 0xc10 <vTaskIncrementTick+0x178>
 b86:	e0 91 35 07 	lds	r30, 0x0735	; 0x800735 <pxDelayedTaskList>
 b8a:	f0 91 36 07 	lds	r31, 0x0736	; 0x800736 <pxDelayedTaskList+0x1>
 b8e:	05 80       	ldd	r0, Z+5	; 0x05
 b90:	f6 81       	ldd	r31, Z+6	; 0x06
 b92:	e0 2d       	mov	r30, r0
 b94:	c6 81       	ldd	r28, Z+6	; 0x06
 b96:	d7 81       	ldd	r29, Z+7	; 0x07
 b98:	8a 81       	ldd	r24, Y+2	; 0x02
 b9a:	9b 81       	ldd	r25, Y+3	; 0x03
 b9c:	20 91 1d 07 	lds	r18, 0x071D	; 0x80071d <xTickCount>
 ba0:	30 91 1e 07 	lds	r19, 0x071E	; 0x80071e <xTickCount+0x1>
 ba4:	28 17       	cp	r18, r24
 ba6:	39 07       	cpc	r19, r25
 ba8:	28 f4       	brcc	.+10     	; 0xbb4 <vTaskIncrementTick+0x11c>
 baa:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 bae:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 bb2:	2e c0       	rjmp	.+92     	; 0xc10 <vTaskIncrementTick+0x178>
 bb4:	8e 01       	movw	r16, r28
 bb6:	0e 5f       	subi	r16, 0xFE	; 254
 bb8:	1f 4f       	sbci	r17, 0xFF	; 255
 bba:	c8 01       	movw	r24, r16
 bbc:	1e db       	rcall	.-2500   	; 0x1fa <vListRemove>
 bbe:	8c 89       	ldd	r24, Y+20	; 0x14
 bc0:	9d 89       	ldd	r25, Y+21	; 0x15
 bc2:	89 2b       	or	r24, r25
 bc4:	19 f0       	breq	.+6      	; 0xbcc <vTaskIncrementTick+0x134>
 bc6:	ce 01       	movw	r24, r28
 bc8:	0c 96       	adiw	r24, 0x0c	; 12
 bca:	17 db       	rcall	.-2514   	; 0x1fa <vListRemove>
 bcc:	8e 89       	ldd	r24, Y+22	; 0x16
 bce:	90 91 1b 07 	lds	r25, 0x071B	; 0x80071b <uxTopReadyPriority>
 bd2:	98 17       	cp	r25, r24
 bd4:	10 f4       	brcc	.+4      	; 0xbda <vTaskIncrementTick+0x142>
 bd6:	80 93 1b 07 	sts	0x071B, r24	; 0x80071b <uxTopReadyPriority>
 bda:	90 e0       	ldi	r25, 0x00	; 0
 bdc:	9c 01       	movw	r18, r24
 bde:	22 0f       	add	r18, r18
 be0:	33 1f       	adc	r19, r19
 be2:	22 0f       	add	r18, r18
 be4:	33 1f       	adc	r19, r19
 be6:	22 0f       	add	r18, r18
 be8:	33 1f       	adc	r19, r19
 bea:	82 0f       	add	r24, r18
 bec:	93 1f       	adc	r25, r19
 bee:	b8 01       	movw	r22, r16
 bf0:	87 5b       	subi	r24, 0xB7	; 183
 bf2:	98 4f       	sbci	r25, 0xF8	; 248
 bf4:	a0 da       	rcall	.-2752   	; 0x136 <vListInsertEnd>
 bf6:	e0 91 35 07 	lds	r30, 0x0735	; 0x800735 <pxDelayedTaskList>
 bfa:	f0 91 36 07 	lds	r31, 0x0736	; 0x800736 <pxDelayedTaskList+0x1>
 bfe:	80 81       	ld	r24, Z
 c00:	81 11       	cpse	r24, r1
 c02:	c1 cf       	rjmp	.-126    	; 0xb86 <vTaskIncrementTick+0xee>
 c04:	b9 cf       	rjmp	.-142    	; 0xb78 <vTaskIncrementTick+0xe0>
 c06:	80 91 18 07 	lds	r24, 0x0718	; 0x800718 <uxMissedTicks>
 c0a:	8f 5f       	subi	r24, 0xFF	; 255
 c0c:	80 93 18 07 	sts	0x0718, r24	; 0x800718 <uxMissedTicks>
 c10:	df 91       	pop	r29
 c12:	cf 91       	pop	r28
 c14:	1f 91       	pop	r17
 c16:	0f 91       	pop	r16
 c18:	08 95       	ret

00000c1a <xTaskResumeAll>:
 c1a:	cf 92       	push	r12
 c1c:	df 92       	push	r13
 c1e:	ef 92       	push	r14
 c20:	ff 92       	push	r15
 c22:	0f 93       	push	r16
 c24:	1f 93       	push	r17
 c26:	cf 93       	push	r28
 c28:	df 93       	push	r29
 c2a:	0f b6       	in	r0, 0x3f	; 63
 c2c:	f8 94       	cli
 c2e:	0f 92       	push	r0
 c30:	80 91 19 07 	lds	r24, 0x0719	; 0x800719 <uxSchedulerSuspended>
 c34:	81 50       	subi	r24, 0x01	; 1
 c36:	80 93 19 07 	sts	0x0719, r24	; 0x800719 <uxSchedulerSuspended>
 c3a:	80 91 19 07 	lds	r24, 0x0719	; 0x800719 <uxSchedulerSuspended>
 c3e:	81 11       	cpse	r24, r1
 c40:	5f c0       	rjmp	.+190    	; 0xd00 <xTaskResumeAll+0xe6>
 c42:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <uxCurrentNumberOfTasks>
 c46:	81 11       	cpse	r24, r1
 c48:	2f c0       	rjmp	.+94     	; 0xca8 <xTaskResumeAll+0x8e>
 c4a:	5d c0       	rjmp	.+186    	; 0xd06 <xTaskResumeAll+0xec>
 c4c:	d7 01       	movw	r26, r14
 c4e:	15 96       	adiw	r26, 0x05	; 5
 c50:	ed 91       	ld	r30, X+
 c52:	fc 91       	ld	r31, X
 c54:	16 97       	sbiw	r26, 0x06	; 6
 c56:	c6 81       	ldd	r28, Z+6	; 0x06
 c58:	d7 81       	ldd	r29, Z+7	; 0x07
 c5a:	ce 01       	movw	r24, r28
 c5c:	0c 96       	adiw	r24, 0x0c	; 12
 c5e:	cd da       	rcall	.-2662   	; 0x1fa <vListRemove>
 c60:	8e 01       	movw	r16, r28
 c62:	0e 5f       	subi	r16, 0xFE	; 254
 c64:	1f 4f       	sbci	r17, 0xFF	; 255
 c66:	c8 01       	movw	r24, r16
 c68:	c8 da       	rcall	.-2672   	; 0x1fa <vListRemove>
 c6a:	8e 89       	ldd	r24, Y+22	; 0x16
 c6c:	90 91 1b 07 	lds	r25, 0x071B	; 0x80071b <uxTopReadyPriority>
 c70:	98 17       	cp	r25, r24
 c72:	10 f4       	brcc	.+4      	; 0xc78 <xTaskResumeAll+0x5e>
 c74:	80 93 1b 07 	sts	0x071B, r24	; 0x80071b <uxTopReadyPriority>
 c78:	90 e0       	ldi	r25, 0x00	; 0
 c7a:	9c 01       	movw	r18, r24
 c7c:	22 0f       	add	r18, r18
 c7e:	33 1f       	adc	r19, r19
 c80:	22 0f       	add	r18, r18
 c82:	33 1f       	adc	r19, r19
 c84:	22 0f       	add	r18, r18
 c86:	33 1f       	adc	r19, r19
 c88:	82 0f       	add	r24, r18
 c8a:	93 1f       	adc	r25, r19
 c8c:	b8 01       	movw	r22, r16
 c8e:	87 5b       	subi	r24, 0xB7	; 183
 c90:	98 4f       	sbci	r25, 0xF8	; 248
 c92:	51 da       	rcall	.-2910   	; 0x136 <vListInsertEnd>
 c94:	e0 91 6d 07 	lds	r30, 0x076D	; 0x80076d <pxCurrentTCB>
 c98:	f0 91 6e 07 	lds	r31, 0x076E	; 0x80076e <pxCurrentTCB+0x1>
 c9c:	9e 89       	ldd	r25, Y+22	; 0x16
 c9e:	86 89       	ldd	r24, Z+22	; 0x16
 ca0:	98 17       	cp	r25, r24
 ca2:	58 f0       	brcs	.+22     	; 0xcba <xTaskResumeAll+0xa0>
 ca4:	dc 2c       	mov	r13, r12
 ca6:	09 c0       	rjmp	.+18     	; 0xcba <xTaskResumeAll+0xa0>
 ca8:	d1 2c       	mov	r13, r1
 caa:	0f 2e       	mov	r0, r31
 cac:	fa e2       	ldi	r31, 0x2A	; 42
 cae:	ef 2e       	mov	r14, r31
 cb0:	f7 e0       	ldi	r31, 0x07	; 7
 cb2:	ff 2e       	mov	r15, r31
 cb4:	f0 2d       	mov	r31, r0
 cb6:	cc 24       	eor	r12, r12
 cb8:	c3 94       	inc	r12
 cba:	f7 01       	movw	r30, r14
 cbc:	80 81       	ld	r24, Z
 cbe:	81 11       	cpse	r24, r1
 cc0:	c5 cf       	rjmp	.-118    	; 0xc4c <xTaskResumeAll+0x32>
 cc2:	80 91 18 07 	lds	r24, 0x0718	; 0x800718 <uxMissedTicks>
 cc6:	88 23       	and	r24, r24
 cc8:	79 f0       	breq	.+30     	; 0xce8 <xTaskResumeAll+0xce>
 cca:	80 91 18 07 	lds	r24, 0x0718	; 0x800718 <uxMissedTicks>
 cce:	88 23       	and	r24, r24
 cd0:	91 f0       	breq	.+36     	; 0xcf6 <xTaskResumeAll+0xdc>
 cd2:	e2 de       	rcall	.-572    	; 0xa98 <vTaskIncrementTick>
 cd4:	80 91 18 07 	lds	r24, 0x0718	; 0x800718 <uxMissedTicks>
 cd8:	81 50       	subi	r24, 0x01	; 1
 cda:	80 93 18 07 	sts	0x0718, r24	; 0x800718 <uxMissedTicks>
 cde:	80 91 18 07 	lds	r24, 0x0718	; 0x800718 <uxMissedTicks>
 ce2:	81 11       	cpse	r24, r1
 ce4:	f6 cf       	rjmp	.-20     	; 0xcd2 <xTaskResumeAll+0xb8>
 ce6:	07 c0       	rjmp	.+14     	; 0xcf6 <xTaskResumeAll+0xdc>
 ce8:	f1 e0       	ldi	r31, 0x01	; 1
 cea:	df 16       	cp	r13, r31
 cec:	21 f0       	breq	.+8      	; 0xcf6 <xTaskResumeAll+0xdc>
 cee:	80 91 17 07 	lds	r24, 0x0717	; 0x800717 <xMissedYield>
 cf2:	81 30       	cpi	r24, 0x01	; 1
 cf4:	39 f4       	brne	.+14     	; 0xd04 <xTaskResumeAll+0xea>
 cf6:	10 92 17 07 	sts	0x0717, r1	; 0x800717 <xMissedYield>
 cfa:	c4 dc       	rcall	.-1656   	; 0x684 <vPortYield>
 cfc:	81 e0       	ldi	r24, 0x01	; 1
 cfe:	03 c0       	rjmp	.+6      	; 0xd06 <xTaskResumeAll+0xec>
 d00:	80 e0       	ldi	r24, 0x00	; 0
 d02:	01 c0       	rjmp	.+2      	; 0xd06 <xTaskResumeAll+0xec>
 d04:	80 e0       	ldi	r24, 0x00	; 0
 d06:	0f 90       	pop	r0
 d08:	0f be       	out	0x3f, r0	; 63
 d0a:	df 91       	pop	r29
 d0c:	cf 91       	pop	r28
 d0e:	1f 91       	pop	r17
 d10:	0f 91       	pop	r16
 d12:	ff 90       	pop	r15
 d14:	ef 90       	pop	r14
 d16:	df 90       	pop	r13
 d18:	cf 90       	pop	r12
 d1a:	08 95       	ret

00000d1c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
 d1c:	cf 93       	push	r28
 d1e:	df 93       	push	r29
 d20:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
 d22:	89 2b       	or	r24, r25
 d24:	91 f0       	breq	.+36     	; 0xd4a <vTaskDelay+0x2e>
		{
			vTaskSuspendAll();
 d26:	b2 de       	rcall	.-668    	; 0xa8c <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 d28:	80 91 1d 07 	lds	r24, 0x071D	; 0x80071d <xTickCount>
 d2c:	90 91 1e 07 	lds	r25, 0x071E	; 0x80071e <xTickCount+0x1>
 d30:	c8 0f       	add	r28, r24
 d32:	d9 1f       	adc	r29, r25

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 d34:	80 91 6d 07 	lds	r24, 0x076D	; 0x80076d <pxCurrentTCB>
 d38:	90 91 6e 07 	lds	r25, 0x076E	; 0x80076e <pxCurrentTCB+0x1>
 d3c:	02 96       	adiw	r24, 0x02	; 2
 d3e:	5d da       	rcall	.-2886   	; 0x1fa <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 d40:	ce 01       	movw	r24, r28
 d42:	53 dd       	rcall	.-1370   	; 0x7ea <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 d44:	6a df       	rcall	.-300    	; 0xc1a <xTaskResumeAll>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 d46:	81 11       	cpse	r24, r1
 d48:	01 c0       	rjmp	.+2      	; 0xd4c <vTaskDelay+0x30>
		{
			portYIELD_WITHIN_API();
 d4a:	9c dc       	rcall	.-1736   	; 0x684 <vPortYield>
 d4c:	df 91       	pop	r29
		}
	}
 d4e:	cf 91       	pop	r28
 d50:	08 95       	ret

00000d52 <prvIdleTask>:
 d52:	0f 2e       	mov	r0, r31
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 d54:	f1 e2       	ldi	r31, 0x21	; 33
 d56:	ef 2e       	mov	r14, r31
 d58:	f7 e0       	ldi	r31, 0x07	; 7
 d5a:	ff 2e       	mov	r15, r31
 d5c:	f0 2d       	mov	r31, r0

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 d5e:	c9 e4       	ldi	r28, 0x49	; 73
 d60:	d7 e0       	ldi	r29, 0x07	; 7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 d62:	80 91 20 07 	lds	r24, 0x0720	; 0x800720 <uxTasksDeleted>
 d66:	88 23       	and	r24, r24
 d68:	29 f1       	breq	.+74     	; 0xdb4 <prvIdleTask+0x62>
		{
			vTaskSuspendAll();
 d6a:	90 de       	rcall	.-736    	; 0xa8c <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 d6c:	d7 01       	movw	r26, r14
			xTaskResumeAll();
 d6e:	1c 91       	ld	r17, X
 d70:	54 df       	rcall	.-344    	; 0xc1a <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 d72:	11 23       	and	r17, r17
 d74:	f9 f0       	breq	.+62     	; 0xdb4 <prvIdleTask+0x62>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 d76:	0f b6       	in	r0, 0x3f	; 63
 d78:	f8 94       	cli
 d7a:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 d7c:	d7 01       	movw	r26, r14
 d7e:	15 96       	adiw	r26, 0x05	; 5
 d80:	ed 91       	ld	r30, X+
 d82:	fc 91       	ld	r31, X
 d84:	16 97       	sbiw	r26, 0x06	; 6
 d86:	06 81       	ldd	r16, Z+6	; 0x06
 d88:	17 81       	ldd	r17, Z+7	; 0x07
					vListRemove( &( pxTCB->xGenericListItem ) );
 d8a:	c8 01       	movw	r24, r16
 d8c:	02 96       	adiw	r24, 0x02	; 2
 d8e:	35 da       	rcall	.-2966   	; 0x1fa <vListRemove>
					--uxCurrentNumberOfTasks;
 d90:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <uxCurrentNumberOfTasks>
 d94:	81 50       	subi	r24, 0x01	; 1
 d96:	80 93 1f 07 	sts	0x071F, r24	; 0x80071f <uxCurrentNumberOfTasks>
					--uxTasksDeleted;
 d9a:	80 91 20 07 	lds	r24, 0x0720	; 0x800720 <uxTasksDeleted>
 d9e:	81 50       	subi	r24, 0x01	; 1
 da0:	80 93 20 07 	sts	0x0720, r24	; 0x800720 <uxTasksDeleted>
				}
				taskEXIT_CRITICAL();
 da4:	0f 90       	pop	r0
 da6:	0f be       	out	0x3f, r0	; 63
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 da8:	f8 01       	movw	r30, r16
 daa:	87 89       	ldd	r24, Z+23	; 0x17
 dac:	90 8d       	ldd	r25, Z+24	; 0x18
		vPortFree( pxTCB );
 dae:	b0 d9       	rcall	.-3232   	; 0x110 <vPortFree>
 db0:	c8 01       	movw	r24, r16

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 db2:	ae d9       	rcall	.-3236   	; 0x110 <vPortFree>
 db4:	88 81       	ld	r24, Y
 db6:	82 30       	cpi	r24, 0x02	; 2
			{
				taskYIELD();
 db8:	a0 f2       	brcs	.-88     	; 0xd62 <prvIdleTask+0x10>
 dba:	64 dc       	rcall	.-1848   	; 0x684 <vPortYield>
 dbc:	d2 cf       	rjmp	.-92     	; 0xd62 <prvIdleTask+0x10>

00000dbe <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 dbe:	80 91 19 07 	lds	r24, 0x0719	; 0x800719 <uxSchedulerSuspended>
 dc2:	81 11       	cpse	r24, r1
 dc4:	13 c0       	rjmp	.+38     	; 0xdec <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 dc6:	80 91 1b 07 	lds	r24, 0x071B	; 0x80071b <uxTopReadyPriority>
 dca:	90 e0       	ldi	r25, 0x00	; 0
 dcc:	fc 01       	movw	r30, r24
 dce:	ee 0f       	add	r30, r30
 dd0:	ff 1f       	adc	r31, r31
 dd2:	ee 0f       	add	r30, r30
 dd4:	ff 1f       	adc	r31, r31
 dd6:	ee 0f       	add	r30, r30
 dd8:	ff 1f       	adc	r31, r31
 dda:	8e 0f       	add	r24, r30
 ddc:	9f 1f       	adc	r25, r31
 dde:	fc 01       	movw	r30, r24
 de0:	e7 5b       	subi	r30, 0xB7	; 183
 de2:	f8 4f       	sbci	r31, 0xF8	; 248
 de4:	80 81       	ld	r24, Z
 de6:	88 23       	and	r24, r24
 de8:	29 f0       	breq	.+10     	; 0xdf4 <vTaskSwitchContext+0x36>
 dea:	1b c0       	rjmp	.+54     	; 0xe22 <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 dec:	81 e0       	ldi	r24, 0x01	; 1
 dee:	80 93 17 07 	sts	0x0717, r24	; 0x800717 <xMissedYield>
 df2:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
 df4:	80 91 1b 07 	lds	r24, 0x071B	; 0x80071b <uxTopReadyPriority>
 df8:	81 50       	subi	r24, 0x01	; 1
 dfa:	80 93 1b 07 	sts	0x071B, r24	; 0x80071b <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 dfe:	80 91 1b 07 	lds	r24, 0x071B	; 0x80071b <uxTopReadyPriority>
 e02:	90 e0       	ldi	r25, 0x00	; 0
 e04:	fc 01       	movw	r30, r24
 e06:	ee 0f       	add	r30, r30
 e08:	ff 1f       	adc	r31, r31
 e0a:	ee 0f       	add	r30, r30
 e0c:	ff 1f       	adc	r31, r31
 e0e:	ee 0f       	add	r30, r30
 e10:	ff 1f       	adc	r31, r31
 e12:	8e 0f       	add	r24, r30
 e14:	9f 1f       	adc	r25, r31
 e16:	fc 01       	movw	r30, r24
 e18:	e7 5b       	subi	r30, 0xB7	; 183
 e1a:	f8 4f       	sbci	r31, 0xF8	; 248
 e1c:	80 81       	ld	r24, Z
 e1e:	88 23       	and	r24, r24
 e20:	49 f3       	breq	.-46     	; 0xdf4 <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 e22:	80 91 1b 07 	lds	r24, 0x071B	; 0x80071b <uxTopReadyPriority>
 e26:	90 e0       	ldi	r25, 0x00	; 0
 e28:	9c 01       	movw	r18, r24
 e2a:	22 0f       	add	r18, r18
 e2c:	33 1f       	adc	r19, r19
 e2e:	22 0f       	add	r18, r18
 e30:	33 1f       	adc	r19, r19
 e32:	22 0f       	add	r18, r18
 e34:	33 1f       	adc	r19, r19
 e36:	28 0f       	add	r18, r24
 e38:	39 1f       	adc	r19, r25
 e3a:	d9 01       	movw	r26, r18
 e3c:	a7 5b       	subi	r26, 0xB7	; 183
 e3e:	b8 4f       	sbci	r27, 0xF8	; 248
 e40:	11 96       	adiw	r26, 0x01	; 1
 e42:	ed 91       	ld	r30, X+
 e44:	fc 91       	ld	r31, X
 e46:	12 97       	sbiw	r26, 0x02	; 2
 e48:	02 80       	ldd	r0, Z+2	; 0x02
 e4a:	f3 81       	ldd	r31, Z+3	; 0x03
 e4c:	e0 2d       	mov	r30, r0
 e4e:	12 96       	adiw	r26, 0x02	; 2
 e50:	fc 93       	st	X, r31
 e52:	ee 93       	st	-X, r30
 e54:	11 97       	sbiw	r26, 0x01	; 1
 e56:	24 5b       	subi	r18, 0xB4	; 180
 e58:	38 4f       	sbci	r19, 0xF8	; 248
 e5a:	e2 17       	cp	r30, r18
 e5c:	f3 07       	cpc	r31, r19
 e5e:	29 f4       	brne	.+10     	; 0xe6a <vTaskSwitchContext+0xac>
 e60:	22 81       	ldd	r18, Z+2	; 0x02
 e62:	33 81       	ldd	r19, Z+3	; 0x03
 e64:	fd 01       	movw	r30, r26
 e66:	32 83       	std	Z+2, r19	; 0x02
 e68:	21 83       	std	Z+1, r18	; 0x01
 e6a:	fc 01       	movw	r30, r24
 e6c:	ee 0f       	add	r30, r30
 e6e:	ff 1f       	adc	r31, r31
 e70:	ee 0f       	add	r30, r30
 e72:	ff 1f       	adc	r31, r31
 e74:	ee 0f       	add	r30, r30
 e76:	ff 1f       	adc	r31, r31
 e78:	8e 0f       	add	r24, r30
 e7a:	9f 1f       	adc	r25, r31
 e7c:	fc 01       	movw	r30, r24
 e7e:	e7 5b       	subi	r30, 0xB7	; 183
 e80:	f8 4f       	sbci	r31, 0xF8	; 248
 e82:	01 80       	ldd	r0, Z+1	; 0x01
 e84:	f2 81       	ldd	r31, Z+2	; 0x02
 e86:	e0 2d       	mov	r30, r0
 e88:	86 81       	ldd	r24, Z+6	; 0x06
 e8a:	97 81       	ldd	r25, Z+7	; 0x07
 e8c:	90 93 6e 07 	sts	0x076E, r25	; 0x80076e <pxCurrentTCB+0x1>
 e90:	80 93 6d 07 	sts	0x076D, r24	; 0x80076d <pxCurrentTCB>
 e94:	08 95       	ret

00000e96 <memset>:
 e96:	dc 01       	movw	r26, r24
 e98:	01 c0       	rjmp	.+2      	; 0xe9c <memset+0x6>
 e9a:	6d 93       	st	X+, r22
 e9c:	41 50       	subi	r20, 0x01	; 1
 e9e:	50 40       	sbci	r21, 0x00	; 0
 ea0:	e0 f7       	brcc	.-8      	; 0xe9a <memset+0x4>
 ea2:	08 95       	ret

00000ea4 <strncpy>:
 ea4:	fb 01       	movw	r30, r22
 ea6:	dc 01       	movw	r26, r24
 ea8:	41 50       	subi	r20, 0x01	; 1
 eaa:	50 40       	sbci	r21, 0x00	; 0
 eac:	48 f0       	brcs	.+18     	; 0xec0 <strncpy+0x1c>
 eae:	01 90       	ld	r0, Z+
 eb0:	0d 92       	st	X+, r0
 eb2:	00 20       	and	r0, r0
 eb4:	c9 f7       	brne	.-14     	; 0xea8 <strncpy+0x4>
 eb6:	01 c0       	rjmp	.+2      	; 0xeba <strncpy+0x16>
 eb8:	1d 92       	st	X+, r1
 eba:	41 50       	subi	r20, 0x01	; 1
 ebc:	50 40       	sbci	r21, 0x00	; 0
 ebe:	e0 f7       	brcc	.-8      	; 0xeb8 <strncpy+0x14>
 ec0:	08 95       	ret

00000ec2 <_exit>:
 ec2:	f8 94       	cli

00000ec4 <__stop_program>:
 ec4:	ff cf       	rjmp	.-2      	; 0xec4 <__stop_program>
