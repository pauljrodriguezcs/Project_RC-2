
Throttle_and_Steering.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004c  00800100  00000f94  00001028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f94  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000649  0080014c  0080014c  00001074  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001074  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000290  00000000  00000000  000010e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a58  00000000  00000000  00001374  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000103f  00000000  00000000  00003dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a3f  00000000  00000000  00004e0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006bc  00000000  00000000  0000684c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f88  00000000  00000000  00006f08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016e8  00000000  00000000  00007e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000288  00000000  00000000  00009578  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	3f c4       	rjmp	.+2174   	; 0x8b4 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e9       	ldi	r30, 0x94	; 148
  a0:	ff e0       	ldi	r31, 0x0F	; 15
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 34       	cpi	r26, 0x4C	; 76
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	27 e0       	ldi	r18, 0x07	; 7
  b4:	ac e4       	ldi	r26, 0x4C	; 76
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 39       	cpi	r26, 0x95	; 149
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	92 d2       	rcall	.+1316   	; 0x5e8 <main>
  c4:	65 c7       	rjmp	.+3786   	; 0xf90 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
  ce:	45 d5       	rcall	.+2698   	; 0xb5a <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
  d0:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <__data_end>
  d4:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <__data_end+0x1>
  d8:	c9 01       	movw	r24, r18
  da:	8c 0f       	add	r24, r28
  dc:	9d 1f       	adc	r25, r29
  de:	8c 3d       	cpi	r24, 0xDC	; 220
  e0:	45 e0       	ldi	r20, 0x05	; 5
  e2:	94 07       	cpc	r25, r20
  e4:	58 f4       	brcc	.+22     	; 0xfc <pvPortMalloc+0x34>
  e6:	28 17       	cp	r18, r24
  e8:	39 07       	cpc	r19, r25
  ea:	58 f4       	brcc	.+22     	; 0x102 <pvPortMalloc+0x3a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
  ec:	e9 01       	movw	r28, r18
  ee:	c2 5b       	subi	r28, 0xB2	; 178
  f0:	de 4f       	sbci	r29, 0xFE	; 254
			xNextFreeByte += xWantedSize;			
  f2:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__data_end+0x1>
  f6:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__data_end>
  fa:	05 c0       	rjmp	.+10     	; 0x106 <pvPortMalloc+0x3e>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
  fc:	c0 e0       	ldi	r28, 0x00	; 0
  fe:	d0 e0       	ldi	r29, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <pvPortMalloc+0x3e>
 102:	c0 e0       	ldi	r28, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
 104:	d0 e0       	ldi	r29, 0x00	; 0
 106:	f0 d5       	rcall	.+3040   	; 0xce8 <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
 108:	ce 01       	movw	r24, r28
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 110:	08 95       	ret

00000112 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
 112:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 114:	03 96       	adiw	r24, 0x03	; 3
 116:	92 83       	std	Z+2, r25	; 0x02
 118:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 11a:	2f ef       	ldi	r18, 0xFF	; 255
 11c:	3f ef       	ldi	r19, 0xFF	; 255
 11e:	34 83       	std	Z+4, r19	; 0x04
 120:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 122:	96 83       	std	Z+6, r25	; 0x06
 124:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 126:	90 87       	std	Z+8, r25	; 0x08
 128:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 12a:	10 82       	st	Z, r1
 12c:	08 95       	ret

0000012e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 12e:	fc 01       	movw	r30, r24
 130:	11 86       	std	Z+9, r1	; 0x09
 132:	10 86       	std	Z+8, r1	; 0x08
 134:	08 95       	ret

00000136 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	fc 01       	movw	r30, r24
 13c:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
 13e:	21 81       	ldd	r18, Z+1	; 0x01
 140:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
 142:	e9 01       	movw	r28, r18
 144:	8a 81       	ldd	r24, Y+2	; 0x02
 146:	9b 81       	ldd	r25, Y+3	; 0x03
 148:	13 96       	adiw	r26, 0x03	; 3
 14a:	9c 93       	st	X, r25
 14c:	8e 93       	st	-X, r24
 14e:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
 150:	81 81       	ldd	r24, Z+1	; 0x01
 152:	92 81       	ldd	r25, Z+2	; 0x02
 154:	15 96       	adiw	r26, 0x05	; 5
 156:	9c 93       	st	X, r25
 158:	8e 93       	st	-X, r24
 15a:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 15c:	8a 81       	ldd	r24, Y+2	; 0x02
 15e:	9b 81       	ldd	r25, Y+3	; 0x03
 160:	ec 01       	movw	r28, r24
 162:	7d 83       	std	Y+5, r23	; 0x05
 164:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 166:	e9 01       	movw	r28, r18
 168:	7b 83       	std	Y+3, r23	; 0x03
 16a:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 16c:	72 83       	std	Z+2, r23	; 0x02
 16e:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 170:	19 96       	adiw	r26, 0x09	; 9
 172:	fc 93       	st	X, r31
 174:	ee 93       	st	-X, r30
 176:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
 178:	80 81       	ld	r24, Z
 17a:	8f 5f       	subi	r24, 0xFF	; 255
 17c:	80 83       	st	Z, r24
}
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 18a:	48 81       	ld	r20, Y
 18c:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 18e:	4f 3f       	cpi	r20, 0xFF	; 255
 190:	2f ef       	ldi	r18, 0xFF	; 255
 192:	52 07       	cpc	r21, r18
 194:	31 f4       	brne	.+12     	; 0x1a2 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 196:	dc 01       	movw	r26, r24
 198:	17 96       	adiw	r26, 0x07	; 7
 19a:	ed 91       	ld	r30, X+
 19c:	fc 91       	ld	r31, X
 19e:	18 97       	sbiw	r26, 0x08	; 8
 1a0:	17 c0       	rjmp	.+46     	; 0x1d0 <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 1a2:	fc 01       	movw	r30, r24
 1a4:	33 96       	adiw	r30, 0x03	; 3
 1a6:	dc 01       	movw	r26, r24
 1a8:	15 96       	adiw	r26, 0x05	; 5
 1aa:	2d 91       	ld	r18, X+
 1ac:	3c 91       	ld	r19, X
 1ae:	16 97       	sbiw	r26, 0x06	; 6
 1b0:	d9 01       	movw	r26, r18
 1b2:	2d 91       	ld	r18, X+
 1b4:	3c 91       	ld	r19, X
 1b6:	42 17       	cp	r20, r18
 1b8:	53 07       	cpc	r21, r19
 1ba:	50 f0       	brcs	.+20     	; 0x1d0 <vListInsert+0x4c>
 1bc:	02 80       	ldd	r0, Z+2	; 0x02
 1be:	f3 81       	ldd	r31, Z+3	; 0x03
 1c0:	e0 2d       	mov	r30, r0
 1c2:	a2 81       	ldd	r26, Z+2	; 0x02
 1c4:	b3 81       	ldd	r27, Z+3	; 0x03
 1c6:	2d 91       	ld	r18, X+
 1c8:	3c 91       	ld	r19, X
 1ca:	42 17       	cp	r20, r18
 1cc:	53 07       	cpc	r21, r19
 1ce:	b0 f7       	brcc	.-20     	; 0x1bc <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 1d0:	a2 81       	ldd	r26, Z+2	; 0x02
 1d2:	b3 81       	ldd	r27, Z+3	; 0x03
 1d4:	bb 83       	std	Y+3, r27	; 0x03
 1d6:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 1d8:	15 96       	adiw	r26, 0x05	; 5
 1da:	dc 93       	st	X, r29
 1dc:	ce 93       	st	-X, r28
 1de:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
 1e0:	fd 83       	std	Y+5, r31	; 0x05
 1e2:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 1e4:	d3 83       	std	Z+3, r29	; 0x03
 1e6:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 1e8:	99 87       	std	Y+9, r25	; 0x09
 1ea:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
 1ec:	fc 01       	movw	r30, r24
 1ee:	20 81       	ld	r18, Z
 1f0:	2f 5f       	subi	r18, 0xFF	; 255
 1f2:	20 83       	st	Z, r18
}
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
 1fa:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 1fc:	a2 81       	ldd	r26, Z+2	; 0x02
 1fe:	b3 81       	ldd	r27, Z+3	; 0x03
 200:	84 81       	ldd	r24, Z+4	; 0x04
 202:	95 81       	ldd	r25, Z+5	; 0x05
 204:	15 96       	adiw	r26, 0x05	; 5
 206:	9c 93       	st	X, r25
 208:	8e 93       	st	-X, r24
 20a:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 20c:	a4 81       	ldd	r26, Z+4	; 0x04
 20e:	b5 81       	ldd	r27, Z+5	; 0x05
 210:	82 81       	ldd	r24, Z+2	; 0x02
 212:	93 81       	ldd	r25, Z+3	; 0x03
 214:	13 96       	adiw	r26, 0x03	; 3
 216:	9c 93       	st	X, r25
 218:	8e 93       	st	-X, r24
 21a:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 21c:	a0 85       	ldd	r26, Z+8	; 0x08
 21e:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 220:	11 96       	adiw	r26, 0x01	; 1
 222:	8d 91       	ld	r24, X+
 224:	9c 91       	ld	r25, X
 226:	12 97       	sbiw	r26, 0x02	; 2
 228:	e8 17       	cp	r30, r24
 22a:	f9 07       	cpc	r31, r25
 22c:	31 f4       	brne	.+12     	; 0x23a <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 22e:	84 81       	ldd	r24, Z+4	; 0x04
 230:	95 81       	ldd	r25, Z+5	; 0x05
 232:	12 96       	adiw	r26, 0x02	; 2
 234:	9c 93       	st	X, r25
 236:	8e 93       	st	-X, r24
 238:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
 23a:	11 86       	std	Z+9, r1	; 0x09
 23c:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 23e:	8c 91       	ld	r24, X
 240:	81 50       	subi	r24, 0x01	; 1
 242:	8c 93       	st	X, r24
 244:	08 95       	ret

00000246 <initUSART>:
 }

 void IRSecPulse(unsigned portBASE_TYPE Priority)
 {
	 xTaskCreate(IRSecTask, (signed portCHAR *)"IRSecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
 }
 246:	81 30       	cpi	r24, 0x01	; 1
 248:	81 f0       	breq	.+32     	; 0x26a <initUSART+0x24>
 24a:	e1 ec       	ldi	r30, 0xC1	; 193
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	80 81       	ld	r24, Z
 250:	88 61       	ori	r24, 0x18	; 24
 252:	80 83       	st	Z, r24
 254:	e2 ec       	ldi	r30, 0xC2	; 194
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	80 81       	ld	r24, Z
 25a:	86 60       	ori	r24, 0x06	; 6
 25c:	80 83       	st	Z, r24
 25e:	83 e3       	ldi	r24, 0x33	; 51
 260:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 264:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 268:	08 95       	ret
 26a:	e9 ec       	ldi	r30, 0xC9	; 201
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	80 81       	ld	r24, Z
 270:	88 61       	ori	r24, 0x18	; 24
 272:	80 83       	st	Z, r24
 274:	ea ec       	ldi	r30, 0xCA	; 202
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z
 27a:	86 60       	ori	r24, 0x06	; 6
 27c:	80 83       	st	Z, r24
 27e:	83 e3       	ldi	r24, 0x33	; 51
 280:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 284:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 288:	08 95       	ret

0000028a <USART_Flush>:
 28a:	81 30       	cpi	r24, 0x01	; 1
 28c:	29 f4       	brne	.+10     	; 0x298 <USART_Flush+0xe>
 28e:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 292:	88 23       	and	r24, r24
 294:	74 f0       	brlt	.+28     	; 0x2b2 <USART_Flush+0x28>
 296:	08 95       	ret
 298:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 29c:	88 23       	and	r24, r24
 29e:	8c f4       	brge	.+34     	; 0x2c2 <USART_Flush+0x38>
 2a0:	a6 ec       	ldi	r26, 0xC6	; 198
 2a2:	b0 e0       	ldi	r27, 0x00	; 0
 2a4:	e0 ec       	ldi	r30, 0xC0	; 192
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	8c 91       	ld	r24, X
 2aa:	80 81       	ld	r24, Z
 2ac:	88 23       	and	r24, r24
 2ae:	e4 f3       	brlt	.-8      	; 0x2a8 <USART_Flush+0x1e>
 2b0:	08 95       	ret
 2b2:	ae ec       	ldi	r26, 0xCE	; 206
 2b4:	b0 e0       	ldi	r27, 0x00	; 0
 2b6:	e8 ec       	ldi	r30, 0xC8	; 200
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	8c 91       	ld	r24, X
 2bc:	80 81       	ld	r24, Z
 2be:	88 23       	and	r24, r24
 2c0:	e4 f3       	brlt	.-8      	; 0x2ba <USART_Flush+0x30>
 2c2:	08 95       	ret

000002c4 <USART_Receive>:
 2c4:	81 30       	cpi	r24, 0x01	; 1
 2c6:	41 f0       	breq	.+16     	; 0x2d8 <USART_Receive+0x14>
 2c8:	e0 ec       	ldi	r30, 0xC0	; 192
 2ca:	f0 e0       	ldi	r31, 0x00	; 0
 2cc:	80 81       	ld	r24, Z
 2ce:	88 23       	and	r24, r24
 2d0:	ec f7       	brge	.-6      	; 0x2cc <USART_Receive+0x8>
 2d2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 2d6:	08 95       	ret
 2d8:	e8 ec       	ldi	r30, 0xC8	; 200
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	80 81       	ld	r24, Z
 2de:	88 23       	and	r24, r24
 2e0:	ec f7       	brge	.-6      	; 0x2dc <USART_Receive+0x18>
 2e2:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 2e6:	08 95       	ret

000002e8 <TRANSMISSION_Tick>:
 2e8:	af 92       	push	r10
 2ea:	bf 92       	push	r11
 2ec:	cf 92       	push	r12
 2ee:	df 92       	push	r13
 2f0:	ef 92       	push	r14
 2f2:	ff 92       	push	r15
 2f4:	0f 93       	push	r16
 2f6:	1f 93       	push	r17
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29
 2fc:	80 91 90 07 	lds	r24, 0x0790	; 0x800790 <transmission_state>
 300:	81 30       	cpi	r24, 0x01	; 1
 302:	09 f0       	breq	.+2      	; 0x306 <TRANSMISSION_Tick+0x1e>
 304:	7d c0       	rjmp	.+250    	; 0x400 <__LOCK_REGION_LENGTH__>
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	dd df       	rcall	.-70     	; 0x2c4 <USART_Receive>
 30a:	80 93 2a 07 	sts	0x072A, r24	; 0x80072a <data_recieved>
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	bc df       	rcall	.-136    	; 0x28a <USART_Flush>
 312:	20 91 2a 07 	lds	r18, 0x072A	; 0x80072a <data_recieved>
 316:	22 fb       	bst	r18, 2
 318:	00 27       	eor	r16, r16
 31a:	00 f9       	bld	r16, 0
 31c:	10 e0       	ldi	r17, 0x00	; 0
 31e:	01 2b       	or	r16, r17
 320:	01 f1       	breq	.+64     	; 0x362 <TRANSMISSION_Tick+0x7a>
 322:	32 2f       	mov	r19, r18
 324:	31 70       	andi	r19, 0x01	; 1
 326:	21 fb       	bst	r18, 1
 328:	aa 24       	eor	r10, r10
 32a:	a0 f8       	bld	r10, 0
 32c:	b1 2c       	mov	r11, r1
 32e:	a1 14       	cp	r10, r1
 330:	b1 04       	cpc	r11, r1
 332:	31 f4       	brne	.+12     	; 0x340 <TRANSMISSION_Tick+0x58>
 334:	33 23       	and	r19, r19
 336:	91 f0       	breq	.+36     	; 0x35c <TRANSMISSION_Tick+0x74>
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	80 93 34 07 	sts	0x0734, r24	; 0x800734 <reverse>
 33e:	32 c0       	rjmp	.+100    	; 0x3a4 <TRANSMISSION_Tick+0xbc>
 340:	ab 28       	or	r10, r11
 342:	61 f0       	breq	.+24     	; 0x35c <TRANSMISSION_Tick+0x74>
 344:	31 11       	cpse	r19, r1
 346:	04 c0       	rjmp	.+8      	; 0x350 <TRANSMISSION_Tick+0x68>
 348:	82 e0       	ldi	r24, 0x02	; 2
 34a:	80 93 34 07 	sts	0x0734, r24	; 0x800734 <reverse>
 34e:	2a c0       	rjmp	.+84     	; 0x3a4 <TRANSMISSION_Tick+0xbc>
 350:	33 23       	and	r19, r19
 352:	21 f0       	breq	.+8      	; 0x35c <TRANSMISSION_Tick+0x74>
 354:	83 e0       	ldi	r24, 0x03	; 3
 356:	80 93 34 07 	sts	0x0734, r24	; 0x800734 <reverse>
 35a:	24 c0       	rjmp	.+72     	; 0x3a4 <TRANSMISSION_Tick+0xbc>
 35c:	10 92 34 07 	sts	0x0734, r1	; 0x800734 <reverse>
 360:	21 c0       	rjmp	.+66     	; 0x3a4 <TRANSMISSION_Tick+0xbc>
 362:	32 2f       	mov	r19, r18
 364:	31 70       	andi	r19, 0x01	; 1
 366:	21 fb       	bst	r18, 1
 368:	cc 24       	eor	r12, r12
 36a:	c0 f8       	bld	r12, 0
 36c:	d1 2c       	mov	r13, r1
 36e:	c1 14       	cp	r12, r1
 370:	d1 04       	cpc	r13, r1
 372:	31 f4       	brne	.+12     	; 0x380 <TRANSMISSION_Tick+0x98>
 374:	33 23       	and	r19, r19
 376:	91 f0       	breq	.+36     	; 0x39c <TRANSMISSION_Tick+0xb4>
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	80 93 35 07 	sts	0x0735, r24	; 0x800735 <throttle>
 37e:	12 c0       	rjmp	.+36     	; 0x3a4 <TRANSMISSION_Tick+0xbc>
 380:	cd 28       	or	r12, r13
 382:	61 f0       	breq	.+24     	; 0x39c <TRANSMISSION_Tick+0xb4>
 384:	31 11       	cpse	r19, r1
 386:	04 c0       	rjmp	.+8      	; 0x390 <TRANSMISSION_Tick+0xa8>
 388:	82 e0       	ldi	r24, 0x02	; 2
 38a:	80 93 35 07 	sts	0x0735, r24	; 0x800735 <throttle>
 38e:	0a c0       	rjmp	.+20     	; 0x3a4 <TRANSMISSION_Tick+0xbc>
 390:	33 23       	and	r19, r19
 392:	21 f0       	breq	.+8      	; 0x39c <TRANSMISSION_Tick+0xb4>
 394:	83 e0       	ldi	r24, 0x03	; 3
 396:	80 93 35 07 	sts	0x0735, r24	; 0x800735 <throttle>
 39a:	04 c0       	rjmp	.+8      	; 0x3a4 <TRANSMISSION_Tick+0xbc>
 39c:	10 92 35 07 	sts	0x0735, r1	; 0x800735 <throttle>
 3a0:	10 92 34 07 	sts	0x0734, r1	; 0x800734 <reverse>
 3a4:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <data_recieved>
 3a8:	21 e0       	ldi	r18, 0x01	; 1
 3aa:	83 fb       	bst	r24, 3
 3ac:	ee 24       	eor	r14, r14
 3ae:	e0 f8       	bld	r14, 0
 3b0:	f1 2c       	mov	r15, r1
 3b2:	83 ff       	sbrs	r24, 3
 3b4:	20 e0       	ldi	r18, 0x00	; 0
 3b6:	20 93 2c 07 	sts	0x072C, r18	; 0x80072c <bit_val_0>
 3ba:	91 e0       	ldi	r25, 0x01	; 1
 3bc:	84 fb       	bst	r24, 4
 3be:	22 27       	eor	r18, r18
 3c0:	20 f9       	bld	r18, 0
 3c2:	c2 2f       	mov	r28, r18
 3c4:	20 e0       	ldi	r18, 0x00	; 0
 3c6:	d2 2f       	mov	r29, r18
 3c8:	84 ff       	sbrs	r24, 4
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	90 93 2b 07 	sts	0x072B, r25	; 0x80072b <bit_val_1>
 3d0:	20 97       	sbiw	r28, 0x00	; 0
 3d2:	41 f4       	brne	.+16     	; 0x3e4 <TRANSMISSION_Tick+0xfc>
 3d4:	ef 28       	or	r14, r15
 3d6:	81 f0       	breq	.+32     	; 0x3f8 <TRANSMISSION_Tick+0x110>
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	80 93 32 07 	sts	0x0732, r24	; 0x800732 <steering_right>
 3de:	10 92 33 07 	sts	0x0733, r1	; 0x800733 <steering_left>
 3e2:	0e c0       	rjmp	.+28     	; 0x400 <__LOCK_REGION_LENGTH__>
 3e4:	cd 2b       	or	r28, r29
 3e6:	41 f0       	breq	.+16     	; 0x3f8 <TRANSMISSION_Tick+0x110>
 3e8:	ef 28       	or	r14, r15
 3ea:	31 f4       	brne	.+12     	; 0x3f8 <TRANSMISSION_Tick+0x110>
 3ec:	10 92 32 07 	sts	0x0732, r1	; 0x800732 <steering_right>
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	80 93 33 07 	sts	0x0733, r24	; 0x800733 <steering_left>
 3f6:	04 c0       	rjmp	.+8      	; 0x400 <__LOCK_REGION_LENGTH__>
 3f8:	10 92 32 07 	sts	0x0732, r1	; 0x800732 <steering_right>
 3fc:	10 92 33 07 	sts	0x0733, r1	; 0x800733 <steering_left>
 400:	80 91 90 07 	lds	r24, 0x0790	; 0x800790 <transmission_state>
 404:	88 23       	and	r24, r24
 406:	19 f0       	breq	.+6      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 408:	10 92 90 07 	sts	0x0790, r1	; 0x800790 <transmission_state>
 40c:	07 c0       	rjmp	.+14     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 40e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 412:	88 23       	and	r24, r24
 414:	1c f4       	brge	.+6      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	80 93 90 07 	sts	0x0790, r24	; 0x800790 <transmission_state>
 41c:	df 91       	pop	r29
 41e:	cf 91       	pop	r28
 420:	1f 91       	pop	r17
 422:	0f 91       	pop	r16
 424:	ff 90       	pop	r15
 426:	ef 90       	pop	r14
 428:	df 90       	pop	r13
 42a:	cf 90       	pop	r12
 42c:	bf 90       	pop	r11
 42e:	af 90       	pop	r10
 430:	08 95       	ret

00000432 <TRANSMISSIONSecTask>:
 432:	10 92 90 07 	sts	0x0790, r1	; 0x800790 <transmission_state>
 436:	58 df       	rcall	.-336    	; 0x2e8 <TRANSMISSION_Tick>
 438:	83 e0       	ldi	r24, 0x03	; 3
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	d6 d4       	rcall	.+2476   	; 0xdea <vTaskDelay>
 43e:	fb cf       	rjmp	.-10     	; 0x436 <TRANSMISSIONSecTask+0x4>

00000440 <TRANSMISSIONSecPulse>:
 440:	af 92       	push	r10
 442:	bf 92       	push	r11
 444:	cf 92       	push	r12
 446:	df 92       	push	r13
 448:	ef 92       	push	r14
 44a:	ff 92       	push	r15
 44c:	0f 93       	push	r16
 44e:	a1 2c       	mov	r10, r1
 450:	b1 2c       	mov	r11, r1
 452:	c1 2c       	mov	r12, r1
 454:	d1 2c       	mov	r13, r1
 456:	e1 2c       	mov	r14, r1
 458:	f1 2c       	mov	r15, r1
 45a:	08 2f       	mov	r16, r24
 45c:	20 e0       	ldi	r18, 0x00	; 0
 45e:	30 e0       	ldi	r19, 0x00	; 0
 460:	45 e5       	ldi	r20, 0x55	; 85
 462:	50 e0       	ldi	r21, 0x00	; 0
 464:	62 e0       	ldi	r22, 0x02	; 2
 466:	71 e0       	ldi	r23, 0x01	; 1
 468:	89 e1       	ldi	r24, 0x19	; 25
 46a:	92 e0       	ldi	r25, 0x02	; 2
 46c:	5a d2       	rcall	.+1204   	; 0x922 <xTaskGenericCreate>
 46e:	0f 91       	pop	r16
 470:	ff 90       	pop	r15
 472:	ef 90       	pop	r14
 474:	df 90       	pop	r13
 476:	cf 90       	pop	r12
 478:	bf 90       	pop	r11
 47a:	af 90       	pop	r10
 47c:	08 95       	ret

0000047e <LED_Tick>:
 47e:	80 91 91 07 	lds	r24, 0x0791	; 0x800791 <led_state>
 482:	81 11       	cpse	r24, r1
 484:	84 c0       	rjmp	.+264    	; 0x58e <LED_Tick+0x110>
 486:	80 91 35 07 	lds	r24, 0x0735	; 0x800735 <throttle>
 48a:	81 30       	cpi	r24, 0x01	; 1
 48c:	61 f4       	brne	.+24     	; 0x4a6 <LED_Tick+0x28>
 48e:	80 91 30 07 	lds	r24, 0x0730	; 0x800730 <obstacle_front>
 492:	81 11       	cpse	r24, r1
 494:	24 c0       	rjmp	.+72     	; 0x4de <LED_Tick+0x60>
 496:	80 91 31 07 	lds	r24, 0x0731	; 0x800731 <led_value>
 49a:	80 7c       	andi	r24, 0xC0	; 192
 49c:	84 60       	ori	r24, 0x04	; 4
 49e:	80 93 31 07 	sts	0x0731, r24	; 0x800731 <led_value>
 4a2:	88 b9       	out	0x08, r24	; 8
 4a4:	4d c0       	rjmp	.+154    	; 0x540 <LED_Tick+0xc2>
 4a6:	82 30       	cpi	r24, 0x02	; 2
 4a8:	61 f4       	brne	.+24     	; 0x4c2 <LED_Tick+0x44>
 4aa:	80 91 30 07 	lds	r24, 0x0730	; 0x800730 <obstacle_front>
 4ae:	81 11       	cpse	r24, r1
 4b0:	16 c0       	rjmp	.+44     	; 0x4de <LED_Tick+0x60>
 4b2:	80 91 31 07 	lds	r24, 0x0731	; 0x800731 <led_value>
 4b6:	80 7c       	andi	r24, 0xC0	; 192
 4b8:	86 60       	ori	r24, 0x06	; 6
 4ba:	80 93 31 07 	sts	0x0731, r24	; 0x800731 <led_value>
 4be:	88 b9       	out	0x08, r24	; 8
 4c0:	3f c0       	rjmp	.+126    	; 0x540 <LED_Tick+0xc2>
 4c2:	83 30       	cpi	r24, 0x03	; 3
 4c4:	61 f4       	brne	.+24     	; 0x4de <LED_Tick+0x60>
 4c6:	80 91 30 07 	lds	r24, 0x0730	; 0x800730 <obstacle_front>
 4ca:	81 11       	cpse	r24, r1
 4cc:	08 c0       	rjmp	.+16     	; 0x4de <LED_Tick+0x60>
 4ce:	80 91 31 07 	lds	r24, 0x0731	; 0x800731 <led_value>
 4d2:	80 7c       	andi	r24, 0xC0	; 192
 4d4:	87 60       	ori	r24, 0x07	; 7
 4d6:	80 93 31 07 	sts	0x0731, r24	; 0x800731 <led_value>
 4da:	88 b9       	out	0x08, r24	; 8
 4dc:	31 c0       	rjmp	.+98     	; 0x540 <LED_Tick+0xc2>
 4de:	80 91 34 07 	lds	r24, 0x0734	; 0x800734 <reverse>
 4e2:	81 30       	cpi	r24, 0x01	; 1
 4e4:	61 f4       	brne	.+24     	; 0x4fe <LED_Tick+0x80>
 4e6:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <obstacle_back>
 4ea:	81 11       	cpse	r24, r1
 4ec:	24 c0       	rjmp	.+72     	; 0x536 <LED_Tick+0xb8>
 4ee:	80 91 31 07 	lds	r24, 0x0731	; 0x800731 <led_value>
 4f2:	80 7c       	andi	r24, 0xC0	; 192
 4f4:	88 60       	ori	r24, 0x08	; 8
 4f6:	80 93 31 07 	sts	0x0731, r24	; 0x800731 <led_value>
 4fa:	88 b9       	out	0x08, r24	; 8
 4fc:	21 c0       	rjmp	.+66     	; 0x540 <LED_Tick+0xc2>
 4fe:	82 30       	cpi	r24, 0x02	; 2
 500:	61 f4       	brne	.+24     	; 0x51a <LED_Tick+0x9c>
 502:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <obstacle_back>
 506:	81 11       	cpse	r24, r1
 508:	16 c0       	rjmp	.+44     	; 0x536 <LED_Tick+0xb8>
 50a:	80 91 31 07 	lds	r24, 0x0731	; 0x800731 <led_value>
 50e:	80 7c       	andi	r24, 0xC0	; 192
 510:	88 61       	ori	r24, 0x18	; 24
 512:	80 93 31 07 	sts	0x0731, r24	; 0x800731 <led_value>
 516:	88 b9       	out	0x08, r24	; 8
 518:	13 c0       	rjmp	.+38     	; 0x540 <LED_Tick+0xc2>
 51a:	83 30       	cpi	r24, 0x03	; 3
 51c:	61 f4       	brne	.+24     	; 0x536 <LED_Tick+0xb8>
 51e:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <obstacle_back>
 522:	81 11       	cpse	r24, r1
 524:	08 c0       	rjmp	.+16     	; 0x536 <LED_Tick+0xb8>
 526:	80 91 31 07 	lds	r24, 0x0731	; 0x800731 <led_value>
 52a:	80 7c       	andi	r24, 0xC0	; 192
 52c:	88 63       	ori	r24, 0x38	; 56
 52e:	80 93 31 07 	sts	0x0731, r24	; 0x800731 <led_value>
 532:	88 b9       	out	0x08, r24	; 8
 534:	05 c0       	rjmp	.+10     	; 0x540 <LED_Tick+0xc2>
 536:	80 91 31 07 	lds	r24, 0x0731	; 0x800731 <led_value>
 53a:	80 7c       	andi	r24, 0xC0	; 192
 53c:	80 93 31 07 	sts	0x0731, r24	; 0x800731 <led_value>
 540:	80 91 33 07 	lds	r24, 0x0733	; 0x800733 <steering_left>
 544:	81 30       	cpi	r24, 0x01	; 1
 546:	61 f4       	brne	.+24     	; 0x560 <LED_Tick+0xe2>
 548:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <obstacle_left>
 54c:	81 11       	cpse	r24, r1
 54e:	08 c0       	rjmp	.+16     	; 0x560 <LED_Tick+0xe2>
 550:	80 91 31 07 	lds	r24, 0x0731	; 0x800731 <led_value>
 554:	8f 73       	andi	r24, 0x3F	; 63
 556:	80 64       	ori	r24, 0x40	; 64
 558:	80 93 31 07 	sts	0x0731, r24	; 0x800731 <led_value>
 55c:	88 b9       	out	0x08, r24	; 8
 55e:	18 c0       	rjmp	.+48     	; 0x590 <LED_Tick+0x112>
 560:	80 91 32 07 	lds	r24, 0x0732	; 0x800732 <steering_right>
 564:	88 23       	and	r24, r24
 566:	61 f0       	breq	.+24     	; 0x580 <LED_Tick+0x102>
 568:	80 91 2d 07 	lds	r24, 0x072D	; 0x80072d <obstacle_right>
 56c:	81 11       	cpse	r24, r1
 56e:	08 c0       	rjmp	.+16     	; 0x580 <LED_Tick+0x102>
 570:	80 91 31 07 	lds	r24, 0x0731	; 0x800731 <led_value>
 574:	8f 73       	andi	r24, 0x3F	; 63
 576:	80 68       	ori	r24, 0x80	; 128
 578:	80 93 31 07 	sts	0x0731, r24	; 0x800731 <led_value>
 57c:	88 b9       	out	0x08, r24	; 8
 57e:	08 c0       	rjmp	.+16     	; 0x590 <LED_Tick+0x112>
 580:	80 91 31 07 	lds	r24, 0x0731	; 0x800731 <led_value>
 584:	8f 73       	andi	r24, 0x3F	; 63
 586:	80 93 31 07 	sts	0x0731, r24	; 0x800731 <led_value>
 58a:	88 b9       	out	0x08, r24	; 8
 58c:	01 c0       	rjmp	.+2      	; 0x590 <LED_Tick+0x112>
 58e:	18 b8       	out	0x08, r1	; 8
 590:	80 91 91 07 	lds	r24, 0x0791	; 0x800791 <led_state>
 594:	81 11       	cpse	r24, r1
 596:	10 92 91 07 	sts	0x0791, r1	; 0x800791 <led_state>
 59a:	08 95       	ret

0000059c <LEDSecTask>:
 59c:	10 92 91 07 	sts	0x0791, r1	; 0x800791 <led_state>
 5a0:	6e df       	rcall	.-292    	; 0x47e <LED_Tick>
 5a2:	8f e0       	ldi	r24, 0x0F	; 15
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	21 d4       	rcall	.+2114   	; 0xdea <vTaskDelay>
 5a8:	fb cf       	rjmp	.-10     	; 0x5a0 <LEDSecTask+0x4>

000005aa <LEDSecPulse>:
 5aa:	af 92       	push	r10
 5ac:	bf 92       	push	r11
 5ae:	cf 92       	push	r12
 5b0:	df 92       	push	r13
 5b2:	ef 92       	push	r14
 5b4:	ff 92       	push	r15
 5b6:	0f 93       	push	r16
 5b8:	a1 2c       	mov	r10, r1
 5ba:	b1 2c       	mov	r11, r1
 5bc:	c1 2c       	mov	r12, r1
 5be:	d1 2c       	mov	r13, r1
 5c0:	e1 2c       	mov	r14, r1
 5c2:	f1 2c       	mov	r15, r1
 5c4:	08 2f       	mov	r16, r24
 5c6:	20 e0       	ldi	r18, 0x00	; 0
 5c8:	30 e0       	ldi	r19, 0x00	; 0
 5ca:	45 e5       	ldi	r20, 0x55	; 85
 5cc:	50 e0       	ldi	r21, 0x00	; 0
 5ce:	61 e3       	ldi	r22, 0x31	; 49
 5d0:	71 e0       	ldi	r23, 0x01	; 1
 5d2:	8e ec       	ldi	r24, 0xCE	; 206
 5d4:	92 e0       	ldi	r25, 0x02	; 2
 5d6:	a5 d1       	rcall	.+842    	; 0x922 <xTaskGenericCreate>
 5d8:	0f 91       	pop	r16
 5da:	ff 90       	pop	r15
 5dc:	ef 90       	pop	r14
 5de:	df 90       	pop	r13
 5e0:	cf 90       	pop	r12
 5e2:	bf 90       	pop	r11
 5e4:	af 90       	pop	r10
 5e6:	08 95       	ret

000005e8 <main>:
 
 //--------------------------------------------- Sensor End ----------------------------------//
 
int main(void) 
{ 
   DDRA = 0x00; PORTA=0xFF;
 5e8:	11 b8       	out	0x01, r1	; 1
 5ea:	8f ef       	ldi	r24, 0xFF	; 255
 5ec:	82 b9       	out	0x02, r24	; 2
   DDRC = 0xFF; PORTC = 0x00;
 5ee:	87 b9       	out	0x07, r24	; 7
 5f0:	18 b8       	out	0x08, r1	; 8
   //adc_init();
   initUSART(0);
 5f2:	80 e0       	ldi	r24, 0x00	; 0
 5f4:	28 de       	rcall	.-944    	; 0x246 <initUSART>

   //Start Tasks
   TRANSMISSIONSecPulse(1);   
 5f6:	81 e0       	ldi	r24, 0x01	; 1
 5f8:	23 df       	rcall	.-442    	; 0x440 <TRANSMISSIONSecPulse>
   //JOYSecPulse(1);
   //STEERINGSecPulse(1);
   //IRSecPulse(10);
   LEDSecPulse(1);
 5fa:	81 e0       	ldi	r24, 0x01	; 1
 5fc:	d6 df       	rcall	.-84     	; 0x5aa <LEDSecPulse>
    //RunSchedular 
   vTaskStartScheduler(); 
 5fe:	84 d2       	rcall	.+1288   	; 0xb08 <vTaskStartScheduler>
 600:	80 e0       	ldi	r24, 0x00	; 0
 
   return 0; 
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	08 95       	ret

00000606 <pxPortInitialiseStack>:
 606:	31 e1       	ldi	r19, 0x11	; 17
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 608:	fc 01       	movw	r30, r24
 60a:	30 83       	st	Z, r19
 60c:	31 97       	sbiw	r30, 0x01	; 1
 60e:	22 e2       	ldi	r18, 0x22	; 34
 610:	20 83       	st	Z, r18
 612:	31 97       	sbiw	r30, 0x01	; 1
 614:	a3 e3       	ldi	r26, 0x33	; 51
 616:	a0 83       	st	Z, r26
 618:	31 97       	sbiw	r30, 0x01	; 1
 61a:	60 83       	st	Z, r22
 61c:	31 97       	sbiw	r30, 0x01	; 1
 61e:	70 83       	st	Z, r23
 620:	31 97       	sbiw	r30, 0x01	; 1
 622:	10 82       	st	Z, r1
 624:	31 97       	sbiw	r30, 0x01	; 1
 626:	60 e8       	ldi	r22, 0x80	; 128
 628:	60 83       	st	Z, r22
 62a:	31 97       	sbiw	r30, 0x01	; 1
 62c:	10 82       	st	Z, r1
 62e:	31 97       	sbiw	r30, 0x01	; 1
 630:	62 e0       	ldi	r22, 0x02	; 2
 632:	60 83       	st	Z, r22
 634:	31 97       	sbiw	r30, 0x01	; 1
 636:	63 e0       	ldi	r22, 0x03	; 3
 638:	60 83       	st	Z, r22
 63a:	31 97       	sbiw	r30, 0x01	; 1
 63c:	64 e0       	ldi	r22, 0x04	; 4
 63e:	60 83       	st	Z, r22
 640:	31 97       	sbiw	r30, 0x01	; 1
 642:	65 e0       	ldi	r22, 0x05	; 5
 644:	60 83       	st	Z, r22
 646:	31 97       	sbiw	r30, 0x01	; 1
 648:	66 e0       	ldi	r22, 0x06	; 6
 64a:	60 83       	st	Z, r22
 64c:	31 97       	sbiw	r30, 0x01	; 1
 64e:	67 e0       	ldi	r22, 0x07	; 7
 650:	60 83       	st	Z, r22
 652:	31 97       	sbiw	r30, 0x01	; 1
 654:	68 e0       	ldi	r22, 0x08	; 8
 656:	60 83       	st	Z, r22
 658:	31 97       	sbiw	r30, 0x01	; 1
 65a:	69 e0       	ldi	r22, 0x09	; 9
 65c:	60 83       	st	Z, r22
 65e:	31 97       	sbiw	r30, 0x01	; 1
 660:	60 e1       	ldi	r22, 0x10	; 16
 662:	60 83       	st	Z, r22
 664:	31 97       	sbiw	r30, 0x01	; 1
 666:	30 83       	st	Z, r19
 668:	31 97       	sbiw	r30, 0x01	; 1
 66a:	32 e1       	ldi	r19, 0x12	; 18
 66c:	30 83       	st	Z, r19
 66e:	31 97       	sbiw	r30, 0x01	; 1
 670:	33 e1       	ldi	r19, 0x13	; 19
 672:	30 83       	st	Z, r19
 674:	31 97       	sbiw	r30, 0x01	; 1
 676:	34 e1       	ldi	r19, 0x14	; 20
 678:	30 83       	st	Z, r19
 67a:	31 97       	sbiw	r30, 0x01	; 1
 67c:	35 e1       	ldi	r19, 0x15	; 21
 67e:	30 83       	st	Z, r19
 680:	31 97       	sbiw	r30, 0x01	; 1
 682:	36 e1       	ldi	r19, 0x16	; 22
 684:	30 83       	st	Z, r19
 686:	31 97       	sbiw	r30, 0x01	; 1
 688:	37 e1       	ldi	r19, 0x17	; 23
 68a:	30 83       	st	Z, r19
 68c:	31 97       	sbiw	r30, 0x01	; 1
 68e:	38 e1       	ldi	r19, 0x18	; 24
 690:	30 83       	st	Z, r19
 692:	31 97       	sbiw	r30, 0x01	; 1
 694:	39 e1       	ldi	r19, 0x19	; 25
 696:	30 83       	st	Z, r19
 698:	31 97       	sbiw	r30, 0x01	; 1
 69a:	30 e2       	ldi	r19, 0x20	; 32
 69c:	30 83       	st	Z, r19
 69e:	31 97       	sbiw	r30, 0x01	; 1
 6a0:	31 e2       	ldi	r19, 0x21	; 33
 6a2:	30 83       	st	Z, r19
 6a4:	31 97       	sbiw	r30, 0x01	; 1
 6a6:	20 83       	st	Z, r18
 6a8:	31 97       	sbiw	r30, 0x01	; 1
 6aa:	23 e2       	ldi	r18, 0x23	; 35
 6ac:	20 83       	st	Z, r18
 6ae:	31 97       	sbiw	r30, 0x01	; 1
 6b0:	40 83       	st	Z, r20
 6b2:	31 97       	sbiw	r30, 0x01	; 1
 6b4:	50 83       	st	Z, r21
 6b6:	31 97       	sbiw	r30, 0x01	; 1
 6b8:	26 e2       	ldi	r18, 0x26	; 38
 6ba:	20 83       	st	Z, r18
 6bc:	31 97       	sbiw	r30, 0x01	; 1
 6be:	27 e2       	ldi	r18, 0x27	; 39
 6c0:	20 83       	st	Z, r18
 6c2:	31 97       	sbiw	r30, 0x01	; 1
 6c4:	28 e2       	ldi	r18, 0x28	; 40
 6c6:	20 83       	st	Z, r18
 6c8:	31 97       	sbiw	r30, 0x01	; 1
 6ca:	29 e2       	ldi	r18, 0x29	; 41
 6cc:	20 83       	st	Z, r18
 6ce:	31 97       	sbiw	r30, 0x01	; 1
 6d0:	20 e3       	ldi	r18, 0x30	; 48
 6d2:	20 83       	st	Z, r18
 6d4:	31 97       	sbiw	r30, 0x01	; 1
 6d6:	21 e3       	ldi	r18, 0x31	; 49
 6d8:	20 83       	st	Z, r18
 6da:	86 97       	sbiw	r24, 0x26	; 38
 6dc:	08 95       	ret

000006de <xPortStartScheduler>:
 6de:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 6e2:	8c e7       	ldi	r24, 0x7C	; 124
 6e4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 6e8:	8b e0       	ldi	r24, 0x0B	; 11
 6ea:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 6ee:	ef e6       	ldi	r30, 0x6F	; 111
 6f0:	f0 e0       	ldi	r31, 0x00	; 0
 6f2:	80 81       	ld	r24, Z
 6f4:	82 60       	ori	r24, 0x02	; 2
 6f6:	80 83       	st	Z, r24
 6f8:	a0 91 8e 07 	lds	r26, 0x078E	; 0x80078e <pxCurrentTCB>
 6fc:	b0 91 8f 07 	lds	r27, 0x078F	; 0x80078f <pxCurrentTCB+0x1>
 700:	cd 91       	ld	r28, X+
 702:	cd bf       	out	0x3d, r28	; 61
 704:	dd 91       	ld	r29, X+
 706:	de bf       	out	0x3e, r29	; 62
 708:	ff 91       	pop	r31
 70a:	ef 91       	pop	r30
 70c:	df 91       	pop	r29
 70e:	cf 91       	pop	r28
 710:	bf 91       	pop	r27
 712:	af 91       	pop	r26
 714:	9f 91       	pop	r25
 716:	8f 91       	pop	r24
 718:	7f 91       	pop	r23
 71a:	6f 91       	pop	r22
 71c:	5f 91       	pop	r21
 71e:	4f 91       	pop	r20
 720:	3f 91       	pop	r19
 722:	2f 91       	pop	r18
 724:	1f 91       	pop	r17
 726:	0f 91       	pop	r16
 728:	ff 90       	pop	r15
 72a:	ef 90       	pop	r14
 72c:	df 90       	pop	r13
 72e:	cf 90       	pop	r12
 730:	bf 90       	pop	r11
 732:	af 90       	pop	r10
 734:	9f 90       	pop	r9
 736:	8f 90       	pop	r8
 738:	7f 90       	pop	r7
 73a:	6f 90       	pop	r6
 73c:	5f 90       	pop	r5
 73e:	4f 90       	pop	r4
 740:	3f 90       	pop	r3
 742:	2f 90       	pop	r2
 744:	1f 90       	pop	r1
 746:	0f 90       	pop	r0
 748:	0f be       	out	0x3f, r0	; 63
 74a:	0f 90       	pop	r0
 74c:	08 95       	ret
 74e:	81 e0       	ldi	r24, 0x01	; 1
 750:	08 95       	ret

00000752 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 752:	0f 92       	push	r0
 754:	0f b6       	in	r0, 0x3f	; 63
 756:	f8 94       	cli
 758:	0f 92       	push	r0
 75a:	1f 92       	push	r1
 75c:	11 24       	eor	r1, r1
 75e:	2f 92       	push	r2
 760:	3f 92       	push	r3
 762:	4f 92       	push	r4
 764:	5f 92       	push	r5
 766:	6f 92       	push	r6
 768:	7f 92       	push	r7
 76a:	8f 92       	push	r8
 76c:	9f 92       	push	r9
 76e:	af 92       	push	r10
 770:	bf 92       	push	r11
 772:	cf 92       	push	r12
 774:	df 92       	push	r13
 776:	ef 92       	push	r14
 778:	ff 92       	push	r15
 77a:	0f 93       	push	r16
 77c:	1f 93       	push	r17
 77e:	2f 93       	push	r18
 780:	3f 93       	push	r19
 782:	4f 93       	push	r20
 784:	5f 93       	push	r21
 786:	6f 93       	push	r22
 788:	7f 93       	push	r23
 78a:	8f 93       	push	r24
 78c:	9f 93       	push	r25
 78e:	af 93       	push	r26
 790:	bf 93       	push	r27
 792:	cf 93       	push	r28
 794:	df 93       	push	r29
 796:	ef 93       	push	r30
 798:	ff 93       	push	r31
 79a:	a0 91 8e 07 	lds	r26, 0x078E	; 0x80078e <pxCurrentTCB>
 79e:	b0 91 8f 07 	lds	r27, 0x078F	; 0x80078f <pxCurrentTCB+0x1>
 7a2:	0d b6       	in	r0, 0x3d	; 61
 7a4:	0d 92       	st	X+, r0
 7a6:	0e b6       	in	r0, 0x3e	; 62
 7a8:	0d 92       	st	X+, r0
	vTaskSwitchContext();
 7aa:	70 d3       	rcall	.+1760   	; 0xe8c <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 7ac:	a0 91 8e 07 	lds	r26, 0x078E	; 0x80078e <pxCurrentTCB>
 7b0:	b0 91 8f 07 	lds	r27, 0x078F	; 0x80078f <pxCurrentTCB+0x1>
 7b4:	cd 91       	ld	r28, X+
 7b6:	cd bf       	out	0x3d, r28	; 61
 7b8:	dd 91       	ld	r29, X+
 7ba:	de bf       	out	0x3e, r29	; 62
 7bc:	ff 91       	pop	r31
 7be:	ef 91       	pop	r30
 7c0:	df 91       	pop	r29
 7c2:	cf 91       	pop	r28
 7c4:	bf 91       	pop	r27
 7c6:	af 91       	pop	r26
 7c8:	9f 91       	pop	r25
 7ca:	8f 91       	pop	r24
 7cc:	7f 91       	pop	r23
 7ce:	6f 91       	pop	r22
 7d0:	5f 91       	pop	r21
 7d2:	4f 91       	pop	r20
 7d4:	3f 91       	pop	r19
 7d6:	2f 91       	pop	r18
 7d8:	1f 91       	pop	r17
 7da:	0f 91       	pop	r16
 7dc:	ff 90       	pop	r15
 7de:	ef 90       	pop	r14
 7e0:	df 90       	pop	r13
 7e2:	cf 90       	pop	r12
 7e4:	bf 90       	pop	r11
 7e6:	af 90       	pop	r10
 7e8:	9f 90       	pop	r9
 7ea:	8f 90       	pop	r8
 7ec:	7f 90       	pop	r7
 7ee:	6f 90       	pop	r6
 7f0:	5f 90       	pop	r5
 7f2:	4f 90       	pop	r4
 7f4:	3f 90       	pop	r3
 7f6:	2f 90       	pop	r2
 7f8:	1f 90       	pop	r1
 7fa:	0f 90       	pop	r0
 7fc:	0f be       	out	0x3f, r0	; 63
 7fe:	0f 90       	pop	r0

	asm volatile ( "ret" );
 800:	08 95       	ret

00000802 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 802:	0f 92       	push	r0
 804:	0f b6       	in	r0, 0x3f	; 63
 806:	f8 94       	cli
 808:	0f 92       	push	r0
 80a:	1f 92       	push	r1
 80c:	11 24       	eor	r1, r1
 80e:	2f 92       	push	r2
 810:	3f 92       	push	r3
 812:	4f 92       	push	r4
 814:	5f 92       	push	r5
 816:	6f 92       	push	r6
 818:	7f 92       	push	r7
 81a:	8f 92       	push	r8
 81c:	9f 92       	push	r9
 81e:	af 92       	push	r10
 820:	bf 92       	push	r11
 822:	cf 92       	push	r12
 824:	df 92       	push	r13
 826:	ef 92       	push	r14
 828:	ff 92       	push	r15
 82a:	0f 93       	push	r16
 82c:	1f 93       	push	r17
 82e:	2f 93       	push	r18
 830:	3f 93       	push	r19
 832:	4f 93       	push	r20
 834:	5f 93       	push	r21
 836:	6f 93       	push	r22
 838:	7f 93       	push	r23
 83a:	8f 93       	push	r24
 83c:	9f 93       	push	r25
 83e:	af 93       	push	r26
 840:	bf 93       	push	r27
 842:	cf 93       	push	r28
 844:	df 93       	push	r29
 846:	ef 93       	push	r30
 848:	ff 93       	push	r31
 84a:	a0 91 8e 07 	lds	r26, 0x078E	; 0x80078e <pxCurrentTCB>
 84e:	b0 91 8f 07 	lds	r27, 0x078F	; 0x80078f <pxCurrentTCB+0x1>
 852:	0d b6       	in	r0, 0x3d	; 61
 854:	0d 92       	st	X+, r0
 856:	0e b6       	in	r0, 0x3e	; 62
 858:	0d 92       	st	X+, r0
	vTaskIncrementTick();
 85a:	85 d1       	rcall	.+778    	; 0xb66 <vTaskIncrementTick>
	vTaskSwitchContext();
 85c:	17 d3       	rcall	.+1582   	; 0xe8c <vTaskSwitchContext>
 85e:	a0 91 8e 07 	lds	r26, 0x078E	; 0x80078e <pxCurrentTCB>
	portRESTORE_CONTEXT();
 862:	b0 91 8f 07 	lds	r27, 0x078F	; 0x80078f <pxCurrentTCB+0x1>
 866:	cd 91       	ld	r28, X+
 868:	cd bf       	out	0x3d, r28	; 61
 86a:	dd 91       	ld	r29, X+
 86c:	de bf       	out	0x3e, r29	; 62
 86e:	ff 91       	pop	r31
 870:	ef 91       	pop	r30
 872:	df 91       	pop	r29
 874:	cf 91       	pop	r28
 876:	bf 91       	pop	r27
 878:	af 91       	pop	r26
 87a:	9f 91       	pop	r25
 87c:	8f 91       	pop	r24
 87e:	7f 91       	pop	r23
 880:	6f 91       	pop	r22
 882:	5f 91       	pop	r21
 884:	4f 91       	pop	r20
 886:	3f 91       	pop	r19
 888:	2f 91       	pop	r18
 88a:	1f 91       	pop	r17
 88c:	0f 91       	pop	r16
 88e:	ff 90       	pop	r15
 890:	ef 90       	pop	r14
 892:	df 90       	pop	r13
 894:	cf 90       	pop	r12
 896:	bf 90       	pop	r11
 898:	af 90       	pop	r10
 89a:	9f 90       	pop	r9
 89c:	8f 90       	pop	r8
 89e:	7f 90       	pop	r7
 8a0:	6f 90       	pop	r6
 8a2:	5f 90       	pop	r5
 8a4:	4f 90       	pop	r4
 8a6:	3f 90       	pop	r3
 8a8:	2f 90       	pop	r2
 8aa:	1f 90       	pop	r1
 8ac:	0f 90       	pop	r0
 8ae:	0f be       	out	0x3f, r0	; 63
 8b0:	0f 90       	pop	r0
 8b2:	08 95       	ret

000008b4 <__vector_13>:

	asm volatile ( "ret" );
 8b4:	a6 df       	rcall	.-180    	; 0x802 <vPortYieldFromTick>
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
		asm volatile ( "reti" );
 8b6:	18 95       	reti

000008b8 <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
 8b8:	cf 93       	push	r28
 8ba:	df 93       	push	r29
 8bc:	ec 01       	movw	r28, r24
 8be:	e0 91 8e 07 	lds	r30, 0x078E	; 0x80078e <pxCurrentTCB>
 8c2:	f0 91 8f 07 	lds	r31, 0x078F	; 0x80078f <pxCurrentTCB+0x1>
 8c6:	93 83       	std	Z+3, r25	; 0x03
 8c8:	82 83       	std	Z+2, r24	; 0x02
 8ca:	80 91 3e 07 	lds	r24, 0x073E	; 0x80073e <xTickCount>
 8ce:	90 91 3f 07 	lds	r25, 0x073F	; 0x80073f <xTickCount+0x1>
 8d2:	c8 17       	cp	r28, r24
 8d4:	d9 07       	cpc	r29, r25
 8d6:	60 f4       	brcc	.+24     	; 0x8f0 <prvAddCurrentTaskToDelayedList+0x38>
 8d8:	60 91 8e 07 	lds	r22, 0x078E	; 0x80078e <pxCurrentTCB>
 8dc:	70 91 8f 07 	lds	r23, 0x078F	; 0x80078f <pxCurrentTCB+0x1>
 8e0:	80 91 54 07 	lds	r24, 0x0754	; 0x800754 <pxOverflowDelayedTaskList>
 8e4:	90 91 55 07 	lds	r25, 0x0755	; 0x800755 <pxOverflowDelayedTaskList+0x1>
 8e8:	6e 5f       	subi	r22, 0xFE	; 254
 8ea:	7f 4f       	sbci	r23, 0xFF	; 255
 8ec:	4b dc       	rcall	.-1898   	; 0x184 <vListInsert>
 8ee:	16 c0       	rjmp	.+44     	; 0x91c <prvAddCurrentTaskToDelayedList+0x64>
 8f0:	60 91 8e 07 	lds	r22, 0x078E	; 0x80078e <pxCurrentTCB>
 8f4:	70 91 8f 07 	lds	r23, 0x078F	; 0x80078f <pxCurrentTCB+0x1>
 8f8:	80 91 56 07 	lds	r24, 0x0756	; 0x800756 <pxDelayedTaskList>
 8fc:	90 91 57 07 	lds	r25, 0x0757	; 0x800757 <pxDelayedTaskList+0x1>
 900:	6e 5f       	subi	r22, 0xFE	; 254
 902:	7f 4f       	sbci	r23, 0xFF	; 255
 904:	3f dc       	rcall	.-1922   	; 0x184 <vListInsert>
 906:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 90a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 90e:	c8 17       	cp	r28, r24
 910:	d9 07       	cpc	r29, r25
 912:	20 f4       	brcc	.+8      	; 0x91c <prvAddCurrentTaskToDelayedList+0x64>
 914:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <__data_start+0x1>
 918:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
 91c:	df 91       	pop	r29
 91e:	cf 91       	pop	r28
 920:	08 95       	ret

00000922 <xTaskGenericCreate>:
 922:	4f 92       	push	r4
 924:	5f 92       	push	r5
 926:	6f 92       	push	r6
 928:	7f 92       	push	r7
 92a:	8f 92       	push	r8
 92c:	9f 92       	push	r9
 92e:	af 92       	push	r10
 930:	bf 92       	push	r11
 932:	cf 92       	push	r12
 934:	df 92       	push	r13
 936:	ef 92       	push	r14
 938:	ff 92       	push	r15
 93a:	0f 93       	push	r16
 93c:	1f 93       	push	r17
 93e:	cf 93       	push	r28
 940:	df 93       	push	r29
 942:	5c 01       	movw	r10, r24
 944:	4b 01       	movw	r8, r22
 946:	3a 01       	movw	r6, r20
 948:	29 01       	movw	r4, r18
 94a:	81 e2       	ldi	r24, 0x21	; 33
 94c:	90 e0       	ldi	r25, 0x00	; 0
 94e:	bc db       	rcall	.-2184   	; 0xc8 <pvPortMalloc>
 950:	ec 01       	movw	r28, r24
 952:	89 2b       	or	r24, r25
 954:	09 f4       	brne	.+2      	; 0x958 <xTaskGenericCreate+0x36>
 956:	c6 c0       	rjmp	.+396    	; 0xae4 <xTaskGenericCreate+0x1c2>
 958:	c1 14       	cp	r12, r1
 95a:	d1 04       	cpc	r13, r1
 95c:	09 f0       	breq	.+2      	; 0x960 <xTaskGenericCreate+0x3e>
 95e:	be c0       	rjmp	.+380    	; 0xadc <xTaskGenericCreate+0x1ba>
 960:	c3 01       	movw	r24, r6
 962:	b2 db       	rcall	.-2204   	; 0xc8 <pvPortMalloc>
 964:	98 8f       	std	Y+24, r25	; 0x18
 966:	8f 8b       	std	Y+23, r24	; 0x17
 968:	00 97       	sbiw	r24, 0x00	; 0
 96a:	19 f4       	brne	.+6      	; 0x972 <xTaskGenericCreate+0x50>
 96c:	ce 01       	movw	r24, r28
 96e:	d0 db       	rcall	.-2144   	; 0x110 <vPortFree>
 970:	b9 c0       	rjmp	.+370    	; 0xae4 <xTaskGenericCreate+0x1c2>
 972:	a3 01       	movw	r20, r6
 974:	65 ea       	ldi	r22, 0xA5	; 165
 976:	70 e0       	ldi	r23, 0x00	; 0
 978:	f5 d2       	rcall	.+1514   	; 0xf64 <memset>
 97a:	93 01       	movw	r18, r6
 97c:	21 50       	subi	r18, 0x01	; 1
 97e:	31 09       	sbc	r19, r1
 980:	8f 89       	ldd	r24, Y+23	; 0x17
 982:	98 8d       	ldd	r25, Y+24	; 0x18
 984:	3c 01       	movw	r6, r24
 986:	62 0e       	add	r6, r18
 988:	73 1e       	adc	r7, r19
 98a:	48 e0       	ldi	r20, 0x08	; 8
 98c:	50 e0       	ldi	r21, 0x00	; 0
 98e:	b4 01       	movw	r22, r8
 990:	ce 01       	movw	r24, r28
 992:	49 96       	adiw	r24, 0x19	; 25
 994:	ee d2       	rcall	.+1500   	; 0xf72 <strncpy>
 996:	18 a2       	std	Y+32, r1	; 0x20
 998:	10 2f       	mov	r17, r16
 99a:	04 30       	cpi	r16, 0x04	; 4
 99c:	08 f0       	brcs	.+2      	; 0x9a0 <xTaskGenericCreate+0x7e>
 99e:	13 e0       	ldi	r17, 0x03	; 3
 9a0:	1e 8b       	std	Y+22, r17	; 0x16
 9a2:	6e 01       	movw	r12, r28
 9a4:	82 e0       	ldi	r24, 0x02	; 2
 9a6:	c8 0e       	add	r12, r24
 9a8:	d1 1c       	adc	r13, r1
 9aa:	c6 01       	movw	r24, r12
 9ac:	c0 db       	rcall	.-2176   	; 0x12e <vListInitialiseItem>
 9ae:	ce 01       	movw	r24, r28
 9b0:	0c 96       	adiw	r24, 0x0c	; 12
 9b2:	bd db       	rcall	.-2182   	; 0x12e <vListInitialiseItem>
 9b4:	d9 87       	std	Y+9, r29	; 0x09
 9b6:	c8 87       	std	Y+8, r28	; 0x08
 9b8:	84 e0       	ldi	r24, 0x04	; 4
 9ba:	90 e0       	ldi	r25, 0x00	; 0
 9bc:	81 1b       	sub	r24, r17
 9be:	91 09       	sbc	r25, r1
 9c0:	9d 87       	std	Y+13, r25	; 0x0d
 9c2:	8c 87       	std	Y+12, r24	; 0x0c
 9c4:	db 8b       	std	Y+19, r29	; 0x13
 9c6:	ca 8b       	std	Y+18, r28	; 0x12
 9c8:	a2 01       	movw	r20, r4
 9ca:	b5 01       	movw	r22, r10
 9cc:	c3 01       	movw	r24, r6
 9ce:	1b de       	rcall	.-970    	; 0x606 <pxPortInitialiseStack>
 9d0:	99 83       	std	Y+1, r25	; 0x01
 9d2:	88 83       	st	Y, r24
 9d4:	e1 14       	cp	r14, r1
 9d6:	f1 04       	cpc	r15, r1
 9d8:	19 f0       	breq	.+6      	; 0x9e0 <xTaskGenericCreate+0xbe>
 9da:	f7 01       	movw	r30, r14
 9dc:	d1 83       	std	Z+1, r29	; 0x01
 9de:	c0 83       	st	Z, r28
 9e0:	0f b6       	in	r0, 0x3f	; 63
 9e2:	f8 94       	cli
 9e4:	0f 92       	push	r0
 9e6:	80 91 40 07 	lds	r24, 0x0740	; 0x800740 <uxCurrentNumberOfTasks>
 9ea:	8f 5f       	subi	r24, 0xFF	; 255
 9ec:	80 93 40 07 	sts	0x0740, r24	; 0x800740 <uxCurrentNumberOfTasks>
 9f0:	80 91 8e 07 	lds	r24, 0x078E	; 0x80078e <pxCurrentTCB>
 9f4:	90 91 8f 07 	lds	r25, 0x078F	; 0x80078f <pxCurrentTCB+0x1>
 9f8:	89 2b       	or	r24, r25
 9fa:	69 f5       	brne	.+90     	; 0xa56 <xTaskGenericCreate+0x134>
 9fc:	d0 93 8f 07 	sts	0x078F, r29	; 0x80078f <pxCurrentTCB+0x1>
 a00:	c0 93 8e 07 	sts	0x078E, r28	; 0x80078e <pxCurrentTCB>
 a04:	80 91 40 07 	lds	r24, 0x0740	; 0x800740 <uxCurrentNumberOfTasks>
 a08:	81 30       	cpi	r24, 0x01	; 1
 a0a:	a1 f5       	brne	.+104    	; 0xa74 <xTaskGenericCreate+0x152>
 a0c:	8a e6       	ldi	r24, 0x6A	; 106
 a0e:	97 e0       	ldi	r25, 0x07	; 7
 a10:	80 db       	rcall	.-2304   	; 0x112 <vListInitialise>
 a12:	83 e7       	ldi	r24, 0x73	; 115
 a14:	97 e0       	ldi	r25, 0x07	; 7
 a16:	7d db       	rcall	.-2310   	; 0x112 <vListInitialise>
 a18:	8c e7       	ldi	r24, 0x7C	; 124
 a1a:	97 e0       	ldi	r25, 0x07	; 7
 a1c:	7a db       	rcall	.-2316   	; 0x112 <vListInitialise>
 a1e:	85 e8       	ldi	r24, 0x85	; 133
 a20:	97 e0       	ldi	r25, 0x07	; 7
 a22:	77 db       	rcall	.-2322   	; 0x112 <vListInitialise>
 a24:	81 e6       	ldi	r24, 0x61	; 97
 a26:	97 e0       	ldi	r25, 0x07	; 7
 a28:	74 db       	rcall	.-2328   	; 0x112 <vListInitialise>
 a2a:	88 e5       	ldi	r24, 0x58	; 88
 a2c:	97 e0       	ldi	r25, 0x07	; 7
 a2e:	71 db       	rcall	.-2334   	; 0x112 <vListInitialise>
 a30:	8b e4       	ldi	r24, 0x4B	; 75
 a32:	97 e0       	ldi	r25, 0x07	; 7
 a34:	6e db       	rcall	.-2340   	; 0x112 <vListInitialise>
 a36:	82 e4       	ldi	r24, 0x42	; 66
 a38:	97 e0       	ldi	r25, 0x07	; 7
 a3a:	6b db       	rcall	.-2346   	; 0x112 <vListInitialise>
 a3c:	81 e6       	ldi	r24, 0x61	; 97
 a3e:	97 e0       	ldi	r25, 0x07	; 7
 a40:	90 93 57 07 	sts	0x0757, r25	; 0x800757 <pxDelayedTaskList+0x1>
 a44:	80 93 56 07 	sts	0x0756, r24	; 0x800756 <pxDelayedTaskList>
 a48:	88 e5       	ldi	r24, 0x58	; 88
 a4a:	97 e0       	ldi	r25, 0x07	; 7
 a4c:	90 93 55 07 	sts	0x0755, r25	; 0x800755 <pxOverflowDelayedTaskList+0x1>
 a50:	80 93 54 07 	sts	0x0754, r24	; 0x800754 <pxOverflowDelayedTaskList>
 a54:	0f c0       	rjmp	.+30     	; 0xa74 <xTaskGenericCreate+0x152>
 a56:	80 91 3b 07 	lds	r24, 0x073B	; 0x80073b <xSchedulerRunning>
 a5a:	81 11       	cpse	r24, r1
 a5c:	0b c0       	rjmp	.+22     	; 0xa74 <xTaskGenericCreate+0x152>
 a5e:	e0 91 8e 07 	lds	r30, 0x078E	; 0x80078e <pxCurrentTCB>
 a62:	f0 91 8f 07 	lds	r31, 0x078F	; 0x80078f <pxCurrentTCB+0x1>
 a66:	86 89       	ldd	r24, Z+22	; 0x16
 a68:	08 17       	cp	r16, r24
 a6a:	20 f0       	brcs	.+8      	; 0xa74 <xTaskGenericCreate+0x152>
 a6c:	d0 93 8f 07 	sts	0x078F, r29	; 0x80078f <pxCurrentTCB+0x1>
 a70:	c0 93 8e 07 	sts	0x078E, r28	; 0x80078e <pxCurrentTCB>
 a74:	8e 89       	ldd	r24, Y+22	; 0x16
 a76:	90 91 3d 07 	lds	r25, 0x073D	; 0x80073d <uxTopUsedPriority>
 a7a:	98 17       	cp	r25, r24
 a7c:	10 f4       	brcc	.+4      	; 0xa82 <xTaskGenericCreate+0x160>
 a7e:	80 93 3d 07 	sts	0x073D, r24	; 0x80073d <uxTopUsedPriority>
 a82:	90 91 36 07 	lds	r25, 0x0736	; 0x800736 <uxTaskNumber>
 a86:	9f 5f       	subi	r25, 0xFF	; 255
 a88:	90 93 36 07 	sts	0x0736, r25	; 0x800736 <uxTaskNumber>
 a8c:	90 91 3c 07 	lds	r25, 0x073C	; 0x80073c <uxTopReadyPriority>
 a90:	98 17       	cp	r25, r24
 a92:	10 f4       	brcc	.+4      	; 0xa98 <xTaskGenericCreate+0x176>
 a94:	80 93 3c 07 	sts	0x073C, r24	; 0x80073c <uxTopReadyPriority>
 a98:	90 e0       	ldi	r25, 0x00	; 0
 a9a:	9c 01       	movw	r18, r24
 a9c:	22 0f       	add	r18, r18
 a9e:	33 1f       	adc	r19, r19
 aa0:	22 0f       	add	r18, r18
 aa2:	33 1f       	adc	r19, r19
 aa4:	22 0f       	add	r18, r18
 aa6:	33 1f       	adc	r19, r19
 aa8:	82 0f       	add	r24, r18
 aaa:	93 1f       	adc	r25, r19
 aac:	b6 01       	movw	r22, r12
 aae:	86 59       	subi	r24, 0x96	; 150
 ab0:	98 4f       	sbci	r25, 0xF8	; 248
 ab2:	41 db       	rcall	.-2430   	; 0x136 <vListInsertEnd>
 ab4:	0f 90       	pop	r0
 ab6:	0f be       	out	0x3f, r0	; 63
 ab8:	80 91 3b 07 	lds	r24, 0x073B	; 0x80073b <xSchedulerRunning>
 abc:	88 23       	and	r24, r24
 abe:	51 f0       	breq	.+20     	; 0xad4 <xTaskGenericCreate+0x1b2>
 ac0:	e0 91 8e 07 	lds	r30, 0x078E	; 0x80078e <pxCurrentTCB>
 ac4:	f0 91 8f 07 	lds	r31, 0x078F	; 0x80078f <pxCurrentTCB+0x1>
 ac8:	86 89       	ldd	r24, Z+22	; 0x16
 aca:	80 17       	cp	r24, r16
 acc:	28 f4       	brcc	.+10     	; 0xad8 <xTaskGenericCreate+0x1b6>
 ace:	41 de       	rcall	.-894    	; 0x752 <vPortYield>
 ad0:	81 e0       	ldi	r24, 0x01	; 1
 ad2:	09 c0       	rjmp	.+18     	; 0xae6 <xTaskGenericCreate+0x1c4>
 ad4:	81 e0       	ldi	r24, 0x01	; 1
 ad6:	07 c0       	rjmp	.+14     	; 0xae6 <xTaskGenericCreate+0x1c4>
 ad8:	81 e0       	ldi	r24, 0x01	; 1
 ada:	05 c0       	rjmp	.+10     	; 0xae6 <xTaskGenericCreate+0x1c4>
 adc:	d8 8e       	std	Y+24, r13	; 0x18
 ade:	cf 8a       	std	Y+23, r12	; 0x17
 ae0:	c6 01       	movw	r24, r12
 ae2:	47 cf       	rjmp	.-370    	; 0x972 <xTaskGenericCreate+0x50>
 ae4:	8f ef       	ldi	r24, 0xFF	; 255
 ae6:	df 91       	pop	r29
 ae8:	cf 91       	pop	r28
 aea:	1f 91       	pop	r17
 aec:	0f 91       	pop	r16
 aee:	ff 90       	pop	r15
 af0:	ef 90       	pop	r14
 af2:	df 90       	pop	r13
 af4:	cf 90       	pop	r12
 af6:	bf 90       	pop	r11
 af8:	af 90       	pop	r10
 afa:	9f 90       	pop	r9
 afc:	8f 90       	pop	r8
 afe:	7f 90       	pop	r7
 b00:	6f 90       	pop	r6
 b02:	5f 90       	pop	r5
 b04:	4f 90       	pop	r4
 b06:	08 95       	ret

00000b08 <vTaskStartScheduler>:
 b08:	af 92       	push	r10
 b0a:	bf 92       	push	r11
 b0c:	cf 92       	push	r12
 b0e:	df 92       	push	r13
 b10:	ef 92       	push	r14
 b12:	ff 92       	push	r15
 b14:	0f 93       	push	r16
 b16:	a1 2c       	mov	r10, r1
 b18:	b1 2c       	mov	r11, r1
 b1a:	c1 2c       	mov	r12, r1
 b1c:	d1 2c       	mov	r13, r1
 b1e:	e1 2c       	mov	r14, r1
 b20:	f1 2c       	mov	r15, r1
 b22:	00 e0       	ldi	r16, 0x00	; 0
 b24:	20 e0       	ldi	r18, 0x00	; 0
 b26:	30 e0       	ldi	r19, 0x00	; 0
 b28:	45 e5       	ldi	r20, 0x55	; 85
 b2a:	50 e0       	ldi	r21, 0x00	; 0
 b2c:	66 e4       	ldi	r22, 0x46	; 70
 b2e:	71 e0       	ldi	r23, 0x01	; 1
 b30:	80 e1       	ldi	r24, 0x10	; 16
 b32:	97 e0       	ldi	r25, 0x07	; 7
 b34:	f6 de       	rcall	.-532    	; 0x922 <xTaskGenericCreate>
 b36:	81 30       	cpi	r24, 0x01	; 1
 b38:	41 f4       	brne	.+16     	; 0xb4a <vTaskStartScheduler+0x42>
 b3a:	f8 94       	cli
 b3c:	80 93 3b 07 	sts	0x073B, r24	; 0x80073b <xSchedulerRunning>
 b40:	10 92 3f 07 	sts	0x073F, r1	; 0x80073f <xTickCount+0x1>
 b44:	10 92 3e 07 	sts	0x073E, r1	; 0x80073e <xTickCount>
 b48:	ca dd       	rcall	.-1132   	; 0x6de <xPortStartScheduler>
 b4a:	0f 91       	pop	r16
 b4c:	ff 90       	pop	r15
 b4e:	ef 90       	pop	r14
 b50:	df 90       	pop	r13
 b52:	cf 90       	pop	r12
 b54:	bf 90       	pop	r11
 b56:	af 90       	pop	r10
 b58:	08 95       	ret

00000b5a <vTaskSuspendAll>:
 b5a:	80 91 3a 07 	lds	r24, 0x073A	; 0x80073a <uxSchedulerSuspended>
 b5e:	8f 5f       	subi	r24, 0xFF	; 255
 b60:	80 93 3a 07 	sts	0x073A, r24	; 0x80073a <uxSchedulerSuspended>
 b64:	08 95       	ret

00000b66 <vTaskIncrementTick>:
 b66:	0f 93       	push	r16
 b68:	1f 93       	push	r17
 b6a:	cf 93       	push	r28
 b6c:	df 93       	push	r29
 b6e:	80 91 3a 07 	lds	r24, 0x073A	; 0x80073a <uxSchedulerSuspended>
 b72:	81 11       	cpse	r24, r1
 b74:	af c0       	rjmp	.+350    	; 0xcd4 <vTaskIncrementTick+0x16e>
 b76:	80 91 3e 07 	lds	r24, 0x073E	; 0x80073e <xTickCount>
 b7a:	90 91 3f 07 	lds	r25, 0x073F	; 0x80073f <xTickCount+0x1>
 b7e:	01 96       	adiw	r24, 0x01	; 1
 b80:	90 93 3f 07 	sts	0x073F, r25	; 0x80073f <xTickCount+0x1>
 b84:	80 93 3e 07 	sts	0x073E, r24	; 0x80073e <xTickCount>
 b88:	80 91 3e 07 	lds	r24, 0x073E	; 0x80073e <xTickCount>
 b8c:	90 91 3f 07 	lds	r25, 0x073F	; 0x80073f <xTickCount+0x1>
 b90:	89 2b       	or	r24, r25
 b92:	99 f5       	brne	.+102    	; 0xbfa <vTaskIncrementTick+0x94>
 b94:	80 91 56 07 	lds	r24, 0x0756	; 0x800756 <pxDelayedTaskList>
 b98:	90 91 57 07 	lds	r25, 0x0757	; 0x800757 <pxDelayedTaskList+0x1>
 b9c:	20 91 54 07 	lds	r18, 0x0754	; 0x800754 <pxOverflowDelayedTaskList>
 ba0:	30 91 55 07 	lds	r19, 0x0755	; 0x800755 <pxOverflowDelayedTaskList+0x1>
 ba4:	30 93 57 07 	sts	0x0757, r19	; 0x800757 <pxDelayedTaskList+0x1>
 ba8:	20 93 56 07 	sts	0x0756, r18	; 0x800756 <pxDelayedTaskList>
 bac:	90 93 55 07 	sts	0x0755, r25	; 0x800755 <pxOverflowDelayedTaskList+0x1>
 bb0:	80 93 54 07 	sts	0x0754, r24	; 0x800754 <pxOverflowDelayedTaskList>
 bb4:	80 91 37 07 	lds	r24, 0x0737	; 0x800737 <xNumOfOverflows>
 bb8:	8f 5f       	subi	r24, 0xFF	; 255
 bba:	80 93 37 07 	sts	0x0737, r24	; 0x800737 <xNumOfOverflows>
 bbe:	e0 91 56 07 	lds	r30, 0x0756	; 0x800756 <pxDelayedTaskList>
 bc2:	f0 91 57 07 	lds	r31, 0x0757	; 0x800757 <pxDelayedTaskList+0x1>
 bc6:	80 81       	ld	r24, Z
 bc8:	81 11       	cpse	r24, r1
 bca:	07 c0       	rjmp	.+14     	; 0xbda <vTaskIncrementTick+0x74>
 bcc:	8f ef       	ldi	r24, 0xFF	; 255
 bce:	9f ef       	ldi	r25, 0xFF	; 255
 bd0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 bd4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 bd8:	10 c0       	rjmp	.+32     	; 0xbfa <vTaskIncrementTick+0x94>
 bda:	e0 91 56 07 	lds	r30, 0x0756	; 0x800756 <pxDelayedTaskList>
 bde:	f0 91 57 07 	lds	r31, 0x0757	; 0x800757 <pxDelayedTaskList+0x1>
 be2:	05 80       	ldd	r0, Z+5	; 0x05
 be4:	f6 81       	ldd	r31, Z+6	; 0x06
 be6:	e0 2d       	mov	r30, r0
 be8:	06 80       	ldd	r0, Z+6	; 0x06
 bea:	f7 81       	ldd	r31, Z+7	; 0x07
 bec:	e0 2d       	mov	r30, r0
 bee:	82 81       	ldd	r24, Z+2	; 0x02
 bf0:	93 81       	ldd	r25, Z+3	; 0x03
 bf2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 bf6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 bfa:	20 91 3e 07 	lds	r18, 0x073E	; 0x80073e <xTickCount>
 bfe:	30 91 3f 07 	lds	r19, 0x073F	; 0x80073f <xTickCount+0x1>
 c02:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 c06:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 c0a:	28 17       	cp	r18, r24
 c0c:	39 07       	cpc	r19, r25
 c0e:	08 f4       	brcc	.+2      	; 0xc12 <vTaskIncrementTick+0xac>
 c10:	66 c0       	rjmp	.+204    	; 0xcde <vTaskIncrementTick+0x178>
 c12:	e0 91 56 07 	lds	r30, 0x0756	; 0x800756 <pxDelayedTaskList>
 c16:	f0 91 57 07 	lds	r31, 0x0757	; 0x800757 <pxDelayedTaskList+0x1>
 c1a:	80 81       	ld	r24, Z
 c1c:	88 23       	and	r24, r24
 c1e:	99 f0       	breq	.+38     	; 0xc46 <vTaskIncrementTick+0xe0>
 c20:	e0 91 56 07 	lds	r30, 0x0756	; 0x800756 <pxDelayedTaskList>
 c24:	f0 91 57 07 	lds	r31, 0x0757	; 0x800757 <pxDelayedTaskList+0x1>
 c28:	05 80       	ldd	r0, Z+5	; 0x05
 c2a:	f6 81       	ldd	r31, Z+6	; 0x06
 c2c:	e0 2d       	mov	r30, r0
 c2e:	c6 81       	ldd	r28, Z+6	; 0x06
 c30:	d7 81       	ldd	r29, Z+7	; 0x07
 c32:	8a 81       	ldd	r24, Y+2	; 0x02
 c34:	9b 81       	ldd	r25, Y+3	; 0x03
 c36:	20 91 3e 07 	lds	r18, 0x073E	; 0x80073e <xTickCount>
 c3a:	30 91 3f 07 	lds	r19, 0x073F	; 0x80073f <xTickCount+0x1>
 c3e:	28 17       	cp	r18, r24
 c40:	39 07       	cpc	r19, r25
 c42:	f8 f4       	brcc	.+62     	; 0xc82 <vTaskIncrementTick+0x11c>
 c44:	19 c0       	rjmp	.+50     	; 0xc78 <vTaskIncrementTick+0x112>
 c46:	8f ef       	ldi	r24, 0xFF	; 255
 c48:	9f ef       	ldi	r25, 0xFF	; 255
 c4a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 c4e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 c52:	45 c0       	rjmp	.+138    	; 0xcde <vTaskIncrementTick+0x178>
 c54:	e0 91 56 07 	lds	r30, 0x0756	; 0x800756 <pxDelayedTaskList>
 c58:	f0 91 57 07 	lds	r31, 0x0757	; 0x800757 <pxDelayedTaskList+0x1>
 c5c:	05 80       	ldd	r0, Z+5	; 0x05
 c5e:	f6 81       	ldd	r31, Z+6	; 0x06
 c60:	e0 2d       	mov	r30, r0
 c62:	c6 81       	ldd	r28, Z+6	; 0x06
 c64:	d7 81       	ldd	r29, Z+7	; 0x07
 c66:	8a 81       	ldd	r24, Y+2	; 0x02
 c68:	9b 81       	ldd	r25, Y+3	; 0x03
 c6a:	20 91 3e 07 	lds	r18, 0x073E	; 0x80073e <xTickCount>
 c6e:	30 91 3f 07 	lds	r19, 0x073F	; 0x80073f <xTickCount+0x1>
 c72:	28 17       	cp	r18, r24
 c74:	39 07       	cpc	r19, r25
 c76:	28 f4       	brcc	.+10     	; 0xc82 <vTaskIncrementTick+0x11c>
 c78:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 c7c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 c80:	2e c0       	rjmp	.+92     	; 0xcde <vTaskIncrementTick+0x178>
 c82:	8e 01       	movw	r16, r28
 c84:	0e 5f       	subi	r16, 0xFE	; 254
 c86:	1f 4f       	sbci	r17, 0xFF	; 255
 c88:	c8 01       	movw	r24, r16
 c8a:	b7 da       	rcall	.-2706   	; 0x1fa <vListRemove>
 c8c:	8c 89       	ldd	r24, Y+20	; 0x14
 c8e:	9d 89       	ldd	r25, Y+21	; 0x15
 c90:	89 2b       	or	r24, r25
 c92:	19 f0       	breq	.+6      	; 0xc9a <vTaskIncrementTick+0x134>
 c94:	ce 01       	movw	r24, r28
 c96:	0c 96       	adiw	r24, 0x0c	; 12
 c98:	b0 da       	rcall	.-2720   	; 0x1fa <vListRemove>
 c9a:	8e 89       	ldd	r24, Y+22	; 0x16
 c9c:	90 91 3c 07 	lds	r25, 0x073C	; 0x80073c <uxTopReadyPriority>
 ca0:	98 17       	cp	r25, r24
 ca2:	10 f4       	brcc	.+4      	; 0xca8 <vTaskIncrementTick+0x142>
 ca4:	80 93 3c 07 	sts	0x073C, r24	; 0x80073c <uxTopReadyPriority>
 ca8:	90 e0       	ldi	r25, 0x00	; 0
 caa:	9c 01       	movw	r18, r24
 cac:	22 0f       	add	r18, r18
 cae:	33 1f       	adc	r19, r19
 cb0:	22 0f       	add	r18, r18
 cb2:	33 1f       	adc	r19, r19
 cb4:	22 0f       	add	r18, r18
 cb6:	33 1f       	adc	r19, r19
 cb8:	82 0f       	add	r24, r18
 cba:	93 1f       	adc	r25, r19
 cbc:	b8 01       	movw	r22, r16
 cbe:	86 59       	subi	r24, 0x96	; 150
 cc0:	98 4f       	sbci	r25, 0xF8	; 248
 cc2:	39 da       	rcall	.-2958   	; 0x136 <vListInsertEnd>
 cc4:	e0 91 56 07 	lds	r30, 0x0756	; 0x800756 <pxDelayedTaskList>
 cc8:	f0 91 57 07 	lds	r31, 0x0757	; 0x800757 <pxDelayedTaskList+0x1>
 ccc:	80 81       	ld	r24, Z
 cce:	81 11       	cpse	r24, r1
 cd0:	c1 cf       	rjmp	.-126    	; 0xc54 <vTaskIncrementTick+0xee>
 cd2:	b9 cf       	rjmp	.-142    	; 0xc46 <vTaskIncrementTick+0xe0>
 cd4:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <uxMissedTicks>
 cd8:	8f 5f       	subi	r24, 0xFF	; 255
 cda:	80 93 39 07 	sts	0x0739, r24	; 0x800739 <uxMissedTicks>
 cde:	df 91       	pop	r29
 ce0:	cf 91       	pop	r28
 ce2:	1f 91       	pop	r17
 ce4:	0f 91       	pop	r16
 ce6:	08 95       	ret

00000ce8 <xTaskResumeAll>:
 ce8:	cf 92       	push	r12
 cea:	df 92       	push	r13
 cec:	ef 92       	push	r14
 cee:	ff 92       	push	r15
 cf0:	0f 93       	push	r16
 cf2:	1f 93       	push	r17
 cf4:	cf 93       	push	r28
 cf6:	df 93       	push	r29
 cf8:	0f b6       	in	r0, 0x3f	; 63
 cfa:	f8 94       	cli
 cfc:	0f 92       	push	r0
 cfe:	80 91 3a 07 	lds	r24, 0x073A	; 0x80073a <uxSchedulerSuspended>
 d02:	81 50       	subi	r24, 0x01	; 1
 d04:	80 93 3a 07 	sts	0x073A, r24	; 0x80073a <uxSchedulerSuspended>
 d08:	80 91 3a 07 	lds	r24, 0x073A	; 0x80073a <uxSchedulerSuspended>
 d0c:	81 11       	cpse	r24, r1
 d0e:	5f c0       	rjmp	.+190    	; 0xdce <xTaskResumeAll+0xe6>
 d10:	80 91 40 07 	lds	r24, 0x0740	; 0x800740 <uxCurrentNumberOfTasks>
 d14:	81 11       	cpse	r24, r1
 d16:	2f c0       	rjmp	.+94     	; 0xd76 <xTaskResumeAll+0x8e>
 d18:	5d c0       	rjmp	.+186    	; 0xdd4 <xTaskResumeAll+0xec>
 d1a:	d7 01       	movw	r26, r14
 d1c:	15 96       	adiw	r26, 0x05	; 5
 d1e:	ed 91       	ld	r30, X+
 d20:	fc 91       	ld	r31, X
 d22:	16 97       	sbiw	r26, 0x06	; 6
 d24:	c6 81       	ldd	r28, Z+6	; 0x06
 d26:	d7 81       	ldd	r29, Z+7	; 0x07
 d28:	ce 01       	movw	r24, r28
 d2a:	0c 96       	adiw	r24, 0x0c	; 12
 d2c:	66 da       	rcall	.-2868   	; 0x1fa <vListRemove>
 d2e:	8e 01       	movw	r16, r28
 d30:	0e 5f       	subi	r16, 0xFE	; 254
 d32:	1f 4f       	sbci	r17, 0xFF	; 255
 d34:	c8 01       	movw	r24, r16
 d36:	61 da       	rcall	.-2878   	; 0x1fa <vListRemove>
 d38:	8e 89       	ldd	r24, Y+22	; 0x16
 d3a:	90 91 3c 07 	lds	r25, 0x073C	; 0x80073c <uxTopReadyPriority>
 d3e:	98 17       	cp	r25, r24
 d40:	10 f4       	brcc	.+4      	; 0xd46 <xTaskResumeAll+0x5e>
 d42:	80 93 3c 07 	sts	0x073C, r24	; 0x80073c <uxTopReadyPriority>
 d46:	90 e0       	ldi	r25, 0x00	; 0
 d48:	9c 01       	movw	r18, r24
 d4a:	22 0f       	add	r18, r18
 d4c:	33 1f       	adc	r19, r19
 d4e:	22 0f       	add	r18, r18
 d50:	33 1f       	adc	r19, r19
 d52:	22 0f       	add	r18, r18
 d54:	33 1f       	adc	r19, r19
 d56:	82 0f       	add	r24, r18
 d58:	93 1f       	adc	r25, r19
 d5a:	b8 01       	movw	r22, r16
 d5c:	86 59       	subi	r24, 0x96	; 150
 d5e:	98 4f       	sbci	r25, 0xF8	; 248
 d60:	ea d9       	rcall	.-3116   	; 0x136 <vListInsertEnd>
 d62:	e0 91 8e 07 	lds	r30, 0x078E	; 0x80078e <pxCurrentTCB>
 d66:	f0 91 8f 07 	lds	r31, 0x078F	; 0x80078f <pxCurrentTCB+0x1>
 d6a:	9e 89       	ldd	r25, Y+22	; 0x16
 d6c:	86 89       	ldd	r24, Z+22	; 0x16
 d6e:	98 17       	cp	r25, r24
 d70:	58 f0       	brcs	.+22     	; 0xd88 <xTaskResumeAll+0xa0>
 d72:	dc 2c       	mov	r13, r12
 d74:	09 c0       	rjmp	.+18     	; 0xd88 <xTaskResumeAll+0xa0>
 d76:	d1 2c       	mov	r13, r1
 d78:	0f 2e       	mov	r0, r31
 d7a:	fb e4       	ldi	r31, 0x4B	; 75
 d7c:	ef 2e       	mov	r14, r31
 d7e:	f7 e0       	ldi	r31, 0x07	; 7
 d80:	ff 2e       	mov	r15, r31
 d82:	f0 2d       	mov	r31, r0
 d84:	cc 24       	eor	r12, r12
 d86:	c3 94       	inc	r12
 d88:	f7 01       	movw	r30, r14
 d8a:	80 81       	ld	r24, Z
 d8c:	81 11       	cpse	r24, r1
 d8e:	c5 cf       	rjmp	.-118    	; 0xd1a <xTaskResumeAll+0x32>
 d90:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <uxMissedTicks>
 d94:	88 23       	and	r24, r24
 d96:	79 f0       	breq	.+30     	; 0xdb6 <xTaskResumeAll+0xce>
 d98:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <uxMissedTicks>
 d9c:	88 23       	and	r24, r24
 d9e:	91 f0       	breq	.+36     	; 0xdc4 <xTaskResumeAll+0xdc>
 da0:	e2 de       	rcall	.-572    	; 0xb66 <vTaskIncrementTick>
 da2:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <uxMissedTicks>
 da6:	81 50       	subi	r24, 0x01	; 1
 da8:	80 93 39 07 	sts	0x0739, r24	; 0x800739 <uxMissedTicks>
 dac:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <uxMissedTicks>
 db0:	81 11       	cpse	r24, r1
 db2:	f6 cf       	rjmp	.-20     	; 0xda0 <xTaskResumeAll+0xb8>
 db4:	07 c0       	rjmp	.+14     	; 0xdc4 <xTaskResumeAll+0xdc>
 db6:	f1 e0       	ldi	r31, 0x01	; 1
 db8:	df 16       	cp	r13, r31
 dba:	21 f0       	breq	.+8      	; 0xdc4 <xTaskResumeAll+0xdc>
 dbc:	80 91 38 07 	lds	r24, 0x0738	; 0x800738 <xMissedYield>
 dc0:	81 30       	cpi	r24, 0x01	; 1
 dc2:	39 f4       	brne	.+14     	; 0xdd2 <xTaskResumeAll+0xea>
 dc4:	10 92 38 07 	sts	0x0738, r1	; 0x800738 <xMissedYield>
 dc8:	c4 dc       	rcall	.-1656   	; 0x752 <vPortYield>
 dca:	81 e0       	ldi	r24, 0x01	; 1
 dcc:	03 c0       	rjmp	.+6      	; 0xdd4 <xTaskResumeAll+0xec>
 dce:	80 e0       	ldi	r24, 0x00	; 0
 dd0:	01 c0       	rjmp	.+2      	; 0xdd4 <xTaskResumeAll+0xec>
 dd2:	80 e0       	ldi	r24, 0x00	; 0
 dd4:	0f 90       	pop	r0
 dd6:	0f be       	out	0x3f, r0	; 63
 dd8:	df 91       	pop	r29
 dda:	cf 91       	pop	r28
 ddc:	1f 91       	pop	r17
 dde:	0f 91       	pop	r16
 de0:	ff 90       	pop	r15
 de2:	ef 90       	pop	r14
 de4:	df 90       	pop	r13
 de6:	cf 90       	pop	r12
 de8:	08 95       	ret

00000dea <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
 dea:	cf 93       	push	r28
 dec:	df 93       	push	r29
 dee:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
 df0:	89 2b       	or	r24, r25
 df2:	91 f0       	breq	.+36     	; 0xe18 <vTaskDelay+0x2e>
		{
			vTaskSuspendAll();
 df4:	b2 de       	rcall	.-668    	; 0xb5a <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 df6:	80 91 3e 07 	lds	r24, 0x073E	; 0x80073e <xTickCount>
 dfa:	90 91 3f 07 	lds	r25, 0x073F	; 0x80073f <xTickCount+0x1>
 dfe:	c8 0f       	add	r28, r24
 e00:	d9 1f       	adc	r29, r25

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 e02:	80 91 8e 07 	lds	r24, 0x078E	; 0x80078e <pxCurrentTCB>
 e06:	90 91 8f 07 	lds	r25, 0x078F	; 0x80078f <pxCurrentTCB+0x1>
 e0a:	02 96       	adiw	r24, 0x02	; 2
 e0c:	f6 d9       	rcall	.-3092   	; 0x1fa <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 e0e:	ce 01       	movw	r24, r28
 e10:	53 dd       	rcall	.-1370   	; 0x8b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 e12:	6a df       	rcall	.-300    	; 0xce8 <xTaskResumeAll>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 e14:	81 11       	cpse	r24, r1
 e16:	01 c0       	rjmp	.+2      	; 0xe1a <vTaskDelay+0x30>
		{
			portYIELD_WITHIN_API();
 e18:	9c dc       	rcall	.-1736   	; 0x752 <vPortYield>
 e1a:	df 91       	pop	r29
		}
	}
 e1c:	cf 91       	pop	r28
 e1e:	08 95       	ret

00000e20 <prvIdleTask>:
 e20:	0f 2e       	mov	r0, r31
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 e22:	f2 e4       	ldi	r31, 0x42	; 66
 e24:	ef 2e       	mov	r14, r31
 e26:	f7 e0       	ldi	r31, 0x07	; 7
 e28:	ff 2e       	mov	r15, r31
 e2a:	f0 2d       	mov	r31, r0

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 e2c:	ca e6       	ldi	r28, 0x6A	; 106
 e2e:	d7 e0       	ldi	r29, 0x07	; 7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 e30:	80 91 41 07 	lds	r24, 0x0741	; 0x800741 <uxTasksDeleted>
 e34:	88 23       	and	r24, r24
 e36:	29 f1       	breq	.+74     	; 0xe82 <prvIdleTask+0x62>
		{
			vTaskSuspendAll();
 e38:	90 de       	rcall	.-736    	; 0xb5a <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 e3a:	d7 01       	movw	r26, r14
			xTaskResumeAll();
 e3c:	1c 91       	ld	r17, X
 e3e:	54 df       	rcall	.-344    	; 0xce8 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 e40:	11 23       	and	r17, r17
 e42:	f9 f0       	breq	.+62     	; 0xe82 <prvIdleTask+0x62>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 e44:	0f b6       	in	r0, 0x3f	; 63
 e46:	f8 94       	cli
 e48:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 e4a:	d7 01       	movw	r26, r14
 e4c:	15 96       	adiw	r26, 0x05	; 5
 e4e:	ed 91       	ld	r30, X+
 e50:	fc 91       	ld	r31, X
 e52:	16 97       	sbiw	r26, 0x06	; 6
 e54:	06 81       	ldd	r16, Z+6	; 0x06
 e56:	17 81       	ldd	r17, Z+7	; 0x07
					vListRemove( &( pxTCB->xGenericListItem ) );
 e58:	c8 01       	movw	r24, r16
 e5a:	02 96       	adiw	r24, 0x02	; 2
 e5c:	ce d9       	rcall	.-3172   	; 0x1fa <vListRemove>
					--uxCurrentNumberOfTasks;
 e5e:	80 91 40 07 	lds	r24, 0x0740	; 0x800740 <uxCurrentNumberOfTasks>
 e62:	81 50       	subi	r24, 0x01	; 1
 e64:	80 93 40 07 	sts	0x0740, r24	; 0x800740 <uxCurrentNumberOfTasks>
					--uxTasksDeleted;
 e68:	80 91 41 07 	lds	r24, 0x0741	; 0x800741 <uxTasksDeleted>
 e6c:	81 50       	subi	r24, 0x01	; 1
 e6e:	80 93 41 07 	sts	0x0741, r24	; 0x800741 <uxTasksDeleted>
				}
				taskEXIT_CRITICAL();
 e72:	0f 90       	pop	r0
 e74:	0f be       	out	0x3f, r0	; 63
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 e76:	f8 01       	movw	r30, r16
 e78:	87 89       	ldd	r24, Z+23	; 0x17
 e7a:	90 8d       	ldd	r25, Z+24	; 0x18
		vPortFree( pxTCB );
 e7c:	49 d9       	rcall	.-3438   	; 0x110 <vPortFree>
 e7e:	c8 01       	movw	r24, r16

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 e80:	47 d9       	rcall	.-3442   	; 0x110 <vPortFree>
 e82:	88 81       	ld	r24, Y
 e84:	82 30       	cpi	r24, 0x02	; 2
			{
				taskYIELD();
 e86:	a0 f2       	brcs	.-88     	; 0xe30 <prvIdleTask+0x10>
 e88:	64 dc       	rcall	.-1848   	; 0x752 <vPortYield>
 e8a:	d2 cf       	rjmp	.-92     	; 0xe30 <prvIdleTask+0x10>

00000e8c <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 e8c:	80 91 3a 07 	lds	r24, 0x073A	; 0x80073a <uxSchedulerSuspended>
 e90:	81 11       	cpse	r24, r1
 e92:	13 c0       	rjmp	.+38     	; 0xeba <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 e94:	80 91 3c 07 	lds	r24, 0x073C	; 0x80073c <uxTopReadyPriority>
 e98:	90 e0       	ldi	r25, 0x00	; 0
 e9a:	fc 01       	movw	r30, r24
 e9c:	ee 0f       	add	r30, r30
 e9e:	ff 1f       	adc	r31, r31
 ea0:	ee 0f       	add	r30, r30
 ea2:	ff 1f       	adc	r31, r31
 ea4:	ee 0f       	add	r30, r30
 ea6:	ff 1f       	adc	r31, r31
 ea8:	8e 0f       	add	r24, r30
 eaa:	9f 1f       	adc	r25, r31
 eac:	fc 01       	movw	r30, r24
 eae:	e6 59       	subi	r30, 0x96	; 150
 eb0:	f8 4f       	sbci	r31, 0xF8	; 248
 eb2:	80 81       	ld	r24, Z
 eb4:	88 23       	and	r24, r24
 eb6:	29 f0       	breq	.+10     	; 0xec2 <vTaskSwitchContext+0x36>
 eb8:	1b c0       	rjmp	.+54     	; 0xef0 <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 eba:	81 e0       	ldi	r24, 0x01	; 1
 ebc:	80 93 38 07 	sts	0x0738, r24	; 0x800738 <xMissedYield>
 ec0:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
 ec2:	80 91 3c 07 	lds	r24, 0x073C	; 0x80073c <uxTopReadyPriority>
 ec6:	81 50       	subi	r24, 0x01	; 1
 ec8:	80 93 3c 07 	sts	0x073C, r24	; 0x80073c <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 ecc:	80 91 3c 07 	lds	r24, 0x073C	; 0x80073c <uxTopReadyPriority>
 ed0:	90 e0       	ldi	r25, 0x00	; 0
 ed2:	fc 01       	movw	r30, r24
 ed4:	ee 0f       	add	r30, r30
 ed6:	ff 1f       	adc	r31, r31
 ed8:	ee 0f       	add	r30, r30
 eda:	ff 1f       	adc	r31, r31
 edc:	ee 0f       	add	r30, r30
 ede:	ff 1f       	adc	r31, r31
 ee0:	8e 0f       	add	r24, r30
 ee2:	9f 1f       	adc	r25, r31
 ee4:	fc 01       	movw	r30, r24
 ee6:	e6 59       	subi	r30, 0x96	; 150
 ee8:	f8 4f       	sbci	r31, 0xF8	; 248
 eea:	80 81       	ld	r24, Z
 eec:	88 23       	and	r24, r24
 eee:	49 f3       	breq	.-46     	; 0xec2 <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 ef0:	80 91 3c 07 	lds	r24, 0x073C	; 0x80073c <uxTopReadyPriority>
 ef4:	90 e0       	ldi	r25, 0x00	; 0
 ef6:	9c 01       	movw	r18, r24
 ef8:	22 0f       	add	r18, r18
 efa:	33 1f       	adc	r19, r19
 efc:	22 0f       	add	r18, r18
 efe:	33 1f       	adc	r19, r19
 f00:	22 0f       	add	r18, r18
 f02:	33 1f       	adc	r19, r19
 f04:	28 0f       	add	r18, r24
 f06:	39 1f       	adc	r19, r25
 f08:	d9 01       	movw	r26, r18
 f0a:	a6 59       	subi	r26, 0x96	; 150
 f0c:	b8 4f       	sbci	r27, 0xF8	; 248
 f0e:	11 96       	adiw	r26, 0x01	; 1
 f10:	ed 91       	ld	r30, X+
 f12:	fc 91       	ld	r31, X
 f14:	12 97       	sbiw	r26, 0x02	; 2
 f16:	02 80       	ldd	r0, Z+2	; 0x02
 f18:	f3 81       	ldd	r31, Z+3	; 0x03
 f1a:	e0 2d       	mov	r30, r0
 f1c:	12 96       	adiw	r26, 0x02	; 2
 f1e:	fc 93       	st	X, r31
 f20:	ee 93       	st	-X, r30
 f22:	11 97       	sbiw	r26, 0x01	; 1
 f24:	23 59       	subi	r18, 0x93	; 147
 f26:	38 4f       	sbci	r19, 0xF8	; 248
 f28:	e2 17       	cp	r30, r18
 f2a:	f3 07       	cpc	r31, r19
 f2c:	29 f4       	brne	.+10     	; 0xf38 <vTaskSwitchContext+0xac>
 f2e:	22 81       	ldd	r18, Z+2	; 0x02
 f30:	33 81       	ldd	r19, Z+3	; 0x03
 f32:	fd 01       	movw	r30, r26
 f34:	32 83       	std	Z+2, r19	; 0x02
 f36:	21 83       	std	Z+1, r18	; 0x01
 f38:	fc 01       	movw	r30, r24
 f3a:	ee 0f       	add	r30, r30
 f3c:	ff 1f       	adc	r31, r31
 f3e:	ee 0f       	add	r30, r30
 f40:	ff 1f       	adc	r31, r31
 f42:	ee 0f       	add	r30, r30
 f44:	ff 1f       	adc	r31, r31
 f46:	8e 0f       	add	r24, r30
 f48:	9f 1f       	adc	r25, r31
 f4a:	fc 01       	movw	r30, r24
 f4c:	e6 59       	subi	r30, 0x96	; 150
 f4e:	f8 4f       	sbci	r31, 0xF8	; 248
 f50:	01 80       	ldd	r0, Z+1	; 0x01
 f52:	f2 81       	ldd	r31, Z+2	; 0x02
 f54:	e0 2d       	mov	r30, r0
 f56:	86 81       	ldd	r24, Z+6	; 0x06
 f58:	97 81       	ldd	r25, Z+7	; 0x07
 f5a:	90 93 8f 07 	sts	0x078F, r25	; 0x80078f <pxCurrentTCB+0x1>
 f5e:	80 93 8e 07 	sts	0x078E, r24	; 0x80078e <pxCurrentTCB>
 f62:	08 95       	ret

00000f64 <memset>:
 f64:	dc 01       	movw	r26, r24
 f66:	01 c0       	rjmp	.+2      	; 0xf6a <memset+0x6>
 f68:	6d 93       	st	X+, r22
 f6a:	41 50       	subi	r20, 0x01	; 1
 f6c:	50 40       	sbci	r21, 0x00	; 0
 f6e:	e0 f7       	brcc	.-8      	; 0xf68 <memset+0x4>
 f70:	08 95       	ret

00000f72 <strncpy>:
 f72:	fb 01       	movw	r30, r22
 f74:	dc 01       	movw	r26, r24
 f76:	41 50       	subi	r20, 0x01	; 1
 f78:	50 40       	sbci	r21, 0x00	; 0
 f7a:	48 f0       	brcs	.+18     	; 0xf8e <strncpy+0x1c>
 f7c:	01 90       	ld	r0, Z+
 f7e:	0d 92       	st	X+, r0
 f80:	00 20       	and	r0, r0
 f82:	c9 f7       	brne	.-14     	; 0xf76 <strncpy+0x4>
 f84:	01 c0       	rjmp	.+2      	; 0xf88 <strncpy+0x16>
 f86:	1d 92       	st	X+, r1
 f88:	41 50       	subi	r20, 0x01	; 1
 f8a:	50 40       	sbci	r21, 0x00	; 0
 f8c:	e0 f7       	brcc	.-8      	; 0xf86 <strncpy+0x14>
 f8e:	08 95       	ret

00000f90 <_exit>:
 f90:	f8 94       	cli

00000f92 <__stop_program>:
 f92:	ff cf       	rjmp	.-2      	; 0xf92 <__stop_program>
