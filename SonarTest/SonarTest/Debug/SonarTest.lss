
SonarTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000186  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000132  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000186  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009f5  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008b5  00000000  00000000  00000c1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000328  00000000  00000000  000014d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000017fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000472  00000000  00000000  00001840  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000013f  00000000  00000000  00001cb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001df1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	49 c0       	rjmp	.+146    	; 0x12e <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:

#include "bit.h"

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF; //Input
  9e:	11 b8       	out	0x01, r1	; 1
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00; //Output
  a4:	84 b9       	out	0x04, r24	; 4
  a6:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF; PORTC = 0x00; //Output
  a8:	87 b9       	out	0x07, r24	; 7
  aa:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00; //Output
  ac:	8a b9       	out	0x0a, r24	; 10
  ae:	1b b8       	out	0x0b, r1	; 11
    {
		duration = 0;
		new_distance = 0;
		PORTB = 0x00;
		_delay_us(10);
		PORTB = 0xFF;
  b0:	ef ef       	ldi	r30, 0xFF	; 255
    /* Replace with your application code */
    while (1) 
    {
		duration = 0;
		new_distance = 0;
		PORTB = 0x00;
  b2:	15 b8       	out	0x05, r1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	8a e1       	ldi	r24, 0x1A	; 26
  b6:	8a 95       	dec	r24
  b8:	f1 f7       	brne	.-4      	; 0xb6 <main+0x18>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x1e>
		_delay_us(10);
		PORTB = 0xFF;
  bc:	e5 b9       	out	0x05, r30	; 5
  be:	95 e3       	ldi	r25, 0x35	; 53
  c0:	9a 95       	dec	r25
  c2:	f1 f7       	brne	.-4      	; 0xc0 <main+0x22>
  c4:	00 00       	nop
		_delay_us(20);
		PORTB = 0x00;
  c6:	15 b8       	out	0x05, r1	; 5
		while(GetBit(PINA,0)){
  c8:	00 9b       	sbis	0x00, 0	; 0
  ca:	0a c0       	rjmp	.+20     	; 0xe0 <main+0x42>
  cc:	20 e0       	ldi	r18, 0x00	; 0
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	a9 01       	movw	r20, r18
			++duration;	
  d2:	2f 5f       	subi	r18, 0xFF	; 255
  d4:	3f 4f       	sbci	r19, 0xFF	; 255
  d6:	4f 4f       	sbci	r20, 0xFF	; 255
  d8:	5f 4f       	sbci	r21, 0xFF	; 255
		PORTB = 0x00;
		_delay_us(10);
		PORTB = 0xFF;
		_delay_us(20);
		PORTB = 0x00;
		while(GetBit(PINA,0)){
  da:	00 99       	sbic	0x00, 0	; 0
  dc:	fa cf       	rjmp	.-12     	; 0xd2 <main+0x34>
  de:	03 c0       	rjmp	.+6      	; 0xe6 <main+0x48>
	unsigned long duration;
	unsigned long new_distance;
    /* Replace with your application code */
    while (1) 
    {
		duration = 0;
  e0:	20 e0       	ldi	r18, 0x00	; 0
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	a9 01       	movw	r20, r18
		PORTB = 0x00;
		while(GetBit(PINA,0)){
			++duration;	
		}
		new_distance = duration * 170 ;
		PORTC = (new_distance);
  e6:	aa ea       	ldi	r26, 0xAA	; 170
  e8:	b0 e0       	ldi	r27, 0x00	; 0
  ea:	08 d0       	rcall	.+16     	; 0xfc <__muluhisi3>
  ec:	68 b9       	out	0x08, r22	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	8f ec       	ldi	r24, 0xCF	; 207
  f0:	97 e0       	ldi	r25, 0x07	; 7
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <main+0x54>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <main+0x5a>
  f8:	00 00       	nop
  fa:	db cf       	rjmp	.-74     	; 0xb2 <main+0x14>

000000fc <__muluhisi3>:
  fc:	09 d0       	rcall	.+18     	; 0x110 <__umulhisi3>
  fe:	a5 9f       	mul	r26, r21
 100:	90 0d       	add	r25, r0
 102:	b4 9f       	mul	r27, r20
 104:	90 0d       	add	r25, r0
 106:	a4 9f       	mul	r26, r20
 108:	80 0d       	add	r24, r0
 10a:	91 1d       	adc	r25, r1
 10c:	11 24       	eor	r1, r1
 10e:	08 95       	ret

00000110 <__umulhisi3>:
 110:	a2 9f       	mul	r26, r18
 112:	b0 01       	movw	r22, r0
 114:	b3 9f       	mul	r27, r19
 116:	c0 01       	movw	r24, r0
 118:	a3 9f       	mul	r26, r19
 11a:	70 0d       	add	r23, r0
 11c:	81 1d       	adc	r24, r1
 11e:	11 24       	eor	r1, r1
 120:	91 1d       	adc	r25, r1
 122:	b2 9f       	mul	r27, r18
 124:	70 0d       	add	r23, r0
 126:	81 1d       	adc	r24, r1
 128:	11 24       	eor	r1, r1
 12a:	91 1d       	adc	r25, r1
 12c:	08 95       	ret

0000012e <_exit>:
 12e:	f8 94       	cli

00000130 <__stop_program>:
 130:	ff cf       	rjmp	.-2      	; 0x130 <__stop_program>
