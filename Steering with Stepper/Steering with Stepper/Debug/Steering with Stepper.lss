
Steering with Stepper.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00000df2  00000e86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000df2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000063c  0080012e  0080012e  00000eb4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000eb4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ee4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00000f24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023e0  00000000  00000000  0000110c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f21  00000000  00000000  000034ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000151a  00000000  00000000  0000440d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004cc  00000000  00000000  00005928  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d61  00000000  00000000  00005df4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012a5  00000000  00000000  00006b55  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e0  00000000  00000000  00007dfa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c3       	rjmp	.+1756   	; 0x712 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ef       	ldi	r30, 0xF2	; 242
  a0:	fd e0       	ldi	r31, 0x0D	; 13
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 32       	cpi	r26, 0x2E	; 46
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	27 e0       	ldi	r18, 0x07	; 7
  b4:	ae e2       	ldi	r26, 0x2E	; 46
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 36       	cpi	r26, 0x6A	; 106
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	c1 d1       	rcall	.+898    	; 0x446 <main>
  c4:	94 c6       	rjmp	.+3368   	; 0xdee <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
  cc:	ec 01       	movw	r28, r24
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
  ce:	74 d4       	rcall	.+2280   	; 0x9b8 <vTaskSuspendAll>
  d0:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <__data_end>
  d4:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <__data_end+0x1>
  d8:	c9 01       	movw	r24, r18
  da:	8c 0f       	add	r24, r28
  dc:	9d 1f       	adc	r25, r29
  de:	8c 3d       	cpi	r24, 0xDC	; 220
  e0:	45 e0       	ldi	r20, 0x05	; 5
  e2:	94 07       	cpc	r25, r20
  e4:	58 f4       	brcc	.+22     	; 0xfc <pvPortMalloc+0x34>
  e6:	28 17       	cp	r18, r24
  e8:	39 07       	cpc	r19, r25
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
  ea:	58 f4       	brcc	.+22     	; 0x102 <pvPortMalloc+0x3a>
  ec:	e9 01       	movw	r28, r18
  ee:	c0 5d       	subi	r28, 0xD0	; 208
			xNextFreeByte += xWantedSize;			
  f0:	de 4f       	sbci	r29, 0xFE	; 254
  f2:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <__data_end+0x1>
  f6:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
  fa:	05 c0       	rjmp	.+10     	; 0x106 <pvPortMalloc+0x3e>
  fc:	c0 e0       	ldi	r28, 0x00	; 0
  fe:	d0 e0       	ldi	r29, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <pvPortMalloc+0x3e>
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
 102:	c0 e0       	ldi	r28, 0x00	; 0
 104:	d0 e0       	ldi	r29, 0x00	; 0
		}
	}
	#endif	

	return pvReturn;
}
 106:	1f d5       	rcall	.+2622   	; 0xb46 <xTaskResumeAll>
 108:	ce 01       	movw	r24, r28
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 110:	08 95       	ret

00000112 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
 112:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 114:	03 96       	adiw	r24, 0x03	; 3
 116:	92 83       	std	Z+2, r25	; 0x02
 118:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 11a:	2f ef       	ldi	r18, 0xFF	; 255
 11c:	3f ef       	ldi	r19, 0xFF	; 255
 11e:	34 83       	std	Z+4, r19	; 0x04
 120:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 122:	96 83       	std	Z+6, r25	; 0x06
 124:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 126:	90 87       	std	Z+8, r25	; 0x08
 128:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 12a:	10 82       	st	Z, r1
 12c:	08 95       	ret

0000012e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 12e:	fc 01       	movw	r30, r24
 130:	11 86       	std	Z+9, r1	; 0x09
 132:	10 86       	std	Z+8, r1	; 0x08
 134:	08 95       	ret

00000136 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	fc 01       	movw	r30, r24
 13c:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
 13e:	21 81       	ldd	r18, Z+1	; 0x01
 140:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
 142:	e9 01       	movw	r28, r18
 144:	8a 81       	ldd	r24, Y+2	; 0x02
 146:	9b 81       	ldd	r25, Y+3	; 0x03
 148:	13 96       	adiw	r26, 0x03	; 3
 14a:	9c 93       	st	X, r25
 14c:	8e 93       	st	-X, r24
 14e:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
 150:	81 81       	ldd	r24, Z+1	; 0x01
 152:	92 81       	ldd	r25, Z+2	; 0x02
 154:	15 96       	adiw	r26, 0x05	; 5
 156:	9c 93       	st	X, r25
 158:	8e 93       	st	-X, r24
 15a:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 15c:	8a 81       	ldd	r24, Y+2	; 0x02
 15e:	9b 81       	ldd	r25, Y+3	; 0x03
 160:	ec 01       	movw	r28, r24
 162:	7d 83       	std	Y+5, r23	; 0x05
 164:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 166:	e9 01       	movw	r28, r18
 168:	7b 83       	std	Y+3, r23	; 0x03
 16a:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 16c:	72 83       	std	Z+2, r23	; 0x02
 16e:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 170:	19 96       	adiw	r26, 0x09	; 9
 172:	fc 93       	st	X, r31
 174:	ee 93       	st	-X, r30
 176:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
 178:	80 81       	ld	r24, Z
 17a:	8f 5f       	subi	r24, 0xFF	; 255
 17c:	80 83       	st	Z, r24
}
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 18a:	48 81       	ld	r20, Y
 18c:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 18e:	4f 3f       	cpi	r20, 0xFF	; 255
 190:	2f ef       	ldi	r18, 0xFF	; 255
 192:	52 07       	cpc	r21, r18
 194:	31 f4       	brne	.+12     	; 0x1a2 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 196:	dc 01       	movw	r26, r24
 198:	17 96       	adiw	r26, 0x07	; 7
 19a:	ed 91       	ld	r30, X+
 19c:	fc 91       	ld	r31, X
 19e:	18 97       	sbiw	r26, 0x08	; 8
 1a0:	17 c0       	rjmp	.+46     	; 0x1d0 <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 1a2:	fc 01       	movw	r30, r24
 1a4:	33 96       	adiw	r30, 0x03	; 3
 1a6:	dc 01       	movw	r26, r24
 1a8:	15 96       	adiw	r26, 0x05	; 5
 1aa:	2d 91       	ld	r18, X+
 1ac:	3c 91       	ld	r19, X
 1ae:	16 97       	sbiw	r26, 0x06	; 6
 1b0:	d9 01       	movw	r26, r18
 1b2:	2d 91       	ld	r18, X+
 1b4:	3c 91       	ld	r19, X
 1b6:	42 17       	cp	r20, r18
 1b8:	53 07       	cpc	r21, r19
 1ba:	50 f0       	brcs	.+20     	; 0x1d0 <vListInsert+0x4c>
 1bc:	02 80       	ldd	r0, Z+2	; 0x02
 1be:	f3 81       	ldd	r31, Z+3	; 0x03
 1c0:	e0 2d       	mov	r30, r0
 1c2:	a2 81       	ldd	r26, Z+2	; 0x02
 1c4:	b3 81       	ldd	r27, Z+3	; 0x03
 1c6:	2d 91       	ld	r18, X+
 1c8:	3c 91       	ld	r19, X
 1ca:	42 17       	cp	r20, r18
 1cc:	53 07       	cpc	r21, r19
 1ce:	b0 f7       	brcc	.-20     	; 0x1bc <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 1d0:	a2 81       	ldd	r26, Z+2	; 0x02
 1d2:	b3 81       	ldd	r27, Z+3	; 0x03
 1d4:	bb 83       	std	Y+3, r27	; 0x03
 1d6:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 1d8:	15 96       	adiw	r26, 0x05	; 5
 1da:	dc 93       	st	X, r29
 1dc:	ce 93       	st	-X, r28
 1de:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
 1e0:	fd 83       	std	Y+5, r31	; 0x05
 1e2:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 1e4:	d3 83       	std	Z+3, r29	; 0x03
 1e6:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 1e8:	99 87       	std	Y+9, r25	; 0x09
 1ea:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
 1ec:	fc 01       	movw	r30, r24
 1ee:	20 81       	ld	r18, Z
 1f0:	2f 5f       	subi	r18, 0xFF	; 255
 1f2:	20 83       	st	Z, r18
}
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
 1fa:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 1fc:	a2 81       	ldd	r26, Z+2	; 0x02
 1fe:	b3 81       	ldd	r27, Z+3	; 0x03
 200:	84 81       	ldd	r24, Z+4	; 0x04
 202:	95 81       	ldd	r25, Z+5	; 0x05
 204:	15 96       	adiw	r26, 0x05	; 5
 206:	9c 93       	st	X, r25
 208:	8e 93       	st	-X, r24
 20a:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 20c:	a4 81       	ldd	r26, Z+4	; 0x04
 20e:	b5 81       	ldd	r27, Z+5	; 0x05
 210:	82 81       	ldd	r24, Z+2	; 0x02
 212:	93 81       	ldd	r25, Z+3	; 0x03
 214:	13 96       	adiw	r26, 0x03	; 3
 216:	9c 93       	st	X, r25
 218:	8e 93       	st	-X, r24
 21a:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 21c:	a0 85       	ldd	r26, Z+8	; 0x08
 21e:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 220:	11 96       	adiw	r26, 0x01	; 1
 222:	8d 91       	ld	r24, X+
 224:	9c 91       	ld	r25, X
 226:	12 97       	sbiw	r26, 0x02	; 2
 228:	e8 17       	cp	r30, r24
 22a:	f9 07       	cpc	r31, r25
 22c:	31 f4       	brne	.+12     	; 0x23a <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 22e:	84 81       	ldd	r24, Z+4	; 0x04
 230:	95 81       	ldd	r25, Z+5	; 0x05
 232:	12 96       	adiw	r26, 0x02	; 2
 234:	9c 93       	st	X, r25
 236:	8e 93       	st	-X, r24
 238:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
 23a:	11 86       	std	Z+9, r1	; 0x09
 23c:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 23e:	8c 91       	ld	r24, X
 240:	81 50       	subi	r24, 0x01	; 1
 242:	8c 93       	st	X, r24
 244:	08 95       	ret

00000246 <Motor_Tick>:
{
	xTaskCreate(MotorSecTask, (signed portCHAR *)"MotorSecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
}

void Button_Init(){
	button_state = b_release;
 246:	80 91 68 07 	lds	r24, 0x0768	; 0x800768 <motor_state>
 24a:	81 11       	cpse	r24, r1
 24c:	55 c0       	rjmp	.+170    	; 0x2f8 <Motor_Tick+0xb2>
 24e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <orientation>
 252:	81 11       	cpse	r24, r1
 254:	29 c0       	rjmp	.+82     	; 0x2a8 <Motor_Tick+0x62>
 256:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 25a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 25e:	86 3e       	cpi	r24, 0xE6	; 230
 260:	23 e0       	ldi	r18, 0x03	; 3
 262:	92 07       	cpc	r25, r18
 264:	08 f0       	brcs	.+2      	; 0x268 <Motor_Tick+0x22>
 266:	4d c0       	rjmp	.+154    	; 0x302 <Motor_Tick+0xbc>
 268:	01 96       	adiw	r24, 0x01	; 1
 26a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 26e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 272:	83 3f       	cpi	r24, 0xF3	; 243
 274:	91 40       	sbci	r25, 0x01	; 1
 276:	21 f0       	breq	.+8      	; 0x280 <Motor_Tick+0x3a>
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	80 93 0c 07 	sts	0x070C, r24	; 0x80070c <needs_centering>
 27e:	02 c0       	rjmp	.+4      	; 0x284 <Motor_Tick+0x3e>
 280:	10 92 0c 07 	sts	0x070C, r1	; 0x80070c <needs_centering>
 284:	e0 91 0d 07 	lds	r30, 0x070D	; 0x80070d <p_index>
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	ed 5f       	subi	r30, 0xFD	; 253
 28c:	fe 4f       	sbci	r31, 0xFE	; 254
 28e:	80 81       	ld	r24, Z
 290:	8b b9       	out	0x0b, r24	; 11
 292:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <p_index>
 296:	87 30       	cpi	r24, 0x07	; 7
 298:	19 f4       	brne	.+6      	; 0x2a0 <Motor_Tick+0x5a>
 29a:	10 92 0d 07 	sts	0x070D, r1	; 0x80070d <p_index>
 29e:	2c c0       	rjmp	.+88     	; 0x2f8 <Motor_Tick+0xb2>
 2a0:	8f 5f       	subi	r24, 0xFF	; 255
 2a2:	80 93 0d 07 	sts	0x070D, r24	; 0x80070d <p_index>
 2a6:	28 c0       	rjmp	.+80     	; 0x2f8 <Motor_Tick+0xb2>
 2a8:	81 30       	cpi	r24, 0x01	; 1
 2aa:	59 f5       	brne	.+86     	; 0x302 <Motor_Tick+0xbc>
 2ac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2b0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 2b4:	00 97       	sbiw	r24, 0x00	; 0
 2b6:	29 f1       	breq	.+74     	; 0x302 <Motor_Tick+0xbc>
 2b8:	01 97       	sbiw	r24, 0x01	; 1
 2ba:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 2be:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 2c2:	83 3f       	cpi	r24, 0xF3	; 243
 2c4:	91 40       	sbci	r25, 0x01	; 1
 2c6:	21 f0       	breq	.+8      	; 0x2d0 <Motor_Tick+0x8a>
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	80 93 0c 07 	sts	0x070C, r24	; 0x80070c <needs_centering>
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <Motor_Tick+0x8e>
 2d0:	10 92 0c 07 	sts	0x070C, r1	; 0x80070c <needs_centering>
 2d4:	e0 91 0d 07 	lds	r30, 0x070D	; 0x80070d <p_index>
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	ed 5f       	subi	r30, 0xFD	; 253
 2dc:	fe 4f       	sbci	r31, 0xFE	; 254
 2de:	80 81       	ld	r24, Z
 2e0:	8b b9       	out	0x0b, r24	; 11
 2e2:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <p_index>
 2e6:	81 11       	cpse	r24, r1
 2e8:	04 c0       	rjmp	.+8      	; 0x2f2 <Motor_Tick+0xac>
 2ea:	87 e0       	ldi	r24, 0x07	; 7
 2ec:	80 93 0d 07 	sts	0x070D, r24	; 0x80070d <p_index>
 2f0:	03 c0       	rjmp	.+6      	; 0x2f8 <Motor_Tick+0xb2>
 2f2:	81 50       	subi	r24, 0x01	; 1
 2f4:	80 93 0d 07 	sts	0x070D, r24	; 0x80070d <p_index>
 2f8:	80 91 68 07 	lds	r24, 0x0768	; 0x800768 <motor_state>
 2fc:	81 11       	cpse	r24, r1
 2fe:	10 92 68 07 	sts	0x0768, r1	; 0x800768 <motor_state>
 302:	08 95       	ret

00000304 <MotorSecTask>:
 304:	10 92 68 07 	sts	0x0768, r1	; 0x800768 <motor_state>
 308:	9e df       	rcall	.-196    	; 0x246 <Motor_Tick>
 30a:	83 e0       	ldi	r24, 0x03	; 3
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	9c d4       	rcall	.+2360   	; 0xc48 <vTaskDelay>
 310:	fb cf       	rjmp	.-10     	; 0x308 <MotorSecTask+0x4>

00000312 <MotorSecPulse>:
 312:	af 92       	push	r10
 314:	bf 92       	push	r11
 316:	cf 92       	push	r12
 318:	df 92       	push	r13
 31a:	ef 92       	push	r14
 31c:	ff 92       	push	r15
 31e:	0f 93       	push	r16
 320:	a1 2c       	mov	r10, r1
 322:	b1 2c       	mov	r11, r1
 324:	c1 2c       	mov	r12, r1
 326:	d1 2c       	mov	r13, r1
 328:	e1 2c       	mov	r14, r1
 32a:	f1 2c       	mov	r15, r1
 32c:	08 2f       	mov	r16, r24
 32e:	20 e0       	ldi	r18, 0x00	; 0
 330:	30 e0       	ldi	r19, 0x00	; 0
 332:	45 e5       	ldi	r20, 0x55	; 85
 334:	50 e0       	ldi	r21, 0x00	; 0
 336:	6d e0       	ldi	r22, 0x0D	; 13
 338:	71 e0       	ldi	r23, 0x01	; 1
 33a:	82 e8       	ldi	r24, 0x82	; 130
 33c:	91 e0       	ldi	r25, 0x01	; 1
 33e:	20 d2       	rcall	.+1088   	; 0x780 <xTaskGenericCreate>
 340:	0f 91       	pop	r16
 342:	ff 90       	pop	r15
 344:	ef 90       	pop	r14
 346:	df 90       	pop	r13
 348:	cf 90       	pop	r12
 34a:	bf 90       	pop	r11
 34c:	af 90       	pop	r10
 34e:	08 95       	ret

00000350 <Button_Tick>:
}

void Button_Tick(){
	//Transitions
	switch(button_state){
 350:	80 91 69 07 	lds	r24, 0x0769	; 0x800769 <button_state>
 354:	88 23       	and	r24, r24
 356:	19 f0       	breq	.+6      	; 0x35e <Button_Tick+0xe>
 358:	81 30       	cpi	r24, 0x01	; 1
 35a:	99 f1       	breq	.+102    	; 0x3c2 <Button_Tick+0x72>
 35c:	4b c0       	rjmp	.+150    	; 0x3f4 <Button_Tick+0xa4>
		case b_release:
		if((GetBit(~PINA, 0) == 1) && !(GetBit(~PINA, 1) == 1)){
 35e:	00 99       	sbic	0x00, 0	; 0
 360:	0b c0       	rjmp	.+22     	; 0x378 <Button_Tick+0x28>
 362:	80 b1       	in	r24, 0x00	; 0
 364:	80 95       	com	r24
 366:	81 fd       	sbrc	r24, 1
 368:	07 c0       	rjmp	.+14     	; 0x378 <Button_Tick+0x28>
			button_state = b_push;
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	80 93 69 07 	sts	0x0769, r24	; 0x800769 <button_state>
			PORTC = 0x01;
 370:	88 b9       	out	0x08, r24	; 8
			orientation = 0;
 372:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <orientation>
 376:	08 95       	ret
		}
		
		else if((GetBit(~PINA, 1) == 1) && !(GetBit(~PINA, 0) == 1)){
 378:	80 b1       	in	r24, 0x00	; 0
 37a:	80 95       	com	r24
 37c:	81 ff       	sbrs	r24, 1
 37e:	0a c0       	rjmp	.+20     	; 0x394 <Button_Tick+0x44>
 380:	00 9b       	sbis	0x00, 0	; 0
 382:	08 c0       	rjmp	.+16     	; 0x394 <Button_Tick+0x44>
			button_state = b_push;
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	80 93 69 07 	sts	0x0769, r24	; 0x800769 <button_state>
			PORTC = 0x02;
 38a:	92 e0       	ldi	r25, 0x02	; 2
 38c:	98 b9       	out	0x08, r25	; 8
			orientation = 1;
 38e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <orientation>
 392:	08 95       	ret
		}
		
		else{
			button_state = b_release;
			PORTC = 0x00;
 394:	18 b8       	out	0x08, r1	; 8
			
			if(needs_centering){
 396:	80 91 0c 07 	lds	r24, 0x070C	; 0x80070c <needs_centering>
 39a:	88 23       	and	r24, r24
 39c:	71 f0       	breq	.+28     	; 0x3ba <Button_Tick+0x6a>
				if(axle < 499){
 39e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 3a2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 3a6:	83 3f       	cpi	r24, 0xF3	; 243
 3a8:	91 40       	sbci	r25, 0x01	; 1
 3aa:	18 f4       	brcc	.+6      	; 0x3b2 <Button_Tick+0x62>
					orientation = 0;
 3ac:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <orientation>
 3b0:	08 95       	ret
				}
				
				else{
					orientation = 1;
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <orientation>
 3b8:	08 95       	ret
				}
				
			}
			
			else{
				orientation = 2;
 3ba:	82 e0       	ldi	r24, 0x02	; 2
 3bc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <orientation>
 3c0:	08 95       	ret
		
		break;
		
		case b_push:
		
		if((GetBit(~PINA, 0) == 1) && !(GetBit(~PINA, 1) == 1)){
 3c2:	00 99       	sbic	0x00, 0	; 0
 3c4:	07 c0       	rjmp	.+14     	; 0x3d4 <Button_Tick+0x84>
 3c6:	80 b1       	in	r24, 0x00	; 0
 3c8:	80 95       	com	r24
 3ca:	81 fd       	sbrc	r24, 1
 3cc:	03 c0       	rjmp	.+6      	; 0x3d4 <Button_Tick+0x84>
			button_state = b_push;
			PORTC = 0x01;
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	88 b9       	out	0x08, r24	; 8
 3d2:	08 95       	ret
		}
		
		else if((GetBit(~PINA, 1) == 1) && !(GetBit(~PINA, 0) == 1)){
 3d4:	80 b1       	in	r24, 0x00	; 0
 3d6:	80 95       	com	r24
 3d8:	81 ff       	sbrs	r24, 1
 3da:	05 c0       	rjmp	.+10     	; 0x3e6 <Button_Tick+0x96>
 3dc:	00 9b       	sbis	0x00, 0	; 0
 3de:	03 c0       	rjmp	.+6      	; 0x3e6 <Button_Tick+0x96>
			button_state = b_push;
			PORTC = 0x02;
 3e0:	82 e0       	ldi	r24, 0x02	; 2
 3e2:	88 b9       	out	0x08, r24	; 8
 3e4:	08 95       	ret

		}
		
		else{
			button_state = b_release;
 3e6:	10 92 69 07 	sts	0x0769, r1	; 0x800769 <button_state>
			PORTC = 0x00;
 3ea:	18 b8       	out	0x08, r1	; 8
			orientation = 2;
 3ec:	82 e0       	ldi	r24, 0x02	; 2
 3ee:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <orientation>
 3f2:	08 95       	ret
		}
		
		break;
		
		default:
		button_state = b_release;
 3f4:	10 92 69 07 	sts	0x0769, r1	; 0x800769 <button_state>
 3f8:	08 95       	ret

000003fa <ButtonSecTask>:
{
	xTaskCreate(MotorSecTask, (signed portCHAR *)"MotorSecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
}

void Button_Init(){
	button_state = b_release;
 3fa:	10 92 69 07 	sts	0x0769, r1	; 0x800769 <button_state>
void ButtonSecTask(){
	
	Button_Init();
	for(;;){
		Button_Tick();
		vTaskDelay(10);
 3fe:	a8 df       	rcall	.-176    	; 0x350 <Button_Tick>
 400:	8a e0       	ldi	r24, 0x0A	; 10
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	21 d4       	rcall	.+2114   	; 0xc48 <vTaskDelay>
 406:	fb cf       	rjmp	.-10     	; 0x3fe <ButtonSecTask+0x4>

00000408 <ButtonSecPulse>:
	}
}

void ButtonSecPulse(unsigned portBASE_TYPE Priority){
 408:	af 92       	push	r10
 40a:	bf 92       	push	r11
 40c:	cf 92       	push	r12
 40e:	df 92       	push	r13
 410:	ef 92       	push	r14
 412:	ff 92       	push	r15
 414:	0f 93       	push	r16
	xTaskCreate(ButtonSecTask, (signed portCHAR *)"ButtonSecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
 416:	a1 2c       	mov	r10, r1
 418:	b1 2c       	mov	r11, r1
 41a:	c1 2c       	mov	r12, r1
 41c:	d1 2c       	mov	r13, r1
 41e:	e1 2c       	mov	r14, r1
 420:	f1 2c       	mov	r15, r1
 422:	08 2f       	mov	r16, r24
 424:	20 e0       	ldi	r18, 0x00	; 0
 426:	30 e0       	ldi	r19, 0x00	; 0
 428:	45 e5       	ldi	r20, 0x55	; 85
 42a:	50 e0       	ldi	r21, 0x00	; 0
 42c:	6a e1       	ldi	r22, 0x1A	; 26
 42e:	71 e0       	ldi	r23, 0x01	; 1
 430:	8d ef       	ldi	r24, 0xFD	; 253
 432:	91 e0       	ldi	r25, 0x01	; 1
 434:	a5 d1       	rcall	.+842    	; 0x780 <xTaskGenericCreate>
}
 436:	0f 91       	pop	r16
 438:	ff 90       	pop	r15
 43a:	ef 90       	pop	r14
 43c:	df 90       	pop	r13
 43e:	cf 90       	pop	r12
 440:	bf 90       	pop	r11
 442:	af 90       	pop	r10
 444:	08 95       	ret

00000446 <main>:


int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
 446:	11 b8       	out	0x01, r1	; 1
 448:	8f ef       	ldi	r24, 0xFF	; 255
 44a:	82 b9       	out	0x02, r24	; 2
	DDRC = 0xFF; PORTC = 0x00;
 44c:	87 b9       	out	0x07, r24	; 7
 44e:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00;
 450:	8a b9       	out	0x0a, r24	; 10
 452:	1b b8       	out	0x0b, r1	; 11
	
	//Start Tasks
	MotorSecPulse(1);
 454:	81 e0       	ldi	r24, 0x01	; 1
	ButtonSecPulse(1);
 456:	5d df       	rcall	.-326    	; 0x312 <MotorSecPulse>
	//RunSchedular
	vTaskStartScheduler();
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	d6 df       	rcall	.-84     	; 0x408 <ButtonSecPulse>
	
	return 0;
 45c:	84 d2       	rcall	.+1288   	; 0x966 <vTaskStartScheduler>
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	08 95       	ret

00000464 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 464:	31 e1       	ldi	r19, 0x11	; 17
 466:	fc 01       	movw	r30, r24
 468:	30 83       	st	Z, r19
 46a:	31 97       	sbiw	r30, 0x01	; 1
 46c:	22 e2       	ldi	r18, 0x22	; 34
 46e:	20 83       	st	Z, r18
 470:	31 97       	sbiw	r30, 0x01	; 1
 472:	a3 e3       	ldi	r26, 0x33	; 51
 474:	a0 83       	st	Z, r26
 476:	31 97       	sbiw	r30, 0x01	; 1
 478:	60 83       	st	Z, r22
 47a:	31 97       	sbiw	r30, 0x01	; 1
 47c:	70 83       	st	Z, r23
 47e:	31 97       	sbiw	r30, 0x01	; 1
 480:	10 82       	st	Z, r1
 482:	31 97       	sbiw	r30, 0x01	; 1
 484:	60 e8       	ldi	r22, 0x80	; 128
 486:	60 83       	st	Z, r22
 488:	31 97       	sbiw	r30, 0x01	; 1
 48a:	10 82       	st	Z, r1
 48c:	31 97       	sbiw	r30, 0x01	; 1
 48e:	62 e0       	ldi	r22, 0x02	; 2
 490:	60 83       	st	Z, r22
 492:	31 97       	sbiw	r30, 0x01	; 1
 494:	63 e0       	ldi	r22, 0x03	; 3
 496:	60 83       	st	Z, r22
 498:	31 97       	sbiw	r30, 0x01	; 1
 49a:	64 e0       	ldi	r22, 0x04	; 4
 49c:	60 83       	st	Z, r22
 49e:	31 97       	sbiw	r30, 0x01	; 1
 4a0:	65 e0       	ldi	r22, 0x05	; 5
 4a2:	60 83       	st	Z, r22
 4a4:	31 97       	sbiw	r30, 0x01	; 1
 4a6:	66 e0       	ldi	r22, 0x06	; 6
 4a8:	60 83       	st	Z, r22
 4aa:	31 97       	sbiw	r30, 0x01	; 1
 4ac:	67 e0       	ldi	r22, 0x07	; 7
 4ae:	60 83       	st	Z, r22
 4b0:	31 97       	sbiw	r30, 0x01	; 1
 4b2:	68 e0       	ldi	r22, 0x08	; 8
 4b4:	60 83       	st	Z, r22
 4b6:	31 97       	sbiw	r30, 0x01	; 1
 4b8:	69 e0       	ldi	r22, 0x09	; 9
 4ba:	60 83       	st	Z, r22
 4bc:	31 97       	sbiw	r30, 0x01	; 1
 4be:	60 e1       	ldi	r22, 0x10	; 16
 4c0:	60 83       	st	Z, r22
 4c2:	31 97       	sbiw	r30, 0x01	; 1
 4c4:	30 83       	st	Z, r19
 4c6:	31 97       	sbiw	r30, 0x01	; 1
 4c8:	32 e1       	ldi	r19, 0x12	; 18
 4ca:	30 83       	st	Z, r19
 4cc:	31 97       	sbiw	r30, 0x01	; 1
 4ce:	33 e1       	ldi	r19, 0x13	; 19
 4d0:	30 83       	st	Z, r19
 4d2:	31 97       	sbiw	r30, 0x01	; 1
 4d4:	34 e1       	ldi	r19, 0x14	; 20
 4d6:	30 83       	st	Z, r19
 4d8:	31 97       	sbiw	r30, 0x01	; 1
 4da:	35 e1       	ldi	r19, 0x15	; 21
 4dc:	30 83       	st	Z, r19
 4de:	31 97       	sbiw	r30, 0x01	; 1
 4e0:	36 e1       	ldi	r19, 0x16	; 22
 4e2:	30 83       	st	Z, r19
 4e4:	31 97       	sbiw	r30, 0x01	; 1
 4e6:	37 e1       	ldi	r19, 0x17	; 23
 4e8:	30 83       	st	Z, r19
 4ea:	31 97       	sbiw	r30, 0x01	; 1
 4ec:	38 e1       	ldi	r19, 0x18	; 24
 4ee:	30 83       	st	Z, r19
 4f0:	31 97       	sbiw	r30, 0x01	; 1
 4f2:	39 e1       	ldi	r19, 0x19	; 25
 4f4:	30 83       	st	Z, r19
 4f6:	31 97       	sbiw	r30, 0x01	; 1
 4f8:	30 e2       	ldi	r19, 0x20	; 32
 4fa:	30 83       	st	Z, r19
 4fc:	31 97       	sbiw	r30, 0x01	; 1
 4fe:	31 e2       	ldi	r19, 0x21	; 33
 500:	30 83       	st	Z, r19
 502:	31 97       	sbiw	r30, 0x01	; 1
 504:	20 83       	st	Z, r18
 506:	31 97       	sbiw	r30, 0x01	; 1
 508:	23 e2       	ldi	r18, 0x23	; 35
 50a:	20 83       	st	Z, r18
 50c:	31 97       	sbiw	r30, 0x01	; 1
 50e:	40 83       	st	Z, r20
 510:	31 97       	sbiw	r30, 0x01	; 1
 512:	50 83       	st	Z, r21
 514:	31 97       	sbiw	r30, 0x01	; 1
 516:	26 e2       	ldi	r18, 0x26	; 38
 518:	20 83       	st	Z, r18
 51a:	31 97       	sbiw	r30, 0x01	; 1
 51c:	27 e2       	ldi	r18, 0x27	; 39
 51e:	20 83       	st	Z, r18
 520:	31 97       	sbiw	r30, 0x01	; 1
 522:	28 e2       	ldi	r18, 0x28	; 40
 524:	20 83       	st	Z, r18
 526:	31 97       	sbiw	r30, 0x01	; 1
 528:	29 e2       	ldi	r18, 0x29	; 41
 52a:	20 83       	st	Z, r18
 52c:	31 97       	sbiw	r30, 0x01	; 1
 52e:	20 e3       	ldi	r18, 0x30	; 48
 530:	20 83       	st	Z, r18
 532:	31 97       	sbiw	r30, 0x01	; 1
 534:	21 e3       	ldi	r18, 0x31	; 49
 536:	20 83       	st	Z, r18
 538:	86 97       	sbiw	r24, 0x26	; 38
 53a:	08 95       	ret

0000053c <xPortStartScheduler>:
 53c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 540:	8c e7       	ldi	r24, 0x7C	; 124
 542:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 546:	8b e0       	ldi	r24, 0x0B	; 11
 548:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 54c:	ef e6       	ldi	r30, 0x6F	; 111
 54e:	f0 e0       	ldi	r31, 0x00	; 0
 550:	80 81       	ld	r24, Z
 552:	82 60       	ori	r24, 0x02	; 2
 554:	80 83       	st	Z, r24
 556:	a0 91 66 07 	lds	r26, 0x0766	; 0x800766 <pxCurrentTCB>
 55a:	b0 91 67 07 	lds	r27, 0x0767	; 0x800767 <pxCurrentTCB+0x1>
 55e:	cd 91       	ld	r28, X+
 560:	cd bf       	out	0x3d, r28	; 61
 562:	dd 91       	ld	r29, X+
 564:	de bf       	out	0x3e, r29	; 62
 566:	ff 91       	pop	r31
 568:	ef 91       	pop	r30
 56a:	df 91       	pop	r29
 56c:	cf 91       	pop	r28
 56e:	bf 91       	pop	r27
 570:	af 91       	pop	r26
 572:	9f 91       	pop	r25
 574:	8f 91       	pop	r24
 576:	7f 91       	pop	r23
 578:	6f 91       	pop	r22
 57a:	5f 91       	pop	r21
 57c:	4f 91       	pop	r20
 57e:	3f 91       	pop	r19
 580:	2f 91       	pop	r18
 582:	1f 91       	pop	r17
 584:	0f 91       	pop	r16
 586:	ff 90       	pop	r15
 588:	ef 90       	pop	r14
 58a:	df 90       	pop	r13
 58c:	cf 90       	pop	r12
 58e:	bf 90       	pop	r11
 590:	af 90       	pop	r10
 592:	9f 90       	pop	r9
 594:	8f 90       	pop	r8
 596:	7f 90       	pop	r7
 598:	6f 90       	pop	r6
 59a:	5f 90       	pop	r5
 59c:	4f 90       	pop	r4
 59e:	3f 90       	pop	r3
 5a0:	2f 90       	pop	r2
 5a2:	1f 90       	pop	r1
 5a4:	0f 90       	pop	r0
 5a6:	0f be       	out	0x3f, r0	; 63
 5a8:	0f 90       	pop	r0
 5aa:	08 95       	ret
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	08 95       	ret

000005b0 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 5b0:	0f 92       	push	r0
 5b2:	0f b6       	in	r0, 0x3f	; 63
 5b4:	f8 94       	cli
 5b6:	0f 92       	push	r0
 5b8:	1f 92       	push	r1
 5ba:	11 24       	eor	r1, r1
 5bc:	2f 92       	push	r2
 5be:	3f 92       	push	r3
 5c0:	4f 92       	push	r4
 5c2:	5f 92       	push	r5
 5c4:	6f 92       	push	r6
 5c6:	7f 92       	push	r7
 5c8:	8f 92       	push	r8
 5ca:	9f 92       	push	r9
 5cc:	af 92       	push	r10
 5ce:	bf 92       	push	r11
 5d0:	cf 92       	push	r12
 5d2:	df 92       	push	r13
 5d4:	ef 92       	push	r14
 5d6:	ff 92       	push	r15
 5d8:	0f 93       	push	r16
 5da:	1f 93       	push	r17
 5dc:	2f 93       	push	r18
 5de:	3f 93       	push	r19
 5e0:	4f 93       	push	r20
 5e2:	5f 93       	push	r21
 5e4:	6f 93       	push	r22
 5e6:	7f 93       	push	r23
 5e8:	8f 93       	push	r24
 5ea:	9f 93       	push	r25
 5ec:	af 93       	push	r26
 5ee:	bf 93       	push	r27
 5f0:	cf 93       	push	r28
 5f2:	df 93       	push	r29
 5f4:	ef 93       	push	r30
 5f6:	ff 93       	push	r31
 5f8:	a0 91 66 07 	lds	r26, 0x0766	; 0x800766 <pxCurrentTCB>
 5fc:	b0 91 67 07 	lds	r27, 0x0767	; 0x800767 <pxCurrentTCB+0x1>
 600:	0d b6       	in	r0, 0x3d	; 61
 602:	0d 92       	st	X+, r0
 604:	0e b6       	in	r0, 0x3e	; 62
	vTaskSwitchContext();
 606:	0d 92       	st	X+, r0
	portRESTORE_CONTEXT();
 608:	70 d3       	rcall	.+1760   	; 0xcea <vTaskSwitchContext>
 60a:	a0 91 66 07 	lds	r26, 0x0766	; 0x800766 <pxCurrentTCB>
 60e:	b0 91 67 07 	lds	r27, 0x0767	; 0x800767 <pxCurrentTCB+0x1>
 612:	cd 91       	ld	r28, X+
 614:	cd bf       	out	0x3d, r28	; 61
 616:	dd 91       	ld	r29, X+
 618:	de bf       	out	0x3e, r29	; 62
 61a:	ff 91       	pop	r31
 61c:	ef 91       	pop	r30
 61e:	df 91       	pop	r29
 620:	cf 91       	pop	r28
 622:	bf 91       	pop	r27
 624:	af 91       	pop	r26
 626:	9f 91       	pop	r25
 628:	8f 91       	pop	r24
 62a:	7f 91       	pop	r23
 62c:	6f 91       	pop	r22
 62e:	5f 91       	pop	r21
 630:	4f 91       	pop	r20
 632:	3f 91       	pop	r19
 634:	2f 91       	pop	r18
 636:	1f 91       	pop	r17
 638:	0f 91       	pop	r16
 63a:	ff 90       	pop	r15
 63c:	ef 90       	pop	r14
 63e:	df 90       	pop	r13
 640:	cf 90       	pop	r12
 642:	bf 90       	pop	r11
 644:	af 90       	pop	r10
 646:	9f 90       	pop	r9
 648:	8f 90       	pop	r8
 64a:	7f 90       	pop	r7
 64c:	6f 90       	pop	r6
 64e:	5f 90       	pop	r5
 650:	4f 90       	pop	r4
 652:	3f 90       	pop	r3
 654:	2f 90       	pop	r2
 656:	1f 90       	pop	r1
 658:	0f 90       	pop	r0
 65a:	0f be       	out	0x3f, r0	; 63

	asm volatile ( "ret" );
 65c:	0f 90       	pop	r0
 65e:	08 95       	ret

00000660 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 660:	0f 92       	push	r0
 662:	0f b6       	in	r0, 0x3f	; 63
 664:	f8 94       	cli
 666:	0f 92       	push	r0
 668:	1f 92       	push	r1
 66a:	11 24       	eor	r1, r1
 66c:	2f 92       	push	r2
 66e:	3f 92       	push	r3
 670:	4f 92       	push	r4
 672:	5f 92       	push	r5
 674:	6f 92       	push	r6
 676:	7f 92       	push	r7
 678:	8f 92       	push	r8
 67a:	9f 92       	push	r9
 67c:	af 92       	push	r10
 67e:	bf 92       	push	r11
 680:	cf 92       	push	r12
 682:	df 92       	push	r13
 684:	ef 92       	push	r14
 686:	ff 92       	push	r15
 688:	0f 93       	push	r16
 68a:	1f 93       	push	r17
 68c:	2f 93       	push	r18
 68e:	3f 93       	push	r19
 690:	4f 93       	push	r20
 692:	5f 93       	push	r21
 694:	6f 93       	push	r22
 696:	7f 93       	push	r23
 698:	8f 93       	push	r24
 69a:	9f 93       	push	r25
 69c:	af 93       	push	r26
 69e:	bf 93       	push	r27
 6a0:	cf 93       	push	r28
 6a2:	df 93       	push	r29
 6a4:	ef 93       	push	r30
 6a6:	ff 93       	push	r31
 6a8:	a0 91 66 07 	lds	r26, 0x0766	; 0x800766 <pxCurrentTCB>
 6ac:	b0 91 67 07 	lds	r27, 0x0767	; 0x800767 <pxCurrentTCB+0x1>
 6b0:	0d b6       	in	r0, 0x3d	; 61
 6b2:	0d 92       	st	X+, r0
 6b4:	0e b6       	in	r0, 0x3e	; 62
	vTaskIncrementTick();
	vTaskSwitchContext();
 6b6:	0d 92       	st	X+, r0
 6b8:	85 d1       	rcall	.+778    	; 0x9c4 <vTaskIncrementTick>
	portRESTORE_CONTEXT();
 6ba:	17 d3       	rcall	.+1582   	; 0xcea <vTaskSwitchContext>
 6bc:	a0 91 66 07 	lds	r26, 0x0766	; 0x800766 <pxCurrentTCB>
 6c0:	b0 91 67 07 	lds	r27, 0x0767	; 0x800767 <pxCurrentTCB+0x1>
 6c4:	cd 91       	ld	r28, X+
 6c6:	cd bf       	out	0x3d, r28	; 61
 6c8:	dd 91       	ld	r29, X+
 6ca:	de bf       	out	0x3e, r29	; 62
 6cc:	ff 91       	pop	r31
 6ce:	ef 91       	pop	r30
 6d0:	df 91       	pop	r29
 6d2:	cf 91       	pop	r28
 6d4:	bf 91       	pop	r27
 6d6:	af 91       	pop	r26
 6d8:	9f 91       	pop	r25
 6da:	8f 91       	pop	r24
 6dc:	7f 91       	pop	r23
 6de:	6f 91       	pop	r22
 6e0:	5f 91       	pop	r21
 6e2:	4f 91       	pop	r20
 6e4:	3f 91       	pop	r19
 6e6:	2f 91       	pop	r18
 6e8:	1f 91       	pop	r17
 6ea:	0f 91       	pop	r16
 6ec:	ff 90       	pop	r15
 6ee:	ef 90       	pop	r14
 6f0:	df 90       	pop	r13
 6f2:	cf 90       	pop	r12
 6f4:	bf 90       	pop	r11
 6f6:	af 90       	pop	r10
 6f8:	9f 90       	pop	r9
 6fa:	8f 90       	pop	r8
 6fc:	7f 90       	pop	r7
 6fe:	6f 90       	pop	r6
 700:	5f 90       	pop	r5
 702:	4f 90       	pop	r4
 704:	3f 90       	pop	r3
 706:	2f 90       	pop	r2
 708:	1f 90       	pop	r1
 70a:	0f 90       	pop	r0
 70c:	0f be       	out	0x3f, r0	; 63

	asm volatile ( "ret" );
 70e:	0f 90       	pop	r0
 710:	08 95       	ret

00000712 <__vector_13>:
}
 712:	a6 df       	rcall	.-180    	; 0x660 <vPortYieldFromTick>
 714:	18 95       	reti

00000716 <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
 716:	cf 93       	push	r28
 718:	df 93       	push	r29
 71a:	ec 01       	movw	r28, r24
 71c:	e0 91 66 07 	lds	r30, 0x0766	; 0x800766 <pxCurrentTCB>
 720:	f0 91 67 07 	lds	r31, 0x0767	; 0x800767 <pxCurrentTCB+0x1>
 724:	93 83       	std	Z+3, r25	; 0x03
 726:	82 83       	std	Z+2, r24	; 0x02
 728:	80 91 16 07 	lds	r24, 0x0716	; 0x800716 <xTickCount>
 72c:	90 91 17 07 	lds	r25, 0x0717	; 0x800717 <xTickCount+0x1>
 730:	c8 17       	cp	r28, r24
 732:	d9 07       	cpc	r29, r25
 734:	60 f4       	brcc	.+24     	; 0x74e <prvAddCurrentTaskToDelayedList+0x38>
 736:	60 91 66 07 	lds	r22, 0x0766	; 0x800766 <pxCurrentTCB>
 73a:	70 91 67 07 	lds	r23, 0x0767	; 0x800767 <pxCurrentTCB+0x1>
 73e:	80 91 2c 07 	lds	r24, 0x072C	; 0x80072c <pxOverflowDelayedTaskList>
 742:	90 91 2d 07 	lds	r25, 0x072D	; 0x80072d <pxOverflowDelayedTaskList+0x1>
 746:	6e 5f       	subi	r22, 0xFE	; 254
 748:	7f 4f       	sbci	r23, 0xFF	; 255
 74a:	1c dd       	rcall	.-1480   	; 0x184 <vListInsert>
 74c:	16 c0       	rjmp	.+44     	; 0x77a <prvAddCurrentTaskToDelayedList+0x64>
 74e:	60 91 66 07 	lds	r22, 0x0766	; 0x800766 <pxCurrentTCB>
 752:	70 91 67 07 	lds	r23, 0x0767	; 0x800767 <pxCurrentTCB+0x1>
 756:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <pxDelayedTaskList>
 75a:	90 91 2f 07 	lds	r25, 0x072F	; 0x80072f <pxDelayedTaskList+0x1>
 75e:	6e 5f       	subi	r22, 0xFE	; 254
 760:	7f 4f       	sbci	r23, 0xFF	; 255
 762:	10 dd       	rcall	.-1504   	; 0x184 <vListInsert>
 764:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <xNextTaskUnblockTime>
 768:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <xNextTaskUnblockTime+0x1>
 76c:	c8 17       	cp	r28, r24
 76e:	d9 07       	cpc	r29, r25
 770:	20 f4       	brcc	.+8      	; 0x77a <prvAddCurrentTaskToDelayedList+0x64>
 772:	d0 93 0c 01 	sts	0x010C, r29	; 0x80010c <xNextTaskUnblockTime+0x1>
 776:	c0 93 0b 01 	sts	0x010B, r28	; 0x80010b <xNextTaskUnblockTime>
 77a:	df 91       	pop	r29
 77c:	cf 91       	pop	r28
 77e:	08 95       	ret

00000780 <xTaskGenericCreate>:
 780:	4f 92       	push	r4
 782:	5f 92       	push	r5
 784:	6f 92       	push	r6
 786:	7f 92       	push	r7
 788:	8f 92       	push	r8
 78a:	9f 92       	push	r9
 78c:	af 92       	push	r10
 78e:	bf 92       	push	r11
 790:	cf 92       	push	r12
 792:	df 92       	push	r13
 794:	ef 92       	push	r14
 796:	ff 92       	push	r15
 798:	0f 93       	push	r16
 79a:	1f 93       	push	r17
 79c:	cf 93       	push	r28
 79e:	df 93       	push	r29
 7a0:	5c 01       	movw	r10, r24
 7a2:	4b 01       	movw	r8, r22
 7a4:	3a 01       	movw	r6, r20
 7a6:	29 01       	movw	r4, r18
 7a8:	81 e2       	ldi	r24, 0x21	; 33
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	8d dc       	rcall	.-1766   	; 0xc8 <pvPortMalloc>
 7ae:	ec 01       	movw	r28, r24
 7b0:	89 2b       	or	r24, r25
 7b2:	09 f4       	brne	.+2      	; 0x7b6 <xTaskGenericCreate+0x36>
 7b4:	c6 c0       	rjmp	.+396    	; 0x942 <xTaskGenericCreate+0x1c2>
 7b6:	c1 14       	cp	r12, r1
 7b8:	d1 04       	cpc	r13, r1
 7ba:	09 f0       	breq	.+2      	; 0x7be <xTaskGenericCreate+0x3e>
 7bc:	be c0       	rjmp	.+380    	; 0x93a <xTaskGenericCreate+0x1ba>
 7be:	c3 01       	movw	r24, r6
 7c0:	83 dc       	rcall	.-1786   	; 0xc8 <pvPortMalloc>
 7c2:	98 8f       	std	Y+24, r25	; 0x18
 7c4:	8f 8b       	std	Y+23, r24	; 0x17
 7c6:	00 97       	sbiw	r24, 0x00	; 0
 7c8:	19 f4       	brne	.+6      	; 0x7d0 <xTaskGenericCreate+0x50>
 7ca:	ce 01       	movw	r24, r28
 7cc:	a1 dc       	rcall	.-1726   	; 0x110 <vPortFree>
 7ce:	b9 c0       	rjmp	.+370    	; 0x942 <xTaskGenericCreate+0x1c2>
 7d0:	a3 01       	movw	r20, r6
 7d2:	65 ea       	ldi	r22, 0xA5	; 165
 7d4:	70 e0       	ldi	r23, 0x00	; 0
 7d6:	f5 d2       	rcall	.+1514   	; 0xdc2 <memset>
 7d8:	93 01       	movw	r18, r6
 7da:	21 50       	subi	r18, 0x01	; 1
 7dc:	31 09       	sbc	r19, r1
 7de:	8f 89       	ldd	r24, Y+23	; 0x17
 7e0:	98 8d       	ldd	r25, Y+24	; 0x18
 7e2:	3c 01       	movw	r6, r24
 7e4:	62 0e       	add	r6, r18
 7e6:	73 1e       	adc	r7, r19
 7e8:	48 e0       	ldi	r20, 0x08	; 8
 7ea:	50 e0       	ldi	r21, 0x00	; 0
 7ec:	b4 01       	movw	r22, r8
 7ee:	ce 01       	movw	r24, r28
 7f0:	49 96       	adiw	r24, 0x19	; 25
 7f2:	ee d2       	rcall	.+1500   	; 0xdd0 <strncpy>
 7f4:	18 a2       	std	Y+32, r1	; 0x20
 7f6:	10 2f       	mov	r17, r16
 7f8:	04 30       	cpi	r16, 0x04	; 4
 7fa:	08 f0       	brcs	.+2      	; 0x7fe <xTaskGenericCreate+0x7e>
 7fc:	13 e0       	ldi	r17, 0x03	; 3
 7fe:	1e 8b       	std	Y+22, r17	; 0x16
 800:	6e 01       	movw	r12, r28
 802:	82 e0       	ldi	r24, 0x02	; 2
 804:	c8 0e       	add	r12, r24
 806:	d1 1c       	adc	r13, r1
 808:	c6 01       	movw	r24, r12
 80a:	91 dc       	rcall	.-1758   	; 0x12e <vListInitialiseItem>
 80c:	ce 01       	movw	r24, r28
 80e:	0c 96       	adiw	r24, 0x0c	; 12
 810:	8e dc       	rcall	.-1764   	; 0x12e <vListInitialiseItem>
 812:	d9 87       	std	Y+9, r29	; 0x09
 814:	c8 87       	std	Y+8, r28	; 0x08
 816:	84 e0       	ldi	r24, 0x04	; 4
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	81 1b       	sub	r24, r17
 81c:	91 09       	sbc	r25, r1
 81e:	9d 87       	std	Y+13, r25	; 0x0d
 820:	8c 87       	std	Y+12, r24	; 0x0c
 822:	db 8b       	std	Y+19, r29	; 0x13
 824:	ca 8b       	std	Y+18, r28	; 0x12
 826:	a2 01       	movw	r20, r4
 828:	b5 01       	movw	r22, r10
 82a:	c3 01       	movw	r24, r6
 82c:	1b de       	rcall	.-970    	; 0x464 <pxPortInitialiseStack>
 82e:	99 83       	std	Y+1, r25	; 0x01
 830:	88 83       	st	Y, r24
 832:	e1 14       	cp	r14, r1
 834:	f1 04       	cpc	r15, r1
 836:	19 f0       	breq	.+6      	; 0x83e <xTaskGenericCreate+0xbe>
 838:	f7 01       	movw	r30, r14
 83a:	d1 83       	std	Z+1, r29	; 0x01
 83c:	c0 83       	st	Z, r28
 83e:	0f b6       	in	r0, 0x3f	; 63
 840:	f8 94       	cli
 842:	0f 92       	push	r0
 844:	80 91 18 07 	lds	r24, 0x0718	; 0x800718 <uxCurrentNumberOfTasks>
 848:	8f 5f       	subi	r24, 0xFF	; 255
 84a:	80 93 18 07 	sts	0x0718, r24	; 0x800718 <uxCurrentNumberOfTasks>
 84e:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <pxCurrentTCB>
 852:	90 91 67 07 	lds	r25, 0x0767	; 0x800767 <pxCurrentTCB+0x1>
 856:	89 2b       	or	r24, r25
 858:	69 f5       	brne	.+90     	; 0x8b4 <xTaskGenericCreate+0x134>
 85a:	d0 93 67 07 	sts	0x0767, r29	; 0x800767 <pxCurrentTCB+0x1>
 85e:	c0 93 66 07 	sts	0x0766, r28	; 0x800766 <pxCurrentTCB>
 862:	80 91 18 07 	lds	r24, 0x0718	; 0x800718 <uxCurrentNumberOfTasks>
 866:	81 30       	cpi	r24, 0x01	; 1
 868:	a1 f5       	brne	.+104    	; 0x8d2 <xTaskGenericCreate+0x152>
 86a:	82 e4       	ldi	r24, 0x42	; 66
 86c:	97 e0       	ldi	r25, 0x07	; 7
 86e:	51 dc       	rcall	.-1886   	; 0x112 <vListInitialise>
 870:	8b e4       	ldi	r24, 0x4B	; 75
 872:	97 e0       	ldi	r25, 0x07	; 7
 874:	4e dc       	rcall	.-1892   	; 0x112 <vListInitialise>
 876:	84 e5       	ldi	r24, 0x54	; 84
 878:	97 e0       	ldi	r25, 0x07	; 7
 87a:	4b dc       	rcall	.-1898   	; 0x112 <vListInitialise>
 87c:	8d e5       	ldi	r24, 0x5D	; 93
 87e:	97 e0       	ldi	r25, 0x07	; 7
 880:	48 dc       	rcall	.-1904   	; 0x112 <vListInitialise>
 882:	89 e3       	ldi	r24, 0x39	; 57
 884:	97 e0       	ldi	r25, 0x07	; 7
 886:	45 dc       	rcall	.-1910   	; 0x112 <vListInitialise>
 888:	80 e3       	ldi	r24, 0x30	; 48
 88a:	97 e0       	ldi	r25, 0x07	; 7
 88c:	42 dc       	rcall	.-1916   	; 0x112 <vListInitialise>
 88e:	83 e2       	ldi	r24, 0x23	; 35
 890:	97 e0       	ldi	r25, 0x07	; 7
 892:	3f dc       	rcall	.-1922   	; 0x112 <vListInitialise>
 894:	8a e1       	ldi	r24, 0x1A	; 26
 896:	97 e0       	ldi	r25, 0x07	; 7
 898:	3c dc       	rcall	.-1928   	; 0x112 <vListInitialise>
 89a:	89 e3       	ldi	r24, 0x39	; 57
 89c:	97 e0       	ldi	r25, 0x07	; 7
 89e:	90 93 2f 07 	sts	0x072F, r25	; 0x80072f <pxDelayedTaskList+0x1>
 8a2:	80 93 2e 07 	sts	0x072E, r24	; 0x80072e <pxDelayedTaskList>
 8a6:	80 e3       	ldi	r24, 0x30	; 48
 8a8:	97 e0       	ldi	r25, 0x07	; 7
 8aa:	90 93 2d 07 	sts	0x072D, r25	; 0x80072d <pxOverflowDelayedTaskList+0x1>
 8ae:	80 93 2c 07 	sts	0x072C, r24	; 0x80072c <pxOverflowDelayedTaskList>
 8b2:	0f c0       	rjmp	.+30     	; 0x8d2 <xTaskGenericCreate+0x152>
 8b4:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <xSchedulerRunning>
 8b8:	81 11       	cpse	r24, r1
 8ba:	0b c0       	rjmp	.+22     	; 0x8d2 <xTaskGenericCreate+0x152>
 8bc:	e0 91 66 07 	lds	r30, 0x0766	; 0x800766 <pxCurrentTCB>
 8c0:	f0 91 67 07 	lds	r31, 0x0767	; 0x800767 <pxCurrentTCB+0x1>
 8c4:	86 89       	ldd	r24, Z+22	; 0x16
 8c6:	08 17       	cp	r16, r24
 8c8:	20 f0       	brcs	.+8      	; 0x8d2 <xTaskGenericCreate+0x152>
 8ca:	d0 93 67 07 	sts	0x0767, r29	; 0x800767 <pxCurrentTCB+0x1>
 8ce:	c0 93 66 07 	sts	0x0766, r28	; 0x800766 <pxCurrentTCB>
 8d2:	8e 89       	ldd	r24, Y+22	; 0x16
 8d4:	90 91 15 07 	lds	r25, 0x0715	; 0x800715 <uxTopUsedPriority>
 8d8:	98 17       	cp	r25, r24
 8da:	10 f4       	brcc	.+4      	; 0x8e0 <xTaskGenericCreate+0x160>
 8dc:	80 93 15 07 	sts	0x0715, r24	; 0x800715 <uxTopUsedPriority>
 8e0:	90 91 0e 07 	lds	r25, 0x070E	; 0x80070e <uxTaskNumber>
 8e4:	9f 5f       	subi	r25, 0xFF	; 255
 8e6:	90 93 0e 07 	sts	0x070E, r25	; 0x80070e <uxTaskNumber>
 8ea:	90 91 14 07 	lds	r25, 0x0714	; 0x800714 <uxTopReadyPriority>
 8ee:	98 17       	cp	r25, r24
 8f0:	10 f4       	brcc	.+4      	; 0x8f6 <xTaskGenericCreate+0x176>
 8f2:	80 93 14 07 	sts	0x0714, r24	; 0x800714 <uxTopReadyPriority>
 8f6:	90 e0       	ldi	r25, 0x00	; 0
 8f8:	9c 01       	movw	r18, r24
 8fa:	22 0f       	add	r18, r18
 8fc:	33 1f       	adc	r19, r19
 8fe:	22 0f       	add	r18, r18
 900:	33 1f       	adc	r19, r19
 902:	22 0f       	add	r18, r18
 904:	33 1f       	adc	r19, r19
 906:	82 0f       	add	r24, r18
 908:	93 1f       	adc	r25, r19
 90a:	b6 01       	movw	r22, r12
 90c:	8e 5b       	subi	r24, 0xBE	; 190
 90e:	98 4f       	sbci	r25, 0xF8	; 248
 910:	12 dc       	rcall	.-2012   	; 0x136 <vListInsertEnd>
 912:	0f 90       	pop	r0
 914:	0f be       	out	0x3f, r0	; 63
 916:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <xSchedulerRunning>
 91a:	88 23       	and	r24, r24
 91c:	51 f0       	breq	.+20     	; 0x932 <xTaskGenericCreate+0x1b2>
 91e:	e0 91 66 07 	lds	r30, 0x0766	; 0x800766 <pxCurrentTCB>
 922:	f0 91 67 07 	lds	r31, 0x0767	; 0x800767 <pxCurrentTCB+0x1>
 926:	86 89       	ldd	r24, Z+22	; 0x16
 928:	80 17       	cp	r24, r16
 92a:	28 f4       	brcc	.+10     	; 0x936 <xTaskGenericCreate+0x1b6>
 92c:	41 de       	rcall	.-894    	; 0x5b0 <vPortYield>
 92e:	81 e0       	ldi	r24, 0x01	; 1
 930:	09 c0       	rjmp	.+18     	; 0x944 <xTaskGenericCreate+0x1c4>
 932:	81 e0       	ldi	r24, 0x01	; 1
 934:	07 c0       	rjmp	.+14     	; 0x944 <xTaskGenericCreate+0x1c4>
 936:	81 e0       	ldi	r24, 0x01	; 1
 938:	05 c0       	rjmp	.+10     	; 0x944 <xTaskGenericCreate+0x1c4>
 93a:	d8 8e       	std	Y+24, r13	; 0x18
 93c:	cf 8a       	std	Y+23, r12	; 0x17
 93e:	c6 01       	movw	r24, r12
 940:	47 cf       	rjmp	.-370    	; 0x7d0 <xTaskGenericCreate+0x50>
 942:	8f ef       	ldi	r24, 0xFF	; 255
 944:	df 91       	pop	r29
 946:	cf 91       	pop	r28
 948:	1f 91       	pop	r17
 94a:	0f 91       	pop	r16
 94c:	ff 90       	pop	r15
 94e:	ef 90       	pop	r14
 950:	df 90       	pop	r13
 952:	cf 90       	pop	r12
 954:	bf 90       	pop	r11
 956:	af 90       	pop	r10
 958:	9f 90       	pop	r9
 95a:	8f 90       	pop	r8
 95c:	7f 90       	pop	r7
 95e:	6f 90       	pop	r6
 960:	5f 90       	pop	r5
 962:	4f 90       	pop	r4
 964:	08 95       	ret

00000966 <vTaskStartScheduler>:
 966:	af 92       	push	r10
 968:	bf 92       	push	r11
 96a:	cf 92       	push	r12
 96c:	df 92       	push	r13
 96e:	ef 92       	push	r14
 970:	ff 92       	push	r15
 972:	0f 93       	push	r16
 974:	a1 2c       	mov	r10, r1
 976:	b1 2c       	mov	r11, r1
 978:	c1 2c       	mov	r12, r1
 97a:	d1 2c       	mov	r13, r1
 97c:	e1 2c       	mov	r14, r1
 97e:	f1 2c       	mov	r15, r1
 980:	00 e0       	ldi	r16, 0x00	; 0
 982:	20 e0       	ldi	r18, 0x00	; 0
 984:	30 e0       	ldi	r19, 0x00	; 0
 986:	45 e5       	ldi	r20, 0x55	; 85
 988:	50 e0       	ldi	r21, 0x00	; 0
 98a:	68 e2       	ldi	r22, 0x28	; 40
 98c:	71 e0       	ldi	r23, 0x01	; 1
 98e:	8f e3       	ldi	r24, 0x3F	; 63
 990:	96 e0       	ldi	r25, 0x06	; 6
 992:	f6 de       	rcall	.-532    	; 0x780 <xTaskGenericCreate>
 994:	81 30       	cpi	r24, 0x01	; 1
 996:	41 f4       	brne	.+16     	; 0x9a8 <vTaskStartScheduler+0x42>
 998:	f8 94       	cli
 99a:	80 93 13 07 	sts	0x0713, r24	; 0x800713 <xSchedulerRunning>
 99e:	10 92 17 07 	sts	0x0717, r1	; 0x800717 <xTickCount+0x1>
 9a2:	10 92 16 07 	sts	0x0716, r1	; 0x800716 <xTickCount>
 9a6:	ca dd       	rcall	.-1132   	; 0x53c <xPortStartScheduler>
 9a8:	0f 91       	pop	r16
 9aa:	ff 90       	pop	r15
 9ac:	ef 90       	pop	r14
 9ae:	df 90       	pop	r13
 9b0:	cf 90       	pop	r12
 9b2:	bf 90       	pop	r11
 9b4:	af 90       	pop	r10
 9b6:	08 95       	ret

000009b8 <vTaskSuspendAll>:
 9b8:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <uxSchedulerSuspended>
 9bc:	8f 5f       	subi	r24, 0xFF	; 255
 9be:	80 93 12 07 	sts	0x0712, r24	; 0x800712 <uxSchedulerSuspended>
 9c2:	08 95       	ret

000009c4 <vTaskIncrementTick>:
 9c4:	0f 93       	push	r16
 9c6:	1f 93       	push	r17
 9c8:	cf 93       	push	r28
 9ca:	df 93       	push	r29
 9cc:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <uxSchedulerSuspended>
 9d0:	81 11       	cpse	r24, r1
 9d2:	af c0       	rjmp	.+350    	; 0xb32 <vTaskIncrementTick+0x16e>
 9d4:	80 91 16 07 	lds	r24, 0x0716	; 0x800716 <xTickCount>
 9d8:	90 91 17 07 	lds	r25, 0x0717	; 0x800717 <xTickCount+0x1>
 9dc:	01 96       	adiw	r24, 0x01	; 1
 9de:	90 93 17 07 	sts	0x0717, r25	; 0x800717 <xTickCount+0x1>
 9e2:	80 93 16 07 	sts	0x0716, r24	; 0x800716 <xTickCount>
 9e6:	80 91 16 07 	lds	r24, 0x0716	; 0x800716 <xTickCount>
 9ea:	90 91 17 07 	lds	r25, 0x0717	; 0x800717 <xTickCount+0x1>
 9ee:	89 2b       	or	r24, r25
 9f0:	99 f5       	brne	.+102    	; 0xa58 <vTaskIncrementTick+0x94>
 9f2:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <pxDelayedTaskList>
 9f6:	90 91 2f 07 	lds	r25, 0x072F	; 0x80072f <pxDelayedTaskList+0x1>
 9fa:	20 91 2c 07 	lds	r18, 0x072C	; 0x80072c <pxOverflowDelayedTaskList>
 9fe:	30 91 2d 07 	lds	r19, 0x072D	; 0x80072d <pxOverflowDelayedTaskList+0x1>
 a02:	30 93 2f 07 	sts	0x072F, r19	; 0x80072f <pxDelayedTaskList+0x1>
 a06:	20 93 2e 07 	sts	0x072E, r18	; 0x80072e <pxDelayedTaskList>
 a0a:	90 93 2d 07 	sts	0x072D, r25	; 0x80072d <pxOverflowDelayedTaskList+0x1>
 a0e:	80 93 2c 07 	sts	0x072C, r24	; 0x80072c <pxOverflowDelayedTaskList>
 a12:	80 91 0f 07 	lds	r24, 0x070F	; 0x80070f <xNumOfOverflows>
 a16:	8f 5f       	subi	r24, 0xFF	; 255
 a18:	80 93 0f 07 	sts	0x070F, r24	; 0x80070f <xNumOfOverflows>
 a1c:	e0 91 2e 07 	lds	r30, 0x072E	; 0x80072e <pxDelayedTaskList>
 a20:	f0 91 2f 07 	lds	r31, 0x072F	; 0x80072f <pxDelayedTaskList+0x1>
 a24:	80 81       	ld	r24, Z
 a26:	81 11       	cpse	r24, r1
 a28:	07 c0       	rjmp	.+14     	; 0xa38 <vTaskIncrementTick+0x74>
 a2a:	8f ef       	ldi	r24, 0xFF	; 255
 a2c:	9f ef       	ldi	r25, 0xFF	; 255
 a2e:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <xNextTaskUnblockTime+0x1>
 a32:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <xNextTaskUnblockTime>
 a36:	10 c0       	rjmp	.+32     	; 0xa58 <vTaskIncrementTick+0x94>
 a38:	e0 91 2e 07 	lds	r30, 0x072E	; 0x80072e <pxDelayedTaskList>
 a3c:	f0 91 2f 07 	lds	r31, 0x072F	; 0x80072f <pxDelayedTaskList+0x1>
 a40:	05 80       	ldd	r0, Z+5	; 0x05
 a42:	f6 81       	ldd	r31, Z+6	; 0x06
 a44:	e0 2d       	mov	r30, r0
 a46:	06 80       	ldd	r0, Z+6	; 0x06
 a48:	f7 81       	ldd	r31, Z+7	; 0x07
 a4a:	e0 2d       	mov	r30, r0
 a4c:	82 81       	ldd	r24, Z+2	; 0x02
 a4e:	93 81       	ldd	r25, Z+3	; 0x03
 a50:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <xNextTaskUnblockTime+0x1>
 a54:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <xNextTaskUnblockTime>
 a58:	20 91 16 07 	lds	r18, 0x0716	; 0x800716 <xTickCount>
 a5c:	30 91 17 07 	lds	r19, 0x0717	; 0x800717 <xTickCount+0x1>
 a60:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <xNextTaskUnblockTime>
 a64:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <xNextTaskUnblockTime+0x1>
 a68:	28 17       	cp	r18, r24
 a6a:	39 07       	cpc	r19, r25
 a6c:	08 f4       	brcc	.+2      	; 0xa70 <vTaskIncrementTick+0xac>
 a6e:	66 c0       	rjmp	.+204    	; 0xb3c <vTaskIncrementTick+0x178>
 a70:	e0 91 2e 07 	lds	r30, 0x072E	; 0x80072e <pxDelayedTaskList>
 a74:	f0 91 2f 07 	lds	r31, 0x072F	; 0x80072f <pxDelayedTaskList+0x1>
 a78:	80 81       	ld	r24, Z
 a7a:	88 23       	and	r24, r24
 a7c:	99 f0       	breq	.+38     	; 0xaa4 <vTaskIncrementTick+0xe0>
 a7e:	e0 91 2e 07 	lds	r30, 0x072E	; 0x80072e <pxDelayedTaskList>
 a82:	f0 91 2f 07 	lds	r31, 0x072F	; 0x80072f <pxDelayedTaskList+0x1>
 a86:	05 80       	ldd	r0, Z+5	; 0x05
 a88:	f6 81       	ldd	r31, Z+6	; 0x06
 a8a:	e0 2d       	mov	r30, r0
 a8c:	c6 81       	ldd	r28, Z+6	; 0x06
 a8e:	d7 81       	ldd	r29, Z+7	; 0x07
 a90:	8a 81       	ldd	r24, Y+2	; 0x02
 a92:	9b 81       	ldd	r25, Y+3	; 0x03
 a94:	20 91 16 07 	lds	r18, 0x0716	; 0x800716 <xTickCount>
 a98:	30 91 17 07 	lds	r19, 0x0717	; 0x800717 <xTickCount+0x1>
 a9c:	28 17       	cp	r18, r24
 a9e:	39 07       	cpc	r19, r25
 aa0:	f8 f4       	brcc	.+62     	; 0xae0 <vTaskIncrementTick+0x11c>
 aa2:	19 c0       	rjmp	.+50     	; 0xad6 <vTaskIncrementTick+0x112>
 aa4:	8f ef       	ldi	r24, 0xFF	; 255
 aa6:	9f ef       	ldi	r25, 0xFF	; 255
 aa8:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <xNextTaskUnblockTime+0x1>
 aac:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <xNextTaskUnblockTime>
 ab0:	45 c0       	rjmp	.+138    	; 0xb3c <vTaskIncrementTick+0x178>
 ab2:	e0 91 2e 07 	lds	r30, 0x072E	; 0x80072e <pxDelayedTaskList>
 ab6:	f0 91 2f 07 	lds	r31, 0x072F	; 0x80072f <pxDelayedTaskList+0x1>
 aba:	05 80       	ldd	r0, Z+5	; 0x05
 abc:	f6 81       	ldd	r31, Z+6	; 0x06
 abe:	e0 2d       	mov	r30, r0
 ac0:	c6 81       	ldd	r28, Z+6	; 0x06
 ac2:	d7 81       	ldd	r29, Z+7	; 0x07
 ac4:	8a 81       	ldd	r24, Y+2	; 0x02
 ac6:	9b 81       	ldd	r25, Y+3	; 0x03
 ac8:	20 91 16 07 	lds	r18, 0x0716	; 0x800716 <xTickCount>
 acc:	30 91 17 07 	lds	r19, 0x0717	; 0x800717 <xTickCount+0x1>
 ad0:	28 17       	cp	r18, r24
 ad2:	39 07       	cpc	r19, r25
 ad4:	28 f4       	brcc	.+10     	; 0xae0 <vTaskIncrementTick+0x11c>
 ad6:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <xNextTaskUnblockTime+0x1>
 ada:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <xNextTaskUnblockTime>
 ade:	2e c0       	rjmp	.+92     	; 0xb3c <vTaskIncrementTick+0x178>
 ae0:	8e 01       	movw	r16, r28
 ae2:	0e 5f       	subi	r16, 0xFE	; 254
 ae4:	1f 4f       	sbci	r17, 0xFF	; 255
 ae6:	c8 01       	movw	r24, r16
 ae8:	88 db       	rcall	.-2288   	; 0x1fa <vListRemove>
 aea:	8c 89       	ldd	r24, Y+20	; 0x14
 aec:	9d 89       	ldd	r25, Y+21	; 0x15
 aee:	89 2b       	or	r24, r25
 af0:	19 f0       	breq	.+6      	; 0xaf8 <vTaskIncrementTick+0x134>
 af2:	ce 01       	movw	r24, r28
 af4:	0c 96       	adiw	r24, 0x0c	; 12
 af6:	81 db       	rcall	.-2302   	; 0x1fa <vListRemove>
 af8:	8e 89       	ldd	r24, Y+22	; 0x16
 afa:	90 91 14 07 	lds	r25, 0x0714	; 0x800714 <uxTopReadyPriority>
 afe:	98 17       	cp	r25, r24
 b00:	10 f4       	brcc	.+4      	; 0xb06 <vTaskIncrementTick+0x142>
 b02:	80 93 14 07 	sts	0x0714, r24	; 0x800714 <uxTopReadyPriority>
 b06:	90 e0       	ldi	r25, 0x00	; 0
 b08:	9c 01       	movw	r18, r24
 b0a:	22 0f       	add	r18, r18
 b0c:	33 1f       	adc	r19, r19
 b0e:	22 0f       	add	r18, r18
 b10:	33 1f       	adc	r19, r19
 b12:	22 0f       	add	r18, r18
 b14:	33 1f       	adc	r19, r19
 b16:	82 0f       	add	r24, r18
 b18:	93 1f       	adc	r25, r19
 b1a:	b8 01       	movw	r22, r16
 b1c:	8e 5b       	subi	r24, 0xBE	; 190
 b1e:	98 4f       	sbci	r25, 0xF8	; 248
 b20:	0a db       	rcall	.-2540   	; 0x136 <vListInsertEnd>
 b22:	e0 91 2e 07 	lds	r30, 0x072E	; 0x80072e <pxDelayedTaskList>
 b26:	f0 91 2f 07 	lds	r31, 0x072F	; 0x80072f <pxDelayedTaskList+0x1>
 b2a:	80 81       	ld	r24, Z
 b2c:	81 11       	cpse	r24, r1
 b2e:	c1 cf       	rjmp	.-126    	; 0xab2 <vTaskIncrementTick+0xee>
 b30:	b9 cf       	rjmp	.-142    	; 0xaa4 <vTaskIncrementTick+0xe0>
 b32:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <uxMissedTicks>
 b36:	8f 5f       	subi	r24, 0xFF	; 255
 b38:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <uxMissedTicks>
 b3c:	df 91       	pop	r29
 b3e:	cf 91       	pop	r28
 b40:	1f 91       	pop	r17
 b42:	0f 91       	pop	r16
 b44:	08 95       	ret

00000b46 <xTaskResumeAll>:
 b46:	cf 92       	push	r12
 b48:	df 92       	push	r13
 b4a:	ef 92       	push	r14
 b4c:	ff 92       	push	r15
 b4e:	0f 93       	push	r16
 b50:	1f 93       	push	r17
 b52:	cf 93       	push	r28
 b54:	df 93       	push	r29
 b56:	0f b6       	in	r0, 0x3f	; 63
 b58:	f8 94       	cli
 b5a:	0f 92       	push	r0
 b5c:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <uxSchedulerSuspended>
 b60:	81 50       	subi	r24, 0x01	; 1
 b62:	80 93 12 07 	sts	0x0712, r24	; 0x800712 <uxSchedulerSuspended>
 b66:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <uxSchedulerSuspended>
 b6a:	81 11       	cpse	r24, r1
 b6c:	5f c0       	rjmp	.+190    	; 0xc2c <xTaskResumeAll+0xe6>
 b6e:	80 91 18 07 	lds	r24, 0x0718	; 0x800718 <uxCurrentNumberOfTasks>
 b72:	81 11       	cpse	r24, r1
 b74:	2f c0       	rjmp	.+94     	; 0xbd4 <xTaskResumeAll+0x8e>
 b76:	5d c0       	rjmp	.+186    	; 0xc32 <xTaskResumeAll+0xec>
 b78:	d7 01       	movw	r26, r14
 b7a:	15 96       	adiw	r26, 0x05	; 5
 b7c:	ed 91       	ld	r30, X+
 b7e:	fc 91       	ld	r31, X
 b80:	16 97       	sbiw	r26, 0x06	; 6
 b82:	c6 81       	ldd	r28, Z+6	; 0x06
 b84:	d7 81       	ldd	r29, Z+7	; 0x07
 b86:	ce 01       	movw	r24, r28
 b88:	0c 96       	adiw	r24, 0x0c	; 12
 b8a:	37 db       	rcall	.-2450   	; 0x1fa <vListRemove>
 b8c:	8e 01       	movw	r16, r28
 b8e:	0e 5f       	subi	r16, 0xFE	; 254
 b90:	1f 4f       	sbci	r17, 0xFF	; 255
 b92:	c8 01       	movw	r24, r16
 b94:	32 db       	rcall	.-2460   	; 0x1fa <vListRemove>
 b96:	8e 89       	ldd	r24, Y+22	; 0x16
 b98:	90 91 14 07 	lds	r25, 0x0714	; 0x800714 <uxTopReadyPriority>
 b9c:	98 17       	cp	r25, r24
 b9e:	10 f4       	brcc	.+4      	; 0xba4 <xTaskResumeAll+0x5e>
 ba0:	80 93 14 07 	sts	0x0714, r24	; 0x800714 <uxTopReadyPriority>
 ba4:	90 e0       	ldi	r25, 0x00	; 0
 ba6:	9c 01       	movw	r18, r24
 ba8:	22 0f       	add	r18, r18
 baa:	33 1f       	adc	r19, r19
 bac:	22 0f       	add	r18, r18
 bae:	33 1f       	adc	r19, r19
 bb0:	22 0f       	add	r18, r18
 bb2:	33 1f       	adc	r19, r19
 bb4:	82 0f       	add	r24, r18
 bb6:	93 1f       	adc	r25, r19
 bb8:	b8 01       	movw	r22, r16
 bba:	8e 5b       	subi	r24, 0xBE	; 190
 bbc:	98 4f       	sbci	r25, 0xF8	; 248
 bbe:	bb da       	rcall	.-2698   	; 0x136 <vListInsertEnd>
 bc0:	e0 91 66 07 	lds	r30, 0x0766	; 0x800766 <pxCurrentTCB>
 bc4:	f0 91 67 07 	lds	r31, 0x0767	; 0x800767 <pxCurrentTCB+0x1>
 bc8:	9e 89       	ldd	r25, Y+22	; 0x16
 bca:	86 89       	ldd	r24, Z+22	; 0x16
 bcc:	98 17       	cp	r25, r24
 bce:	58 f0       	brcs	.+22     	; 0xbe6 <xTaskResumeAll+0xa0>
 bd0:	dc 2c       	mov	r13, r12
 bd2:	09 c0       	rjmp	.+18     	; 0xbe6 <xTaskResumeAll+0xa0>
 bd4:	d1 2c       	mov	r13, r1
 bd6:	0f 2e       	mov	r0, r31
 bd8:	f3 e2       	ldi	r31, 0x23	; 35
 bda:	ef 2e       	mov	r14, r31
 bdc:	f7 e0       	ldi	r31, 0x07	; 7
 bde:	ff 2e       	mov	r15, r31
 be0:	f0 2d       	mov	r31, r0
 be2:	cc 24       	eor	r12, r12
 be4:	c3 94       	inc	r12
 be6:	f7 01       	movw	r30, r14
 be8:	80 81       	ld	r24, Z
 bea:	81 11       	cpse	r24, r1
 bec:	c5 cf       	rjmp	.-118    	; 0xb78 <xTaskResumeAll+0x32>
 bee:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <uxMissedTicks>
 bf2:	88 23       	and	r24, r24
 bf4:	79 f0       	breq	.+30     	; 0xc14 <xTaskResumeAll+0xce>
 bf6:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <uxMissedTicks>
 bfa:	88 23       	and	r24, r24
 bfc:	91 f0       	breq	.+36     	; 0xc22 <xTaskResumeAll+0xdc>
 bfe:	e2 de       	rcall	.-572    	; 0x9c4 <vTaskIncrementTick>
 c00:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <uxMissedTicks>
 c04:	81 50       	subi	r24, 0x01	; 1
 c06:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <uxMissedTicks>
 c0a:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <uxMissedTicks>
 c0e:	81 11       	cpse	r24, r1
 c10:	f6 cf       	rjmp	.-20     	; 0xbfe <xTaskResumeAll+0xb8>
 c12:	07 c0       	rjmp	.+14     	; 0xc22 <xTaskResumeAll+0xdc>
 c14:	f1 e0       	ldi	r31, 0x01	; 1
 c16:	df 16       	cp	r13, r31
 c18:	21 f0       	breq	.+8      	; 0xc22 <xTaskResumeAll+0xdc>
 c1a:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <xMissedYield>
 c1e:	81 30       	cpi	r24, 0x01	; 1
 c20:	39 f4       	brne	.+14     	; 0xc30 <xTaskResumeAll+0xea>
 c22:	10 92 10 07 	sts	0x0710, r1	; 0x800710 <xMissedYield>
 c26:	c4 dc       	rcall	.-1656   	; 0x5b0 <vPortYield>
 c28:	81 e0       	ldi	r24, 0x01	; 1
 c2a:	03 c0       	rjmp	.+6      	; 0xc32 <xTaskResumeAll+0xec>
 c2c:	80 e0       	ldi	r24, 0x00	; 0
 c2e:	01 c0       	rjmp	.+2      	; 0xc32 <xTaskResumeAll+0xec>
 c30:	80 e0       	ldi	r24, 0x00	; 0
 c32:	0f 90       	pop	r0
 c34:	0f be       	out	0x3f, r0	; 63
 c36:	df 91       	pop	r29
 c38:	cf 91       	pop	r28
 c3a:	1f 91       	pop	r17
 c3c:	0f 91       	pop	r16
 c3e:	ff 90       	pop	r15
 c40:	ef 90       	pop	r14
 c42:	df 90       	pop	r13
 c44:	cf 90       	pop	r12
 c46:	08 95       	ret

00000c48 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
 c48:	cf 93       	push	r28
 c4a:	df 93       	push	r29
 c4c:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
 c4e:	89 2b       	or	r24, r25
		{
			vTaskSuspendAll();
 c50:	91 f0       	breq	.+36     	; 0xc76 <vTaskDelay+0x2e>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 c52:	b2 de       	rcall	.-668    	; 0x9b8 <vTaskSuspendAll>
 c54:	80 91 16 07 	lds	r24, 0x0716	; 0x800716 <xTickCount>
 c58:	90 91 17 07 	lds	r25, 0x0717	; 0x800717 <xTickCount+0x1>
 c5c:	c8 0f       	add	r28, r24

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 c5e:	d9 1f       	adc	r29, r25
 c60:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <pxCurrentTCB>
 c64:	90 91 67 07 	lds	r25, 0x0767	; 0x800767 <pxCurrentTCB+0x1>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
			}
			xAlreadyYielded = xTaskResumeAll();
 c68:	02 96       	adiw	r24, 0x02	; 2
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 c6a:	c7 da       	rcall	.-2674   	; 0x1fa <vListRemove>
 c6c:	ce 01       	movw	r24, r28
		{
			portYIELD_WITHIN_API();
 c6e:	53 dd       	rcall	.-1370   	; 0x716 <prvAddCurrentTaskToDelayedList>
 c70:	6a df       	rcall	.-300    	; 0xb46 <xTaskResumeAll>
		}
	}
 c72:	81 11       	cpse	r24, r1
 c74:	01 c0       	rjmp	.+2      	; 0xc78 <vTaskDelay+0x30>
 c76:	9c dc       	rcall	.-1736   	; 0x5b0 <vPortYield>
 c78:	df 91       	pop	r29
 c7a:	cf 91       	pop	r28
 c7c:	08 95       	ret

00000c7e <prvIdleTask>:
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 c7e:	0f 2e       	mov	r0, r31
 c80:	fa e1       	ldi	r31, 0x1A	; 26
 c82:	ef 2e       	mov	r14, r31
 c84:	f7 e0       	ldi	r31, 0x07	; 7
 c86:	ff 2e       	mov	r15, r31
 c88:	f0 2d       	mov	r31, r0

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 c8a:	c2 e4       	ldi	r28, 0x42	; 66
 c8c:	d7 e0       	ldi	r29, 0x07	; 7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 c8e:	80 91 19 07 	lds	r24, 0x0719	; 0x800719 <uxTasksDeleted>
 c92:	88 23       	and	r24, r24
		{
			vTaskSuspendAll();
 c94:	29 f1       	breq	.+74     	; 0xce0 <prvIdleTask+0x62>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 c96:	90 de       	rcall	.-736    	; 0x9b8 <vTaskSuspendAll>
			xTaskResumeAll();
 c98:	d7 01       	movw	r26, r14
 c9a:	1c 91       	ld	r17, X

			if( xListIsEmpty == pdFALSE )
 c9c:	54 df       	rcall	.-344    	; 0xb46 <xTaskResumeAll>
 c9e:	11 23       	and	r17, r17
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 ca0:	f9 f0       	breq	.+62     	; 0xce0 <prvIdleTask+0x62>
 ca2:	0f b6       	in	r0, 0x3f	; 63
 ca4:	f8 94       	cli
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 ca6:	0f 92       	push	r0
 ca8:	d7 01       	movw	r26, r14
 caa:	15 96       	adiw	r26, 0x05	; 5
 cac:	ed 91       	ld	r30, X+
 cae:	fc 91       	ld	r31, X
 cb0:	16 97       	sbiw	r26, 0x06	; 6
					vListRemove( &( pxTCB->xGenericListItem ) );
 cb2:	06 81       	ldd	r16, Z+6	; 0x06
 cb4:	17 81       	ldd	r17, Z+7	; 0x07
 cb6:	c8 01       	movw	r24, r16
					--uxCurrentNumberOfTasks;
 cb8:	02 96       	adiw	r24, 0x02	; 2
 cba:	9f da       	rcall	.-2754   	; 0x1fa <vListRemove>
 cbc:	80 91 18 07 	lds	r24, 0x0718	; 0x800718 <uxCurrentNumberOfTasks>
 cc0:	81 50       	subi	r24, 0x01	; 1
					--uxTasksDeleted;
 cc2:	80 93 18 07 	sts	0x0718, r24	; 0x800718 <uxCurrentNumberOfTasks>
 cc6:	80 91 19 07 	lds	r24, 0x0719	; 0x800719 <uxTasksDeleted>
 cca:	81 50       	subi	r24, 0x01	; 1
				}
				taskEXIT_CRITICAL();
 ccc:	80 93 19 07 	sts	0x0719, r24	; 0x800719 <uxTasksDeleted>
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 cd0:	0f 90       	pop	r0
 cd2:	0f be       	out	0x3f, r0	; 63
		vPortFree( pxTCB );
 cd4:	f8 01       	movw	r30, r16
 cd6:	87 89       	ldd	r24, Z+23	; 0x17

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 cd8:	90 8d       	ldd	r25, Z+24	; 0x18
 cda:	1a da       	rcall	.-3020   	; 0x110 <vPortFree>
 cdc:	c8 01       	movw	r24, r16
			{
				taskYIELD();
 cde:	18 da       	rcall	.-3024   	; 0x110 <vPortFree>
 ce0:	88 81       	ld	r24, Y
 ce2:	82 30       	cpi	r24, 0x02	; 2
 ce4:	a0 f2       	brcs	.-88     	; 0xc8e <prvIdleTask+0x10>
 ce6:	64 dc       	rcall	.-1848   	; 0x5b0 <vPortYield>
 ce8:	d2 cf       	rjmp	.-92     	; 0xc8e <prvIdleTask+0x10>

00000cea <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 cea:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <uxSchedulerSuspended>
 cee:	81 11       	cpse	r24, r1
 cf0:	13 c0       	rjmp	.+38     	; 0xd18 <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 cf2:	80 91 14 07 	lds	r24, 0x0714	; 0x800714 <uxTopReadyPriority>
 cf6:	90 e0       	ldi	r25, 0x00	; 0
 cf8:	fc 01       	movw	r30, r24
 cfa:	ee 0f       	add	r30, r30
 cfc:	ff 1f       	adc	r31, r31
 cfe:	ee 0f       	add	r30, r30
 d00:	ff 1f       	adc	r31, r31
 d02:	ee 0f       	add	r30, r30
 d04:	ff 1f       	adc	r31, r31
 d06:	8e 0f       	add	r24, r30
 d08:	9f 1f       	adc	r25, r31
 d0a:	fc 01       	movw	r30, r24
 d0c:	ee 5b       	subi	r30, 0xBE	; 190
 d0e:	f8 4f       	sbci	r31, 0xF8	; 248
 d10:	80 81       	ld	r24, Z
 d12:	88 23       	and	r24, r24
 d14:	29 f0       	breq	.+10     	; 0xd20 <vTaskSwitchContext+0x36>
 d16:	1b c0       	rjmp	.+54     	; 0xd4e <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 d18:	81 e0       	ldi	r24, 0x01	; 1
 d1a:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <xMissedYield>
 d1e:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
 d20:	80 91 14 07 	lds	r24, 0x0714	; 0x800714 <uxTopReadyPriority>
 d24:	81 50       	subi	r24, 0x01	; 1
 d26:	80 93 14 07 	sts	0x0714, r24	; 0x800714 <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 d2a:	80 91 14 07 	lds	r24, 0x0714	; 0x800714 <uxTopReadyPriority>
 d2e:	90 e0       	ldi	r25, 0x00	; 0
 d30:	fc 01       	movw	r30, r24
 d32:	ee 0f       	add	r30, r30
 d34:	ff 1f       	adc	r31, r31
 d36:	ee 0f       	add	r30, r30
 d38:	ff 1f       	adc	r31, r31
 d3a:	ee 0f       	add	r30, r30
 d3c:	ff 1f       	adc	r31, r31
 d3e:	8e 0f       	add	r24, r30
 d40:	9f 1f       	adc	r25, r31
 d42:	fc 01       	movw	r30, r24
 d44:	ee 5b       	subi	r30, 0xBE	; 190
 d46:	f8 4f       	sbci	r31, 0xF8	; 248
 d48:	80 81       	ld	r24, Z
 d4a:	88 23       	and	r24, r24
 d4c:	49 f3       	breq	.-46     	; 0xd20 <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 d4e:	80 91 14 07 	lds	r24, 0x0714	; 0x800714 <uxTopReadyPriority>
 d52:	90 e0       	ldi	r25, 0x00	; 0
 d54:	9c 01       	movw	r18, r24
 d56:	22 0f       	add	r18, r18
 d58:	33 1f       	adc	r19, r19
 d5a:	22 0f       	add	r18, r18
 d5c:	33 1f       	adc	r19, r19
 d5e:	22 0f       	add	r18, r18
 d60:	33 1f       	adc	r19, r19
 d62:	28 0f       	add	r18, r24
 d64:	39 1f       	adc	r19, r25
 d66:	d9 01       	movw	r26, r18
 d68:	ae 5b       	subi	r26, 0xBE	; 190
 d6a:	b8 4f       	sbci	r27, 0xF8	; 248
 d6c:	11 96       	adiw	r26, 0x01	; 1
 d6e:	ed 91       	ld	r30, X+
 d70:	fc 91       	ld	r31, X
 d72:	12 97       	sbiw	r26, 0x02	; 2
 d74:	02 80       	ldd	r0, Z+2	; 0x02
 d76:	f3 81       	ldd	r31, Z+3	; 0x03
 d78:	e0 2d       	mov	r30, r0
 d7a:	12 96       	adiw	r26, 0x02	; 2
 d7c:	fc 93       	st	X, r31
 d7e:	ee 93       	st	-X, r30
 d80:	11 97       	sbiw	r26, 0x01	; 1
 d82:	2b 5b       	subi	r18, 0xBB	; 187
 d84:	38 4f       	sbci	r19, 0xF8	; 248
 d86:	e2 17       	cp	r30, r18
 d88:	f3 07       	cpc	r31, r19
 d8a:	29 f4       	brne	.+10     	; 0xd96 <vTaskSwitchContext+0xac>
 d8c:	22 81       	ldd	r18, Z+2	; 0x02
 d8e:	33 81       	ldd	r19, Z+3	; 0x03
 d90:	fd 01       	movw	r30, r26
 d92:	32 83       	std	Z+2, r19	; 0x02
 d94:	21 83       	std	Z+1, r18	; 0x01
 d96:	fc 01       	movw	r30, r24
 d98:	ee 0f       	add	r30, r30
 d9a:	ff 1f       	adc	r31, r31
 d9c:	ee 0f       	add	r30, r30
 d9e:	ff 1f       	adc	r31, r31
 da0:	ee 0f       	add	r30, r30
 da2:	ff 1f       	adc	r31, r31
 da4:	8e 0f       	add	r24, r30
 da6:	9f 1f       	adc	r25, r31
 da8:	fc 01       	movw	r30, r24
 daa:	ee 5b       	subi	r30, 0xBE	; 190
 dac:	f8 4f       	sbci	r31, 0xF8	; 248
 dae:	01 80       	ldd	r0, Z+1	; 0x01
 db0:	f2 81       	ldd	r31, Z+2	; 0x02
 db2:	e0 2d       	mov	r30, r0
 db4:	86 81       	ldd	r24, Z+6	; 0x06
 db6:	97 81       	ldd	r25, Z+7	; 0x07
 db8:	90 93 67 07 	sts	0x0767, r25	; 0x800767 <pxCurrentTCB+0x1>
 dbc:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <pxCurrentTCB>
 dc0:	08 95       	ret

00000dc2 <memset>:
 dc2:	dc 01       	movw	r26, r24
 dc4:	01 c0       	rjmp	.+2      	; 0xdc8 <memset+0x6>
 dc6:	6d 93       	st	X+, r22
 dc8:	41 50       	subi	r20, 0x01	; 1
 dca:	50 40       	sbci	r21, 0x00	; 0
 dcc:	e0 f7       	brcc	.-8      	; 0xdc6 <memset+0x4>
 dce:	08 95       	ret

00000dd0 <strncpy>:
 dd0:	fb 01       	movw	r30, r22
 dd2:	dc 01       	movw	r26, r24
 dd4:	41 50       	subi	r20, 0x01	; 1
 dd6:	50 40       	sbci	r21, 0x00	; 0
 dd8:	48 f0       	brcs	.+18     	; 0xdec <strncpy+0x1c>
 dda:	01 90       	ld	r0, Z+
 ddc:	0d 92       	st	X+, r0
 dde:	00 20       	and	r0, r0
 de0:	c9 f7       	brne	.-14     	; 0xdd4 <strncpy+0x4>
 de2:	01 c0       	rjmp	.+2      	; 0xde6 <strncpy+0x16>
 de4:	1d 92       	st	X+, r1
 de6:	41 50       	subi	r20, 0x01	; 1
 de8:	50 40       	sbci	r21, 0x00	; 0
 dea:	e0 f7       	brcc	.-8      	; 0xde4 <strncpy+0x14>
 dec:	08 95       	ret

00000dee <_exit>:
 dee:	f8 94       	cli

00000df0 <__stop_program>:
 df0:	ff cf       	rjmp	.-2      	; 0xdf0 <__stop_program>
