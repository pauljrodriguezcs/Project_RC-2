
Steering with Stepper.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00000eae  00000f42  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000eae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000063c  0080012e  0080012e  00000f70  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f70  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fa0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  00000fe0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000277d  00000000  00000000  00001248  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fbe  00000000  00000000  000039c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017ec  00000000  00000000  00004983  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004d8  00000000  00000000  00006170  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d92  00000000  00000000  00006648  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001304  00000000  00000000  000073da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e0  00000000  00000000  000086de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	a1 c3       	rjmp	.+1858   	; 0x778 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ea       	ldi	r30, 0xAE	; 174
  a0:	fe e0       	ldi	r31, 0x0E	; 14
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 32       	cpi	r26, 0x2E	; 46
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	27 e0       	ldi	r18, 0x07	; 7
  b4:	ae e2       	ldi	r26, 0x2E	; 46
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 36       	cpi	r26, 0x6A	; 106
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	e4 d1       	rcall	.+968    	; 0x48c <main>
  c4:	f2 c6       	rjmp	.+3556   	; 0xeaa <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
  cc:	ec 01       	movw	r28, r24
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
  ce:	a7 d4       	rcall	.+2382   	; 0xa1e <vTaskSuspendAll>
  d0:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <__data_end>
  d4:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <__data_end+0x1>
  d8:	c9 01       	movw	r24, r18
  da:	8c 0f       	add	r24, r28
  dc:	9d 1f       	adc	r25, r29
  de:	8c 3d       	cpi	r24, 0xDC	; 220
  e0:	45 e0       	ldi	r20, 0x05	; 5
  e2:	94 07       	cpc	r25, r20
  e4:	58 f4       	brcc	.+22     	; 0xfc <pvPortMalloc+0x34>
  e6:	28 17       	cp	r18, r24
  e8:	39 07       	cpc	r19, r25
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
  ea:	58 f4       	brcc	.+22     	; 0x102 <pvPortMalloc+0x3a>
  ec:	e9 01       	movw	r28, r18
  ee:	c0 5d       	subi	r28, 0xD0	; 208
			xNextFreeByte += xWantedSize;			
  f0:	de 4f       	sbci	r29, 0xFE	; 254
  f2:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <__data_end+0x1>
  f6:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
  fa:	05 c0       	rjmp	.+10     	; 0x106 <pvPortMalloc+0x3e>
  fc:	c0 e0       	ldi	r28, 0x00	; 0
  fe:	d0 e0       	ldi	r29, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <pvPortMalloc+0x3e>
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
 102:	c0 e0       	ldi	r28, 0x00	; 0
 104:	d0 e0       	ldi	r29, 0x00	; 0
		}
	}
	#endif	

	return pvReturn;
}
 106:	52 d5       	rcall	.+2724   	; 0xbac <xTaskResumeAll>
 108:	ce 01       	movw	r24, r28
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 110:	08 95       	ret

00000112 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
 112:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 114:	03 96       	adiw	r24, 0x03	; 3
 116:	92 83       	std	Z+2, r25	; 0x02
 118:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 11a:	2f ef       	ldi	r18, 0xFF	; 255
 11c:	3f ef       	ldi	r19, 0xFF	; 255
 11e:	34 83       	std	Z+4, r19	; 0x04
 120:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 122:	96 83       	std	Z+6, r25	; 0x06
 124:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 126:	90 87       	std	Z+8, r25	; 0x08
 128:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 12a:	10 82       	st	Z, r1
 12c:	08 95       	ret

0000012e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 12e:	fc 01       	movw	r30, r24
 130:	11 86       	std	Z+9, r1	; 0x09
 132:	10 86       	std	Z+8, r1	; 0x08
 134:	08 95       	ret

00000136 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	fc 01       	movw	r30, r24
 13c:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
 13e:	21 81       	ldd	r18, Z+1	; 0x01
 140:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
 142:	e9 01       	movw	r28, r18
 144:	8a 81       	ldd	r24, Y+2	; 0x02
 146:	9b 81       	ldd	r25, Y+3	; 0x03
 148:	13 96       	adiw	r26, 0x03	; 3
 14a:	9c 93       	st	X, r25
 14c:	8e 93       	st	-X, r24
 14e:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
 150:	81 81       	ldd	r24, Z+1	; 0x01
 152:	92 81       	ldd	r25, Z+2	; 0x02
 154:	15 96       	adiw	r26, 0x05	; 5
 156:	9c 93       	st	X, r25
 158:	8e 93       	st	-X, r24
 15a:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 15c:	8a 81       	ldd	r24, Y+2	; 0x02
 15e:	9b 81       	ldd	r25, Y+3	; 0x03
 160:	ec 01       	movw	r28, r24
 162:	7d 83       	std	Y+5, r23	; 0x05
 164:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 166:	e9 01       	movw	r28, r18
 168:	7b 83       	std	Y+3, r23	; 0x03
 16a:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 16c:	72 83       	std	Z+2, r23	; 0x02
 16e:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 170:	19 96       	adiw	r26, 0x09	; 9
 172:	fc 93       	st	X, r31
 174:	ee 93       	st	-X, r30
 176:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
 178:	80 81       	ld	r24, Z
 17a:	8f 5f       	subi	r24, 0xFF	; 255
 17c:	80 83       	st	Z, r24
}
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 18a:	48 81       	ld	r20, Y
 18c:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 18e:	4f 3f       	cpi	r20, 0xFF	; 255
 190:	2f ef       	ldi	r18, 0xFF	; 255
 192:	52 07       	cpc	r21, r18
 194:	31 f4       	brne	.+12     	; 0x1a2 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 196:	dc 01       	movw	r26, r24
 198:	17 96       	adiw	r26, 0x07	; 7
 19a:	ed 91       	ld	r30, X+
 19c:	fc 91       	ld	r31, X
 19e:	18 97       	sbiw	r26, 0x08	; 8
 1a0:	17 c0       	rjmp	.+46     	; 0x1d0 <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 1a2:	fc 01       	movw	r30, r24
 1a4:	33 96       	adiw	r30, 0x03	; 3
 1a6:	dc 01       	movw	r26, r24
 1a8:	15 96       	adiw	r26, 0x05	; 5
 1aa:	2d 91       	ld	r18, X+
 1ac:	3c 91       	ld	r19, X
 1ae:	16 97       	sbiw	r26, 0x06	; 6
 1b0:	d9 01       	movw	r26, r18
 1b2:	2d 91       	ld	r18, X+
 1b4:	3c 91       	ld	r19, X
 1b6:	42 17       	cp	r20, r18
 1b8:	53 07       	cpc	r21, r19
 1ba:	50 f0       	brcs	.+20     	; 0x1d0 <vListInsert+0x4c>
 1bc:	02 80       	ldd	r0, Z+2	; 0x02
 1be:	f3 81       	ldd	r31, Z+3	; 0x03
 1c0:	e0 2d       	mov	r30, r0
 1c2:	a2 81       	ldd	r26, Z+2	; 0x02
 1c4:	b3 81       	ldd	r27, Z+3	; 0x03
 1c6:	2d 91       	ld	r18, X+
 1c8:	3c 91       	ld	r19, X
 1ca:	42 17       	cp	r20, r18
 1cc:	53 07       	cpc	r21, r19
 1ce:	b0 f7       	brcc	.-20     	; 0x1bc <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 1d0:	a2 81       	ldd	r26, Z+2	; 0x02
 1d2:	b3 81       	ldd	r27, Z+3	; 0x03
 1d4:	bb 83       	std	Y+3, r27	; 0x03
 1d6:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 1d8:	15 96       	adiw	r26, 0x05	; 5
 1da:	dc 93       	st	X, r29
 1dc:	ce 93       	st	-X, r28
 1de:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
 1e0:	fd 83       	std	Y+5, r31	; 0x05
 1e2:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 1e4:	d3 83       	std	Z+3, r29	; 0x03
 1e6:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 1e8:	99 87       	std	Y+9, r25	; 0x09
 1ea:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
 1ec:	fc 01       	movw	r30, r24
 1ee:	20 81       	ld	r18, Z
 1f0:	2f 5f       	subi	r18, 0xFF	; 255
 1f2:	20 83       	st	Z, r18
}
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
 1fa:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 1fc:	a2 81       	ldd	r26, Z+2	; 0x02
 1fe:	b3 81       	ldd	r27, Z+3	; 0x03
 200:	84 81       	ldd	r24, Z+4	; 0x04
 202:	95 81       	ldd	r25, Z+5	; 0x05
 204:	15 96       	adiw	r26, 0x05	; 5
 206:	9c 93       	st	X, r25
 208:	8e 93       	st	-X, r24
 20a:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 20c:	a4 81       	ldd	r26, Z+4	; 0x04
 20e:	b5 81       	ldd	r27, Z+5	; 0x05
 210:	82 81       	ldd	r24, Z+2	; 0x02
 212:	93 81       	ldd	r25, Z+3	; 0x03
 214:	13 96       	adiw	r26, 0x03	; 3
 216:	9c 93       	st	X, r25
 218:	8e 93       	st	-X, r24
 21a:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 21c:	a0 85       	ldd	r26, Z+8	; 0x08
 21e:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 220:	11 96       	adiw	r26, 0x01	; 1
 222:	8d 91       	ld	r24, X+
 224:	9c 91       	ld	r25, X
 226:	12 97       	sbiw	r26, 0x02	; 2
 228:	e8 17       	cp	r30, r24
 22a:	f9 07       	cpc	r31, r25
 22c:	31 f4       	brne	.+12     	; 0x23a <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 22e:	84 81       	ldd	r24, Z+4	; 0x04
 230:	95 81       	ldd	r25, Z+5	; 0x05
 232:	12 96       	adiw	r26, 0x02	; 2
 234:	9c 93       	st	X, r25
 236:	8e 93       	st	-X, r24
 238:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
 23a:	11 86       	std	Z+9, r1	; 0x09
 23c:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 23e:	8c 91       	ld	r24, X
 240:	81 50       	subi	r24, 0x01	; 1
 242:	8c 93       	st	X, r24
 244:	08 95       	ret

00000246 <Motor_Tick>:
{
	xTaskCreate(MotorSecTask, (signed portCHAR *)"MotorSecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
}

void Button_Init(){
	button_state = b_release;
 246:	cf 93       	push	r28
 248:	df 93       	push	r29
 24a:	80 91 68 07 	lds	r24, 0x0768	; 0x800768 <motor_state>
 24e:	81 11       	cpse	r24, r1
 250:	74 c0       	rjmp	.+232    	; 0x33a <Motor_Tick+0xf4>
 252:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <orientation>
 256:	81 11       	cpse	r24, r1
 258:	38 c0       	rjmp	.+112    	; 0x2ca <Motor_Tick+0x84>
 25a:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 25e:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 262:	66 3e       	cpi	r22, 0xE6	; 230
 264:	23 e0       	ldi	r18, 0x03	; 3
 266:	72 07       	cpc	r23, r18
 268:	08 f0       	brcs	.+2      	; 0x26c <Motor_Tick+0x26>
 26a:	6c c0       	rjmp	.+216    	; 0x344 <Motor_Tick+0xfe>
 26c:	eb 01       	movw	r28, r22
 26e:	21 96       	adiw	r28, 0x01	; 1
 270:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <__data_start+0x1>
 274:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
 278:	86 e0       	ldi	r24, 0x06	; 6
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	eb d5       	rcall	.+3030   	; 0xe54 <eeprom_read_word>
 27e:	c8 17       	cp	r28, r24
 280:	d9 07       	cpc	r29, r25
 282:	21 f0       	breq	.+8      	; 0x28c <Motor_Tick+0x46>
 284:	be 01       	movw	r22, r28
 286:	86 e0       	ldi	r24, 0x06	; 6
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	e9 d5       	rcall	.+3026   	; 0xe5e <eeprom_update_word>
 28c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 290:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 294:	83 3f       	cpi	r24, 0xF3	; 243
 296:	91 40       	sbci	r25, 0x01	; 1
 298:	21 f0       	breq	.+8      	; 0x2a2 <Motor_Tick+0x5c>
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	80 93 0c 07 	sts	0x070C, r24	; 0x80070c <needs_centering>
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <Motor_Tick+0x60>
 2a2:	10 92 0c 07 	sts	0x070C, r1	; 0x80070c <needs_centering>
 2a6:	e0 91 0d 07 	lds	r30, 0x070D	; 0x80070d <p_index>
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	ed 5f       	subi	r30, 0xFD	; 253
 2ae:	fe 4f       	sbci	r31, 0xFE	; 254
 2b0:	80 81       	ld	r24, Z
 2b2:	8b b9       	out	0x0b, r24	; 11
 2b4:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <p_index>
 2b8:	87 30       	cpi	r24, 0x07	; 7
 2ba:	19 f4       	brne	.+6      	; 0x2c2 <Motor_Tick+0x7c>
 2bc:	10 92 0d 07 	sts	0x070D, r1	; 0x80070d <p_index>
 2c0:	3c c0       	rjmp	.+120    	; 0x33a <Motor_Tick+0xf4>
 2c2:	8f 5f       	subi	r24, 0xFF	; 255
 2c4:	80 93 0d 07 	sts	0x070D, r24	; 0x80070d <p_index>
 2c8:	38 c0       	rjmp	.+112    	; 0x33a <Motor_Tick+0xf4>
 2ca:	81 30       	cpi	r24, 0x01	; 1
 2cc:	d9 f5       	brne	.+118    	; 0x344 <Motor_Tick+0xfe>
 2ce:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 2d2:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 2d6:	61 15       	cp	r22, r1
 2d8:	71 05       	cpc	r23, r1
 2da:	a1 f1       	breq	.+104    	; 0x344 <Motor_Tick+0xfe>
 2dc:	eb 01       	movw	r28, r22
 2de:	21 97       	sbiw	r28, 0x01	; 1
 2e0:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <__data_start+0x1>
 2e4:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
 2e8:	86 e0       	ldi	r24, 0x06	; 6
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	b3 d5       	rcall	.+2918   	; 0xe54 <eeprom_read_word>
 2ee:	c8 17       	cp	r28, r24
 2f0:	d9 07       	cpc	r29, r25
 2f2:	21 f0       	breq	.+8      	; 0x2fc <Motor_Tick+0xb6>
 2f4:	be 01       	movw	r22, r28
 2f6:	86 e0       	ldi	r24, 0x06	; 6
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	b1 d5       	rcall	.+2914   	; 0xe5e <eeprom_update_word>
 2fc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 300:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 304:	83 3f       	cpi	r24, 0xF3	; 243
 306:	91 40       	sbci	r25, 0x01	; 1
 308:	21 f0       	breq	.+8      	; 0x312 <Motor_Tick+0xcc>
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	80 93 0c 07 	sts	0x070C, r24	; 0x80070c <needs_centering>
 310:	02 c0       	rjmp	.+4      	; 0x316 <Motor_Tick+0xd0>
 312:	10 92 0c 07 	sts	0x070C, r1	; 0x80070c <needs_centering>
 316:	e0 91 0d 07 	lds	r30, 0x070D	; 0x80070d <p_index>
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	ed 5f       	subi	r30, 0xFD	; 253
 31e:	fe 4f       	sbci	r31, 0xFE	; 254
 320:	80 81       	ld	r24, Z
 322:	8b b9       	out	0x0b, r24	; 11
 324:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <p_index>
 328:	81 11       	cpse	r24, r1
 32a:	04 c0       	rjmp	.+8      	; 0x334 <Motor_Tick+0xee>
 32c:	87 e0       	ldi	r24, 0x07	; 7
 32e:	80 93 0d 07 	sts	0x070D, r24	; 0x80070d <p_index>
 332:	03 c0       	rjmp	.+6      	; 0x33a <Motor_Tick+0xf4>
 334:	81 50       	subi	r24, 0x01	; 1
 336:	80 93 0d 07 	sts	0x070D, r24	; 0x80070d <p_index>
 33a:	80 91 68 07 	lds	r24, 0x0768	; 0x800768 <motor_state>
 33e:	81 11       	cpse	r24, r1
 340:	10 92 68 07 	sts	0x0768, r1	; 0x800768 <motor_state>
 344:	df 91       	pop	r29
 346:	cf 91       	pop	r28
 348:	08 95       	ret

0000034a <MotorSecTask>:
 34a:	10 92 68 07 	sts	0x0768, r1	; 0x800768 <motor_state>
 34e:	7b df       	rcall	.-266    	; 0x246 <Motor_Tick>
 350:	83 e0       	ldi	r24, 0x03	; 3
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	ac d4       	rcall	.+2392   	; 0xcae <vTaskDelay>
 356:	fb cf       	rjmp	.-10     	; 0x34e <MotorSecTask+0x4>

00000358 <MotorSecPulse>:
 358:	af 92       	push	r10
 35a:	bf 92       	push	r11
 35c:	cf 92       	push	r12
 35e:	df 92       	push	r13
 360:	ef 92       	push	r14
 362:	ff 92       	push	r15
 364:	0f 93       	push	r16
 366:	a1 2c       	mov	r10, r1
 368:	b1 2c       	mov	r11, r1
 36a:	c1 2c       	mov	r12, r1
 36c:	d1 2c       	mov	r13, r1
 36e:	e1 2c       	mov	r14, r1
 370:	f1 2c       	mov	r15, r1
 372:	08 2f       	mov	r16, r24
 374:	20 e0       	ldi	r18, 0x00	; 0
 376:	30 e0       	ldi	r19, 0x00	; 0
 378:	45 e5       	ldi	r20, 0x55	; 85
 37a:	50 e0       	ldi	r21, 0x00	; 0
 37c:	6d e0       	ldi	r22, 0x0D	; 13
 37e:	71 e0       	ldi	r23, 0x01	; 1
 380:	85 ea       	ldi	r24, 0xA5	; 165
 382:	91 e0       	ldi	r25, 0x01	; 1
 384:	30 d2       	rcall	.+1120   	; 0x7e6 <xTaskGenericCreate>
 386:	0f 91       	pop	r16
 388:	ff 90       	pop	r15
 38a:	ef 90       	pop	r14
 38c:	df 90       	pop	r13
 38e:	cf 90       	pop	r12
 390:	bf 90       	pop	r11
 392:	af 90       	pop	r10
 394:	08 95       	ret

00000396 <Button_Tick>:
}

void Button_Tick(){
	//Transitions
	switch(button_state){
 396:	80 91 69 07 	lds	r24, 0x0769	; 0x800769 <button_state>
 39a:	88 23       	and	r24, r24
 39c:	19 f0       	breq	.+6      	; 0x3a4 <Button_Tick+0xe>
 39e:	81 30       	cpi	r24, 0x01	; 1
 3a0:	99 f1       	breq	.+102    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3a2:	4b c0       	rjmp	.+150    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
		case b_release:
		if((GetBit(~PINA, 0) == 1) && !(GetBit(~PINA, 1) == 1)){
 3a4:	00 99       	sbic	0x00, 0	; 0
 3a6:	0b c0       	rjmp	.+22     	; 0x3be <Button_Tick+0x28>
 3a8:	80 b1       	in	r24, 0x00	; 0
 3aa:	80 95       	com	r24
 3ac:	81 fd       	sbrc	r24, 1
 3ae:	07 c0       	rjmp	.+14     	; 0x3be <Button_Tick+0x28>
			button_state = b_push;
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	80 93 69 07 	sts	0x0769, r24	; 0x800769 <button_state>
			PORTC = 0x01;
 3b6:	88 b9       	out	0x08, r24	; 8
			orientation = 0;
 3b8:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <orientation>
 3bc:	08 95       	ret
		}
		
		else if((GetBit(~PINA, 1) == 1) && !(GetBit(~PINA, 0) == 1)){
 3be:	80 b1       	in	r24, 0x00	; 0
 3c0:	80 95       	com	r24
 3c2:	81 ff       	sbrs	r24, 1
 3c4:	0a c0       	rjmp	.+20     	; 0x3da <Button_Tick+0x44>
 3c6:	00 9b       	sbis	0x00, 0	; 0
 3c8:	08 c0       	rjmp	.+16     	; 0x3da <Button_Tick+0x44>
			button_state = b_push;
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	80 93 69 07 	sts	0x0769, r24	; 0x800769 <button_state>
			PORTC = 0x02;
 3d0:	92 e0       	ldi	r25, 0x02	; 2
 3d2:	98 b9       	out	0x08, r25	; 8
			orientation = 1;
 3d4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <orientation>
 3d8:	08 95       	ret
		}
		
		else{
			button_state = b_release;
			PORTC = 0x00;
 3da:	18 b8       	out	0x08, r1	; 8
			
			if(needs_centering){
 3dc:	80 91 0c 07 	lds	r24, 0x070C	; 0x80070c <needs_centering>
 3e0:	88 23       	and	r24, r24
 3e2:	71 f0       	breq	.+28     	; 0x400 <__LOCK_REGION_LENGTH__>
				if(axle < 499){
 3e4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 3e8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 3ec:	83 3f       	cpi	r24, 0xF3	; 243
 3ee:	91 40       	sbci	r25, 0x01	; 1
 3f0:	18 f4       	brcc	.+6      	; 0x3f8 <Button_Tick+0x62>
					orientation = 0;
 3f2:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <orientation>
 3f6:	08 95       	ret
				}
				
				else{
					orientation = 1;
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <orientation>
 3fe:	08 95       	ret
				}
				
			}
			
			else{
				orientation = 2;
 400:	82 e0       	ldi	r24, 0x02	; 2
 402:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <orientation>
 406:	08 95       	ret
		
		break;
		
		case b_push:
		
		if((GetBit(~PINA, 0) == 1) && !(GetBit(~PINA, 1) == 1)){
 408:	00 99       	sbic	0x00, 0	; 0
 40a:	07 c0       	rjmp	.+14     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 40c:	80 b1       	in	r24, 0x00	; 0
 40e:	80 95       	com	r24
 410:	81 fd       	sbrc	r24, 1
 412:	03 c0       	rjmp	.+6      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
			button_state = b_push;
			PORTC = 0x01;
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	88 b9       	out	0x08, r24	; 8
 418:	08 95       	ret
		}
		
		else if((GetBit(~PINA, 1) == 1) && !(GetBit(~PINA, 0) == 1)){
 41a:	80 b1       	in	r24, 0x00	; 0
 41c:	80 95       	com	r24
 41e:	81 ff       	sbrs	r24, 1
 420:	05 c0       	rjmp	.+10     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 422:	00 9b       	sbis	0x00, 0	; 0
 424:	03 c0       	rjmp	.+6      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
			button_state = b_push;
			PORTC = 0x02;
 426:	82 e0       	ldi	r24, 0x02	; 2
 428:	88 b9       	out	0x08, r24	; 8
 42a:	08 95       	ret

		}
		
		else{
			button_state = b_release;
 42c:	10 92 69 07 	sts	0x0769, r1	; 0x800769 <button_state>
			PORTC = 0x00;
 430:	18 b8       	out	0x08, r1	; 8
			orientation = 2;
 432:	82 e0       	ldi	r24, 0x02	; 2
 434:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <orientation>
 438:	08 95       	ret
		}
		
		break;
		
		default:
		button_state = b_release;
 43a:	10 92 69 07 	sts	0x0769, r1	; 0x800769 <button_state>
 43e:	08 95       	ret

00000440 <ButtonSecTask>:
{
	xTaskCreate(MotorSecTask, (signed portCHAR *)"MotorSecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
}

void Button_Init(){
	button_state = b_release;
 440:	10 92 69 07 	sts	0x0769, r1	; 0x800769 <button_state>
void ButtonSecTask(){
	
	Button_Init();
	for(;;){
		Button_Tick();
		vTaskDelay(10);
 444:	a8 df       	rcall	.-176    	; 0x396 <Button_Tick>
 446:	8a e0       	ldi	r24, 0x0A	; 10
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	31 d4       	rcall	.+2146   	; 0xcae <vTaskDelay>
 44c:	fb cf       	rjmp	.-10     	; 0x444 <ButtonSecTask+0x4>

0000044e <ButtonSecPulse>:
	}
}

void ButtonSecPulse(unsigned portBASE_TYPE Priority){
 44e:	af 92       	push	r10
 450:	bf 92       	push	r11
 452:	cf 92       	push	r12
 454:	df 92       	push	r13
 456:	ef 92       	push	r14
 458:	ff 92       	push	r15
 45a:	0f 93       	push	r16
	xTaskCreate(ButtonSecTask, (signed portCHAR *)"ButtonSecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
 45c:	a1 2c       	mov	r10, r1
 45e:	b1 2c       	mov	r11, r1
 460:	c1 2c       	mov	r12, r1
 462:	d1 2c       	mov	r13, r1
 464:	e1 2c       	mov	r14, r1
 466:	f1 2c       	mov	r15, r1
 468:	08 2f       	mov	r16, r24
 46a:	20 e0       	ldi	r18, 0x00	; 0
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	45 e5       	ldi	r20, 0x55	; 85
 470:	50 e0       	ldi	r21, 0x00	; 0
 472:	6a e1       	ldi	r22, 0x1A	; 26
 474:	71 e0       	ldi	r23, 0x01	; 1
 476:	80 e2       	ldi	r24, 0x20	; 32
 478:	92 e0       	ldi	r25, 0x02	; 2
 47a:	b5 d1       	rcall	.+874    	; 0x7e6 <xTaskGenericCreate>
}
 47c:	0f 91       	pop	r16
 47e:	ff 90       	pop	r15
 480:	ef 90       	pop	r14
 482:	df 90       	pop	r13
 484:	cf 90       	pop	r12
 486:	bf 90       	pop	r11
 488:	af 90       	pop	r10
 48a:	08 95       	ret

0000048c <main>:


int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
 48c:	11 b8       	out	0x01, r1	; 1
 48e:	8f ef       	ldi	r24, 0xFF	; 255
 490:	82 b9       	out	0x02, r24	; 2
	DDRC = 0xFF; PORTC = 0x00;
 492:	87 b9       	out	0x07, r24	; 7
 494:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00;
 496:	8a b9       	out	0x0a, r24	; 10
 498:	1b b8       	out	0x0b, r1	; 11
	
	//eeprom_write_word((uint16_t*)6,499);
	axle = eeprom_read_word((uint16_t*)6);
 49a:	86 e0       	ldi	r24, 0x06	; 6
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	da d4       	rcall	.+2484   	; 0xe54 <eeprom_read_word>
 4a0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 4a4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	
	if(axle != 499){
 4a8:	83 3f       	cpi	r24, 0xF3	; 243
 4aa:	91 40       	sbci	r25, 0x01	; 1
 4ac:	21 f0       	breq	.+8      	; 0x4b6 <main+0x2a>
		needs_centering = 1;
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	80 93 0c 07 	sts	0x070C, r24	; 0x80070c <needs_centering>
 4b4:	02 c0       	rjmp	.+4      	; 0x4ba <main+0x2e>
	}
	
	else{
		needs_centering = 0;
 4b6:	10 92 0c 07 	sts	0x070C, r1	; 0x80070c <needs_centering>
	}
	
	//Start Tasks
	MotorSecPulse(1);
	ButtonSecPulse(1);
 4ba:	81 e0       	ldi	r24, 0x01	; 1
	//RunSchedular
	vTaskStartScheduler();
 4bc:	4d df       	rcall	.-358    	; 0x358 <MotorSecPulse>
 4be:	81 e0       	ldi	r24, 0x01	; 1
	
	return 0;
 4c0:	c6 df       	rcall	.-116    	; 0x44e <ButtonSecPulse>
 4c2:	84 d2       	rcall	.+1288   	; 0x9cc <vTaskStartScheduler>
 4c4:	80 e0       	ldi	r24, 0x00	; 0
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	08 95       	ret

000004ca <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 4ca:	31 e1       	ldi	r19, 0x11	; 17
 4cc:	fc 01       	movw	r30, r24
 4ce:	30 83       	st	Z, r19
 4d0:	31 97       	sbiw	r30, 0x01	; 1
 4d2:	22 e2       	ldi	r18, 0x22	; 34
 4d4:	20 83       	st	Z, r18
 4d6:	31 97       	sbiw	r30, 0x01	; 1
 4d8:	a3 e3       	ldi	r26, 0x33	; 51
 4da:	a0 83       	st	Z, r26
 4dc:	31 97       	sbiw	r30, 0x01	; 1
 4de:	60 83       	st	Z, r22
 4e0:	31 97       	sbiw	r30, 0x01	; 1
 4e2:	70 83       	st	Z, r23
 4e4:	31 97       	sbiw	r30, 0x01	; 1
 4e6:	10 82       	st	Z, r1
 4e8:	31 97       	sbiw	r30, 0x01	; 1
 4ea:	60 e8       	ldi	r22, 0x80	; 128
 4ec:	60 83       	st	Z, r22
 4ee:	31 97       	sbiw	r30, 0x01	; 1
 4f0:	10 82       	st	Z, r1
 4f2:	31 97       	sbiw	r30, 0x01	; 1
 4f4:	62 e0       	ldi	r22, 0x02	; 2
 4f6:	60 83       	st	Z, r22
 4f8:	31 97       	sbiw	r30, 0x01	; 1
 4fa:	63 e0       	ldi	r22, 0x03	; 3
 4fc:	60 83       	st	Z, r22
 4fe:	31 97       	sbiw	r30, 0x01	; 1
 500:	64 e0       	ldi	r22, 0x04	; 4
 502:	60 83       	st	Z, r22
 504:	31 97       	sbiw	r30, 0x01	; 1
 506:	65 e0       	ldi	r22, 0x05	; 5
 508:	60 83       	st	Z, r22
 50a:	31 97       	sbiw	r30, 0x01	; 1
 50c:	66 e0       	ldi	r22, 0x06	; 6
 50e:	60 83       	st	Z, r22
 510:	31 97       	sbiw	r30, 0x01	; 1
 512:	67 e0       	ldi	r22, 0x07	; 7
 514:	60 83       	st	Z, r22
 516:	31 97       	sbiw	r30, 0x01	; 1
 518:	68 e0       	ldi	r22, 0x08	; 8
 51a:	60 83       	st	Z, r22
 51c:	31 97       	sbiw	r30, 0x01	; 1
 51e:	69 e0       	ldi	r22, 0x09	; 9
 520:	60 83       	st	Z, r22
 522:	31 97       	sbiw	r30, 0x01	; 1
 524:	60 e1       	ldi	r22, 0x10	; 16
 526:	60 83       	st	Z, r22
 528:	31 97       	sbiw	r30, 0x01	; 1
 52a:	30 83       	st	Z, r19
 52c:	31 97       	sbiw	r30, 0x01	; 1
 52e:	32 e1       	ldi	r19, 0x12	; 18
 530:	30 83       	st	Z, r19
 532:	31 97       	sbiw	r30, 0x01	; 1
 534:	33 e1       	ldi	r19, 0x13	; 19
 536:	30 83       	st	Z, r19
 538:	31 97       	sbiw	r30, 0x01	; 1
 53a:	34 e1       	ldi	r19, 0x14	; 20
 53c:	30 83       	st	Z, r19
 53e:	31 97       	sbiw	r30, 0x01	; 1
 540:	35 e1       	ldi	r19, 0x15	; 21
 542:	30 83       	st	Z, r19
 544:	31 97       	sbiw	r30, 0x01	; 1
 546:	36 e1       	ldi	r19, 0x16	; 22
 548:	30 83       	st	Z, r19
 54a:	31 97       	sbiw	r30, 0x01	; 1
 54c:	37 e1       	ldi	r19, 0x17	; 23
 54e:	30 83       	st	Z, r19
 550:	31 97       	sbiw	r30, 0x01	; 1
 552:	38 e1       	ldi	r19, 0x18	; 24
 554:	30 83       	st	Z, r19
 556:	31 97       	sbiw	r30, 0x01	; 1
 558:	39 e1       	ldi	r19, 0x19	; 25
 55a:	30 83       	st	Z, r19
 55c:	31 97       	sbiw	r30, 0x01	; 1
 55e:	30 e2       	ldi	r19, 0x20	; 32
 560:	30 83       	st	Z, r19
 562:	31 97       	sbiw	r30, 0x01	; 1
 564:	31 e2       	ldi	r19, 0x21	; 33
 566:	30 83       	st	Z, r19
 568:	31 97       	sbiw	r30, 0x01	; 1
 56a:	20 83       	st	Z, r18
 56c:	31 97       	sbiw	r30, 0x01	; 1
 56e:	23 e2       	ldi	r18, 0x23	; 35
 570:	20 83       	st	Z, r18
 572:	31 97       	sbiw	r30, 0x01	; 1
 574:	40 83       	st	Z, r20
 576:	31 97       	sbiw	r30, 0x01	; 1
 578:	50 83       	st	Z, r21
 57a:	31 97       	sbiw	r30, 0x01	; 1
 57c:	26 e2       	ldi	r18, 0x26	; 38
 57e:	20 83       	st	Z, r18
 580:	31 97       	sbiw	r30, 0x01	; 1
 582:	27 e2       	ldi	r18, 0x27	; 39
 584:	20 83       	st	Z, r18
 586:	31 97       	sbiw	r30, 0x01	; 1
 588:	28 e2       	ldi	r18, 0x28	; 40
 58a:	20 83       	st	Z, r18
 58c:	31 97       	sbiw	r30, 0x01	; 1
 58e:	29 e2       	ldi	r18, 0x29	; 41
 590:	20 83       	st	Z, r18
 592:	31 97       	sbiw	r30, 0x01	; 1
 594:	20 e3       	ldi	r18, 0x30	; 48
 596:	20 83       	st	Z, r18
 598:	31 97       	sbiw	r30, 0x01	; 1
 59a:	21 e3       	ldi	r18, 0x31	; 49
 59c:	20 83       	st	Z, r18
 59e:	86 97       	sbiw	r24, 0x26	; 38
 5a0:	08 95       	ret

000005a2 <xPortStartScheduler>:
 5a2:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 5a6:	8c e7       	ldi	r24, 0x7C	; 124
 5a8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 5ac:	8b e0       	ldi	r24, 0x0B	; 11
 5ae:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 5b2:	ef e6       	ldi	r30, 0x6F	; 111
 5b4:	f0 e0       	ldi	r31, 0x00	; 0
 5b6:	80 81       	ld	r24, Z
 5b8:	82 60       	ori	r24, 0x02	; 2
 5ba:	80 83       	st	Z, r24
 5bc:	a0 91 66 07 	lds	r26, 0x0766	; 0x800766 <pxCurrentTCB>
 5c0:	b0 91 67 07 	lds	r27, 0x0767	; 0x800767 <pxCurrentTCB+0x1>
 5c4:	cd 91       	ld	r28, X+
 5c6:	cd bf       	out	0x3d, r28	; 61
 5c8:	dd 91       	ld	r29, X+
 5ca:	de bf       	out	0x3e, r29	; 62
 5cc:	ff 91       	pop	r31
 5ce:	ef 91       	pop	r30
 5d0:	df 91       	pop	r29
 5d2:	cf 91       	pop	r28
 5d4:	bf 91       	pop	r27
 5d6:	af 91       	pop	r26
 5d8:	9f 91       	pop	r25
 5da:	8f 91       	pop	r24
 5dc:	7f 91       	pop	r23
 5de:	6f 91       	pop	r22
 5e0:	5f 91       	pop	r21
 5e2:	4f 91       	pop	r20
 5e4:	3f 91       	pop	r19
 5e6:	2f 91       	pop	r18
 5e8:	1f 91       	pop	r17
 5ea:	0f 91       	pop	r16
 5ec:	ff 90       	pop	r15
 5ee:	ef 90       	pop	r14
 5f0:	df 90       	pop	r13
 5f2:	cf 90       	pop	r12
 5f4:	bf 90       	pop	r11
 5f6:	af 90       	pop	r10
 5f8:	9f 90       	pop	r9
 5fa:	8f 90       	pop	r8
 5fc:	7f 90       	pop	r7
 5fe:	6f 90       	pop	r6
 600:	5f 90       	pop	r5
 602:	4f 90       	pop	r4
 604:	3f 90       	pop	r3
 606:	2f 90       	pop	r2
 608:	1f 90       	pop	r1
 60a:	0f 90       	pop	r0
 60c:	0f be       	out	0x3f, r0	; 63
 60e:	0f 90       	pop	r0
 610:	08 95       	ret
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	08 95       	ret

00000616 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 616:	0f 92       	push	r0
 618:	0f b6       	in	r0, 0x3f	; 63
 61a:	f8 94       	cli
 61c:	0f 92       	push	r0
 61e:	1f 92       	push	r1
 620:	11 24       	eor	r1, r1
 622:	2f 92       	push	r2
 624:	3f 92       	push	r3
 626:	4f 92       	push	r4
 628:	5f 92       	push	r5
 62a:	6f 92       	push	r6
 62c:	7f 92       	push	r7
 62e:	8f 92       	push	r8
 630:	9f 92       	push	r9
 632:	af 92       	push	r10
 634:	bf 92       	push	r11
 636:	cf 92       	push	r12
 638:	df 92       	push	r13
 63a:	ef 92       	push	r14
 63c:	ff 92       	push	r15
 63e:	0f 93       	push	r16
 640:	1f 93       	push	r17
 642:	2f 93       	push	r18
 644:	3f 93       	push	r19
 646:	4f 93       	push	r20
 648:	5f 93       	push	r21
 64a:	6f 93       	push	r22
 64c:	7f 93       	push	r23
 64e:	8f 93       	push	r24
 650:	9f 93       	push	r25
 652:	af 93       	push	r26
 654:	bf 93       	push	r27
 656:	cf 93       	push	r28
 658:	df 93       	push	r29
 65a:	ef 93       	push	r30
 65c:	ff 93       	push	r31
 65e:	a0 91 66 07 	lds	r26, 0x0766	; 0x800766 <pxCurrentTCB>
 662:	b0 91 67 07 	lds	r27, 0x0767	; 0x800767 <pxCurrentTCB+0x1>
 666:	0d b6       	in	r0, 0x3d	; 61
 668:	0d 92       	st	X+, r0
 66a:	0e b6       	in	r0, 0x3e	; 62
	vTaskSwitchContext();
 66c:	0d 92       	st	X+, r0
	portRESTORE_CONTEXT();
 66e:	70 d3       	rcall	.+1760   	; 0xd50 <vTaskSwitchContext>
 670:	a0 91 66 07 	lds	r26, 0x0766	; 0x800766 <pxCurrentTCB>
 674:	b0 91 67 07 	lds	r27, 0x0767	; 0x800767 <pxCurrentTCB+0x1>
 678:	cd 91       	ld	r28, X+
 67a:	cd bf       	out	0x3d, r28	; 61
 67c:	dd 91       	ld	r29, X+
 67e:	de bf       	out	0x3e, r29	; 62
 680:	ff 91       	pop	r31
 682:	ef 91       	pop	r30
 684:	df 91       	pop	r29
 686:	cf 91       	pop	r28
 688:	bf 91       	pop	r27
 68a:	af 91       	pop	r26
 68c:	9f 91       	pop	r25
 68e:	8f 91       	pop	r24
 690:	7f 91       	pop	r23
 692:	6f 91       	pop	r22
 694:	5f 91       	pop	r21
 696:	4f 91       	pop	r20
 698:	3f 91       	pop	r19
 69a:	2f 91       	pop	r18
 69c:	1f 91       	pop	r17
 69e:	0f 91       	pop	r16
 6a0:	ff 90       	pop	r15
 6a2:	ef 90       	pop	r14
 6a4:	df 90       	pop	r13
 6a6:	cf 90       	pop	r12
 6a8:	bf 90       	pop	r11
 6aa:	af 90       	pop	r10
 6ac:	9f 90       	pop	r9
 6ae:	8f 90       	pop	r8
 6b0:	7f 90       	pop	r7
 6b2:	6f 90       	pop	r6
 6b4:	5f 90       	pop	r5
 6b6:	4f 90       	pop	r4
 6b8:	3f 90       	pop	r3
 6ba:	2f 90       	pop	r2
 6bc:	1f 90       	pop	r1
 6be:	0f 90       	pop	r0
 6c0:	0f be       	out	0x3f, r0	; 63

	asm volatile ( "ret" );
 6c2:	0f 90       	pop	r0
 6c4:	08 95       	ret

000006c6 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 6c6:	0f 92       	push	r0
 6c8:	0f b6       	in	r0, 0x3f	; 63
 6ca:	f8 94       	cli
 6cc:	0f 92       	push	r0
 6ce:	1f 92       	push	r1
 6d0:	11 24       	eor	r1, r1
 6d2:	2f 92       	push	r2
 6d4:	3f 92       	push	r3
 6d6:	4f 92       	push	r4
 6d8:	5f 92       	push	r5
 6da:	6f 92       	push	r6
 6dc:	7f 92       	push	r7
 6de:	8f 92       	push	r8
 6e0:	9f 92       	push	r9
 6e2:	af 92       	push	r10
 6e4:	bf 92       	push	r11
 6e6:	cf 92       	push	r12
 6e8:	df 92       	push	r13
 6ea:	ef 92       	push	r14
 6ec:	ff 92       	push	r15
 6ee:	0f 93       	push	r16
 6f0:	1f 93       	push	r17
 6f2:	2f 93       	push	r18
 6f4:	3f 93       	push	r19
 6f6:	4f 93       	push	r20
 6f8:	5f 93       	push	r21
 6fa:	6f 93       	push	r22
 6fc:	7f 93       	push	r23
 6fe:	8f 93       	push	r24
 700:	9f 93       	push	r25
 702:	af 93       	push	r26
 704:	bf 93       	push	r27
 706:	cf 93       	push	r28
 708:	df 93       	push	r29
 70a:	ef 93       	push	r30
 70c:	ff 93       	push	r31
 70e:	a0 91 66 07 	lds	r26, 0x0766	; 0x800766 <pxCurrentTCB>
 712:	b0 91 67 07 	lds	r27, 0x0767	; 0x800767 <pxCurrentTCB+0x1>
 716:	0d b6       	in	r0, 0x3d	; 61
 718:	0d 92       	st	X+, r0
 71a:	0e b6       	in	r0, 0x3e	; 62
	vTaskIncrementTick();
	vTaskSwitchContext();
 71c:	0d 92       	st	X+, r0
 71e:	85 d1       	rcall	.+778    	; 0xa2a <vTaskIncrementTick>
	portRESTORE_CONTEXT();
 720:	17 d3       	rcall	.+1582   	; 0xd50 <vTaskSwitchContext>
 722:	a0 91 66 07 	lds	r26, 0x0766	; 0x800766 <pxCurrentTCB>
 726:	b0 91 67 07 	lds	r27, 0x0767	; 0x800767 <pxCurrentTCB+0x1>
 72a:	cd 91       	ld	r28, X+
 72c:	cd bf       	out	0x3d, r28	; 61
 72e:	dd 91       	ld	r29, X+
 730:	de bf       	out	0x3e, r29	; 62
 732:	ff 91       	pop	r31
 734:	ef 91       	pop	r30
 736:	df 91       	pop	r29
 738:	cf 91       	pop	r28
 73a:	bf 91       	pop	r27
 73c:	af 91       	pop	r26
 73e:	9f 91       	pop	r25
 740:	8f 91       	pop	r24
 742:	7f 91       	pop	r23
 744:	6f 91       	pop	r22
 746:	5f 91       	pop	r21
 748:	4f 91       	pop	r20
 74a:	3f 91       	pop	r19
 74c:	2f 91       	pop	r18
 74e:	1f 91       	pop	r17
 750:	0f 91       	pop	r16
 752:	ff 90       	pop	r15
 754:	ef 90       	pop	r14
 756:	df 90       	pop	r13
 758:	cf 90       	pop	r12
 75a:	bf 90       	pop	r11
 75c:	af 90       	pop	r10
 75e:	9f 90       	pop	r9
 760:	8f 90       	pop	r8
 762:	7f 90       	pop	r7
 764:	6f 90       	pop	r6
 766:	5f 90       	pop	r5
 768:	4f 90       	pop	r4
 76a:	3f 90       	pop	r3
 76c:	2f 90       	pop	r2
 76e:	1f 90       	pop	r1
 770:	0f 90       	pop	r0
 772:	0f be       	out	0x3f, r0	; 63

	asm volatile ( "ret" );
 774:	0f 90       	pop	r0
 776:	08 95       	ret

00000778 <__vector_13>:
}
 778:	a6 df       	rcall	.-180    	; 0x6c6 <vPortYieldFromTick>
 77a:	18 95       	reti

0000077c <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
 77c:	cf 93       	push	r28
 77e:	df 93       	push	r29
 780:	ec 01       	movw	r28, r24
 782:	e0 91 66 07 	lds	r30, 0x0766	; 0x800766 <pxCurrentTCB>
 786:	f0 91 67 07 	lds	r31, 0x0767	; 0x800767 <pxCurrentTCB+0x1>
 78a:	93 83       	std	Z+3, r25	; 0x03
 78c:	82 83       	std	Z+2, r24	; 0x02
 78e:	80 91 16 07 	lds	r24, 0x0716	; 0x800716 <xTickCount>
 792:	90 91 17 07 	lds	r25, 0x0717	; 0x800717 <xTickCount+0x1>
 796:	c8 17       	cp	r28, r24
 798:	d9 07       	cpc	r29, r25
 79a:	60 f4       	brcc	.+24     	; 0x7b4 <prvAddCurrentTaskToDelayedList+0x38>
 79c:	60 91 66 07 	lds	r22, 0x0766	; 0x800766 <pxCurrentTCB>
 7a0:	70 91 67 07 	lds	r23, 0x0767	; 0x800767 <pxCurrentTCB+0x1>
 7a4:	80 91 2c 07 	lds	r24, 0x072C	; 0x80072c <pxOverflowDelayedTaskList>
 7a8:	90 91 2d 07 	lds	r25, 0x072D	; 0x80072d <pxOverflowDelayedTaskList+0x1>
 7ac:	6e 5f       	subi	r22, 0xFE	; 254
 7ae:	7f 4f       	sbci	r23, 0xFF	; 255
 7b0:	e9 dc       	rcall	.-1582   	; 0x184 <vListInsert>
 7b2:	16 c0       	rjmp	.+44     	; 0x7e0 <prvAddCurrentTaskToDelayedList+0x64>
 7b4:	60 91 66 07 	lds	r22, 0x0766	; 0x800766 <pxCurrentTCB>
 7b8:	70 91 67 07 	lds	r23, 0x0767	; 0x800767 <pxCurrentTCB+0x1>
 7bc:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <pxDelayedTaskList>
 7c0:	90 91 2f 07 	lds	r25, 0x072F	; 0x80072f <pxDelayedTaskList+0x1>
 7c4:	6e 5f       	subi	r22, 0xFE	; 254
 7c6:	7f 4f       	sbci	r23, 0xFF	; 255
 7c8:	dd dc       	rcall	.-1606   	; 0x184 <vListInsert>
 7ca:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <xNextTaskUnblockTime>
 7ce:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <xNextTaskUnblockTime+0x1>
 7d2:	c8 17       	cp	r28, r24
 7d4:	d9 07       	cpc	r29, r25
 7d6:	20 f4       	brcc	.+8      	; 0x7e0 <prvAddCurrentTaskToDelayedList+0x64>
 7d8:	d0 93 0c 01 	sts	0x010C, r29	; 0x80010c <xNextTaskUnblockTime+0x1>
 7dc:	c0 93 0b 01 	sts	0x010B, r28	; 0x80010b <xNextTaskUnblockTime>
 7e0:	df 91       	pop	r29
 7e2:	cf 91       	pop	r28
 7e4:	08 95       	ret

000007e6 <xTaskGenericCreate>:
 7e6:	4f 92       	push	r4
 7e8:	5f 92       	push	r5
 7ea:	6f 92       	push	r6
 7ec:	7f 92       	push	r7
 7ee:	8f 92       	push	r8
 7f0:	9f 92       	push	r9
 7f2:	af 92       	push	r10
 7f4:	bf 92       	push	r11
 7f6:	cf 92       	push	r12
 7f8:	df 92       	push	r13
 7fa:	ef 92       	push	r14
 7fc:	ff 92       	push	r15
 7fe:	0f 93       	push	r16
 800:	1f 93       	push	r17
 802:	cf 93       	push	r28
 804:	df 93       	push	r29
 806:	5c 01       	movw	r10, r24
 808:	4b 01       	movw	r8, r22
 80a:	3a 01       	movw	r6, r20
 80c:	29 01       	movw	r4, r18
 80e:	81 e2       	ldi	r24, 0x21	; 33
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	5a dc       	rcall	.-1868   	; 0xc8 <pvPortMalloc>
 814:	ec 01       	movw	r28, r24
 816:	89 2b       	or	r24, r25
 818:	09 f4       	brne	.+2      	; 0x81c <xTaskGenericCreate+0x36>
 81a:	c6 c0       	rjmp	.+396    	; 0x9a8 <xTaskGenericCreate+0x1c2>
 81c:	c1 14       	cp	r12, r1
 81e:	d1 04       	cpc	r13, r1
 820:	09 f0       	breq	.+2      	; 0x824 <xTaskGenericCreate+0x3e>
 822:	be c0       	rjmp	.+380    	; 0x9a0 <xTaskGenericCreate+0x1ba>
 824:	c3 01       	movw	r24, r6
 826:	50 dc       	rcall	.-1888   	; 0xc8 <pvPortMalloc>
 828:	98 8f       	std	Y+24, r25	; 0x18
 82a:	8f 8b       	std	Y+23, r24	; 0x17
 82c:	00 97       	sbiw	r24, 0x00	; 0
 82e:	19 f4       	brne	.+6      	; 0x836 <xTaskGenericCreate+0x50>
 830:	ce 01       	movw	r24, r28
 832:	6e dc       	rcall	.-1828   	; 0x110 <vPortFree>
 834:	b9 c0       	rjmp	.+370    	; 0x9a8 <xTaskGenericCreate+0x1c2>
 836:	a3 01       	movw	r20, r6
 838:	65 ea       	ldi	r22, 0xA5	; 165
 83a:	70 e0       	ldi	r23, 0x00	; 0
 83c:	f5 d2       	rcall	.+1514   	; 0xe28 <memset>
 83e:	93 01       	movw	r18, r6
 840:	21 50       	subi	r18, 0x01	; 1
 842:	31 09       	sbc	r19, r1
 844:	8f 89       	ldd	r24, Y+23	; 0x17
 846:	98 8d       	ldd	r25, Y+24	; 0x18
 848:	3c 01       	movw	r6, r24
 84a:	62 0e       	add	r6, r18
 84c:	73 1e       	adc	r7, r19
 84e:	48 e0       	ldi	r20, 0x08	; 8
 850:	50 e0       	ldi	r21, 0x00	; 0
 852:	b4 01       	movw	r22, r8
 854:	ce 01       	movw	r24, r28
 856:	49 96       	adiw	r24, 0x19	; 25
 858:	ee d2       	rcall	.+1500   	; 0xe36 <strncpy>
 85a:	18 a2       	std	Y+32, r1	; 0x20
 85c:	10 2f       	mov	r17, r16
 85e:	04 30       	cpi	r16, 0x04	; 4
 860:	08 f0       	brcs	.+2      	; 0x864 <xTaskGenericCreate+0x7e>
 862:	13 e0       	ldi	r17, 0x03	; 3
 864:	1e 8b       	std	Y+22, r17	; 0x16
 866:	6e 01       	movw	r12, r28
 868:	82 e0       	ldi	r24, 0x02	; 2
 86a:	c8 0e       	add	r12, r24
 86c:	d1 1c       	adc	r13, r1
 86e:	c6 01       	movw	r24, r12
 870:	5e dc       	rcall	.-1860   	; 0x12e <vListInitialiseItem>
 872:	ce 01       	movw	r24, r28
 874:	0c 96       	adiw	r24, 0x0c	; 12
 876:	5b dc       	rcall	.-1866   	; 0x12e <vListInitialiseItem>
 878:	d9 87       	std	Y+9, r29	; 0x09
 87a:	c8 87       	std	Y+8, r28	; 0x08
 87c:	84 e0       	ldi	r24, 0x04	; 4
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	81 1b       	sub	r24, r17
 882:	91 09       	sbc	r25, r1
 884:	9d 87       	std	Y+13, r25	; 0x0d
 886:	8c 87       	std	Y+12, r24	; 0x0c
 888:	db 8b       	std	Y+19, r29	; 0x13
 88a:	ca 8b       	std	Y+18, r28	; 0x12
 88c:	a2 01       	movw	r20, r4
 88e:	b5 01       	movw	r22, r10
 890:	c3 01       	movw	r24, r6
 892:	1b de       	rcall	.-970    	; 0x4ca <pxPortInitialiseStack>
 894:	99 83       	std	Y+1, r25	; 0x01
 896:	88 83       	st	Y, r24
 898:	e1 14       	cp	r14, r1
 89a:	f1 04       	cpc	r15, r1
 89c:	19 f0       	breq	.+6      	; 0x8a4 <xTaskGenericCreate+0xbe>
 89e:	f7 01       	movw	r30, r14
 8a0:	d1 83       	std	Z+1, r29	; 0x01
 8a2:	c0 83       	st	Z, r28
 8a4:	0f b6       	in	r0, 0x3f	; 63
 8a6:	f8 94       	cli
 8a8:	0f 92       	push	r0
 8aa:	80 91 18 07 	lds	r24, 0x0718	; 0x800718 <uxCurrentNumberOfTasks>
 8ae:	8f 5f       	subi	r24, 0xFF	; 255
 8b0:	80 93 18 07 	sts	0x0718, r24	; 0x800718 <uxCurrentNumberOfTasks>
 8b4:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <pxCurrentTCB>
 8b8:	90 91 67 07 	lds	r25, 0x0767	; 0x800767 <pxCurrentTCB+0x1>
 8bc:	89 2b       	or	r24, r25
 8be:	69 f5       	brne	.+90     	; 0x91a <xTaskGenericCreate+0x134>
 8c0:	d0 93 67 07 	sts	0x0767, r29	; 0x800767 <pxCurrentTCB+0x1>
 8c4:	c0 93 66 07 	sts	0x0766, r28	; 0x800766 <pxCurrentTCB>
 8c8:	80 91 18 07 	lds	r24, 0x0718	; 0x800718 <uxCurrentNumberOfTasks>
 8cc:	81 30       	cpi	r24, 0x01	; 1
 8ce:	a1 f5       	brne	.+104    	; 0x938 <xTaskGenericCreate+0x152>
 8d0:	82 e4       	ldi	r24, 0x42	; 66
 8d2:	97 e0       	ldi	r25, 0x07	; 7
 8d4:	1e dc       	rcall	.-1988   	; 0x112 <vListInitialise>
 8d6:	8b e4       	ldi	r24, 0x4B	; 75
 8d8:	97 e0       	ldi	r25, 0x07	; 7
 8da:	1b dc       	rcall	.-1994   	; 0x112 <vListInitialise>
 8dc:	84 e5       	ldi	r24, 0x54	; 84
 8de:	97 e0       	ldi	r25, 0x07	; 7
 8e0:	18 dc       	rcall	.-2000   	; 0x112 <vListInitialise>
 8e2:	8d e5       	ldi	r24, 0x5D	; 93
 8e4:	97 e0       	ldi	r25, 0x07	; 7
 8e6:	15 dc       	rcall	.-2006   	; 0x112 <vListInitialise>
 8e8:	89 e3       	ldi	r24, 0x39	; 57
 8ea:	97 e0       	ldi	r25, 0x07	; 7
 8ec:	12 dc       	rcall	.-2012   	; 0x112 <vListInitialise>
 8ee:	80 e3       	ldi	r24, 0x30	; 48
 8f0:	97 e0       	ldi	r25, 0x07	; 7
 8f2:	0f dc       	rcall	.-2018   	; 0x112 <vListInitialise>
 8f4:	83 e2       	ldi	r24, 0x23	; 35
 8f6:	97 e0       	ldi	r25, 0x07	; 7
 8f8:	0c dc       	rcall	.-2024   	; 0x112 <vListInitialise>
 8fa:	8a e1       	ldi	r24, 0x1A	; 26
 8fc:	97 e0       	ldi	r25, 0x07	; 7
 8fe:	09 dc       	rcall	.-2030   	; 0x112 <vListInitialise>
 900:	89 e3       	ldi	r24, 0x39	; 57
 902:	97 e0       	ldi	r25, 0x07	; 7
 904:	90 93 2f 07 	sts	0x072F, r25	; 0x80072f <pxDelayedTaskList+0x1>
 908:	80 93 2e 07 	sts	0x072E, r24	; 0x80072e <pxDelayedTaskList>
 90c:	80 e3       	ldi	r24, 0x30	; 48
 90e:	97 e0       	ldi	r25, 0x07	; 7
 910:	90 93 2d 07 	sts	0x072D, r25	; 0x80072d <pxOverflowDelayedTaskList+0x1>
 914:	80 93 2c 07 	sts	0x072C, r24	; 0x80072c <pxOverflowDelayedTaskList>
 918:	0f c0       	rjmp	.+30     	; 0x938 <xTaskGenericCreate+0x152>
 91a:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <xSchedulerRunning>
 91e:	81 11       	cpse	r24, r1
 920:	0b c0       	rjmp	.+22     	; 0x938 <xTaskGenericCreate+0x152>
 922:	e0 91 66 07 	lds	r30, 0x0766	; 0x800766 <pxCurrentTCB>
 926:	f0 91 67 07 	lds	r31, 0x0767	; 0x800767 <pxCurrentTCB+0x1>
 92a:	86 89       	ldd	r24, Z+22	; 0x16
 92c:	08 17       	cp	r16, r24
 92e:	20 f0       	brcs	.+8      	; 0x938 <xTaskGenericCreate+0x152>
 930:	d0 93 67 07 	sts	0x0767, r29	; 0x800767 <pxCurrentTCB+0x1>
 934:	c0 93 66 07 	sts	0x0766, r28	; 0x800766 <pxCurrentTCB>
 938:	8e 89       	ldd	r24, Y+22	; 0x16
 93a:	90 91 15 07 	lds	r25, 0x0715	; 0x800715 <uxTopUsedPriority>
 93e:	98 17       	cp	r25, r24
 940:	10 f4       	brcc	.+4      	; 0x946 <xTaskGenericCreate+0x160>
 942:	80 93 15 07 	sts	0x0715, r24	; 0x800715 <uxTopUsedPriority>
 946:	90 91 0e 07 	lds	r25, 0x070E	; 0x80070e <uxTaskNumber>
 94a:	9f 5f       	subi	r25, 0xFF	; 255
 94c:	90 93 0e 07 	sts	0x070E, r25	; 0x80070e <uxTaskNumber>
 950:	90 91 14 07 	lds	r25, 0x0714	; 0x800714 <uxTopReadyPriority>
 954:	98 17       	cp	r25, r24
 956:	10 f4       	brcc	.+4      	; 0x95c <xTaskGenericCreate+0x176>
 958:	80 93 14 07 	sts	0x0714, r24	; 0x800714 <uxTopReadyPriority>
 95c:	90 e0       	ldi	r25, 0x00	; 0
 95e:	9c 01       	movw	r18, r24
 960:	22 0f       	add	r18, r18
 962:	33 1f       	adc	r19, r19
 964:	22 0f       	add	r18, r18
 966:	33 1f       	adc	r19, r19
 968:	22 0f       	add	r18, r18
 96a:	33 1f       	adc	r19, r19
 96c:	82 0f       	add	r24, r18
 96e:	93 1f       	adc	r25, r19
 970:	b6 01       	movw	r22, r12
 972:	8e 5b       	subi	r24, 0xBE	; 190
 974:	98 4f       	sbci	r25, 0xF8	; 248
 976:	df db       	rcall	.-2114   	; 0x136 <vListInsertEnd>
 978:	0f 90       	pop	r0
 97a:	0f be       	out	0x3f, r0	; 63
 97c:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <xSchedulerRunning>
 980:	88 23       	and	r24, r24
 982:	51 f0       	breq	.+20     	; 0x998 <xTaskGenericCreate+0x1b2>
 984:	e0 91 66 07 	lds	r30, 0x0766	; 0x800766 <pxCurrentTCB>
 988:	f0 91 67 07 	lds	r31, 0x0767	; 0x800767 <pxCurrentTCB+0x1>
 98c:	86 89       	ldd	r24, Z+22	; 0x16
 98e:	80 17       	cp	r24, r16
 990:	28 f4       	brcc	.+10     	; 0x99c <xTaskGenericCreate+0x1b6>
 992:	41 de       	rcall	.-894    	; 0x616 <vPortYield>
 994:	81 e0       	ldi	r24, 0x01	; 1
 996:	09 c0       	rjmp	.+18     	; 0x9aa <xTaskGenericCreate+0x1c4>
 998:	81 e0       	ldi	r24, 0x01	; 1
 99a:	07 c0       	rjmp	.+14     	; 0x9aa <xTaskGenericCreate+0x1c4>
 99c:	81 e0       	ldi	r24, 0x01	; 1
 99e:	05 c0       	rjmp	.+10     	; 0x9aa <xTaskGenericCreate+0x1c4>
 9a0:	d8 8e       	std	Y+24, r13	; 0x18
 9a2:	cf 8a       	std	Y+23, r12	; 0x17
 9a4:	c6 01       	movw	r24, r12
 9a6:	47 cf       	rjmp	.-370    	; 0x836 <xTaskGenericCreate+0x50>
 9a8:	8f ef       	ldi	r24, 0xFF	; 255
 9aa:	df 91       	pop	r29
 9ac:	cf 91       	pop	r28
 9ae:	1f 91       	pop	r17
 9b0:	0f 91       	pop	r16
 9b2:	ff 90       	pop	r15
 9b4:	ef 90       	pop	r14
 9b6:	df 90       	pop	r13
 9b8:	cf 90       	pop	r12
 9ba:	bf 90       	pop	r11
 9bc:	af 90       	pop	r10
 9be:	9f 90       	pop	r9
 9c0:	8f 90       	pop	r8
 9c2:	7f 90       	pop	r7
 9c4:	6f 90       	pop	r6
 9c6:	5f 90       	pop	r5
 9c8:	4f 90       	pop	r4
 9ca:	08 95       	ret

000009cc <vTaskStartScheduler>:
 9cc:	af 92       	push	r10
 9ce:	bf 92       	push	r11
 9d0:	cf 92       	push	r12
 9d2:	df 92       	push	r13
 9d4:	ef 92       	push	r14
 9d6:	ff 92       	push	r15
 9d8:	0f 93       	push	r16
 9da:	a1 2c       	mov	r10, r1
 9dc:	b1 2c       	mov	r11, r1
 9de:	c1 2c       	mov	r12, r1
 9e0:	d1 2c       	mov	r13, r1
 9e2:	e1 2c       	mov	r14, r1
 9e4:	f1 2c       	mov	r15, r1
 9e6:	00 e0       	ldi	r16, 0x00	; 0
 9e8:	20 e0       	ldi	r18, 0x00	; 0
 9ea:	30 e0       	ldi	r19, 0x00	; 0
 9ec:	45 e5       	ldi	r20, 0x55	; 85
 9ee:	50 e0       	ldi	r21, 0x00	; 0
 9f0:	68 e2       	ldi	r22, 0x28	; 40
 9f2:	71 e0       	ldi	r23, 0x01	; 1
 9f4:	82 e7       	ldi	r24, 0x72	; 114
 9f6:	96 e0       	ldi	r25, 0x06	; 6
 9f8:	f6 de       	rcall	.-532    	; 0x7e6 <xTaskGenericCreate>
 9fa:	81 30       	cpi	r24, 0x01	; 1
 9fc:	41 f4       	brne	.+16     	; 0xa0e <vTaskStartScheduler+0x42>
 9fe:	f8 94       	cli
 a00:	80 93 13 07 	sts	0x0713, r24	; 0x800713 <xSchedulerRunning>
 a04:	10 92 17 07 	sts	0x0717, r1	; 0x800717 <xTickCount+0x1>
 a08:	10 92 16 07 	sts	0x0716, r1	; 0x800716 <xTickCount>
 a0c:	ca dd       	rcall	.-1132   	; 0x5a2 <xPortStartScheduler>
 a0e:	0f 91       	pop	r16
 a10:	ff 90       	pop	r15
 a12:	ef 90       	pop	r14
 a14:	df 90       	pop	r13
 a16:	cf 90       	pop	r12
 a18:	bf 90       	pop	r11
 a1a:	af 90       	pop	r10
 a1c:	08 95       	ret

00000a1e <vTaskSuspendAll>:
 a1e:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <uxSchedulerSuspended>
 a22:	8f 5f       	subi	r24, 0xFF	; 255
 a24:	80 93 12 07 	sts	0x0712, r24	; 0x800712 <uxSchedulerSuspended>
 a28:	08 95       	ret

00000a2a <vTaskIncrementTick>:
 a2a:	0f 93       	push	r16
 a2c:	1f 93       	push	r17
 a2e:	cf 93       	push	r28
 a30:	df 93       	push	r29
 a32:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <uxSchedulerSuspended>
 a36:	81 11       	cpse	r24, r1
 a38:	af c0       	rjmp	.+350    	; 0xb98 <vTaskIncrementTick+0x16e>
 a3a:	80 91 16 07 	lds	r24, 0x0716	; 0x800716 <xTickCount>
 a3e:	90 91 17 07 	lds	r25, 0x0717	; 0x800717 <xTickCount+0x1>
 a42:	01 96       	adiw	r24, 0x01	; 1
 a44:	90 93 17 07 	sts	0x0717, r25	; 0x800717 <xTickCount+0x1>
 a48:	80 93 16 07 	sts	0x0716, r24	; 0x800716 <xTickCount>
 a4c:	80 91 16 07 	lds	r24, 0x0716	; 0x800716 <xTickCount>
 a50:	90 91 17 07 	lds	r25, 0x0717	; 0x800717 <xTickCount+0x1>
 a54:	89 2b       	or	r24, r25
 a56:	99 f5       	brne	.+102    	; 0xabe <vTaskIncrementTick+0x94>
 a58:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <pxDelayedTaskList>
 a5c:	90 91 2f 07 	lds	r25, 0x072F	; 0x80072f <pxDelayedTaskList+0x1>
 a60:	20 91 2c 07 	lds	r18, 0x072C	; 0x80072c <pxOverflowDelayedTaskList>
 a64:	30 91 2d 07 	lds	r19, 0x072D	; 0x80072d <pxOverflowDelayedTaskList+0x1>
 a68:	30 93 2f 07 	sts	0x072F, r19	; 0x80072f <pxDelayedTaskList+0x1>
 a6c:	20 93 2e 07 	sts	0x072E, r18	; 0x80072e <pxDelayedTaskList>
 a70:	90 93 2d 07 	sts	0x072D, r25	; 0x80072d <pxOverflowDelayedTaskList+0x1>
 a74:	80 93 2c 07 	sts	0x072C, r24	; 0x80072c <pxOverflowDelayedTaskList>
 a78:	80 91 0f 07 	lds	r24, 0x070F	; 0x80070f <xNumOfOverflows>
 a7c:	8f 5f       	subi	r24, 0xFF	; 255
 a7e:	80 93 0f 07 	sts	0x070F, r24	; 0x80070f <xNumOfOverflows>
 a82:	e0 91 2e 07 	lds	r30, 0x072E	; 0x80072e <pxDelayedTaskList>
 a86:	f0 91 2f 07 	lds	r31, 0x072F	; 0x80072f <pxDelayedTaskList+0x1>
 a8a:	80 81       	ld	r24, Z
 a8c:	81 11       	cpse	r24, r1
 a8e:	07 c0       	rjmp	.+14     	; 0xa9e <vTaskIncrementTick+0x74>
 a90:	8f ef       	ldi	r24, 0xFF	; 255
 a92:	9f ef       	ldi	r25, 0xFF	; 255
 a94:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <xNextTaskUnblockTime+0x1>
 a98:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <xNextTaskUnblockTime>
 a9c:	10 c0       	rjmp	.+32     	; 0xabe <vTaskIncrementTick+0x94>
 a9e:	e0 91 2e 07 	lds	r30, 0x072E	; 0x80072e <pxDelayedTaskList>
 aa2:	f0 91 2f 07 	lds	r31, 0x072F	; 0x80072f <pxDelayedTaskList+0x1>
 aa6:	05 80       	ldd	r0, Z+5	; 0x05
 aa8:	f6 81       	ldd	r31, Z+6	; 0x06
 aaa:	e0 2d       	mov	r30, r0
 aac:	06 80       	ldd	r0, Z+6	; 0x06
 aae:	f7 81       	ldd	r31, Z+7	; 0x07
 ab0:	e0 2d       	mov	r30, r0
 ab2:	82 81       	ldd	r24, Z+2	; 0x02
 ab4:	93 81       	ldd	r25, Z+3	; 0x03
 ab6:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <xNextTaskUnblockTime+0x1>
 aba:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <xNextTaskUnblockTime>
 abe:	20 91 16 07 	lds	r18, 0x0716	; 0x800716 <xTickCount>
 ac2:	30 91 17 07 	lds	r19, 0x0717	; 0x800717 <xTickCount+0x1>
 ac6:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <xNextTaskUnblockTime>
 aca:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <xNextTaskUnblockTime+0x1>
 ace:	28 17       	cp	r18, r24
 ad0:	39 07       	cpc	r19, r25
 ad2:	08 f4       	brcc	.+2      	; 0xad6 <vTaskIncrementTick+0xac>
 ad4:	66 c0       	rjmp	.+204    	; 0xba2 <vTaskIncrementTick+0x178>
 ad6:	e0 91 2e 07 	lds	r30, 0x072E	; 0x80072e <pxDelayedTaskList>
 ada:	f0 91 2f 07 	lds	r31, 0x072F	; 0x80072f <pxDelayedTaskList+0x1>
 ade:	80 81       	ld	r24, Z
 ae0:	88 23       	and	r24, r24
 ae2:	99 f0       	breq	.+38     	; 0xb0a <vTaskIncrementTick+0xe0>
 ae4:	e0 91 2e 07 	lds	r30, 0x072E	; 0x80072e <pxDelayedTaskList>
 ae8:	f0 91 2f 07 	lds	r31, 0x072F	; 0x80072f <pxDelayedTaskList+0x1>
 aec:	05 80       	ldd	r0, Z+5	; 0x05
 aee:	f6 81       	ldd	r31, Z+6	; 0x06
 af0:	e0 2d       	mov	r30, r0
 af2:	c6 81       	ldd	r28, Z+6	; 0x06
 af4:	d7 81       	ldd	r29, Z+7	; 0x07
 af6:	8a 81       	ldd	r24, Y+2	; 0x02
 af8:	9b 81       	ldd	r25, Y+3	; 0x03
 afa:	20 91 16 07 	lds	r18, 0x0716	; 0x800716 <xTickCount>
 afe:	30 91 17 07 	lds	r19, 0x0717	; 0x800717 <xTickCount+0x1>
 b02:	28 17       	cp	r18, r24
 b04:	39 07       	cpc	r19, r25
 b06:	f8 f4       	brcc	.+62     	; 0xb46 <vTaskIncrementTick+0x11c>
 b08:	19 c0       	rjmp	.+50     	; 0xb3c <vTaskIncrementTick+0x112>
 b0a:	8f ef       	ldi	r24, 0xFF	; 255
 b0c:	9f ef       	ldi	r25, 0xFF	; 255
 b0e:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <xNextTaskUnblockTime+0x1>
 b12:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <xNextTaskUnblockTime>
 b16:	45 c0       	rjmp	.+138    	; 0xba2 <vTaskIncrementTick+0x178>
 b18:	e0 91 2e 07 	lds	r30, 0x072E	; 0x80072e <pxDelayedTaskList>
 b1c:	f0 91 2f 07 	lds	r31, 0x072F	; 0x80072f <pxDelayedTaskList+0x1>
 b20:	05 80       	ldd	r0, Z+5	; 0x05
 b22:	f6 81       	ldd	r31, Z+6	; 0x06
 b24:	e0 2d       	mov	r30, r0
 b26:	c6 81       	ldd	r28, Z+6	; 0x06
 b28:	d7 81       	ldd	r29, Z+7	; 0x07
 b2a:	8a 81       	ldd	r24, Y+2	; 0x02
 b2c:	9b 81       	ldd	r25, Y+3	; 0x03
 b2e:	20 91 16 07 	lds	r18, 0x0716	; 0x800716 <xTickCount>
 b32:	30 91 17 07 	lds	r19, 0x0717	; 0x800717 <xTickCount+0x1>
 b36:	28 17       	cp	r18, r24
 b38:	39 07       	cpc	r19, r25
 b3a:	28 f4       	brcc	.+10     	; 0xb46 <vTaskIncrementTick+0x11c>
 b3c:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <xNextTaskUnblockTime+0x1>
 b40:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <xNextTaskUnblockTime>
 b44:	2e c0       	rjmp	.+92     	; 0xba2 <vTaskIncrementTick+0x178>
 b46:	8e 01       	movw	r16, r28
 b48:	0e 5f       	subi	r16, 0xFE	; 254
 b4a:	1f 4f       	sbci	r17, 0xFF	; 255
 b4c:	c8 01       	movw	r24, r16
 b4e:	55 db       	rcall	.-2390   	; 0x1fa <vListRemove>
 b50:	8c 89       	ldd	r24, Y+20	; 0x14
 b52:	9d 89       	ldd	r25, Y+21	; 0x15
 b54:	89 2b       	or	r24, r25
 b56:	19 f0       	breq	.+6      	; 0xb5e <vTaskIncrementTick+0x134>
 b58:	ce 01       	movw	r24, r28
 b5a:	0c 96       	adiw	r24, 0x0c	; 12
 b5c:	4e db       	rcall	.-2404   	; 0x1fa <vListRemove>
 b5e:	8e 89       	ldd	r24, Y+22	; 0x16
 b60:	90 91 14 07 	lds	r25, 0x0714	; 0x800714 <uxTopReadyPriority>
 b64:	98 17       	cp	r25, r24
 b66:	10 f4       	brcc	.+4      	; 0xb6c <vTaskIncrementTick+0x142>
 b68:	80 93 14 07 	sts	0x0714, r24	; 0x800714 <uxTopReadyPriority>
 b6c:	90 e0       	ldi	r25, 0x00	; 0
 b6e:	9c 01       	movw	r18, r24
 b70:	22 0f       	add	r18, r18
 b72:	33 1f       	adc	r19, r19
 b74:	22 0f       	add	r18, r18
 b76:	33 1f       	adc	r19, r19
 b78:	22 0f       	add	r18, r18
 b7a:	33 1f       	adc	r19, r19
 b7c:	82 0f       	add	r24, r18
 b7e:	93 1f       	adc	r25, r19
 b80:	b8 01       	movw	r22, r16
 b82:	8e 5b       	subi	r24, 0xBE	; 190
 b84:	98 4f       	sbci	r25, 0xF8	; 248
 b86:	d7 da       	rcall	.-2642   	; 0x136 <vListInsertEnd>
 b88:	e0 91 2e 07 	lds	r30, 0x072E	; 0x80072e <pxDelayedTaskList>
 b8c:	f0 91 2f 07 	lds	r31, 0x072F	; 0x80072f <pxDelayedTaskList+0x1>
 b90:	80 81       	ld	r24, Z
 b92:	81 11       	cpse	r24, r1
 b94:	c1 cf       	rjmp	.-126    	; 0xb18 <vTaskIncrementTick+0xee>
 b96:	b9 cf       	rjmp	.-142    	; 0xb0a <vTaskIncrementTick+0xe0>
 b98:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <uxMissedTicks>
 b9c:	8f 5f       	subi	r24, 0xFF	; 255
 b9e:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <uxMissedTicks>
 ba2:	df 91       	pop	r29
 ba4:	cf 91       	pop	r28
 ba6:	1f 91       	pop	r17
 ba8:	0f 91       	pop	r16
 baa:	08 95       	ret

00000bac <xTaskResumeAll>:
 bac:	cf 92       	push	r12
 bae:	df 92       	push	r13
 bb0:	ef 92       	push	r14
 bb2:	ff 92       	push	r15
 bb4:	0f 93       	push	r16
 bb6:	1f 93       	push	r17
 bb8:	cf 93       	push	r28
 bba:	df 93       	push	r29
 bbc:	0f b6       	in	r0, 0x3f	; 63
 bbe:	f8 94       	cli
 bc0:	0f 92       	push	r0
 bc2:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <uxSchedulerSuspended>
 bc6:	81 50       	subi	r24, 0x01	; 1
 bc8:	80 93 12 07 	sts	0x0712, r24	; 0x800712 <uxSchedulerSuspended>
 bcc:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <uxSchedulerSuspended>
 bd0:	81 11       	cpse	r24, r1
 bd2:	5f c0       	rjmp	.+190    	; 0xc92 <xTaskResumeAll+0xe6>
 bd4:	80 91 18 07 	lds	r24, 0x0718	; 0x800718 <uxCurrentNumberOfTasks>
 bd8:	81 11       	cpse	r24, r1
 bda:	2f c0       	rjmp	.+94     	; 0xc3a <xTaskResumeAll+0x8e>
 bdc:	5d c0       	rjmp	.+186    	; 0xc98 <xTaskResumeAll+0xec>
 bde:	d7 01       	movw	r26, r14
 be0:	15 96       	adiw	r26, 0x05	; 5
 be2:	ed 91       	ld	r30, X+
 be4:	fc 91       	ld	r31, X
 be6:	16 97       	sbiw	r26, 0x06	; 6
 be8:	c6 81       	ldd	r28, Z+6	; 0x06
 bea:	d7 81       	ldd	r29, Z+7	; 0x07
 bec:	ce 01       	movw	r24, r28
 bee:	0c 96       	adiw	r24, 0x0c	; 12
 bf0:	04 db       	rcall	.-2552   	; 0x1fa <vListRemove>
 bf2:	8e 01       	movw	r16, r28
 bf4:	0e 5f       	subi	r16, 0xFE	; 254
 bf6:	1f 4f       	sbci	r17, 0xFF	; 255
 bf8:	c8 01       	movw	r24, r16
 bfa:	ff da       	rcall	.-2562   	; 0x1fa <vListRemove>
 bfc:	8e 89       	ldd	r24, Y+22	; 0x16
 bfe:	90 91 14 07 	lds	r25, 0x0714	; 0x800714 <uxTopReadyPriority>
 c02:	98 17       	cp	r25, r24
 c04:	10 f4       	brcc	.+4      	; 0xc0a <xTaskResumeAll+0x5e>
 c06:	80 93 14 07 	sts	0x0714, r24	; 0x800714 <uxTopReadyPriority>
 c0a:	90 e0       	ldi	r25, 0x00	; 0
 c0c:	9c 01       	movw	r18, r24
 c0e:	22 0f       	add	r18, r18
 c10:	33 1f       	adc	r19, r19
 c12:	22 0f       	add	r18, r18
 c14:	33 1f       	adc	r19, r19
 c16:	22 0f       	add	r18, r18
 c18:	33 1f       	adc	r19, r19
 c1a:	82 0f       	add	r24, r18
 c1c:	93 1f       	adc	r25, r19
 c1e:	b8 01       	movw	r22, r16
 c20:	8e 5b       	subi	r24, 0xBE	; 190
 c22:	98 4f       	sbci	r25, 0xF8	; 248
 c24:	88 da       	rcall	.-2800   	; 0x136 <vListInsertEnd>
 c26:	e0 91 66 07 	lds	r30, 0x0766	; 0x800766 <pxCurrentTCB>
 c2a:	f0 91 67 07 	lds	r31, 0x0767	; 0x800767 <pxCurrentTCB+0x1>
 c2e:	9e 89       	ldd	r25, Y+22	; 0x16
 c30:	86 89       	ldd	r24, Z+22	; 0x16
 c32:	98 17       	cp	r25, r24
 c34:	58 f0       	brcs	.+22     	; 0xc4c <xTaskResumeAll+0xa0>
 c36:	dc 2c       	mov	r13, r12
 c38:	09 c0       	rjmp	.+18     	; 0xc4c <xTaskResumeAll+0xa0>
 c3a:	d1 2c       	mov	r13, r1
 c3c:	0f 2e       	mov	r0, r31
 c3e:	f3 e2       	ldi	r31, 0x23	; 35
 c40:	ef 2e       	mov	r14, r31
 c42:	f7 e0       	ldi	r31, 0x07	; 7
 c44:	ff 2e       	mov	r15, r31
 c46:	f0 2d       	mov	r31, r0
 c48:	cc 24       	eor	r12, r12
 c4a:	c3 94       	inc	r12
 c4c:	f7 01       	movw	r30, r14
 c4e:	80 81       	ld	r24, Z
 c50:	81 11       	cpse	r24, r1
 c52:	c5 cf       	rjmp	.-118    	; 0xbde <xTaskResumeAll+0x32>
 c54:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <uxMissedTicks>
 c58:	88 23       	and	r24, r24
 c5a:	79 f0       	breq	.+30     	; 0xc7a <xTaskResumeAll+0xce>
 c5c:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <uxMissedTicks>
 c60:	88 23       	and	r24, r24
 c62:	91 f0       	breq	.+36     	; 0xc88 <xTaskResumeAll+0xdc>
 c64:	e2 de       	rcall	.-572    	; 0xa2a <vTaskIncrementTick>
 c66:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <uxMissedTicks>
 c6a:	81 50       	subi	r24, 0x01	; 1
 c6c:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <uxMissedTicks>
 c70:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <uxMissedTicks>
 c74:	81 11       	cpse	r24, r1
 c76:	f6 cf       	rjmp	.-20     	; 0xc64 <xTaskResumeAll+0xb8>
 c78:	07 c0       	rjmp	.+14     	; 0xc88 <xTaskResumeAll+0xdc>
 c7a:	f1 e0       	ldi	r31, 0x01	; 1
 c7c:	df 16       	cp	r13, r31
 c7e:	21 f0       	breq	.+8      	; 0xc88 <xTaskResumeAll+0xdc>
 c80:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <xMissedYield>
 c84:	81 30       	cpi	r24, 0x01	; 1
 c86:	39 f4       	brne	.+14     	; 0xc96 <xTaskResumeAll+0xea>
 c88:	10 92 10 07 	sts	0x0710, r1	; 0x800710 <xMissedYield>
 c8c:	c4 dc       	rcall	.-1656   	; 0x616 <vPortYield>
 c8e:	81 e0       	ldi	r24, 0x01	; 1
 c90:	03 c0       	rjmp	.+6      	; 0xc98 <xTaskResumeAll+0xec>
 c92:	80 e0       	ldi	r24, 0x00	; 0
 c94:	01 c0       	rjmp	.+2      	; 0xc98 <xTaskResumeAll+0xec>
 c96:	80 e0       	ldi	r24, 0x00	; 0
 c98:	0f 90       	pop	r0
 c9a:	0f be       	out	0x3f, r0	; 63
 c9c:	df 91       	pop	r29
 c9e:	cf 91       	pop	r28
 ca0:	1f 91       	pop	r17
 ca2:	0f 91       	pop	r16
 ca4:	ff 90       	pop	r15
 ca6:	ef 90       	pop	r14
 ca8:	df 90       	pop	r13
 caa:	cf 90       	pop	r12
 cac:	08 95       	ret

00000cae <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
 cae:	cf 93       	push	r28
 cb0:	df 93       	push	r29
 cb2:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
 cb4:	89 2b       	or	r24, r25
		{
			vTaskSuspendAll();
 cb6:	91 f0       	breq	.+36     	; 0xcdc <vTaskDelay+0x2e>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 cb8:	b2 de       	rcall	.-668    	; 0xa1e <vTaskSuspendAll>
 cba:	80 91 16 07 	lds	r24, 0x0716	; 0x800716 <xTickCount>
 cbe:	90 91 17 07 	lds	r25, 0x0717	; 0x800717 <xTickCount+0x1>
 cc2:	c8 0f       	add	r28, r24

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 cc4:	d9 1f       	adc	r29, r25
 cc6:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <pxCurrentTCB>
 cca:	90 91 67 07 	lds	r25, 0x0767	; 0x800767 <pxCurrentTCB+0x1>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
			}
			xAlreadyYielded = xTaskResumeAll();
 cce:	02 96       	adiw	r24, 0x02	; 2
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 cd0:	94 da       	rcall	.-2776   	; 0x1fa <vListRemove>
 cd2:	ce 01       	movw	r24, r28
		{
			portYIELD_WITHIN_API();
 cd4:	53 dd       	rcall	.-1370   	; 0x77c <prvAddCurrentTaskToDelayedList>
 cd6:	6a df       	rcall	.-300    	; 0xbac <xTaskResumeAll>
		}
	}
 cd8:	81 11       	cpse	r24, r1
 cda:	01 c0       	rjmp	.+2      	; 0xcde <vTaskDelay+0x30>
 cdc:	9c dc       	rcall	.-1736   	; 0x616 <vPortYield>
 cde:	df 91       	pop	r29
 ce0:	cf 91       	pop	r28
 ce2:	08 95       	ret

00000ce4 <prvIdleTask>:
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 ce4:	0f 2e       	mov	r0, r31
 ce6:	fa e1       	ldi	r31, 0x1A	; 26
 ce8:	ef 2e       	mov	r14, r31
 cea:	f7 e0       	ldi	r31, 0x07	; 7
 cec:	ff 2e       	mov	r15, r31
 cee:	f0 2d       	mov	r31, r0

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 cf0:	c2 e4       	ldi	r28, 0x42	; 66
 cf2:	d7 e0       	ldi	r29, 0x07	; 7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 cf4:	80 91 19 07 	lds	r24, 0x0719	; 0x800719 <uxTasksDeleted>
 cf8:	88 23       	and	r24, r24
		{
			vTaskSuspendAll();
 cfa:	29 f1       	breq	.+74     	; 0xd46 <prvIdleTask+0x62>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 cfc:	90 de       	rcall	.-736    	; 0xa1e <vTaskSuspendAll>
			xTaskResumeAll();
 cfe:	d7 01       	movw	r26, r14
 d00:	1c 91       	ld	r17, X

			if( xListIsEmpty == pdFALSE )
 d02:	54 df       	rcall	.-344    	; 0xbac <xTaskResumeAll>
 d04:	11 23       	and	r17, r17
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 d06:	f9 f0       	breq	.+62     	; 0xd46 <prvIdleTask+0x62>
 d08:	0f b6       	in	r0, 0x3f	; 63
 d0a:	f8 94       	cli
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 d0c:	0f 92       	push	r0
 d0e:	d7 01       	movw	r26, r14
 d10:	15 96       	adiw	r26, 0x05	; 5
 d12:	ed 91       	ld	r30, X+
 d14:	fc 91       	ld	r31, X
 d16:	16 97       	sbiw	r26, 0x06	; 6
					vListRemove( &( pxTCB->xGenericListItem ) );
 d18:	06 81       	ldd	r16, Z+6	; 0x06
 d1a:	17 81       	ldd	r17, Z+7	; 0x07
 d1c:	c8 01       	movw	r24, r16
					--uxCurrentNumberOfTasks;
 d1e:	02 96       	adiw	r24, 0x02	; 2
 d20:	6c da       	rcall	.-2856   	; 0x1fa <vListRemove>
 d22:	80 91 18 07 	lds	r24, 0x0718	; 0x800718 <uxCurrentNumberOfTasks>
 d26:	81 50       	subi	r24, 0x01	; 1
					--uxTasksDeleted;
 d28:	80 93 18 07 	sts	0x0718, r24	; 0x800718 <uxCurrentNumberOfTasks>
 d2c:	80 91 19 07 	lds	r24, 0x0719	; 0x800719 <uxTasksDeleted>
 d30:	81 50       	subi	r24, 0x01	; 1
				}
				taskEXIT_CRITICAL();
 d32:	80 93 19 07 	sts	0x0719, r24	; 0x800719 <uxTasksDeleted>
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 d36:	0f 90       	pop	r0
 d38:	0f be       	out	0x3f, r0	; 63
		vPortFree( pxTCB );
 d3a:	f8 01       	movw	r30, r16
 d3c:	87 89       	ldd	r24, Z+23	; 0x17

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 d3e:	90 8d       	ldd	r25, Z+24	; 0x18
 d40:	e7 d9       	rcall	.-3122   	; 0x110 <vPortFree>
 d42:	c8 01       	movw	r24, r16
			{
				taskYIELD();
 d44:	e5 d9       	rcall	.-3126   	; 0x110 <vPortFree>
 d46:	88 81       	ld	r24, Y
 d48:	82 30       	cpi	r24, 0x02	; 2
 d4a:	a0 f2       	brcs	.-88     	; 0xcf4 <prvIdleTask+0x10>
 d4c:	64 dc       	rcall	.-1848   	; 0x616 <vPortYield>
 d4e:	d2 cf       	rjmp	.-92     	; 0xcf4 <prvIdleTask+0x10>

00000d50 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 d50:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <uxSchedulerSuspended>
 d54:	81 11       	cpse	r24, r1
 d56:	13 c0       	rjmp	.+38     	; 0xd7e <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 d58:	80 91 14 07 	lds	r24, 0x0714	; 0x800714 <uxTopReadyPriority>
 d5c:	90 e0       	ldi	r25, 0x00	; 0
 d5e:	fc 01       	movw	r30, r24
 d60:	ee 0f       	add	r30, r30
 d62:	ff 1f       	adc	r31, r31
 d64:	ee 0f       	add	r30, r30
 d66:	ff 1f       	adc	r31, r31
 d68:	ee 0f       	add	r30, r30
 d6a:	ff 1f       	adc	r31, r31
 d6c:	8e 0f       	add	r24, r30
 d6e:	9f 1f       	adc	r25, r31
 d70:	fc 01       	movw	r30, r24
 d72:	ee 5b       	subi	r30, 0xBE	; 190
 d74:	f8 4f       	sbci	r31, 0xF8	; 248
 d76:	80 81       	ld	r24, Z
 d78:	88 23       	and	r24, r24
 d7a:	29 f0       	breq	.+10     	; 0xd86 <vTaskSwitchContext+0x36>
 d7c:	1b c0       	rjmp	.+54     	; 0xdb4 <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 d7e:	81 e0       	ldi	r24, 0x01	; 1
 d80:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <xMissedYield>
 d84:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
 d86:	80 91 14 07 	lds	r24, 0x0714	; 0x800714 <uxTopReadyPriority>
 d8a:	81 50       	subi	r24, 0x01	; 1
 d8c:	80 93 14 07 	sts	0x0714, r24	; 0x800714 <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 d90:	80 91 14 07 	lds	r24, 0x0714	; 0x800714 <uxTopReadyPriority>
 d94:	90 e0       	ldi	r25, 0x00	; 0
 d96:	fc 01       	movw	r30, r24
 d98:	ee 0f       	add	r30, r30
 d9a:	ff 1f       	adc	r31, r31
 d9c:	ee 0f       	add	r30, r30
 d9e:	ff 1f       	adc	r31, r31
 da0:	ee 0f       	add	r30, r30
 da2:	ff 1f       	adc	r31, r31
 da4:	8e 0f       	add	r24, r30
 da6:	9f 1f       	adc	r25, r31
 da8:	fc 01       	movw	r30, r24
 daa:	ee 5b       	subi	r30, 0xBE	; 190
 dac:	f8 4f       	sbci	r31, 0xF8	; 248
 dae:	80 81       	ld	r24, Z
 db0:	88 23       	and	r24, r24
 db2:	49 f3       	breq	.-46     	; 0xd86 <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 db4:	80 91 14 07 	lds	r24, 0x0714	; 0x800714 <uxTopReadyPriority>
 db8:	90 e0       	ldi	r25, 0x00	; 0
 dba:	9c 01       	movw	r18, r24
 dbc:	22 0f       	add	r18, r18
 dbe:	33 1f       	adc	r19, r19
 dc0:	22 0f       	add	r18, r18
 dc2:	33 1f       	adc	r19, r19
 dc4:	22 0f       	add	r18, r18
 dc6:	33 1f       	adc	r19, r19
 dc8:	28 0f       	add	r18, r24
 dca:	39 1f       	adc	r19, r25
 dcc:	d9 01       	movw	r26, r18
 dce:	ae 5b       	subi	r26, 0xBE	; 190
 dd0:	b8 4f       	sbci	r27, 0xF8	; 248
 dd2:	11 96       	adiw	r26, 0x01	; 1
 dd4:	ed 91       	ld	r30, X+
 dd6:	fc 91       	ld	r31, X
 dd8:	12 97       	sbiw	r26, 0x02	; 2
 dda:	02 80       	ldd	r0, Z+2	; 0x02
 ddc:	f3 81       	ldd	r31, Z+3	; 0x03
 dde:	e0 2d       	mov	r30, r0
 de0:	12 96       	adiw	r26, 0x02	; 2
 de2:	fc 93       	st	X, r31
 de4:	ee 93       	st	-X, r30
 de6:	11 97       	sbiw	r26, 0x01	; 1
 de8:	2b 5b       	subi	r18, 0xBB	; 187
 dea:	38 4f       	sbci	r19, 0xF8	; 248
 dec:	e2 17       	cp	r30, r18
 dee:	f3 07       	cpc	r31, r19
 df0:	29 f4       	brne	.+10     	; 0xdfc <vTaskSwitchContext+0xac>
 df2:	22 81       	ldd	r18, Z+2	; 0x02
 df4:	33 81       	ldd	r19, Z+3	; 0x03
 df6:	fd 01       	movw	r30, r26
 df8:	32 83       	std	Z+2, r19	; 0x02
 dfa:	21 83       	std	Z+1, r18	; 0x01
 dfc:	fc 01       	movw	r30, r24
 dfe:	ee 0f       	add	r30, r30
 e00:	ff 1f       	adc	r31, r31
 e02:	ee 0f       	add	r30, r30
 e04:	ff 1f       	adc	r31, r31
 e06:	ee 0f       	add	r30, r30
 e08:	ff 1f       	adc	r31, r31
 e0a:	8e 0f       	add	r24, r30
 e0c:	9f 1f       	adc	r25, r31
 e0e:	fc 01       	movw	r30, r24
 e10:	ee 5b       	subi	r30, 0xBE	; 190
 e12:	f8 4f       	sbci	r31, 0xF8	; 248
 e14:	01 80       	ldd	r0, Z+1	; 0x01
 e16:	f2 81       	ldd	r31, Z+2	; 0x02
 e18:	e0 2d       	mov	r30, r0
 e1a:	86 81       	ldd	r24, Z+6	; 0x06
 e1c:	97 81       	ldd	r25, Z+7	; 0x07
 e1e:	90 93 67 07 	sts	0x0767, r25	; 0x800767 <pxCurrentTCB+0x1>
 e22:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <pxCurrentTCB>
 e26:	08 95       	ret

00000e28 <memset>:
 e28:	dc 01       	movw	r26, r24
 e2a:	01 c0       	rjmp	.+2      	; 0xe2e <memset+0x6>
 e2c:	6d 93       	st	X+, r22
 e2e:	41 50       	subi	r20, 0x01	; 1
 e30:	50 40       	sbci	r21, 0x00	; 0
 e32:	e0 f7       	brcc	.-8      	; 0xe2c <memset+0x4>
 e34:	08 95       	ret

00000e36 <strncpy>:
 e36:	fb 01       	movw	r30, r22
 e38:	dc 01       	movw	r26, r24
 e3a:	41 50       	subi	r20, 0x01	; 1
 e3c:	50 40       	sbci	r21, 0x00	; 0
 e3e:	48 f0       	brcs	.+18     	; 0xe52 <strncpy+0x1c>
 e40:	01 90       	ld	r0, Z+
 e42:	0d 92       	st	X+, r0
 e44:	00 20       	and	r0, r0
 e46:	c9 f7       	brne	.-14     	; 0xe3a <strncpy+0x4>
 e48:	01 c0       	rjmp	.+2      	; 0xe4c <strncpy+0x16>
 e4a:	1d 92       	st	X+, r1
 e4c:	41 50       	subi	r20, 0x01	; 1
 e4e:	50 40       	sbci	r21, 0x00	; 0
 e50:	e0 f7       	brcc	.-8      	; 0xe4a <strncpy+0x14>
 e52:	08 95       	ret

00000e54 <eeprom_read_word>:
 e54:	a8 e1       	ldi	r26, 0x18	; 24
 e56:	b0 e0       	ldi	r27, 0x00	; 0
 e58:	42 e0       	ldi	r20, 0x02	; 2
 e5a:	50 e0       	ldi	r21, 0x00	; 0
 e5c:	06 c0       	rjmp	.+12     	; 0xe6a <eeprom_read_blraw>

00000e5e <eeprom_update_word>:
 e5e:	01 96       	adiw	r24, 0x01	; 1
 e60:	27 2f       	mov	r18, r23
 e62:	12 d0       	rcall	.+36     	; 0xe88 <eeprom_update_r18>
 e64:	10 c0       	rjmp	.+32     	; 0xe86 <eeprom_update_byte>

00000e66 <eeprom_read_block>:
 e66:	dc 01       	movw	r26, r24
 e68:	cb 01       	movw	r24, r22

00000e6a <eeprom_read_blraw>:
 e6a:	fc 01       	movw	r30, r24
 e6c:	f9 99       	sbic	0x1f, 1	; 31
 e6e:	fe cf       	rjmp	.-4      	; 0xe6c <eeprom_read_blraw+0x2>
 e70:	06 c0       	rjmp	.+12     	; 0xe7e <eeprom_read_blraw+0x14>
 e72:	f2 bd       	out	0x22, r31	; 34
 e74:	e1 bd       	out	0x21, r30	; 33
 e76:	f8 9a       	sbi	0x1f, 0	; 31
 e78:	31 96       	adiw	r30, 0x01	; 1
 e7a:	00 b4       	in	r0, 0x20	; 32
 e7c:	0d 92       	st	X+, r0
 e7e:	41 50       	subi	r20, 0x01	; 1
 e80:	50 40       	sbci	r21, 0x00	; 0
 e82:	b8 f7       	brcc	.-18     	; 0xe72 <eeprom_read_blraw+0x8>
 e84:	08 95       	ret

00000e86 <eeprom_update_byte>:
 e86:	26 2f       	mov	r18, r22

00000e88 <eeprom_update_r18>:
 e88:	f9 99       	sbic	0x1f, 1	; 31
 e8a:	fe cf       	rjmp	.-4      	; 0xe88 <eeprom_update_r18>
 e8c:	92 bd       	out	0x22, r25	; 34
 e8e:	81 bd       	out	0x21, r24	; 33
 e90:	f8 9a       	sbi	0x1f, 0	; 31
 e92:	01 97       	sbiw	r24, 0x01	; 1
 e94:	00 b4       	in	r0, 0x20	; 32
 e96:	02 16       	cp	r0, r18
 e98:	39 f0       	breq	.+14     	; 0xea8 <eeprom_update_r18+0x20>
 e9a:	1f ba       	out	0x1f, r1	; 31
 e9c:	20 bd       	out	0x20, r18	; 32
 e9e:	0f b6       	in	r0, 0x3f	; 63
 ea0:	f8 94       	cli
 ea2:	fa 9a       	sbi	0x1f, 2	; 31
 ea4:	f9 9a       	sbi	0x1f, 1	; 31
 ea6:	0f be       	out	0x3f, r0	; 63
 ea8:	08 95       	ret

00000eaa <_exit>:
 eaa:	f8 94       	cli

00000eac <__stop_program>:
 eac:	ff cf       	rjmp	.-2      	; 0xeac <__stop_program>
